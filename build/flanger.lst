ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"flanger.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.flanger_init,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.global	flanger_init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	flanger_init:
  28              	.LFB4:
  29              		.file 1 "Core/Src/flanger.c"
   1:Core/Src/flanger.c **** 
   2:Core/Src/flanger.c **** /* TODO ... need linear or allpass interpolation .... */
   3:Core/Src/flanger.c **** 
   4:Core/Src/flanger.c **** 
   5:Core/Src/flanger.c **** 
   6:Core/Src/flanger.c **** #include "flanger.h"
   7:Core/Src/flanger.c **** #include "oscillators.h"
   8:Core/Src/flanger.c **** 
   9:Core/Src/flanger.c **** static float	flanger_buff[FLANGER_BUFF_SIZE + 2]; 	 
  10:Core/Src/flanger.c **** static float    *FLreadptr, *FLwriteptr;
  11:Core/Src/flanger.c **** static float    FL_feedback = INIT_FL_FEEDB;
  12:Core/Src/flanger.c **** static float    flanger_wet  = INIT_FLANGER_WET;
  13:Core/Src/flanger.c **** static uint16_t		fl_delay_time;
  14:Core/Src/flanger.c **** 
  15:Core/Src/flanger.c **** extern oscillator_t flanger_lfo;
  16:Core/Src/flanger.c **** 
  17:Core/Src/flanger.c **** void flanger_init(void)
  18:Core/Src/flanger.c **** {
  30              		.loc 1 18 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  19:Core/Src/flanger.c **** 	fl_delay_time = INIT_FL_DEL;
  35              		.loc 1 19 2 view .LVU1
  20:Core/Src/flanger.c **** 	FLreadptr = flanger_buff;
  36              		.loc 1 20 2 view .LVU2
  18:Core/Src/flanger.c **** 	fl_delay_time = INIT_FL_DEL;
  37              		.loc 1 18 1 is_stmt 0 view .LVU3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 2


  38 0000 10B4     		push	{r4}
  39              		.cfi_def_cfa_offset 4
  40              		.cfi_offset 4, -4
  41              		.loc 1 20 12 view .LVU4
  42 0002 0B4B     		ldr	r3, .L4
  43 0004 0B4C     		ldr	r4, .L4+4
  21:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  22:Core/Src/flanger.c **** 	osc_init(&flanger_lfo, 0.5, 1, 0, 0, 0.5);
  44              		.loc 1 22 2 view .LVU5
  45 0006 DFED0C1A 		vldr.32	s3, .L4+8
  21:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  46              		.loc 1 21 13 view .LVU6
  47 000a 0C4A     		ldr	r2, .L4+12
  20:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  48              		.loc 1 20 12 view .LVU7
  49 000c 2360     		str	r3, [r4]
  21:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  50              		.loc 1 21 2 is_stmt 1 view .LVU8
  51              		.loc 1 22 2 is_stmt 0 view .LVU9
  52 000e B6EE002A 		vmov.f32	s4, #5.0e-1
  21:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  53              		.loc 1 21 13 view .LVU10
  54 0012 03F55C71 		add	r1, r3, #880
  55              		.loc 1 22 2 view .LVU11
  56 0016 0A48     		ldr	r0, .L4+16
  23:Core/Src/flanger.c **** }
  57              		.loc 1 23 1 view .LVU12
  58 0018 5DF8044B 		ldr	r4, [sp], #4
  59              		.cfi_restore 4
  60              		.cfi_def_cfa_offset 0
  21:Core/Src/flanger.c **** 	FLwriteptr = flanger_buff + INIT_FL_DEL;
  61              		.loc 1 21 13 view .LVU13
  62 001c 1160     		str	r1, [r2]
  22:Core/Src/flanger.c **** }
  63              		.loc 1 22 2 is_stmt 1 view .LVU14
  64 001e B0EE611A 		vmov.f32	s2, s3
  65 0022 F7EE000A 		vmov.f32	s1, #1.0e+0
  66 0026 B0EE420A 		vmov.f32	s0, s4
  67 002a FFF7FEBF 		b	osc_init
  68              	.LVL0:
  69              	.L5:
  70 002e 00BF     		.align	2
  71              	.L4:
  72 0030 00000000 		.word	.LANCHOR1
  73 0034 00000000 		.word	.LANCHOR0
  74 0038 00000000 		.word	0
  75 003c 00000000 		.word	.LANCHOR2
  76 0040 00000000 		.word	flanger_lfo
  77              		.cfi_endproc
  78              	.LFE4:
  80              		.section	.text.flanger_compute,"ax",%progbits
  81              		.align	1
  82              		.p2align 2,,3
  83              		.global	flanger_compute
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 3


  88              	flanger_compute:
  89              	.LVL1:
  90              	.LFB5:
  24:Core/Src/flanger.c **** 
  25:Core/Src/flanger.c **** 
  26:Core/Src/flanger.c **** 
  27:Core/Src/flanger.c **** 
  28:Core/Src/flanger.c **** 
  29:Core/Src/flanger.c **** float flanger_compute (float input_sample)
  30:Core/Src/flanger.c **** {
  91              		.loc 1 30 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  31:Core/Src/flanger.c **** 	float delayed_sample, sample;
  95              		.loc 1 31 2 view .LVU16
  32:Core/Src/flanger.c **** 	float 	*pos;
  96              		.loc 1 32 2 view .LVU17
  33:Core/Src/flanger.c **** 
  34:Core/Src/flanger.c **** 	flanger_lfo.freq = 0.1;
  97              		.loc 1 34 2 view .LVU18
  30:Core/Src/flanger.c **** 	float delayed_sample, sample;
  98              		.loc 1 30 1 is_stmt 0 view .LVU19
  99 0000 38B5     		push	{r3, r4, r5, lr}
 100              		.cfi_def_cfa_offset 16
 101              		.cfi_offset 3, -16
 102              		.cfi_offset 4, -12
 103              		.cfi_offset 5, -8
 104              		.cfi_offset 14, -4
 105              		.loc 1 34 19 view .LVU20
 106 0002 3D48     		ldr	r0, .L14
 107 0004 3D4B     		ldr	r3, .L14+4
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
  36:Core/Src/flanger.c **** 	fl_delay_time = clip(fl_delay_time, 1, FLANGER_BUFF_SIZE - 1);
  37:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 108              		.loc 1 37 19 view .LVU21
 109 0006 3E4C     		ldr	r4, .L14+8
  30:Core/Src/flanger.c **** 	float delayed_sample, sample;
 110              		.loc 1 30 1 view .LVU22
 111 0008 2DED028B 		vpush.64	{d8}
 112              		.cfi_def_cfa_offset 24
 113              		.cfi_offset 80, -24
 114              		.cfi_offset 81, -20
  34:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 115              		.loc 1 34 19 view .LVU23
 116 000c 4360     		str	r3, [r0, #4]	@ float
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 117              		.loc 1 35 2 is_stmt 1 view .LVU24
  30:Core/Src/flanger.c **** 	float delayed_sample, sample;
 118              		.loc 1 30 1 is_stmt 0 view .LVU25
 119 000e B0EE408A 		vmov.f32	s16, s0
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 120              		.loc 1 35 18 view .LVU26
 121 0012 FFF7FEFF 		bl	osc_Sine
 122              	.LVL2:
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 123              		.loc 1 35 47 view .LVU27
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 4


 124 0016 9FED3B7A 		vldr.32	s14, .L14+12
 125 001a DFED3B7A 		vldr.32	s15, .L14+16
  36:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 126              		.loc 1 36 18 view .LVU28
 127 001e 9FED3B1A 		vldr.32	s2, .L14+20
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 128              		.loc 1 35 47 view .LVU29
 129 0022 E0EE077A 		vfma.f32	s15, s0, s14
  36:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 130              		.loc 1 36 2 is_stmt 1 view .LVU30
  36:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 131              		.loc 1 36 18 is_stmt 0 view .LVU31
 132 0026 F7EE000A 		vmov.f32	s1, #1.0e+0
  35:Core/Src/flanger.c **** 	fl_delay_time = osc_Sine(&flanger_lfo) * 200 + 100;
 133              		.loc 1 35 16 view .LVU32
 134 002a FCEEE77A 		vcvt.u32.f32	s15, s15
  36:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 135              		.loc 1 36 18 view .LVU33
 136 002e 17EE903A 		vmov	r3, s15	@ int
 137 0032 9BB2     		uxth	r3, r3
 138 0034 00EE103A 		vmov	s0, r3	@ int
 139 0038 B8EE400A 		vcvt.f32.u32	s0, s0
 140 003c FFF7FEFF 		bl	clip
 141              	.LVL3:
 142              		.loc 1 37 2 is_stmt 1 view .LVU34
  36:Core/Src/flanger.c **** 	pos = FLwriteptr - fl_delay_time;
 143              		.loc 1 36 16 is_stmt 0 view .LVU35
 144 0040 FCEEC07A 		vcvt.u32.f32	s15, s0
 145              		.loc 1 37 19 view .LVU36
 146 0044 2268     		ldr	r2, [r4]
  38:Core/Src/flanger.c **** 	if (pos >= flanger_buff)
 147              		.loc 1 38 5 view .LVU37
 148 0046 3249     		ldr	r1, .L14+24
  39:Core/Src/flanger.c **** 		FLreadptr = pos;
  40:Core/Src/flanger.c **** 	else
  41:Core/Src/flanger.c **** 		FLreadptr = pos + FLANGER_BUFF_SIZE - 1;
  42:Core/Src/flanger.c **** 
  43:Core/Src/flanger.c **** 	
  44:Core/Src/flanger.c **** 
  45:Core/Src/flanger.c **** 	// read first so that we can have feedback, apply lowpass filtering
  46:Core/Src/flanger.c **** 	delayed_sample = *FLreadptr;
  47:Core/Src/flanger.c **** 	
  48:Core/Src/flanger.c **** 	// apply soft clipping 
  49:Core/Src/flanger.c **** 	sample = SoftClip(input_sample + FL_feedback * delayed_sample);
 149              		.loc 1 49 11 view .LVU38
 150 0048 DFED326A 		vldr.32	s13, .L14+28
  37:Core/Src/flanger.c **** 	if (pos >= flanger_buff)
 151              		.loc 1 37 19 view .LVU39
 152 004c 17EE903A 		vmov	r3, s15	@ int
 153 0050 9BB2     		uxth	r3, r3
  37:Core/Src/flanger.c **** 	if (pos >= flanger_buff)
 154              		.loc 1 37 6 view .LVU40
 155 0052 A2EB8303 		sub	r3, r2, r3, lsl #2
 156              	.LVL4:
  38:Core/Src/flanger.c **** 	if (pos >= flanger_buff)
 157              		.loc 1 38 2 is_stmt 1 view .LVU41
  38:Core/Src/flanger.c **** 	if (pos >= flanger_buff)
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 5


 158              		.loc 1 38 5 is_stmt 0 view .LVU42
 159 0056 8B42     		cmp	r3, r1
  41:Core/Src/flanger.c **** 
 160              		.loc 1 41 3 is_stmt 1 view .LVU43
  41:Core/Src/flanger.c **** 
 161              		.loc 1 41 39 is_stmt 0 view .LVU44
 162 0058 38BF     		it	cc
 163 005a 03F69C73 		addwcc	r3, r3, #3996
 164              	.LVL5:
  46:Core/Src/flanger.c **** 	
 165              		.loc 1 46 2 is_stmt 1 view .LVU45
 166              		.loc 1 49 2 view .LVU46
 167              		.loc 1 49 11 is_stmt 0 view .LVU47
 168 005e 93ED006A 		vldr.32	s12, [r3]
 169 0062 F0EE487A 		vmov.f32	s15, s16
 170              	.LVL6:
 171              		.loc 1 49 11 view .LVU48
 172 0066 E6EE267A 		vfma.f32	s15, s12, s13
 173              	.LVL7:
 174              	.LBB8:
 175              	.LBI8:
 176              		.file 2 "Core/Inc/helper_functions.h"
   1:Core/Inc/helper_functions.h **** /**
   2:Core/Inc/helper_functions.h ****  * @file helper_functions.h
   3:Core/Inc/helper_functions.h ****  * @author johannes regnier
   4:Core/Inc/helper_functions.h ****  * @brief Various math tools 
   5:Core/Inc/helper_functions.h ****  * @version 0.1
   6:Core/Inc/helper_functions.h ****  * @date 2023-12-30
   7:Core/Inc/helper_functions.h ****  * 
   8:Core/Inc/helper_functions.h ****  * @copyright Copyright (c) 2023
   9:Core/Inc/helper_functions.h ****  * 
  10:Core/Inc/helper_functions.h ****  */
  11:Core/Inc/helper_functions.h **** 
  12:Core/Inc/helper_functions.h **** #ifndef _HELPER_FUNCTIONS_H
  13:Core/Inc/helper_functions.h **** #define _HELPER_FUNCTIONS_H
  14:Core/Inc/helper_functions.h **** 
  15:Core/Inc/helper_functions.h **** 
  16:Core/Inc/helper_functions.h **** #include <math.h>
  17:Core/Inc/helper_functions.h **** #include <stdint.h>
  18:Core/Inc/helper_functions.h **** 
  19:Core/Inc/helper_functions.h **** #ifndef NOMINMAX
  20:Core/Inc/helper_functions.h **** 
  21:Core/Inc/helper_functions.h **** #ifndef max
  22:Core/Inc/helper_functions.h **** #define max(a,b)            (((a) > (b)) ? (a) : (b))
  23:Core/Inc/helper_functions.h **** #endif
  24:Core/Inc/helper_functions.h **** 
  25:Core/Inc/helper_functions.h **** #ifndef min
  26:Core/Inc/helper_functions.h **** #define min(a,b)            (((a) < (b)) ? (a) : (b))
  27:Core/Inc/helper_functions.h **** #endif
  28:Core/Inc/helper_functions.h **** 
  29:Core/Inc/helper_functions.h **** #endif  /* NOMINMAX */
  30:Core/Inc/helper_functions.h **** 
  31:Core/Inc/helper_functions.h **** /**
  32:Core/Inc/helper_functions.h ****  * @brief Keep value between 0 and max
  33:Core/Inc/helper_functions.h ****  * 
  34:Core/Inc/helper_functions.h ****  * @param value 
  35:Core/Inc/helper_functions.h ****  * @param max 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 6


  36:Core/Inc/helper_functions.h ****  * @return float 
  37:Core/Inc/helper_functions.h ****  */
  38:Core/Inc/helper_functions.h **** inline float wrap(float value, float max)   
  39:Core/Inc/helper_functions.h **** {
  40:Core/Inc/helper_functions.h ****     if (value < 0.f)
  41:Core/Inc/helper_functions.h ****         value += max;
  42:Core/Inc/helper_functions.h ****     if (value >= max)
  43:Core/Inc/helper_functions.h ****         value -= max;
  44:Core/Inc/helper_functions.h **** 
  45:Core/Inc/helper_functions.h ****     return value;
  46:Core/Inc/helper_functions.h **** }
  47:Core/Inc/helper_functions.h **** 
  48:Core/Inc/helper_functions.h **** inline float Crossfade(float a, float b, float fade)
  49:Core/Inc/helper_functions.h **** {
  50:Core/Inc/helper_functions.h ****     return a + (b - a) * fade;
  51:Core/Inc/helper_functions.h **** }
  52:Core/Inc/helper_functions.h **** 
  53:Core/Inc/helper_functions.h **** 
  54:Core/Inc/helper_functions.h **** /**
  55:Core/Inc/helper_functions.h ****  * @brief Pade-approximation of tanh for soft clipping
  56:Core/Inc/helper_functions.h ****  * @ from https://www.musicdsp.org/en/latest/Other/238-rational-tanh-approximation.html 
  57:Core/Inc/helper_functions.h ****  * @param x 
  58:Core/Inc/helper_functions.h ****  * @return float 
  59:Core/Inc/helper_functions.h ****  */
  60:Core/Inc/helper_functions.h **** inline float SoftClip(float x)
 177              		.loc 2 60 14 is_stmt 1 view .LVU49
 178              	.LBB9:
  61:Core/Inc/helper_functions.h **** {
  62:Core/Inc/helper_functions.h ****     if (x < -3.0f)
 179              		.loc 2 62 5 view .LVU50
 180              		.loc 2 62 8 is_stmt 0 view .LVU51
 181 006a B8EE087A 		vmov.f32	s14, #-3.0e+0
 182 006e F4EEC77A 		vcmpe.f32	s15, s14
 183 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 184 0076 39D4     		bmi	.L11
  63:Core/Inc/helper_functions.h ****     {
  64:Core/Inc/helper_functions.h ****         return -1.0f;
  65:Core/Inc/helper_functions.h ****     }
  66:Core/Inc/helper_functions.h ****     else if (x > 3.0f)
 185              		.loc 2 66 10 is_stmt 1 view .LVU52
 186              		.loc 2 66 13 is_stmt 0 view .LVU53
 187 0078 B0EE087A 		vmov.f32	s14, #3.0e+0
 188 007c F4EEC77A 		vcmpe.f32	s15, s14
 189 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 190 0084 2DDC     		bgt	.L12
 191              	.LVL8:
 192              	.LBB10:
 193              	.LBI10:
  60:Core/Inc/helper_functions.h **** {
 194              		.loc 2 60 14 is_stmt 1 view .LVU54
 195              	.LBB11:
  67:Core/Inc/helper_functions.h ****     {
  68:Core/Inc/helper_functions.h ****         return 1.0f;
  69:Core/Inc/helper_functions.h ****     }
  70:Core/Inc/helper_functions.h ****     else
  71:Core/Inc/helper_functions.h ****     {
  72:Core/Inc/helper_functions.h ****         return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 7


 196              		.loc 2 72 9 view .LVU55
 197              		.loc 2 72 27 is_stmt 0 view .LVU56
 198 0086 B3EE0B7A 		vmov.f32	s14, #2.7e+1
 199              		.loc 2 72 52 view .LVU57
 200 008a B2EE026A 		vmov.f32	s12, #9.0e+0
 201 008e 27EE866A 		vmul.f32	s12, s15, s12
 202              		.loc 2 72 27 view .LVU58
 203 0092 F0EE475A 		vmov.f32	s11, s14
 204 0096 E7EEA75A 		vfma.f32	s11, s15, s15
 205              		.loc 2 72 45 view .LVU59
 206 009a A7EE867A 		vfma.f32	s14, s15, s12
 207              		.loc 2 72 18 view .LVU60
 208 009e 67EEA57A 		vmul.f32	s15, s15, s11
 209              	.LVL9:
 210              		.loc 2 72 45 view .LVU61
 211 00a2 F0EE476A 		vmov.f32	s13, s14
 212              	.LVL10:
 213              		.loc 2 72 36 view .LVU62
 214 00a6 87EEA67A 		vdiv.f32	s14, s15, s13
 215              	.LVL11:
 216              		.loc 2 72 36 view .LVU63
 217              	.LBE11:
 218              	.LBE10:
 219              	.LBE9:
 220              	.LBE8:
  50:Core/Src/flanger.c **** 
  51:Core/Src/flanger.c **** 	// write then update pointers
  52:Core/Src/flanger.c **** 	*FLwriteptr = sample; 
  53:Core/Src/flanger.c **** 	FLwriteptr++;
  54:Core/Src/flanger.c **** 	FLreadptr++;
  55:Core/Src/flanger.c **** 	
  56:Core/Src/flanger.c **** 
  57:Core/Src/flanger.c **** 
  58:Core/Src/flanger.c **** 	
  59:Core/Src/flanger.c **** 	if ((FLwriteptr - flanger_buff) >= FLANGER_BUFF_SIZE)
  60:Core/Src/flanger.c **** 		FLwriteptr = flanger_buff;
  61:Core/Src/flanger.c **** 
  62:Core/Src/flanger.c **** 	if ((FLreadptr - flanger_buff) >= FLANGER_BUFF_SIZE)
  63:Core/Src/flanger.c **** 		FLreadptr = flanger_buff;
  64:Core/Src/flanger.c **** 
  65:Core/Src/flanger.c **** 	
  66:Core/Src/flanger.c **** 
  67:Core/Src/flanger.c **** 	
  68:Core/Src/flanger.c **** 
  69:Core/Src/flanger.c **** 	return (flanger_wet * sample + (1 - flanger_wet) * input_sample); // linear crossfade
 221              		.loc 1 69 22 view .LVU64
 222 00aa B6EE000A 		vmov.f32	s0, #5.0e-1
 223              	.LVL12:
 224              		.loc 1 69 22 view .LVU65
 225 00ae 27EE000A 		vmul.f32	s0, s14, s0
 226              	.L8:
 227              	.LVL13:
  52:Core/Src/flanger.c **** 	FLwriteptr++;
 228              		.loc 1 52 2 is_stmt 1 view .LVU66
 229              		.loc 1 69 31 is_stmt 0 view .LVU67
 230 00b2 F6EE007A 		vmov.f32	s15, #5.0e-1
  70:Core/Src/flanger.c **** }...
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 8


 231              		.loc 1 70 1 view .LVU68
 232 00b6 A8EE270A 		vfma.f32	s0, s16, s15
 233 00ba BDEC028B 		vldm	sp!, {d8}
 234              		.cfi_remember_state
 235              		.cfi_restore 80
 236              		.cfi_restore 81
 237              		.cfi_def_cfa_offset 16
 238              	.LVL14:
  52:Core/Src/flanger.c **** 	FLwriteptr++;
 239              		.loc 1 52 14 view .LVU69
 240 00be A2EC017A 		vstmia.32	r2!, {s14}
 241              	.LVL15:
  53:Core/Src/flanger.c **** 	FLwriteptr++;
 242              		.loc 1 53 2 is_stmt 1 view .LVU70
  54:Core/Src/flanger.c **** 	FLreadptr++;
 243              		.loc 1 54 2 view .LVU71
  59:Core/Src/flanger.c **** 	if ((FLwriteptr - flanger_buff) >= FLANGER_BUFF_SIZE)
 244              		.loc 1 59 5 is_stmt 0 view .LVU72
 245 00c2 40F69C70 		movw	r0, #3996
  59:Core/Src/flanger.c **** 	if ((FLwriteptr - flanger_buff) >= FLANGER_BUFF_SIZE)
 246              		.loc 1 59 18 view .LVU73
 247 00c6 A2EB010C 		sub	ip, r2, r1
  54:Core/Src/flanger.c **** 	FLreadptr++;
 248              		.loc 1 54 11 view .LVU74
 249 00ca 0433     		adds	r3, r3, #4
  60:Core/Src/flanger.c **** 		FLwriteptr = flanger_buff;
 250              		.loc 1 60 14 view .LVU75
 251 00cc 8445     		cmp	ip, r0
 252 00ce C8BF     		it	gt
 253 00d0 0A46     		movgt	r2, r1
  54:Core/Src/flanger.c **** 	FLreadptr++;
 254              		.loc 1 54 11 view .LVU76
 255 00d2 114D     		ldr	r5, .L14+32
  59:Core/Src/flanger.c **** 	if ((FLwriteptr - flanger_buff) >= FLANGER_BUFF_SIZE)
 256              		.loc 1 59 2 is_stmt 1 view .LVU77
  60:Core/Src/flanger.c **** 		FLwriteptr = flanger_buff;
 257              		.loc 1 60 14 is_stmt 0 view .LVU78
 258 00d4 2260     		str	r2, [r4]
  62:Core/Src/flanger.c **** 	if ((FLreadptr - flanger_buff) >= FLANGER_BUFF_SIZE)
 259              		.loc 1 62 2 is_stmt 1 view .LVU79
  62:Core/Src/flanger.c **** 	if ((FLreadptr - flanger_buff) >= FLANGER_BUFF_SIZE)
 260              		.loc 1 62 17 is_stmt 0 view .LVU80
 261 00d6 5A1A     		subs	r2, r3, r1
  63:Core/Src/flanger.c **** 		FLreadptr = flanger_buff;
 262              		.loc 1 63 13 view .LVU81
 263 00d8 8242     		cmp	r2, r0
 264 00da C8BF     		it	gt
 265 00dc 0B46     		movgt	r3, r1
 266 00de 2B60     		str	r3, [r5]
  69:Core/Src/flanger.c **** 	return (flanger_wet * sample + (1 - flanger_wet) * input_sample); // linear crossfade
 267              		.loc 1 69 2 is_stmt 1 view .LVU82
 268              		.loc 1 70 1 is_stmt 0 view .LVU83
 269 00e0 38BD     		pop	{r3, r4, r5, pc}
 270              	.LVL16:
 271              	.L12:
 272              		.cfi_restore_state
 273              	.LBB13:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 9


 274              	.LBB12:
 275              		.loc 1 70 1 view .LVU84
 276 00e2 B6EE000A 		vmov.f32	s0, #5.0e-1
 277              	.LVL17:
  68:Core/Inc/helper_functions.h ****     }
 278              		.loc 2 68 16 view .LVU85
 279 00e6 B7EE007A 		vmov.f32	s14, #1.0e+0
 280 00ea E2E7     		b	.L8
 281              	.LVL18:
 282              	.L11:
  68:Core/Inc/helper_functions.h ****     }
 283              		.loc 2 68 16 view .LVU86
 284 00ec BEEE000A 		vmov.f32	s0, #-5.0e-1
 285              	.LVL19:
  64:Core/Inc/helper_functions.h ****     }
 286              		.loc 2 64 16 view .LVU87
 287 00f0 BFEE007A 		vmov.f32	s14, #-1.0e+0
 288 00f4 DDE7     		b	.L8
 289              	.L15:
 290 00f6 00BF     		.align	2
 291              	.L14:
 292 00f8 00000000 		.word	flanger_lfo
 293 00fc CDCCCC3D 		.word	1036831949
 294 0100 00000000 		.word	.LANCHOR2
 295 0104 00004843 		.word	1128792064
 296 0108 0000C842 		.word	1120403456
 297 010c 00C07944 		.word	1148829696
 298 0110 00000000 		.word	.LANCHOR1
 299 0114 6666663F 		.word	1063675494
 300 0118 00000000 		.word	.LANCHOR0
 301              	.LBE12:
 302              	.LBE13:
 303              		.cfi_endproc
 304              	.LFE5:
 306              		.section	.bss.FLreadptr,"aw",%nobits
 307              		.align	2
 308              		.set	.LANCHOR0,. + 0
 311              	FLreadptr:
 312 0000 00000000 		.space	4
 313              		.section	.bss.FLwriteptr,"aw",%nobits
 314              		.align	2
 315              		.set	.LANCHOR2,. + 0
 318              	FLwriteptr:
 319 0000 00000000 		.space	4
 320              		.section	.bss.flanger_buff,"aw",%nobits
 321              		.align	2
 322              		.set	.LANCHOR1,. + 0
 325              	flanger_buff:
 326 0000 00000000 		.space	4008
 326      00000000 
 326      00000000 
 326      00000000 
 326      00000000 
 327              		.text
 328              	.Letext0:
 329              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 330              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 10


 331              		.file 5 "Core/Inc/oscillators.h"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 flanger.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:20     .text.flanger_init:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:27     .text.flanger_init:0000000000000000 flanger_init
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:72     .text.flanger_init:0000000000000030 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:81     .text.flanger_compute:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:88     .text.flanger_compute:0000000000000000 flanger_compute
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:292    .text.flanger_compute:00000000000000f8 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:307    .bss.FLreadptr:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:311    .bss.FLreadptr:0000000000000000 FLreadptr
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:314    .bss.FLwriteptr:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:318    .bss.FLwriteptr:0000000000000000 FLwriteptr
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:321    .bss.flanger_buff:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccqTdBeS.s:325    .bss.flanger_buff:0000000000000000 flanger_buff

UNDEFINED SYMBOLS
osc_init
flanger_lfo
osc_Sine
clip
