ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"usbh_MIDI.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USBH_MIDI_ClassRequest,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	USBH_MIDI_ClassRequest:
  27              	.LVL0:
  28              	.LFB135:
  29              		.file 1 "Core/Src/usbh_MIDI.c"
   1:Core/Src/usbh_MIDI.c **** /**
   2:Core/Src/usbh_MIDI.c ****  ******************************************************************************
   3:Core/Src/usbh_MIDI.c ****  * @file    usbh_MIDI.c
   4:Core/Src/usbh_MIDI.c ****  * @author	Xavier Halgand
   5:Core/Src/usbh_MIDI.c ****  * @version
   6:Core/Src/usbh_MIDI.c ****  * @date
   7:Core/Src/usbh_MIDI.c ****  * @brief   This file is the MIDI Layer Handlers for USB Host MIDI streaming class.
   8:Core/Src/usbh_MIDI.c ****  *
   9:Core/Src/usbh_MIDI.c ****  *
  10:Core/Src/usbh_MIDI.c ****  ******************************************************************************
  11:Core/Src/usbh_MIDI.c ****  */
  12:Core/Src/usbh_MIDI.c **** 
  13:Core/Src/usbh_MIDI.c **** /*
  14:Core/Src/usbh_MIDI.c ****  * This program is free software; you can redistribute it and/or modify
  15:Core/Src/usbh_MIDI.c ****  * it under the terms of the GNU General Public License as published by
  16:Core/Src/usbh_MIDI.c ****  * the Free Software Foundation; either version 2 of the License, or
  17:Core/Src/usbh_MIDI.c ****  * (at your option) any later version.
  18:Core/Src/usbh_MIDI.c ****  *
  19:Core/Src/usbh_MIDI.c ****  * This program is distributed in the hope that it will be useful,
  20:Core/Src/usbh_MIDI.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  21:Core/Src/usbh_MIDI.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  22:Core/Src/usbh_MIDI.c ****  * GNU General Public License for more details.
  23:Core/Src/usbh_MIDI.c ****  *
  24:Core/Src/usbh_MIDI.c ****  * You should have received a copy of the GNU General Public License
  25:Core/Src/usbh_MIDI.c ****  * along with this program; if not, write to the Free Software
  26:Core/Src/usbh_MIDI.c ****  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  27:Core/Src/usbh_MIDI.c ****  *
  28:Core/Src/usbh_MIDI.c ****  */
  29:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 2


  30:Core/Src/usbh_MIDI.c **** /* Includes ------------------------------------------------------------------*/
  31:Core/Src/usbh_MIDI.c **** #include "../Inc/usbh_MIDI.h"
  32:Core/Src/usbh_MIDI.c **** 
  33:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
  34:Core/Src/usbh_MIDI.c **** 
  35:Core/Src/usbh_MIDI.c **** /** @defgroup USBH_MIDI_CORE_Private_FunctionPrototypes
  36:Core/Src/usbh_MIDI.c ****  * @{
  37:Core/Src/usbh_MIDI.c ****  */
  38:Core/Src/usbh_MIDI.c **** 
  39:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceInit  (USBH_HandleTypeDef *phost);
  40:Core/Src/usbh_MIDI.c **** 
  41:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit  (USBH_HandleTypeDef *phost);
  42:Core/Src/usbh_MIDI.c **** 
  43:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_Process(USBH_HandleTypeDef *phost);
  44:Core/Src/usbh_MIDI.c **** 
  45:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_SOFProcess(USBH_HandleTypeDef *phost);
  46:Core/Src/usbh_MIDI.c **** 
  47:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost);
  48:Core/Src/usbh_MIDI.c **** 
  49:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost);
  50:Core/Src/usbh_MIDI.c **** 
  51:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessReception(USBH_HandleTypeDef *phost);
  52:Core/Src/usbh_MIDI.c **** 
  53:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------*/
  54:Core/Src/usbh_MIDI.c **** 
  55:Core/Src/usbh_MIDI.c **** USBH_ClassTypeDef  MIDI_Class =
  56:Core/Src/usbh_MIDI.c **** {
  57:Core/Src/usbh_MIDI.c **** 		"MIDI",
  58:Core/Src/usbh_MIDI.c **** 		USB_AUDIO_CLASS,
  59:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_InterfaceInit,
  60:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_InterfaceDeInit,
  61:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_ClassRequest,
  62:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_Process, // background process called in HOST_CLASS state (core state machine)
  63:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_SOFProcess,
  64:Core/Src/usbh_MIDI.c **** 		NULL // MIDI handle structure
  65:Core/Src/usbh_MIDI.c **** };
  66:Core/Src/usbh_MIDI.c **** 
  67:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
  68:Core/Src/usbh_MIDI.c **** 
  69:Core/Src/usbh_MIDI.c **** /**
  70:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_InterfaceInit
  71:Core/Src/usbh_MIDI.c ****  *         The function init the MIDI class.
  72:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
  73:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
  74:Core/Src/usbh_MIDI.c ****  */
  75:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
  76:Core/Src/usbh_MIDI.c **** {	
  77:Core/Src/usbh_MIDI.c **** 
  78:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_FAIL ;
  79:Core/Src/usbh_MIDI.c **** 	uint8_t interface = 0;
  80:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle;
  81:Core/Src/usbh_MIDI.c **** 
  82:Core/Src/usbh_MIDI.c **** 	//USB_MIDI_ChangeConnectionState(0);
  83:Core/Src/usbh_MIDI.c **** 
  84:Core/Src/usbh_MIDI.c **** 	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
  85:Core/Src/usbh_MIDI.c **** 
  86:Core/Src/usbh_MIDI.c **** 	if(interface == 0xFF) /* No Valid Interface */
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 3


  87:Core/Src/usbh_MIDI.c **** 	{
  88:Core/Src/usbh_MIDI.c **** 		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
  89:Core/Src/usbh_MIDI.c **** 		status = USBH_FAIL;
  90:Core/Src/usbh_MIDI.c **** 	}
  91:Core/Src/usbh_MIDI.c **** 	else
  92:Core/Src/usbh_MIDI.c **** 	{
  93:Core/Src/usbh_MIDI.c **** 		USBH_SelectInterface (phost, interface);
  94:Core/Src/usbh_MIDI.c **** 
  95:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
  96:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
  97:Core/Src/usbh_MIDI.c **** 
  98:Core/Src/usbh_MIDI.c **** 		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 
  99:Core/Src/usbh_MIDI.c **** 		{
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].
 101:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 102:Core/Src/usbh_MIDI.c **** 		}
 103:Core/Src/usbh_MIDI.c **** 		else
 104:Core/Src/usbh_MIDI.c **** 		{
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0]
 106:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 107:Core/Src/usbh_MIDI.c **** 		}
 108:Core/Src/usbh_MIDI.c **** 
 109:Core/Src/usbh_MIDI.c **** 		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 
 110:Core/Src/usbh_MIDI.c **** 		{
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].
 112:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 113:Core/Src/usbh_MIDI.c **** 		}
 114:Core/Src/usbh_MIDI.c **** 		else
 115:Core/Src/usbh_MIDI.c **** 		{
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1]
 117:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 118:Core/Src/usbh_MIDI.c **** 		}
 119:Core/Src/usbh_MIDI.c **** 
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 121:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 122:Core/Src/usbh_MIDI.c **** 
 123:Core/Src/usbh_MIDI.c **** 
 124:Core/Src/usbh_MIDI.c **** 		/* Open the new channels */
 125:Core/Src/usbh_MIDI.c **** 		USBH_OpenPipe  (phost,
 126:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 127:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutEp,
 128:Core/Src/usbh_MIDI.c **** 				phost->device.address,
 129:Core/Src/usbh_MIDI.c **** 				phost->device.speed,
 130:Core/Src/usbh_MIDI.c **** 				USB_EP_TYPE_BULK,
 131:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutEpSize);
 132:Core/Src/usbh_MIDI.c **** 
 133:Core/Src/usbh_MIDI.c **** 		USBH_OpenPipe  (phost,
 134:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 135:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEp,
 136:Core/Src/usbh_MIDI.c **** 				phost->device.address,
 137:Core/Src/usbh_MIDI.c **** 				phost->device.speed,
 138:Core/Src/usbh_MIDI.c **** 				USB_EP_TYPE_BULK,
 139:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEpSize);
 140:Core/Src/usbh_MIDI.c **** 
 141:Core/Src/usbh_MIDI.c **** 		//USB_MIDI_ChangeConnectionState(1);
 142:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_IDLE_STATE;
 143:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 4


 144:Core/Src/usbh_MIDI.c **** 
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 146:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 147:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 148:Core/Src/usbh_MIDI.c **** 	}
 149:Core/Src/usbh_MIDI.c **** 	return status;
 150:Core/Src/usbh_MIDI.c **** }
 151:Core/Src/usbh_MIDI.c **** 
 152:Core/Src/usbh_MIDI.c **** 
 153:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 154:Core/Src/usbh_MIDI.c **** 
 155:Core/Src/usbh_MIDI.c **** /**
 156:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_InterfaceDeInit
 157:Core/Src/usbh_MIDI.c ****  *         The function DeInit the Pipes used for the MIDI class.
 158:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 159:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 160:Core/Src/usbh_MIDI.c ****  */
 161:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
 162:Core/Src/usbh_MIDI.c **** {
 163:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 164:Core/Src/usbh_MIDI.c **** 
 165:Core/Src/usbh_MIDI.c **** 	if ( MIDI_Handle->OutPipe)
 166:Core/Src/usbh_MIDI.c **** 	{
 167:Core/Src/usbh_MIDI.c **** 		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 168:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 169:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 170:Core/Src/usbh_MIDI.c **** 	}
 171:Core/Src/usbh_MIDI.c **** 
 172:Core/Src/usbh_MIDI.c **** 	if ( MIDI_Handle->InPipe)
 173:Core/Src/usbh_MIDI.c **** 	{
 174:Core/Src/usbh_MIDI.c **** 		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 175:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 176:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 177:Core/Src/usbh_MIDI.c **** 	}
 178:Core/Src/usbh_MIDI.c **** 
 179:Core/Src/usbh_MIDI.c **** 	if(phost->pActiveClass->pData)
 180:Core/Src/usbh_MIDI.c **** 	{
 181:Core/Src/usbh_MIDI.c **** 		USBH_free (phost->pActiveClass->pData);
 182:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = 0;
 183:Core/Src/usbh_MIDI.c **** 	}
 184:Core/Src/usbh_MIDI.c **** 
 185:Core/Src/usbh_MIDI.c **** 	return USBH_OK;
 186:Core/Src/usbh_MIDI.c **** }
 187:Core/Src/usbh_MIDI.c **** 
 188:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 189:Core/Src/usbh_MIDI.c **** 
 190:Core/Src/usbh_MIDI.c **** /**
 191:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_ClassRequest
 192:Core/Src/usbh_MIDI.c ****  *         The function is responsible for handling Standard requests
 193:Core/Src/usbh_MIDI.c ****  *         for MIDI class.
 194:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 195:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 196:Core/Src/usbh_MIDI.c ****  */
 197:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
 198:Core/Src/usbh_MIDI.c **** {   
  30              		.loc 1 198 1 view -0
  31              		.cfi_startproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 5


  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Src/usbh_MIDI.c **** 
 200:Core/Src/usbh_MIDI.c **** 	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
  34              		.loc 1 200 2 view .LVU1
 198:Core/Src/usbh_MIDI.c **** 
  35              		.loc 1 198 1 is_stmt 0 view .LVU2
  36 0000 08B5     		push	{r3, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 200 2 view .LVU3
  41 0002 0221     		movs	r1, #2
  42 0004 D0F81836 		ldr	r3, [r0, #1560]
  43 0008 9847     		blx	r3
  44              	.LVL1:
 201:Core/Src/usbh_MIDI.c **** 
 202:Core/Src/usbh_MIDI.c **** 	return USBH_OK;
  45              		.loc 1 202 2 is_stmt 1 view .LVU4
 203:Core/Src/usbh_MIDI.c **** }
  46              		.loc 1 203 1 is_stmt 0 view .LVU5
  47 000a 0020     		movs	r0, #0
  48 000c 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE135:
  52 000e 00BF     		.section	.text.USBH_MIDI_SOFProcess,"ax",%progbits
  53              		.align	1
  54              		.p2align 2,,3
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  59              	USBH_MIDI_SOFProcess:
  60              	.LVL2:
  61              	.LFB138:
 204:Core/Src/usbh_MIDI.c **** 
 205:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 206:Core/Src/usbh_MIDI.c **** 
 207:Core/Src/usbh_MIDI.c **** /**
 208:Core/Src/usbh_MIDI.c ****   * @brief  USBH_MIDI_Stop
 209:Core/Src/usbh_MIDI.c ****   *         Stop current MIDI Transmission
 210:Core/Src/usbh_MIDI.c ****   * @param  phost: Host handle
 211:Core/Src/usbh_MIDI.c ****   * @retval USBH Status
 212:Core/Src/usbh_MIDI.c ****   */
 213:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
 214:Core/Src/usbh_MIDI.c **** {
 215:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 216:Core/Src/usbh_MIDI.c **** 
 217:Core/Src/usbh_MIDI.c ****   if(phost->gState == HOST_CLASS)
 218:Core/Src/usbh_MIDI.c ****   {
 219:Core/Src/usbh_MIDI.c ****     MIDI_Handle->state = MIDI_IDLE_STATE;
 220:Core/Src/usbh_MIDI.c **** 
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 222:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 223:Core/Src/usbh_MIDI.c ****   }
 224:Core/Src/usbh_MIDI.c ****   return USBH_OK;
 225:Core/Src/usbh_MIDI.c **** }
 226:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 6


 227:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 228:Core/Src/usbh_MIDI.c **** 
 229:Core/Src/usbh_MIDI.c **** /**
 230:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_Process
 231:Core/Src/usbh_MIDI.c ****  *         The function is for managing state machine for MIDI data transfers
 232:Core/Src/usbh_MIDI.c ****  *         (background process)
 233:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 234:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 235:Core/Src/usbh_MIDI.c ****  */
 236:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
 237:Core/Src/usbh_MIDI.c **** {
 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 239:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 240:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 241:Core/Src/usbh_MIDI.c **** 
 242:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->state)
 243:Core/Src/usbh_MIDI.c **** 	{
 244:Core/Src/usbh_MIDI.c **** 
 245:Core/Src/usbh_MIDI.c **** 	case MIDI_IDLE_STATE:
 246:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 247:Core/Src/usbh_MIDI.c **** 		break;
 248:Core/Src/usbh_MIDI.c **** 
 249:Core/Src/usbh_MIDI.c **** 	case MIDI_TRANSFER_DATA:
 250:Core/Src/usbh_MIDI.c **** 
 251:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessTransmission(phost);
 252:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessReception(phost);
 253:Core/Src/usbh_MIDI.c **** 		break;
 254:Core/Src/usbh_MIDI.c **** 
 255:Core/Src/usbh_MIDI.c **** 	case MIDI_ERROR_STATE:
 256:Core/Src/usbh_MIDI.c **** 		req_status = USBH_ClrFeature(phost, 0x00);
 257:Core/Src/usbh_MIDI.c **** 
 258:Core/Src/usbh_MIDI.c **** 		if(req_status == USBH_OK )
 259:Core/Src/usbh_MIDI.c **** 		{
 260:Core/Src/usbh_MIDI.c **** 			/*Change the state to waiting*/
 261:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->state = MIDI_IDLE_STATE ;
 262:Core/Src/usbh_MIDI.c **** 		}
 263:Core/Src/usbh_MIDI.c **** 		break;
 264:Core/Src/usbh_MIDI.c **** 
 265:Core/Src/usbh_MIDI.c **** 	default:
 266:Core/Src/usbh_MIDI.c **** 		break;
 267:Core/Src/usbh_MIDI.c **** 
 268:Core/Src/usbh_MIDI.c **** 	}
 269:Core/Src/usbh_MIDI.c **** 
 270:Core/Src/usbh_MIDI.c **** 	return status;
 271:Core/Src/usbh_MIDI.c **** }
 272:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 273:Core/Src/usbh_MIDI.c **** 
 274:Core/Src/usbh_MIDI.c **** /**
 275:Core/Src/usbh_MIDI.c ****   * @brief  USBH_MIDI_SOFProcess 
 276:Core/Src/usbh_MIDI.c ****   *         The function is for managing SOF callback 
 277:Core/Src/usbh_MIDI.c ****   * @param  phost: Host handle
 278:Core/Src/usbh_MIDI.c ****   * @retval USBH Status
 279:Core/Src/usbh_MIDI.c ****   */
 280:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
 281:Core/Src/usbh_MIDI.c **** {
  62              		.loc 1 281 1 is_stmt 1 view -0
  63              		.cfi_startproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 7


  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 282:Core/Src/usbh_MIDI.c ****   return USBH_OK;  
  67              		.loc 1 282 3 view .LVU7
 283:Core/Src/usbh_MIDI.c **** }
  68              		.loc 1 283 1 is_stmt 0 view .LVU8
  69 0000 0020     		movs	r0, #0
  70              	.LVL3:
  71              		.loc 1 283 1 view .LVU9
  72 0002 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE138:
  76              		.section	.text.USBH_MIDI_InterfaceDeInit,"ax",%progbits
  77              		.align	1
  78              		.p2align 2,,3
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  83              	USBH_MIDI_InterfaceDeInit:
  84              	.LVL4:
  85              	.LFB134:
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
  86              		.loc 1 162 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Core/Src/usbh_MIDI.c **** 
  90              		.loc 1 163 2 view .LVU11
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
  91              		.loc 1 162 1 is_stmt 0 view .LVU12
  92 0000 38B5     		push	{r3, r4, r5, lr}
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 3, -16
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
 163:Core/Src/usbh_MIDI.c **** 
  98              		.loc 1 163 22 view .LVU13
  99 0002 D0F8C835 		ldr	r3, [r0, #1480]
 100 0006 DD69     		ldr	r5, [r3, #28]
 101              	.LVL5:
 165:Core/Src/usbh_MIDI.c **** 	{
 102              		.loc 1 165 2 is_stmt 1 view .LVU14
 165:Core/Src/usbh_MIDI.c **** 	{
 103              		.loc 1 165 18 is_stmt 0 view .LVU15
 104 0008 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 105              		.loc 1 162 1 view .LVU16
 106 000a 0446     		mov	r4, r0
 165:Core/Src/usbh_MIDI.c **** 	{
 107              		.loc 1 165 5 view .LVU17
 108 000c 51B9     		cbnz	r1, .L20
 172:Core/Src/usbh_MIDI.c **** 	{
 109              		.loc 1 172 2 is_stmt 1 view .LVU18
 172:Core/Src/usbh_MIDI.c **** 	{
 110              		.loc 1 172 18 is_stmt 0 view .LVU19
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 8


 111 000e 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 172:Core/Src/usbh_MIDI.c **** 	{
 112              		.loc 1 172 5 view .LVU20
 113 0010 91B9     		cbnz	r1, .L9
 114              	.LVL6:
 115              	.L10:
 181:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = 0;
 116              		.loc 1 181 3 is_stmt 1 view .LVU21
 117 0012 2846     		mov	r0, r5
 118 0014 FFF7FEFF 		bl	free
 119              	.LVL7:
 182:Core/Src/usbh_MIDI.c **** 	}
 120              		.loc 1 182 3 view .LVU22
 182:Core/Src/usbh_MIDI.c **** 	}
 121              		.loc 1 182 30 is_stmt 0 view .LVU23
 122 0018 D4F8C835 		ldr	r3, [r4, #1480]
 123 001c 0022     		movs	r2, #0
 124 001e DA61     		str	r2, [r3, #28]
 185:Core/Src/usbh_MIDI.c **** }
 125              		.loc 1 185 2 is_stmt 1 view .LVU24
 186:Core/Src/usbh_MIDI.c **** 
 126              		.loc 1 186 1 is_stmt 0 view .LVU25
 127 0020 0020     		movs	r0, #0
 128 0022 38BD     		pop	{r3, r4, r5, pc}
 129              	.LVL8:
 130              	.L20:
 167:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 131              		.loc 1 167 3 is_stmt 1 view .LVU26
 132 0024 FFF7FEFF 		bl	USBH_ClosePipe
 133              	.LVL9:
 168:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 134              		.loc 1 168 3 view .LVU27
 135 0028 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 136 002a 2046     		mov	r0, r4
 137 002c FFF7FEFF 		bl	USBH_FreePipe
 138              	.LVL10:
 169:Core/Src/usbh_MIDI.c **** 	}
 139              		.loc 1 169 3 view .LVU28
 172:Core/Src/usbh_MIDI.c **** 	{
 140              		.loc 1 172 18 is_stmt 0 view .LVU29
 141 0030 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 169:Core/Src/usbh_MIDI.c **** 	}
 142              		.loc 1 169 24 view .LVU30
 143 0032 0023     		movs	r3, #0
 144 0034 AB70     		strb	r3, [r5, #2]
 172:Core/Src/usbh_MIDI.c **** 	{
 145              		.loc 1 172 2 is_stmt 1 view .LVU31
 172:Core/Src/usbh_MIDI.c **** 	{
 146              		.loc 1 172 5 is_stmt 0 view .LVU32
 147 0036 41B1     		cbz	r1, .L7
 148              	.L9:
 174:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 149              		.loc 1 174 3 is_stmt 1 view .LVU33
 150 0038 2046     		mov	r0, r4
 151 003a FFF7FEFF 		bl	USBH_ClosePipe
 152              	.LVL11:
 175:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 9


 153              		.loc 1 175 3 view .LVU34
 154 003e 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 155 0040 2046     		mov	r0, r4
 156 0042 FFF7FEFF 		bl	USBH_FreePipe
 157              	.LVL12:
 176:Core/Src/usbh_MIDI.c **** 	}
 158              		.loc 1 176 3 view .LVU35
 176:Core/Src/usbh_MIDI.c **** 	}
 159              		.loc 1 176 23 is_stmt 0 view .LVU36
 160 0046 0023     		movs	r3, #0
 161 0048 6B70     		strb	r3, [r5, #1]
 162              	.L7:
 179:Core/Src/usbh_MIDI.c **** 	{
 163              		.loc 1 179 2 is_stmt 1 view .LVU37
 179:Core/Src/usbh_MIDI.c **** 	{
 164              		.loc 1 179 24 is_stmt 0 view .LVU38
 165 004a D4F8C835 		ldr	r3, [r4, #1480]
 166 004e DD69     		ldr	r5, [r3, #28]
 167              	.LVL13:
 179:Core/Src/usbh_MIDI.c **** 	{
 168              		.loc 1 179 4 view .LVU39
 169 0050 002D     		cmp	r5, #0
 170 0052 DED1     		bne	.L10
 186:Core/Src/usbh_MIDI.c **** 
 171              		.loc 1 186 1 view .LVU40
 172 0054 0020     		movs	r0, #0
 173 0056 38BD     		pop	{r3, r4, r5, pc}
 186:Core/Src/usbh_MIDI.c **** 
 174              		.loc 1 186 1 view .LVU41
 175              		.cfi_endproc
 176              	.LFE134:
 178              		.section	.text.USBH_MIDI_InterfaceInit,"ax",%progbits
 179              		.align	1
 180              		.p2align 2,,3
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	USBH_MIDI_InterfaceInit:
 186              	.LVL14:
 187              	.LFB133:
  76:Core/Src/usbh_MIDI.c **** 
 188              		.loc 1 76 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
  78:Core/Src/usbh_MIDI.c **** 	uint8_t interface = 0;
 192              		.loc 1 78 2 view .LVU43
  79:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle;
 193              		.loc 1 79 2 view .LVU44
  80:Core/Src/usbh_MIDI.c **** 
 194              		.loc 1 80 2 view .LVU45
  84:Core/Src/usbh_MIDI.c **** 
 195              		.loc 1 84 2 view .LVU46
  76:Core/Src/usbh_MIDI.c **** 
 196              		.loc 1 76 1 is_stmt 0 view .LVU47
 197 0000 70B5     		push	{r4, r5, r6, lr}
 198              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 10


 199              		.cfi_offset 4, -16
 200              		.cfi_offset 5, -12
 201              		.cfi_offset 6, -8
 202              		.cfi_offset 14, -4
  84:Core/Src/usbh_MIDI.c **** 
 203              		.loc 1 84 14 view .LVU48
 204 0002 FF23     		movs	r3, #255
  76:Core/Src/usbh_MIDI.c **** 
 205              		.loc 1 76 1 view .LVU49
 206 0004 84B0     		sub	sp, sp, #16
 207              		.cfi_def_cfa_offset 32
  84:Core/Src/usbh_MIDI.c **** 
 208              		.loc 1 84 14 view .LVU50
 209 0006 0322     		movs	r2, #3
 210 0008 0121     		movs	r1, #1
  76:Core/Src/usbh_MIDI.c **** 
 211              		.loc 1 76 1 view .LVU51
 212 000a 0546     		mov	r5, r0
  84:Core/Src/usbh_MIDI.c **** 
 213              		.loc 1 84 14 view .LVU52
 214 000c FFF7FEFF 		bl	USBH_FindInterface
 215              	.LVL15:
  86:Core/Src/usbh_MIDI.c **** 	{
 216              		.loc 1 86 2 is_stmt 1 view .LVU53
  86:Core/Src/usbh_MIDI.c **** 	{
 217              		.loc 1 86 4 is_stmt 0 view .LVU54
 218 0010 FF28     		cmp	r0, #255
 219 0012 63D0     		beq	.L27
  93:Core/Src/usbh_MIDI.c **** 
 220              		.loc 1 93 3 is_stmt 1 view .LVU55
 221 0014 0146     		mov	r1, r0
 222 0016 2846     		mov	r0, r5
 223              	.LVL16:
  93:Core/Src/usbh_MIDI.c **** 
 224              		.loc 1 93 3 is_stmt 0 view .LVU56
 225 0018 FFF7FEFF 		bl	USBH_SelectInterface
 226              	.LVL17:
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 227              		.loc 1 95 3 is_stmt 1 view .LVU57
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 228              		.loc 1 95 54 is_stmt 0 view .LVU58
 229 001c 1C20     		movs	r0, #28
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 230              		.loc 1 95 8 view .LVU59
 231 001e D5F8C865 		ldr	r6, [r5, #1480]
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 232              		.loc 1 95 54 view .LVU60
 233 0022 FFF7FEFF 		bl	malloc
 234              	.LVL18:
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 235              		.loc 1 95 30 view .LVU61
 236 0026 F061     		str	r0, [r6, #28]
  96:Core/Src/usbh_MIDI.c **** 
 237              		.loc 1 96 3 is_stmt 1 view .LVU62
  98:Core/Src/usbh_MIDI.c **** 		{
 238              		.loc 1 98 50 is_stmt 0 view .LVU63
 239 0028 95F82032 		ldrb	r3, [r5, #544]	@ zero_extendqisi2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 11


  98:Core/Src/usbh_MIDI.c **** 		{
 240              		.loc 1 98 80 view .LVU64
 241 002c 5A22     		movs	r2, #90
 242 002e 02FB0352 		mla	r2, r2, r3, r5
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 243              		.loc 1 95 54 view .LVU65
 244 0032 0446     		mov	r4, r0
 245              	.LVL19:
  98:Core/Src/usbh_MIDI.c **** 		{
 246              		.loc 1 98 3 is_stmt 1 view .LVU66
  98:Core/Src/usbh_MIDI.c **** 		{
 247              		.loc 1 98 5 is_stmt 0 view .LVU67
 248 0034 92F94A02 		ldrsb	r0, [r2, #586]
 249              	.LVL20:
  98:Core/Src/usbh_MIDI.c **** 		{
 250              		.loc 1 98 80 view .LVU68
 251 0038 92F84A12 		ldrb	r1, [r2, #586]	@ zero_extendqisi2
 101:Core/Src/usbh_MIDI.c **** 		}
 252              		.loc 1 101 27 view .LVU69
 253 003c B2F84C22 		ldrh	r2, [r2, #588]
  98:Core/Src/usbh_MIDI.c **** 		{
 254              		.loc 1 98 5 view .LVU70
 255 0040 0028     		cmp	r0, #0
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 256              		.loc 1 100 4 is_stmt 1 view .LVU71
 101:Core/Src/usbh_MIDI.c **** 		}
 257              		.loc 1 101 27 is_stmt 0 view .LVU72
 258 0042 B4BF     		ite	lt
 259 0044 2281     		strhlt	r2, [r4, #8]	@ movhi
 106:Core/Src/usbh_MIDI.c **** 		}
 260              		.loc 1 106 28 view .LVU73
 261 0046 E280     		strhge	r2, [r4, #6]	@ movhi
 109:Core/Src/usbh_MIDI.c **** 		{
 262              		.loc 1 109 80 view .LVU74
 263 0048 4FF05A02 		mov	r2, #90
 264 004c 02FB0353 		mla	r3, r2, r3, r5
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 265              		.loc 1 100 22 view .LVU75
 266 0050 B8BF     		it	lt
 267 0052 2171     		strblt	r1, [r4, #4]
 101:Core/Src/usbh_MIDI.c **** 		}
 268              		.loc 1 101 4 is_stmt 1 view .LVU76
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 269              		.loc 1 105 4 view .LVU77
 109:Core/Src/usbh_MIDI.c **** 		{
 270              		.loc 1 109 5 is_stmt 0 view .LVU78
 271 0054 93F95222 		ldrsb	r2, [r3, #594]
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 272              		.loc 1 105 23 view .LVU79
 273 0058 A8BF     		it	ge
 274 005a E170     		strbge	r1, [r4, #3]
 106:Core/Src/usbh_MIDI.c **** 		}
 275              		.loc 1 106 4 is_stmt 1 view .LVU80
 109:Core/Src/usbh_MIDI.c **** 		{
 276              		.loc 1 109 3 view .LVU81
 109:Core/Src/usbh_MIDI.c **** 		{
 277              		.loc 1 109 5 is_stmt 0 view .LVU82
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 12


 278 005c 002A     		cmp	r2, #0
 109:Core/Src/usbh_MIDI.c **** 		{
 279              		.loc 1 109 80 view .LVU83
 280 005e 93F85212 		ldrb	r1, [r3, #594]	@ zero_extendqisi2
 112:Core/Src/usbh_MIDI.c **** 		}
 281              		.loc 1 112 27 view .LVU84
 282 0062 B3F85432 		ldrh	r3, [r3, #596]
 109:Core/Src/usbh_MIDI.c **** 		{
 283              		.loc 1 109 5 view .LVU85
 284 0066 35DB     		blt	.L29
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 285              		.loc 1 116 4 is_stmt 1 view .LVU86
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 286              		.loc 1 116 23 is_stmt 0 view .LVU87
 287 0068 E170     		strb	r1, [r4, #3]
 117:Core/Src/usbh_MIDI.c **** 		}
 288              		.loc 1 117 4 is_stmt 1 view .LVU88
 117:Core/Src/usbh_MIDI.c **** 		}
 289              		.loc 1 117 28 is_stmt 0 view .LVU89
 290 006a E380     		strh	r3, [r4, #6]	@ movhi
 291              	.L26:
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 292              		.loc 1 120 3 is_stmt 1 view .LVU90
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 293              		.loc 1 120 26 is_stmt 0 view .LVU91
 294 006c 2846     		mov	r0, r5
 295 006e FFF7FEFF 		bl	USBH_AllocPipe
 296              	.LVL21:
 121:Core/Src/usbh_MIDI.c **** 
 297              		.loc 1 121 25 view .LVU92
 298 0072 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 299              		.loc 1 120 26 view .LVU93
 300 0074 0346     		mov	r3, r0
 121:Core/Src/usbh_MIDI.c **** 
 301              		.loc 1 121 25 view .LVU94
 302 0076 2846     		mov	r0, r5
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 303              		.loc 1 120 24 view .LVU95
 304 0078 A370     		strb	r3, [r4, #2]
 121:Core/Src/usbh_MIDI.c **** 
 305              		.loc 1 121 3 is_stmt 1 view .LVU96
 121:Core/Src/usbh_MIDI.c **** 
 306              		.loc 1 121 25 is_stmt 0 view .LVU97
 307 007a FFF7FEFF 		bl	USBH_AllocPipe
 308              	.LVL22:
 125:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 309              		.loc 1 125 3 view .LVU98
 310 007e E388     		ldrh	r3, [r4, #6]
 311 0080 95F81D22 		ldrb	r2, [r5, #541]	@ zero_extendqisi2
 312 0084 0092     		str	r2, [sp]
 313 0086 0226     		movs	r6, #2
 314 0088 CDE90163 		strd	r6, r3, [sp, #4]
 315 008c E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 316 008e 95F81C32 		ldrb	r3, [r5, #540]	@ zero_extendqisi2
 317 0092 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 121:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 13


 318              		.loc 1 121 23 view .LVU99
 319 0094 6070     		strb	r0, [r4, #1]
 125:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 320              		.loc 1 125 3 is_stmt 1 view .LVU100
 321 0096 2846     		mov	r0, r5
 322 0098 FFF7FEFF 		bl	USBH_OpenPipe
 323              	.LVL23:
 133:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 324              		.loc 1 133 3 view .LVU101
 325 009c 2389     		ldrh	r3, [r4, #8]
 326 009e 95F81D12 		ldrb	r1, [r5, #541]	@ zero_extendqisi2
 327 00a2 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 328 00a4 CDE90163 		strd	r6, r3, [sp, #4]
 329 00a8 2846     		mov	r0, r5
 330 00aa 95F81C32 		ldrb	r3, [r5, #540]	@ zero_extendqisi2
 331 00ae 0091     		str	r1, [sp]
 142:Core/Src/usbh_MIDI.c **** 
 332              		.loc 1 142 22 is_stmt 0 view .LVU102
 333 00b0 0026     		movs	r6, #0
 133:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 334              		.loc 1 133 3 view .LVU103
 335 00b2 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 336 00b4 FFF7FEFF 		bl	USBH_OpenPipe
 337              	.LVL24:
 142:Core/Src/usbh_MIDI.c **** 
 338              		.loc 1 142 3 is_stmt 1 view .LVU104
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 339              		.loc 1 145 3 is_stmt 0 view .LVU105
 340 00b8 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 142:Core/Src/usbh_MIDI.c **** 
 341              		.loc 1 142 22 view .LVU106
 342 00ba 2670     		strb	r6, [r4]
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 343              		.loc 1 145 3 is_stmt 1 view .LVU107
 344 00bc 3246     		mov	r2, r6
 345 00be 2846     		mov	r0, r5
 346 00c0 FFF7FEFF 		bl	USBH_LL_SetToggle
 347              	.LVL25:
 146:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 348              		.loc 1 146 3 view .LVU108
 349 00c4 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 350 00c6 3246     		mov	r2, r6
 351 00c8 2846     		mov	r0, r5
 352 00ca FFF7FEFF 		bl	USBH_LL_SetToggle
 353              	.LVL26:
 147:Core/Src/usbh_MIDI.c **** 	}
 354              		.loc 1 147 3 view .LVU109
 147:Core/Src/usbh_MIDI.c **** 	}
 355              		.loc 1 147 10 is_stmt 0 view .LVU110
 356 00ce 3046     		mov	r0, r6
 357              	.LVL27:
 149:Core/Src/usbh_MIDI.c **** }
 358              		.loc 1 149 2 is_stmt 1 view .LVU111
 150:Core/Src/usbh_MIDI.c **** 
 359              		.loc 1 150 1 is_stmt 0 view .LVU112
 360 00d0 04B0     		add	sp, sp, #16
 361              		.cfi_remember_state
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 14


 362              		.cfi_def_cfa_offset 16
 363              		@ sp needed
 364 00d2 70BD     		pop	{r4, r5, r6, pc}
 365              	.LVL28:
 366              	.L29:
 367              		.cfi_restore_state
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 368              		.loc 1 111 4 is_stmt 1 view .LVU113
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 369              		.loc 1 111 22 is_stmt 0 view .LVU114
 370 00d4 2171     		strb	r1, [r4, #4]
 112:Core/Src/usbh_MIDI.c **** 		}
 371              		.loc 1 112 4 is_stmt 1 view .LVU115
 112:Core/Src/usbh_MIDI.c **** 		}
 372              		.loc 1 112 27 is_stmt 0 view .LVU116
 373 00d6 2381     		strh	r3, [r4, #8]	@ movhi
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 374              		.loc 1 120 26 view .LVU117
 375 00d8 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 376 00da C7E7     		b	.L26
 377              	.LVL29:
 378              	.L27:
  89:Core/Src/usbh_MIDI.c **** 	}
 379              		.loc 1 89 10 view .LVU118
 380 00dc 0220     		movs	r0, #2
 381              	.LVL30:
 149:Core/Src/usbh_MIDI.c **** }
 382              		.loc 1 149 2 is_stmt 1 view .LVU119
 150:Core/Src/usbh_MIDI.c **** 
 383              		.loc 1 150 1 is_stmt 0 view .LVU120
 384 00de 04B0     		add	sp, sp, #16
 385              		.cfi_def_cfa_offset 16
 386              		@ sp needed
 387 00e0 70BD     		pop	{r4, r5, r6, pc}
 150:Core/Src/usbh_MIDI.c **** 
 388              		.loc 1 150 1 view .LVU121
 389              		.cfi_endproc
 390              	.LFE133:
 392 00e2 00BF     		.section	.text.USBH_MIDI_Stop,"ax",%progbits
 393              		.align	1
 394              		.p2align 2,,3
 395              		.global	USBH_MIDI_Stop
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 400              	USBH_MIDI_Stop:
 401              	.LVL31:
 402              	.LFB136:
 214:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 403              		.loc 1 214 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 215:Core/Src/usbh_MIDI.c **** 
 407              		.loc 1 215 3 view .LVU123
 217:Core/Src/usbh_MIDI.c ****   {
 408              		.loc 1 217 3 view .LVU124
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 15


 214:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 409              		.loc 1 214 1 is_stmt 0 view .LVU125
 410 0000 38B5     		push	{r3, r4, r5, lr}
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 3, -16
 413              		.cfi_offset 4, -12
 414              		.cfi_offset 5, -8
 415              		.cfi_offset 14, -4
 217:Core/Src/usbh_MIDI.c ****   {
 416              		.loc 1 217 11 view .LVU126
 417 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 217:Core/Src/usbh_MIDI.c ****   {
 418              		.loc 1 217 5 view .LVU127
 419 0004 0B2B     		cmp	r3, #11
 420 0006 01D0     		beq	.L33
 224:Core/Src/usbh_MIDI.c **** }
 421              		.loc 1 224 3 is_stmt 1 view .LVU128
 225:Core/Src/usbh_MIDI.c **** 
 422              		.loc 1 225 1 is_stmt 0 view .LVU129
 423 0008 0020     		movs	r0, #0
 424              	.LVL32:
 225:Core/Src/usbh_MIDI.c **** 
 425              		.loc 1 225 1 view .LVU130
 426 000a 38BD     		pop	{r3, r4, r5, pc}
 427              	.LVL33:
 428              	.L33:
 215:Core/Src/usbh_MIDI.c **** 
 429              		.loc 1 215 23 view .LVU131
 430 000c D0F8C825 		ldr	r2, [r0, #1480]
 431 0010 D569     		ldr	r5, [r2, #28]
 219:Core/Src/usbh_MIDI.c **** 
 432              		.loc 1 219 5 is_stmt 1 view .LVU132
 219:Core/Src/usbh_MIDI.c **** 
 433              		.loc 1 219 24 is_stmt 0 view .LVU133
 434 0012 0023     		movs	r3, #0
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 435              		.loc 1 221 5 view .LVU134
 436 0014 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 219:Core/Src/usbh_MIDI.c **** 
 437              		.loc 1 219 24 view .LVU135
 438 0016 2B70     		strb	r3, [r5]
 439              	.LVL34:
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 440              		.loc 1 221 5 is_stmt 1 view .LVU136
 441 0018 0446     		mov	r4, r0
 442 001a FFF7FEFF 		bl	USBH_ClosePipe
 443              	.LVL35:
 222:Core/Src/usbh_MIDI.c ****   }
 444              		.loc 1 222 5 view .LVU137
 445 001e A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 446 0020 2046     		mov	r0, r4
 447 0022 FFF7FEFF 		bl	USBH_ClosePipe
 448              	.LVL36:
 224:Core/Src/usbh_MIDI.c **** }
 449              		.loc 1 224 3 view .LVU138
 225:Core/Src/usbh_MIDI.c **** 
 450              		.loc 1 225 1 is_stmt 0 view .LVU139
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 16


 451 0026 0020     		movs	r0, #0
 452 0028 38BD     		pop	{r3, r4, r5, pc}
 225:Core/Src/usbh_MIDI.c **** 
 453              		.loc 1 225 1 view .LVU140
 454              		.cfi_endproc
 455              	.LFE136:
 457 002a 00BF     		.section	.text.USBH_MIDI_GetLastReceivedDataSize,"ax",%progbits
 458              		.align	1
 459              		.p2align 2,,3
 460              		.global	USBH_MIDI_GetLastReceivedDataSize
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 465              	USBH_MIDI_GetLastReceivedDataSize:
 466              	.LVL37:
 467              	.LFB139:
 284:Core/Src/usbh_MIDI.c ****   
 285:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 286:Core/Src/usbh_MIDI.c **** 
 287:Core/Src/usbh_MIDI.c **** /**
 288:Core/Src/usbh_MIDI.c ****  * @brief  This function return last recieved data size
 289:Core/Src/usbh_MIDI.c ****  * @param  None
 290:Core/Src/usbh_MIDI.c ****  * @retval None
 291:Core/Src/usbh_MIDI.c ****  */
 292:Core/Src/usbh_MIDI.c **** uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
 293:Core/Src/usbh_MIDI.c **** {
 468              		.loc 1 293 1 is_stmt 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 294:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 472              		.loc 1 294 2 view .LVU142
 295:Core/Src/usbh_MIDI.c **** 
 296:Core/Src/usbh_MIDI.c **** 	if(phost->gState == HOST_CLASS)
 473              		.loc 1 296 2 view .LVU143
 474              		.loc 1 296 10 is_stmt 0 view .LVU144
 475 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 476              		.loc 1 296 4 view .LVU145
 477 0002 0B2A     		cmp	r2, #11
 478 0004 01D0     		beq	.L41
 297:Core/Src/usbh_MIDI.c **** 	{
 298:Core/Src/usbh_MIDI.c **** 		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 299:Core/Src/usbh_MIDI.c **** 	}
 300:Core/Src/usbh_MIDI.c **** 	else
 301:Core/Src/usbh_MIDI.c **** 	{
 302:Core/Src/usbh_MIDI.c **** 		return 0;
 479              		.loc 1 302 10 view .LVU146
 480 0006 0020     		movs	r0, #0
 481              	.LVL38:
 303:Core/Src/usbh_MIDI.c **** 	}
 304:Core/Src/usbh_MIDI.c **** }
 482              		.loc 1 304 1 view .LVU147
 483 0008 7047     		bx	lr
 484              	.LVL39:
 485              	.L41:
 298:Core/Src/usbh_MIDI.c **** 	}
 486              		.loc 1 298 3 is_stmt 1 view .LVU148
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 17


 293:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 487              		.loc 1 293 1 is_stmt 0 view .LVU149
 488 000a 08B5     		push	{r3, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 3, -8
 491              		.cfi_offset 14, -4
 294:Core/Src/usbh_MIDI.c **** 
 492              		.loc 1 294 22 view .LVU150
 493 000c D0F8C835 		ldr	r3, [r0, #1480]
 298:Core/Src/usbh_MIDI.c **** 	}
 494              		.loc 1 298 10 view .LVU151
 495 0010 DB69     		ldr	r3, [r3, #28]
 496 0012 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 497 0014 FFF7FEFF 		bl	USBH_LL_GetLastXferSize
 498              	.LVL40:
 298:Core/Src/usbh_MIDI.c **** 	}
 499              		.loc 1 298 10 view .LVU152
 500 0018 80B2     		uxth	r0, r0
 501              		.loc 1 304 1 view .LVU153
 502 001a 08BD     		pop	{r3, pc}
 503              		.cfi_endproc
 504              	.LFE139:
 506              		.section	.text.USBH_MIDI_Transmit,"ax",%progbits
 507              		.align	1
 508              		.p2align 2,,3
 509              		.global	USBH_MIDI_Transmit
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 514              	USBH_MIDI_Transmit:
 515              	.LVL41:
 516              	.LFB140:
 305:Core/Src/usbh_MIDI.c **** 
 306:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 307:Core/Src/usbh_MIDI.c **** 
 308:Core/Src/usbh_MIDI.c **** /**
 309:Core/Src/usbh_MIDI.c ****  * @brief  This function prepares the state before issuing the class specific commands
 310:Core/Src/usbh_MIDI.c ****  * @param  None
 311:Core/Src/usbh_MIDI.c ****  * @retval None
 312:Core/Src/usbh_MIDI.c ****  */
 313:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
 314:Core/Src/usbh_MIDI.c **** {
 517              		.loc 1 314 1 is_stmt 1 view -0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 315:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef Status = USBH_BUSY;
 522              		.loc 1 315 2 view .LVU155
 316:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 523              		.loc 1 316 2 view .LVU156
 524              		.loc 1 316 22 is_stmt 0 view .LVU157
 525 0000 D0F8C835 		ldr	r3, [r0, #1480]
 526 0004 DB69     		ldr	r3, [r3, #28]
 527              	.LVL42:
 317:Core/Src/usbh_MIDI.c **** 
 318:Core/Src/usbh_MIDI.c **** 	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 18


 528              		.loc 1 318 2 is_stmt 1 view .LVU158
 529              		.loc 1 318 4 is_stmt 0 view .LVU159
 530 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 531              	.LVL43:
 532              		.loc 1 318 4 view .LVU160
 533 0008 0128     		cmp	r0, #1
 319:Core/Src/usbh_MIDI.c **** 	{
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->pTxData = pbuff;
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 534              		.loc 1 322 22 view .LVU161
 535 000a 4FF00100 		mov	r0, #1
 318:Core/Src/usbh_MIDI.c **** 	{
 536              		.loc 1 318 4 view .LVU162
 537 000e 00D9     		bls	.L45
 538              	.LVL44:
 323:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 324:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 325:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 326:Core/Src/usbh_MIDI.c **** 		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 327:Core/Src/usbh_MIDI.c **** #endif
 328:Core/Src/usbh_MIDI.c **** 	}
 329:Core/Src/usbh_MIDI.c **** 	return Status;
 539              		.loc 1 329 2 is_stmt 1 view .LVU163
 330:Core/Src/usbh_MIDI.c **** }
 540              		.loc 1 330 1 is_stmt 0 view .LVU164
 541 0010 7047     		bx	lr
 542              	.LVL45:
 543              	.L45:
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
 544              		.loc 1 320 3 is_stmt 1 view .LVU165
 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 545              		.loc 1 322 22 is_stmt 0 view .LVU166
 546 0012 1870     		strb	r0, [r3]
 323:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 547              		.loc 1 323 30 view .LVU167
 548 0014 1876     		strb	r0, [r3, #24]
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
 549              		.loc 1 320 24 view .LVU168
 550 0016 D960     		str	r1, [r3, #12]
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 551              		.loc 1 321 3 is_stmt 1 view .LVU169
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 552              		.loc 1 321 29 is_stmt 0 view .LVU170
 553 0018 9A82     		strh	r2, [r3, #20]	@ movhi
 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 554              		.loc 1 322 3 is_stmt 1 view .LVU171
 323:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 555              		.loc 1 323 3 view .LVU172
 324:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 556              		.loc 1 324 3 view .LVU173
 557              	.LVL46:
 324:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 558              		.loc 1 324 10 is_stmt 0 view .LVU174
 559 001a 0020     		movs	r0, #0
 560 001c 7047     		bx	lr
 561              		.cfi_endproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 19


 562              	.LFE140:
 564 001e 00BF     		.section	.text.USBH_MIDI_Receive,"ax",%progbits
 565              		.align	1
 566              		.p2align 2,,3
 567              		.global	USBH_MIDI_Receive
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	USBH_MIDI_Receive:
 573              	.LVL47:
 574              	.LFB141:
 331:Core/Src/usbh_MIDI.c **** 
 332:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 333:Core/Src/usbh_MIDI.c **** 
 334:Core/Src/usbh_MIDI.c **** /**
 335:Core/Src/usbh_MIDI.c ****  * @brief  This function prepares the state before issuing the class specific commands
 336:Core/Src/usbh_MIDI.c ****  * @param  None
 337:Core/Src/usbh_MIDI.c ****  * @retval None
 338:Core/Src/usbh_MIDI.c ****  */
 339:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
 340:Core/Src/usbh_MIDI.c **** {
 575              		.loc 1 340 1 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 341:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef Status = USBH_BUSY;
 580              		.loc 1 341 2 view .LVU176
 342:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 581              		.loc 1 342 2 view .LVU177
 582              		.loc 1 342 22 is_stmt 0 view .LVU178
 583 0000 D0F8C835 		ldr	r3, [r0, #1480]
 584 0004 DB69     		ldr	r3, [r3, #28]
 585              	.LVL48:
 343:Core/Src/usbh_MIDI.c **** 
 344:Core/Src/usbh_MIDI.c **** 	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 586              		.loc 1 344 2 is_stmt 1 view .LVU179
 587              		.loc 1 344 4 is_stmt 0 view .LVU180
 588 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 589              	.LVL49:
 590              		.loc 1 344 4 view .LVU181
 591 0008 0128     		cmp	r0, #1
 592 000a 01D9     		bls	.L49
 341:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 593              		.loc 1 341 21 view .LVU182
 594 000c 0120     		movs	r0, #1
 595              	.LVL50:
 345:Core/Src/usbh_MIDI.c **** 	{
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->pRxData = pbuff;
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 349:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 350:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 351:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 352:Core/Src/usbh_MIDI.c **** 		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 353:Core/Src/usbh_MIDI.c **** #endif
 354:Core/Src/usbh_MIDI.c **** 	}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 20


 355:Core/Src/usbh_MIDI.c **** 	return Status;
 596              		.loc 1 355 2 is_stmt 1 view .LVU183
 356:Core/Src/usbh_MIDI.c **** }
 597              		.loc 1 356 1 is_stmt 0 view .LVU184
 598 000e 7047     		bx	lr
 599              	.LVL51:
 600              	.L49:
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 601              		.loc 1 346 3 is_stmt 1 view .LVU185
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 602              		.loc 1 348 22 is_stmt 0 view .LVU186
 603 0010 4FF0010C 		mov	ip, #1
 349:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 604              		.loc 1 349 30 view .LVU187
 605 0014 0320     		movs	r0, #3
 606 0016 5876     		strb	r0, [r3, #25]
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 607              		.loc 1 346 24 view .LVU188
 608 0018 1961     		str	r1, [r3, #16]
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 609              		.loc 1 347 3 is_stmt 1 view .LVU189
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 610              		.loc 1 347 29 is_stmt 0 view .LVU190
 611 001a DA82     		strh	r2, [r3, #22]	@ movhi
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 612              		.loc 1 348 3 is_stmt 1 view .LVU191
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 613              		.loc 1 348 22 is_stmt 0 view .LVU192
 614 001c 83F800C0 		strb	ip, [r3]
 349:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 615              		.loc 1 349 3 is_stmt 1 view .LVU193
 350:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 616              		.loc 1 350 3 view .LVU194
 617              	.LVL52:
 350:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 618              		.loc 1 350 10 is_stmt 0 view .LVU195
 619 0020 0020     		movs	r0, #0
 620 0022 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE141:
 624              		.section	.text.USBH_MIDI_TransmitCallback,"ax",%progbits
 625              		.align	1
 626              		.p2align 2,,3
 627              		.weak	USBH_MIDI_TransmitCallback
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	USBH_MIDI_TransmitCallback:
 633              	.LVL53:
 634              	.LFB144:
 357:Core/Src/usbh_MIDI.c **** 
 358:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 359:Core/Src/usbh_MIDI.c **** 
 360:Core/Src/usbh_MIDI.c **** /**
 361:Core/Src/usbh_MIDI.c ****  * @brief  The function is responsible for sending data to the device
 362:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 363:Core/Src/usbh_MIDI.c ****  * @retval None
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 21


 364:Core/Src/usbh_MIDI.c ****  */
 365:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
 366:Core/Src/usbh_MIDI.c **** {
 367:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 368:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 369:Core/Src/usbh_MIDI.c **** 
 370:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->data_tx_state)
 371:Core/Src/usbh_MIDI.c **** 	{
 372:Core/Src/usbh_MIDI.c **** 
 373:Core/Src/usbh_MIDI.c **** 	case MIDI_SEND_DATA:
 374:Core/Src/usbh_MIDI.c **** 		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 375:Core/Src/usbh_MIDI.c **** 		{
 376:Core/Src/usbh_MIDI.c **** 			USBH_BulkSendData (phost,
 377:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 378:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutEpSize,
 379:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutPipe,
 380:Core/Src/usbh_MIDI.c **** 					1);
 381:Core/Src/usbh_MIDI.c **** 		}
 382:Core/Src/usbh_MIDI.c **** 		else
 383:Core/Src/usbh_MIDI.c **** 		{
 384:Core/Src/usbh_MIDI.c **** 			USBH_BulkSendData (phost,
 385:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 386:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->TxDataLength,
 387:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutPipe,
 388:Core/Src/usbh_MIDI.c **** 					1);
 389:Core/Src/usbh_MIDI.c **** 		}
 390:Core/Src/usbh_MIDI.c **** 
 391:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 392:Core/Src/usbh_MIDI.c **** 
 393:Core/Src/usbh_MIDI.c **** 		break;
 394:Core/Src/usbh_MIDI.c **** 
 395:Core/Src/usbh_MIDI.c **** 	case MIDI_SEND_DATA_WAIT:
 396:Core/Src/usbh_MIDI.c **** 
 397:Core/Src/usbh_MIDI.c **** 		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 398:Core/Src/usbh_MIDI.c **** 
 399:Core/Src/usbh_MIDI.c **** 		/*Check the status done for transmission*/
 400:Core/Src/usbh_MIDI.c **** 		if(URB_Status == USBH_URB_DONE )
 401:Core/Src/usbh_MIDI.c **** 		{
 402:Core/Src/usbh_MIDI.c **** 			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 403:Core/Src/usbh_MIDI.c **** 			{
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 405:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 406:Core/Src/usbh_MIDI.c **** 			}
 407:Core/Src/usbh_MIDI.c **** 			else
 408:Core/Src/usbh_MIDI.c **** 			{
 409:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->TxDataLength = 0;
 410:Core/Src/usbh_MIDI.c **** 			}
 411:Core/Src/usbh_MIDI.c **** 
 412:Core/Src/usbh_MIDI.c **** 			if( MIDI_Handle->TxDataLength > 0)
 413:Core/Src/usbh_MIDI.c **** 			{
 414:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 415:Core/Src/usbh_MIDI.c **** 			}
 416:Core/Src/usbh_MIDI.c **** 			else
 417:Core/Src/usbh_MIDI.c **** 			{
 418:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_tx_state = MIDI_IDLE;
 419:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 420:Core/Src/usbh_MIDI.c **** 			}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 22


 421:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 422:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 423:Core/Src/usbh_MIDI.c **** #endif
 424:Core/Src/usbh_MIDI.c **** 		}
 425:Core/Src/usbh_MIDI.c **** 		else if( URB_Status == USBH_URB_NOTREADY )
 426:Core/Src/usbh_MIDI.c **** 		{
 427:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 428:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 429:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 430:Core/Src/usbh_MIDI.c **** #endif
 431:Core/Src/usbh_MIDI.c **** 		}
 432:Core/Src/usbh_MIDI.c **** 		break;
 433:Core/Src/usbh_MIDI.c **** 	default:
 434:Core/Src/usbh_MIDI.c **** 		break;
 435:Core/Src/usbh_MIDI.c **** 	}
 436:Core/Src/usbh_MIDI.c **** }
 437:Core/Src/usbh_MIDI.c **** 
 438:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 439:Core/Src/usbh_MIDI.c **** 
 440:Core/Src/usbh_MIDI.c **** /**
 441:Core/Src/usbh_MIDI.c ****  * @brief  This function responsible for reception of data from the device
 442:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 443:Core/Src/usbh_MIDI.c ****  * @retval None
 444:Core/Src/usbh_MIDI.c ****  */
 445:Core/Src/usbh_MIDI.c **** 
 446:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
 447:Core/Src/usbh_MIDI.c **** {
 448:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 449:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 450:Core/Src/usbh_MIDI.c **** 	uint16_t length;
 451:Core/Src/usbh_MIDI.c **** 
 452:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->data_rx_state)
 453:Core/Src/usbh_MIDI.c **** 	{
 454:Core/Src/usbh_MIDI.c **** 
 455:Core/Src/usbh_MIDI.c **** 	case MIDI_RECEIVE_DATA:
 456:Core/Src/usbh_MIDI.c **** 
 457:Core/Src/usbh_MIDI.c **** 		USBH_BulkReceiveData (phost,
 458:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData,
 459:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEpSize,
 460:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe);
 461:Core/Src/usbh_MIDI.c **** 
 462:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 463:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 464:Core/Src/usbh_MIDI.c **** 
 465:Core/Src/usbh_MIDI.c **** 		break;
 466:Core/Src/usbh_MIDI.c **** 
 467:Core/Src/usbh_MIDI.c **** 	case MIDI_RECEIVE_DATA_WAIT:
 468:Core/Src/usbh_MIDI.c **** 
 469:Core/Src/usbh_MIDI.c **** 		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 470:Core/Src/usbh_MIDI.c **** 
 471:Core/Src/usbh_MIDI.c **** 
 472:Core/Src/usbh_MIDI.c **** 
 473:Core/Src/usbh_MIDI.c **** 		/*Check the status done for reception*/
 474:Core/Src/usbh_MIDI.c **** 		if(URB_Status == USBH_URB_DONE )
 475:Core/Src/usbh_MIDI.c **** 		{
 476:Core/Src/usbh_MIDI.c **** 
 477:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 23


 478:Core/Src/usbh_MIDI.c **** 			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 479:Core/Src/usbh_MIDI.c **** 
 480:Core/Src/usbh_MIDI.c **** 			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 481:Core/Src/usbh_MIDI.c **** 			{
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->RxDataLength -= length ;
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 484:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 485:Core/Src/usbh_MIDI.c **** 			}
 486:Core/Src/usbh_MIDI.c **** 			else
 487:Core/Src/usbh_MIDI.c **** 			{
 488:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_IDLE;
 489:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 490:Core/Src/usbh_MIDI.c **** 			}
 491:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 492:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 493:Core/Src/usbh_MIDI.c **** #endif
 494:Core/Src/usbh_MIDI.c **** 		}
 495:Core/Src/usbh_MIDI.c **** 		break;
 496:Core/Src/usbh_MIDI.c **** 
 497:Core/Src/usbh_MIDI.c **** 	default:
 498:Core/Src/usbh_MIDI.c **** 		break;
 499:Core/Src/usbh_MIDI.c **** 	}
 500:Core/Src/usbh_MIDI.c **** }
 501:Core/Src/usbh_MIDI.c **** 
 502:Core/Src/usbh_MIDI.c **** 
 503:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 504:Core/Src/usbh_MIDI.c **** 
 505:Core/Src/usbh_MIDI.c **** /**
 506:Core/Src/usbh_MIDI.c ****  * @brief  The function informs user that data have been transmitted.
 507:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 508:Core/Src/usbh_MIDI.c ****  * @retval None
 509:Core/Src/usbh_MIDI.c ****  */
 510:Core/Src/usbh_MIDI.c **** __weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
 511:Core/Src/usbh_MIDI.c **** {
 635              		.loc 1 511 1 is_stmt 1 view -0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 512:Core/Src/usbh_MIDI.c **** 
 513:Core/Src/usbh_MIDI.c **** }
 640              		.loc 1 513 1 view .LVU197
 641 0000 7047     		bx	lr
 642              		.cfi_endproc
 643              	.LFE144:
 645 0002 00BF     		.section	.text.USBH_MIDI_ReceiveCallback,"ax",%progbits
 646              		.align	1
 647              		.p2align 2,,3
 648              		.weak	USBH_MIDI_ReceiveCallback
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	USBH_MIDI_ReceiveCallback:
 654              	.LFB148:
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 24


 658              		@ link register save eliminated.
 659 0000 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE148:
 663 0002 00BF     		.section	.text.USBH_MIDI_Process,"ax",%progbits
 664              		.align	1
 665              		.p2align 2,,3
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	USBH_MIDI_Process:
 671              	.LVL54:
 672              	.LFB137:
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 673              		.loc 1 237 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 677              		.loc 1 238 2 view .LVU199
 239:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 678              		.loc 1 239 2 view .LVU200
 240:Core/Src/usbh_MIDI.c **** 
 679              		.loc 1 240 2 view .LVU201
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 680              		.loc 1 237 1 is_stmt 0 view .LVU202
 681 0000 70B5     		push	{r4, r5, r6, lr}
 682              		.cfi_def_cfa_offset 16
 683              		.cfi_offset 4, -16
 684              		.cfi_offset 5, -12
 685              		.cfi_offset 6, -8
 686              		.cfi_offset 14, -4
 240:Core/Src/usbh_MIDI.c **** 
 687              		.loc 1 240 22 view .LVU203
 688 0002 D0F8C835 		ldr	r3, [r0, #1480]
 689 0006 DE69     		ldr	r6, [r3, #28]
 690              	.LVL55:
 242:Core/Src/usbh_MIDI.c **** 	{
 691              		.loc 1 242 2 is_stmt 1 view .LVU204
 242:Core/Src/usbh_MIDI.c **** 	{
 692              		.loc 1 242 20 is_stmt 0 view .LVU205
 693 0008 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 242:Core/Src/usbh_MIDI.c **** 	{
 694              		.loc 1 242 2 view .LVU206
 695 000a 012C     		cmp	r4, #1
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 696              		.loc 1 237 1 view .LVU207
 697 000c 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 24
 242:Core/Src/usbh_MIDI.c **** 	{
 699              		.loc 1 242 2 view .LVU208
 700 000e 06D0     		beq	.L53
 701 0010 022C     		cmp	r4, #2
 702 0012 34D0     		beq	.L54
 703 0014 04B1     		cbz	r4, .L55
 704              	.LVL56:
 705              	.L76:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 25


 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 706              		.loc 1 238 21 view .LVU209
 707 0016 0124     		movs	r4, #1
 708              	.L55:
 709              	.LVL57:
 270:Core/Src/usbh_MIDI.c **** }
 710              		.loc 1 270 2 is_stmt 1 view .LVU210
 271:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 711              		.loc 1 271 1 is_stmt 0 view .LVU211
 712 0018 2046     		mov	r0, r4
 713 001a 02B0     		add	sp, sp, #8
 714              		.cfi_remember_state
 715              		.cfi_def_cfa_offset 16
 716              		@ sp needed
 717 001c 70BD     		pop	{r4, r5, r6, pc}
 718              	.LVL58:
 719              	.L53:
 720              		.cfi_restore_state
 721              	.LBB8:
 722              	.LBB9:
 723              	.LBB10:
 724              	.LBB11:
 370:Core/Src/usbh_MIDI.c **** 	{
 725              		.loc 1 370 20 view .LVU212
 726 001e 337E     		ldrb	r3, [r6, #24]	@ zero_extendqisi2
 370:Core/Src/usbh_MIDI.c **** 	{
 727              		.loc 1 370 2 view .LVU213
 728 0020 012B     		cmp	r3, #1
 729 0022 0546     		mov	r5, r0
 730              	.LVL59:
 370:Core/Src/usbh_MIDI.c **** 	{
 731              		.loc 1 370 2 view .LVU214
 732              	.LBE11:
 733              	.LBE10:
 734              	.LBE9:
 735              	.LBI8:
 236:Core/Src/usbh_MIDI.c **** {
 736              		.loc 1 236 27 is_stmt 1 view .LVU215
 737              	.LBB40:
 251:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessReception(phost);
 738              		.loc 1 251 3 view .LVU216
 739              	.LBB18:
 740              	.LBI10:
 365:Core/Src/usbh_MIDI.c **** {
 741              		.loc 1 365 13 view .LVU217
 742              	.LBB12:
 367:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 743              		.loc 1 367 2 view .LVU218
 368:Core/Src/usbh_MIDI.c **** 
 744              		.loc 1 368 2 view .LVU219
 370:Core/Src/usbh_MIDI.c **** 	{
 745              		.loc 1 370 2 view .LVU220
 746 0024 3BD0     		beq	.L56
 747              	.LVL60:
 370:Core/Src/usbh_MIDI.c **** 	{
 748              		.loc 1 370 2 is_stmt 0 view .LVU221
 749 0026 022B     		cmp	r3, #2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 26


 750 0028 0AD1     		bne	.L58
 397:Core/Src/usbh_MIDI.c **** 
 751              		.loc 1 397 3 is_stmt 1 view .LVU222
 397:Core/Src/usbh_MIDI.c **** 
 752              		.loc 1 397 16 is_stmt 0 view .LVU223
 753 002a B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 754 002c FFF7FEFF 		bl	USBH_LL_GetURBState
 755              	.LVL61:
 400:Core/Src/usbh_MIDI.c **** 		{
 756              		.loc 1 400 3 is_stmt 1 view .LVU224
 400:Core/Src/usbh_MIDI.c **** 		{
 757              		.loc 1 400 5 is_stmt 0 view .LVU225
 758 0030 0128     		cmp	r0, #1
 759 0032 44D0     		beq	.L77
 425:Core/Src/usbh_MIDI.c **** 		{
 760              		.loc 1 425 8 is_stmt 1 view .LVU226
 425:Core/Src/usbh_MIDI.c **** 		{
 761              		.loc 1 425 10 is_stmt 0 view .LVU227
 762 0034 0228     		cmp	r0, #2
 427:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 763              		.loc 1 427 4 is_stmt 1 view .LVU228
 427:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 764              		.loc 1 427 31 is_stmt 0 view .LVU229
 765 0036 08BF     		it	eq
 766 0038 3476     		strbeq	r4, [r6, #24]
 767              	.LBE12:
 768              	.LBE18:
 769              	.LBB19:
 770              	.LBB20:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 771              		.loc 1 448 22 view .LVU230
 772 003a D5F8C835 		ldr	r3, [r5, #1480]
 773 003e DE69     		ldr	r6, [r3, #28]
 774              	.LVL62:
 775              	.L58:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 776              		.loc 1 448 22 view .LVU231
 777              	.LBE20:
 778              	.LBE19:
 252:Core/Src/usbh_MIDI.c **** 		break;
 779              		.loc 1 252 3 is_stmt 1 view .LVU232
 780              	.LBB28:
 781              	.LBI19:
 446:Core/Src/usbh_MIDI.c **** {
 782              		.loc 1 446 13 view .LVU233
 783              	.LBB21:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 784              		.loc 1 448 2 view .LVU234
 449:Core/Src/usbh_MIDI.c **** 	uint16_t length;
 785              		.loc 1 449 2 view .LVU235
 450:Core/Src/usbh_MIDI.c **** 
 786              		.loc 1 450 2 view .LVU236
 452:Core/Src/usbh_MIDI.c **** 	{
 787              		.loc 1 452 2 view .LVU237
 452:Core/Src/usbh_MIDI.c **** 	{
 788              		.loc 1 452 20 is_stmt 0 view .LVU238
 789 0040 737E     		ldrb	r3, [r6, #25]	@ zero_extendqisi2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 27


 452:Core/Src/usbh_MIDI.c **** 	{
 790              		.loc 1 452 2 view .LVU239
 791 0042 032B     		cmp	r3, #3
 792 0044 22D0     		beq	.L64
 793 0046 042B     		cmp	r3, #4
 794 0048 E5D1     		bne	.L76
 469:Core/Src/usbh_MIDI.c **** 
 795              		.loc 1 469 3 is_stmt 1 view .LVU240
 469:Core/Src/usbh_MIDI.c **** 
 796              		.loc 1 469 16 is_stmt 0 view .LVU241
 797 004a 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 798 004c 2846     		mov	r0, r5
 799 004e FFF7FEFF 		bl	USBH_LL_GetURBState
 800              	.LVL63:
 474:Core/Src/usbh_MIDI.c **** 		{
 801              		.loc 1 474 5 view .LVU242
 802 0052 0128     		cmp	r0, #1
 469:Core/Src/usbh_MIDI.c **** 
 803              		.loc 1 469 16 view .LVU243
 804 0054 0446     		mov	r4, r0
 805              	.LVL64:
 474:Core/Src/usbh_MIDI.c **** 		{
 806              		.loc 1 474 3 is_stmt 1 view .LVU244
 474:Core/Src/usbh_MIDI.c **** 		{
 807              		.loc 1 474 5 is_stmt 0 view .LVU245
 808 0056 DED1     		bne	.L76
 478:Core/Src/usbh_MIDI.c **** 
 809              		.loc 1 478 4 is_stmt 1 view .LVU246
 478:Core/Src/usbh_MIDI.c **** 
 810              		.loc 1 478 13 is_stmt 0 view .LVU247
 811 0058 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 812 005a 2846     		mov	r0, r5
 813              	.LVL65:
 478:Core/Src/usbh_MIDI.c **** 
 814              		.loc 1 478 13 view .LVU248
 815 005c FFF7FEFF 		bl	USBH_LL_GetLastXferSize
 816              	.LVL66:
 480:Core/Src/usbh_MIDI.c **** 			{
 817              		.loc 1 480 4 is_stmt 1 view .LVU249
 480:Core/Src/usbh_MIDI.c **** 			{
 818              		.loc 1 480 20 is_stmt 0 view .LVU250
 819 0060 F38A     		ldrh	r3, [r6, #22]
 820 0062 82B2     		uxth	r2, r0
 480:Core/Src/usbh_MIDI.c **** 			{
 821              		.loc 1 480 6 view .LVU251
 822 0064 9342     		cmp	r3, r2
 823 0066 42DD     		ble	.L68
 480:Core/Src/usbh_MIDI.c **** 			{
 824              		.loc 1 480 50 view .LVU252
 825 0068 3189     		ldrh	r1, [r6, #8]
 826 006a 9142     		cmp	r1, r2
 827 006c 3FD2     		bcs	.L68
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 828              		.loc 1 482 5 is_stmt 1 view .LVU253
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 829              		.loc 1 483 26 is_stmt 0 view .LVU254
 830 006e 3169     		ldr	r1, [r6, #16]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 28


 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 831              		.loc 1 482 31 view .LVU255
 832 0070 9B1A     		subs	r3, r3, r2
 833 0072 F382     		strh	r3, [r6, #22]	@ movhi
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 834              		.loc 1 483 5 is_stmt 1 view .LVU256
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 835              		.loc 1 483 26 is_stmt 0 view .LVU257
 836 0074 1144     		add	r1, r1, r2
 484:Core/Src/usbh_MIDI.c **** 			}
 837              		.loc 1 484 32 view .LVU258
 838 0076 0323     		movs	r3, #3
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 839              		.loc 1 483 26 view .LVU259
 840 0078 3161     		str	r1, [r6, #16]
 484:Core/Src/usbh_MIDI.c **** 			}
 841              		.loc 1 484 5 is_stmt 1 view .LVU260
 484:Core/Src/usbh_MIDI.c **** 			}
 842              		.loc 1 484 32 is_stmt 0 view .LVU261
 843 007a 7376     		strb	r3, [r6, #25]
 844 007c CCE7     		b	.L55
 845              	.LVL67:
 846              	.L54:
 484:Core/Src/usbh_MIDI.c **** 			}
 847              		.loc 1 484 32 view .LVU262
 848              	.LBE21:
 849              	.LBE28:
 850              	.LBE40:
 851              	.LBE8:
 256:Core/Src/usbh_MIDI.c **** 
 852              		.loc 1 256 3 is_stmt 1 view .LVU263
 256:Core/Src/usbh_MIDI.c **** 
 853              		.loc 1 256 16 is_stmt 0 view .LVU264
 854 007e 0021     		movs	r1, #0
 855 0080 FFF7FEFF 		bl	USBH_ClrFeature
 856              	.LVL68:
 258:Core/Src/usbh_MIDI.c **** 		{
 857              		.loc 1 258 3 is_stmt 1 view .LVU265
 258:Core/Src/usbh_MIDI.c **** 		{
 858              		.loc 1 258 5 is_stmt 0 view .LVU266
 859 0084 0028     		cmp	r0, #0
 860 0086 C6D1     		bne	.L76
 261:Core/Src/usbh_MIDI.c **** 		}
 861              		.loc 1 261 4 is_stmt 1 view .LVU267
 261:Core/Src/usbh_MIDI.c **** 		}
 862              		.loc 1 261 23 is_stmt 0 view .LVU268
 863 0088 3070     		strb	r0, [r6]
 864 008a C4E7     		b	.L76
 865              	.LVL69:
 866              	.L64:
 867              	.LBB42:
 868              	.LBB41:
 869              	.LBB29:
 870              	.LBB22:
 457:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData,
 871              		.loc 1 457 3 is_stmt 1 view .LVU269
 872 008c 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 29


 873 008e 3289     		ldrh	r2, [r6, #8]
 874 0090 3169     		ldr	r1, [r6, #16]
 875 0092 2846     		mov	r0, r5
 876 0094 FFF7FEFF 		bl	USBH_BulkReceiveData
 877              	.LVL70:
 462:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 878              		.loc 1 462 3 view .LVU270
 462:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 879              		.loc 1 462 30 is_stmt 0 view .LVU271
 880 0098 0423     		movs	r3, #4
 881 009a 7376     		strb	r3, [r6, #25]
 465:Core/Src/usbh_MIDI.c **** 
 882              		.loc 1 465 3 is_stmt 1 view .LVU272
 883 009c BCE7     		b	.L55
 884              	.LVL71:
 885              	.L56:
 465:Core/Src/usbh_MIDI.c **** 
 886              		.loc 1 465 3 is_stmt 0 view .LVU273
 887              	.LBE22:
 888              	.LBE29:
 889              	.LBB30:
 890              	.LBB13:
 374:Core/Src/usbh_MIDI.c **** 		{
 891              		.loc 1 374 3 is_stmt 1 view .LVU274
 374:Core/Src/usbh_MIDI.c **** 		{
 892              		.loc 1 374 17 is_stmt 0 view .LVU275
 893 009e B38A     		ldrh	r3, [r6, #20]
 374:Core/Src/usbh_MIDI.c **** 		{
 894              		.loc 1 374 45 view .LVU276
 895 00a0 F288     		ldrh	r2, [r6, #6]
 384:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 896              		.loc 1 384 4 view .LVU277
 897 00a2 F168     		ldr	r1, [r6, #12]
 374:Core/Src/usbh_MIDI.c **** 		{
 898              		.loc 1 374 5 view .LVU278
 899 00a4 9342     		cmp	r3, r2
 376:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 900              		.loc 1 376 4 is_stmt 1 view .LVU279
 384:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 901              		.loc 1 384 4 view .LVU280
 902 00a6 98BF     		it	ls
 903 00a8 1A46     		movls	r2, r3
 904 00aa B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 905 00ac 0094     		str	r4, [sp]
 906 00ae FFF7FEFF 		bl	USBH_BulkSendData
 907              	.LVL72:
 391:Core/Src/usbh_MIDI.c **** 
 908              		.loc 1 391 3 view .LVU281
 391:Core/Src/usbh_MIDI.c **** 
 909              		.loc 1 391 30 is_stmt 0 view .LVU282
 910 00b2 0223     		movs	r3, #2
 911 00b4 3376     		strb	r3, [r6, #24]
 393:Core/Src/usbh_MIDI.c **** 
 912              		.loc 1 393 3 is_stmt 1 view .LVU283
 913              	.LBE13:
 914              	.LBE30:
 915              	.LBB31:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 30


 916              	.LBB23:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 917              		.loc 1 448 22 is_stmt 0 view .LVU284
 918 00b6 D5F8C835 		ldr	r3, [r5, #1480]
 919 00ba DE69     		ldr	r6, [r3, #28]
 920              	.LVL73:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 921              		.loc 1 448 22 view .LVU285
 922              	.LBE23:
 923              	.LBE31:
 924              	.LBB32:
 925              	.LBB14:
 393:Core/Src/usbh_MIDI.c **** 
 926              		.loc 1 393 3 view .LVU286
 927 00bc C0E7     		b	.L58
 928              	.LVL74:
 929              	.L77:
 402:Core/Src/usbh_MIDI.c **** 			{
 930              		.loc 1 402 4 is_stmt 1 view .LVU287
 402:Core/Src/usbh_MIDI.c **** 			{
 931              		.loc 1 402 18 is_stmt 0 view .LVU288
 932 00be B38A     		ldrh	r3, [r6, #20]
 402:Core/Src/usbh_MIDI.c **** 			{
 933              		.loc 1 402 46 view .LVU289
 934 00c0 F288     		ldrh	r2, [r6, #6]
 402:Core/Src/usbh_MIDI.c **** 			{
 935              		.loc 1 402 6 view .LVU290
 936 00c2 9342     		cmp	r3, r2
 937 00c4 09D8     		bhi	.L78
 409:Core/Src/usbh_MIDI.c **** 			}
 938              		.loc 1 409 5 is_stmt 1 view .LVU291
 409:Core/Src/usbh_MIDI.c **** 			}
 939              		.loc 1 409 31 is_stmt 0 view .LVU292
 940 00c6 0023     		movs	r3, #0
 941 00c8 B382     		strh	r3, [r6, #20]	@ movhi
 412:Core/Src/usbh_MIDI.c **** 			{
 942              		.loc 1 412 4 is_stmt 1 view .LVU293
 418:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 943              		.loc 1 418 5 view .LVU294
 418:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 944              		.loc 1 418 32 is_stmt 0 view .LVU295
 945 00ca 3376     		strb	r3, [r6, #24]
 419:Core/Src/usbh_MIDI.c **** 			}
 946              		.loc 1 419 5 is_stmt 1 view .LVU296
 947 00cc 2846     		mov	r0, r5
 948              	.LVL75:
 419:Core/Src/usbh_MIDI.c **** 			}
 949              		.loc 1 419 5 is_stmt 0 view .LVU297
 950 00ce FFF7FEFF 		bl	USBH_MIDI_TransmitCallback
 951              	.LVL76:
 952              	.LBE14:
 953              	.LBE32:
 954              	.LBB33:
 955              	.LBB24:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 956              		.loc 1 448 22 view .LVU298
 957 00d2 D5F8C835 		ldr	r3, [r5, #1480]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 31


 958 00d6 DE69     		ldr	r6, [r3, #28]
 959              	.LVL77:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 960              		.loc 1 448 22 view .LVU299
 961 00d8 B2E7     		b	.L58
 962              	.LVL78:
 963              	.L78:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 964              		.loc 1 448 22 view .LVU300
 965              	.LBE24:
 966              	.LBE33:
 967              	.LBB34:
 968              	.LBB15:
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 969              		.loc 1 404 5 is_stmt 1 view .LVU301
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 970              		.loc 1 404 31 is_stmt 0 view .LVU302
 971 00da 9B1A     		subs	r3, r3, r2
 972 00dc B382     		strh	r3, [r6, #20]	@ movhi
 405:Core/Src/usbh_MIDI.c **** 			}
 973              		.loc 1 405 5 is_stmt 1 view .LVU303
 405:Core/Src/usbh_MIDI.c **** 			}
 974              		.loc 1 405 26 is_stmt 0 view .LVU304
 975 00de F368     		ldr	r3, [r6, #12]
 414:Core/Src/usbh_MIDI.c **** 			}
 976              		.loc 1 414 32 view .LVU305
 977 00e0 3476     		strb	r4, [r6, #24]
 405:Core/Src/usbh_MIDI.c **** 			}
 978              		.loc 1 405 26 view .LVU306
 979 00e2 1344     		add	r3, r3, r2
 980              	.LBE15:
 981              	.LBE34:
 982              	.LBB35:
 983              	.LBB25:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 984              		.loc 1 448 22 view .LVU307
 985 00e4 D5F8C825 		ldr	r2, [r5, #1480]
 986              	.LBE25:
 987              	.LBE35:
 988              	.LBB36:
 989              	.LBB16:
 405:Core/Src/usbh_MIDI.c **** 			}
 990              		.loc 1 405 26 view .LVU308
 991 00e8 F360     		str	r3, [r6, #12]
 412:Core/Src/usbh_MIDI.c **** 			{
 992              		.loc 1 412 4 is_stmt 1 view .LVU309
 414:Core/Src/usbh_MIDI.c **** 			}
 993              		.loc 1 414 5 view .LVU310
 994              	.LBE16:
 995              	.LBE36:
 996              	.LBB37:
 997              	.LBB26:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 998              		.loc 1 448 22 is_stmt 0 view .LVU311
 999 00ea D669     		ldr	r6, [r2, #28]
 1000              	.LVL79:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 32


 1001              		.loc 1 448 22 view .LVU312
 1002              	.LBE26:
 1003              	.LBE37:
 1004              	.LBB38:
 1005              	.LBB17:
 1006 00ec A8E7     		b	.L58
 1007              	.LVL80:
 1008              	.L68:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 1009              		.loc 1 448 22 view .LVU313
 1010              	.LBE17:
 1011              	.LBE38:
 1012              	.LBB39:
 1013              	.LBB27:
 488:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 1014              		.loc 1 488 5 is_stmt 1 view .LVU314
 488:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 1015              		.loc 1 488 32 is_stmt 0 view .LVU315
 1016 00ee 0023     		movs	r3, #0
 1017 00f0 7376     		strb	r3, [r6, #25]
 489:Core/Src/usbh_MIDI.c **** 			}
 1018              		.loc 1 489 5 is_stmt 1 view .LVU316
 1019 00f2 2846     		mov	r0, r5
 1020              	.LVL81:
 489:Core/Src/usbh_MIDI.c **** 			}
 1021              		.loc 1 489 5 is_stmt 0 view .LVU317
 1022 00f4 FFF7FEFF 		bl	USBH_MIDI_ReceiveCallback
 1023              	.LVL82:
 489:Core/Src/usbh_MIDI.c **** 			}
 1024              		.loc 1 489 5 view .LVU318
 1025 00f8 8EE7     		b	.L55
 1026              	.LBE27:
 1027              	.LBE39:
 1028              	.LBE41:
 1029              	.LBE42:
 1030              		.cfi_endproc
 1031              	.LFE137:
 1033              		.global	MIDI_Class
 1034 00fa 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 1035              		.align	2
 1036              	.LC0:
 1037 0000 4D494449 		.ascii	"MIDI\000"
 1037      00
 1038              		.section	.data.MIDI_Class,"aw"
 1039              		.align	2
 1042              	MIDI_Class:
 1043 0000 00000000 		.word	.LC0
 1044 0004 01       		.byte	1
 1045 0005 000000   		.space	3
 1046 0008 00000000 		.word	USBH_MIDI_InterfaceInit
 1047 000c 00000000 		.word	USBH_MIDI_InterfaceDeInit
 1048 0010 00000000 		.word	USBH_MIDI_ClassRequest
 1049 0014 00000000 		.word	USBH_MIDI_Process
 1050 0018 00000000 		.word	USBH_MIDI_SOFProcess
 1051 001c 00000000 		.word	0
 1052              		.text
 1053              	.Letext0:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 33


 1054              		.file 2 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 1055              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 1056              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 1057              		.file 5 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 1058              		.file 6 "Core/Src/../Inc/usbh_MIDI.h"
 1059              		.file 7 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_core.h"
 1060              		.file 8 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_pipes.h"
 1061              		.file 9 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 1062              		.file 10 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ioreq.h"
 1063              		.file 11 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbh_MIDI.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:20     .text.USBH_MIDI_ClassRequest:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:26     .text.USBH_MIDI_ClassRequest:0000000000000000 USBH_MIDI_ClassRequest
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:53     .text.USBH_MIDI_SOFProcess:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:59     .text.USBH_MIDI_SOFProcess:0000000000000000 USBH_MIDI_SOFProcess
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:77     .text.USBH_MIDI_InterfaceDeInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:83     .text.USBH_MIDI_InterfaceDeInit:0000000000000000 USBH_MIDI_InterfaceDeInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:179    .text.USBH_MIDI_InterfaceInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:185    .text.USBH_MIDI_InterfaceInit:0000000000000000 USBH_MIDI_InterfaceInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:393    .text.USBH_MIDI_Stop:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:400    .text.USBH_MIDI_Stop:0000000000000000 USBH_MIDI_Stop
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:458    .text.USBH_MIDI_GetLastReceivedDataSize:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:465    .text.USBH_MIDI_GetLastReceivedDataSize:0000000000000000 USBH_MIDI_GetLastReceivedDataSize
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:507    .text.USBH_MIDI_Transmit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:514    .text.USBH_MIDI_Transmit:0000000000000000 USBH_MIDI_Transmit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:565    .text.USBH_MIDI_Receive:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:572    .text.USBH_MIDI_Receive:0000000000000000 USBH_MIDI_Receive
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:625    .text.USBH_MIDI_TransmitCallback:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:632    .text.USBH_MIDI_TransmitCallback:0000000000000000 USBH_MIDI_TransmitCallback
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:646    .text.USBH_MIDI_ReceiveCallback:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:653    .text.USBH_MIDI_ReceiveCallback:0000000000000000 USBH_MIDI_ReceiveCallback
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:664    .text.USBH_MIDI_Process:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:670    .text.USBH_MIDI_Process:0000000000000000 USBH_MIDI_Process
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:1042   .data.MIDI_Class:0000000000000000 MIDI_Class
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:1035   .rodata.str1.4:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEO2XGO.s:1039   .data.MIDI_Class:0000000000000000 $d

UNDEFINED SYMBOLS
free
USBH_ClosePipe
USBH_FreePipe
USBH_FindInterface
USBH_SelectInterface
malloc
USBH_AllocPipe
USBH_OpenPipe
USBH_LL_SetToggle
USBH_LL_GetLastXferSize
USBH_LL_GetURBState
USBH_ClrFeature
USBH_BulkReceiveData
USBH_BulkSendData
