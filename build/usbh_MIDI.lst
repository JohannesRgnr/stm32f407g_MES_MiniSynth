ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"usbh_MIDI.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/usbh_MIDI.c"
  20              		.section	.text.USBH_MIDI_ClassRequest,"ax",%progbits
  21              		.align	1
  22              		.p2align 2,,3
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	USBH_MIDI_ClassRequest:
  28              	.LVL0:
  29              	.LFB240:
   1:Core/Src/usbh_MIDI.c **** /**
   2:Core/Src/usbh_MIDI.c ****  ******************************************************************************
   3:Core/Src/usbh_MIDI.c ****  * @file    usbh_MIDI.c
   4:Core/Src/usbh_MIDI.c ****  * @author	Xavier Halgand
   5:Core/Src/usbh_MIDI.c ****  * @version
   6:Core/Src/usbh_MIDI.c ****  * @date
   7:Core/Src/usbh_MIDI.c ****  * @brief   This file is the MIDI Layer Handlers for USB Host MIDI streaming class.
   8:Core/Src/usbh_MIDI.c ****  *
   9:Core/Src/usbh_MIDI.c ****  *
  10:Core/Src/usbh_MIDI.c ****  ******************************************************************************
  11:Core/Src/usbh_MIDI.c ****  */
  12:Core/Src/usbh_MIDI.c **** 
  13:Core/Src/usbh_MIDI.c **** /*
  14:Core/Src/usbh_MIDI.c ****  * This program is free software; you can redistribute it and/or modify
  15:Core/Src/usbh_MIDI.c ****  * it under the terms of the GNU General Public License as published by
  16:Core/Src/usbh_MIDI.c ****  * the Free Software Foundation; either version 2 of the License, or
  17:Core/Src/usbh_MIDI.c ****  * (at your option) any later version.
  18:Core/Src/usbh_MIDI.c ****  *
  19:Core/Src/usbh_MIDI.c ****  * This program is distributed in the hope that it will be useful,
  20:Core/Src/usbh_MIDI.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  21:Core/Src/usbh_MIDI.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  22:Core/Src/usbh_MIDI.c ****  * GNU General Public License for more details.
  23:Core/Src/usbh_MIDI.c ****  *
  24:Core/Src/usbh_MIDI.c ****  * You should have received a copy of the GNU General Public License
  25:Core/Src/usbh_MIDI.c ****  * along with this program; if not, write to the Free Software
  26:Core/Src/usbh_MIDI.c ****  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  27:Core/Src/usbh_MIDI.c ****  *
  28:Core/Src/usbh_MIDI.c ****  */
  29:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 2


  30:Core/Src/usbh_MIDI.c **** /* Includes ------------------------------------------------------------------*/
  31:Core/Src/usbh_MIDI.c **** #include "../Inc/usbh_MIDI.h"
  32:Core/Src/usbh_MIDI.c **** 
  33:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
  34:Core/Src/usbh_MIDI.c **** 
  35:Core/Src/usbh_MIDI.c **** /** @defgroup USBH_MIDI_CORE_Private_FunctionPrototypes
  36:Core/Src/usbh_MIDI.c ****  * @{
  37:Core/Src/usbh_MIDI.c ****  */
  38:Core/Src/usbh_MIDI.c **** 
  39:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceInit  (USBH_HandleTypeDef *phost);
  40:Core/Src/usbh_MIDI.c **** 
  41:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit  (USBH_HandleTypeDef *phost);
  42:Core/Src/usbh_MIDI.c **** 
  43:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_Process(USBH_HandleTypeDef *phost);
  44:Core/Src/usbh_MIDI.c **** 
  45:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_SOFProcess(USBH_HandleTypeDef *phost);
  46:Core/Src/usbh_MIDI.c **** 
  47:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost);
  48:Core/Src/usbh_MIDI.c **** 
  49:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost);
  50:Core/Src/usbh_MIDI.c **** 
  51:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessReception(USBH_HandleTypeDef *phost);
  52:Core/Src/usbh_MIDI.c **** 
  53:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------*/
  54:Core/Src/usbh_MIDI.c **** 
  55:Core/Src/usbh_MIDI.c **** USBH_ClassTypeDef  MIDI_Class =
  56:Core/Src/usbh_MIDI.c **** {
  57:Core/Src/usbh_MIDI.c **** 		"MIDI",
  58:Core/Src/usbh_MIDI.c **** 		USB_AUDIO_CLASS,
  59:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_InterfaceInit,
  60:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_InterfaceDeInit,
  61:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_ClassRequest,
  62:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_Process, // background process called in HOST_CLASS state (core state machine)
  63:Core/Src/usbh_MIDI.c **** 		USBH_MIDI_SOFProcess,
  64:Core/Src/usbh_MIDI.c **** 		NULL // MIDI handle structure
  65:Core/Src/usbh_MIDI.c **** };
  66:Core/Src/usbh_MIDI.c **** 
  67:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
  68:Core/Src/usbh_MIDI.c **** 
  69:Core/Src/usbh_MIDI.c **** /**
  70:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_InterfaceInit
  71:Core/Src/usbh_MIDI.c ****  *         The function init the MIDI class.
  72:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
  73:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
  74:Core/Src/usbh_MIDI.c ****  */
  75:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
  76:Core/Src/usbh_MIDI.c **** {	
  77:Core/Src/usbh_MIDI.c **** 
  78:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_FAIL ;
  79:Core/Src/usbh_MIDI.c **** 	uint8_t interface = 0;
  80:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle;
  81:Core/Src/usbh_MIDI.c **** 
  82:Core/Src/usbh_MIDI.c **** 	//USB_MIDI_ChangeConnectionState(0);
  83:Core/Src/usbh_MIDI.c **** 
  84:Core/Src/usbh_MIDI.c **** 	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
  85:Core/Src/usbh_MIDI.c **** 
  86:Core/Src/usbh_MIDI.c **** 	if(interface == 0xFF) /* No Valid Interface */
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 3


  87:Core/Src/usbh_MIDI.c **** 	{
  88:Core/Src/usbh_MIDI.c **** 		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
  89:Core/Src/usbh_MIDI.c **** 		status = USBH_FAIL;
  90:Core/Src/usbh_MIDI.c **** 	}
  91:Core/Src/usbh_MIDI.c **** 	else
  92:Core/Src/usbh_MIDI.c **** 	{
  93:Core/Src/usbh_MIDI.c **** 		USBH_SelectInterface (phost, interface);
  94:Core/Src/usbh_MIDI.c **** 
  95:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
  96:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
  97:Core/Src/usbh_MIDI.c **** 
  98:Core/Src/usbh_MIDI.c **** 		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 
  99:Core/Src/usbh_MIDI.c **** 		{
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].
 101:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 102:Core/Src/usbh_MIDI.c **** 		}
 103:Core/Src/usbh_MIDI.c **** 		else
 104:Core/Src/usbh_MIDI.c **** 		{
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0]
 106:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 107:Core/Src/usbh_MIDI.c **** 		}
 108:Core/Src/usbh_MIDI.c **** 
 109:Core/Src/usbh_MIDI.c **** 		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 
 110:Core/Src/usbh_MIDI.c **** 		{
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].
 112:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 113:Core/Src/usbh_MIDI.c **** 		}
 114:Core/Src/usbh_MIDI.c **** 		else
 115:Core/Src/usbh_MIDI.c **** 		{
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1]
 117:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 118:Core/Src/usbh_MIDI.c **** 		}
 119:Core/Src/usbh_MIDI.c **** 
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 121:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 122:Core/Src/usbh_MIDI.c **** 
 123:Core/Src/usbh_MIDI.c **** 
 124:Core/Src/usbh_MIDI.c **** 		/* Open the new channels */
 125:Core/Src/usbh_MIDI.c **** 		USBH_OpenPipe  (phost,
 126:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 127:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutEp,
 128:Core/Src/usbh_MIDI.c **** 				phost->device.address,
 129:Core/Src/usbh_MIDI.c **** 				phost->device.speed,
 130:Core/Src/usbh_MIDI.c **** 				USB_EP_TYPE_BULK,
 131:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutEpSize);
 132:Core/Src/usbh_MIDI.c **** 
 133:Core/Src/usbh_MIDI.c **** 		USBH_OpenPipe  (phost,
 134:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 135:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEp,
 136:Core/Src/usbh_MIDI.c **** 				phost->device.address,
 137:Core/Src/usbh_MIDI.c **** 				phost->device.speed,
 138:Core/Src/usbh_MIDI.c **** 				USB_EP_TYPE_BULK,
 139:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEpSize);
 140:Core/Src/usbh_MIDI.c **** 
 141:Core/Src/usbh_MIDI.c **** 		//USB_MIDI_ChangeConnectionState(1);
 142:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_IDLE_STATE;
 143:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 4


 144:Core/Src/usbh_MIDI.c **** 
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 146:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 147:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 148:Core/Src/usbh_MIDI.c **** 	}
 149:Core/Src/usbh_MIDI.c **** 	return status;
 150:Core/Src/usbh_MIDI.c **** }
 151:Core/Src/usbh_MIDI.c **** 
 152:Core/Src/usbh_MIDI.c **** 
 153:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 154:Core/Src/usbh_MIDI.c **** 
 155:Core/Src/usbh_MIDI.c **** /**
 156:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_InterfaceDeInit
 157:Core/Src/usbh_MIDI.c ****  *         The function DeInit the Pipes used for the MIDI class.
 158:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 159:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 160:Core/Src/usbh_MIDI.c ****  */
 161:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
 162:Core/Src/usbh_MIDI.c **** {
 163:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 164:Core/Src/usbh_MIDI.c **** 
 165:Core/Src/usbh_MIDI.c **** 	if ( MIDI_Handle->OutPipe)
 166:Core/Src/usbh_MIDI.c **** 	{
 167:Core/Src/usbh_MIDI.c **** 		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 168:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 169:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 170:Core/Src/usbh_MIDI.c **** 	}
 171:Core/Src/usbh_MIDI.c **** 
 172:Core/Src/usbh_MIDI.c **** 	if ( MIDI_Handle->InPipe)
 173:Core/Src/usbh_MIDI.c **** 	{
 174:Core/Src/usbh_MIDI.c **** 		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 175:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 176:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 177:Core/Src/usbh_MIDI.c **** 	}
 178:Core/Src/usbh_MIDI.c **** 
 179:Core/Src/usbh_MIDI.c **** 	if(phost->pActiveClass->pData)
 180:Core/Src/usbh_MIDI.c **** 	{
 181:Core/Src/usbh_MIDI.c **** 		USBH_free (phost->pActiveClass->pData);
 182:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = 0;
 183:Core/Src/usbh_MIDI.c **** 	}
 184:Core/Src/usbh_MIDI.c **** 
 185:Core/Src/usbh_MIDI.c **** 	return USBH_OK;
 186:Core/Src/usbh_MIDI.c **** }
 187:Core/Src/usbh_MIDI.c **** 
 188:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 189:Core/Src/usbh_MIDI.c **** 
 190:Core/Src/usbh_MIDI.c **** /**
 191:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_ClassRequest
 192:Core/Src/usbh_MIDI.c ****  *         The function is responsible for handling Standard requests
 193:Core/Src/usbh_MIDI.c ****  *         for MIDI class.
 194:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 195:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 196:Core/Src/usbh_MIDI.c ****  */
 197:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
 198:Core/Src/usbh_MIDI.c **** {   
  30              		.loc 1 198 1 view -0
  31              		.cfi_startproc
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 5


  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Src/usbh_MIDI.c **** 
 200:Core/Src/usbh_MIDI.c **** 	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
  34              		.loc 1 200 2 view .LVU1
 198:Core/Src/usbh_MIDI.c **** 
  35              		.loc 1 198 1 is_stmt 0 view .LVU2
  36 0000 08B5     		push	{r3, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 200 2 view .LVU3
  41 0002 0221     		movs	r1, #2
  42 0004 D0F81836 		ldr	r3, [r0, #1560]
  43 0008 9847     		blx	r3
  44              	.LVL1:
 201:Core/Src/usbh_MIDI.c **** 
 202:Core/Src/usbh_MIDI.c **** 	return USBH_OK;
  45              		.loc 1 202 2 is_stmt 1 view .LVU4
 203:Core/Src/usbh_MIDI.c **** }
  46              		.loc 1 203 1 is_stmt 0 view .LVU5
  47 000a 0020     		movs	r0, #0
  48 000c 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE240:
  52 000e 00BF     		.section	.text.USBH_MIDI_SOFProcess,"ax",%progbits
  53              		.align	1
  54              		.p2align 2,,3
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  59              	USBH_MIDI_SOFProcess:
  60              	.LVL2:
  61              	.LFB243:
 204:Core/Src/usbh_MIDI.c **** 
 205:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 206:Core/Src/usbh_MIDI.c **** 
 207:Core/Src/usbh_MIDI.c **** /**
 208:Core/Src/usbh_MIDI.c ****   * @brief  USBH_MIDI_Stop
 209:Core/Src/usbh_MIDI.c ****   *         Stop current MIDI Transmission
 210:Core/Src/usbh_MIDI.c ****   * @param  phost: Host handle
 211:Core/Src/usbh_MIDI.c ****   * @retval USBH Status
 212:Core/Src/usbh_MIDI.c ****   */
 213:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
 214:Core/Src/usbh_MIDI.c **** {
 215:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 216:Core/Src/usbh_MIDI.c **** 
 217:Core/Src/usbh_MIDI.c ****   if(phost->gState == HOST_CLASS)
 218:Core/Src/usbh_MIDI.c ****   {
 219:Core/Src/usbh_MIDI.c ****     MIDI_Handle->state = MIDI_IDLE_STATE;
 220:Core/Src/usbh_MIDI.c **** 
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 222:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 223:Core/Src/usbh_MIDI.c ****   }
 224:Core/Src/usbh_MIDI.c ****   return USBH_OK;
 225:Core/Src/usbh_MIDI.c **** }
 226:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 6


 227:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 228:Core/Src/usbh_MIDI.c **** 
 229:Core/Src/usbh_MIDI.c **** /**
 230:Core/Src/usbh_MIDI.c ****  * @brief  USBH_MIDI_Process
 231:Core/Src/usbh_MIDI.c ****  *         The function is for managing state machine for MIDI data transfers
 232:Core/Src/usbh_MIDI.c ****  *         (background process)
 233:Core/Src/usbh_MIDI.c ****  * @param  phost: Host handle
 234:Core/Src/usbh_MIDI.c ****  * @retval USBH Status
 235:Core/Src/usbh_MIDI.c ****  */
 236:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
 237:Core/Src/usbh_MIDI.c **** {
 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 239:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 240:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 241:Core/Src/usbh_MIDI.c **** 
 242:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->state)
 243:Core/Src/usbh_MIDI.c **** 	{
 244:Core/Src/usbh_MIDI.c **** 
 245:Core/Src/usbh_MIDI.c **** 	case MIDI_IDLE_STATE:
 246:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 247:Core/Src/usbh_MIDI.c **** 		break;
 248:Core/Src/usbh_MIDI.c **** 
 249:Core/Src/usbh_MIDI.c **** 	case MIDI_TRANSFER_DATA:
 250:Core/Src/usbh_MIDI.c **** 
 251:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessTransmission(phost);
 252:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessReception(phost);
 253:Core/Src/usbh_MIDI.c **** 		break;
 254:Core/Src/usbh_MIDI.c **** 
 255:Core/Src/usbh_MIDI.c **** 	case MIDI_ERROR_STATE:
 256:Core/Src/usbh_MIDI.c **** 		req_status = USBH_ClrFeature(phost, 0x00);
 257:Core/Src/usbh_MIDI.c **** 
 258:Core/Src/usbh_MIDI.c **** 		if(req_status == USBH_OK )
 259:Core/Src/usbh_MIDI.c **** 		{
 260:Core/Src/usbh_MIDI.c **** 			/*Change the state to waiting*/
 261:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->state = MIDI_IDLE_STATE ;
 262:Core/Src/usbh_MIDI.c **** 		}
 263:Core/Src/usbh_MIDI.c **** 		break;
 264:Core/Src/usbh_MIDI.c **** 
 265:Core/Src/usbh_MIDI.c **** 	default:
 266:Core/Src/usbh_MIDI.c **** 		break;
 267:Core/Src/usbh_MIDI.c **** 
 268:Core/Src/usbh_MIDI.c **** 	}
 269:Core/Src/usbh_MIDI.c **** 
 270:Core/Src/usbh_MIDI.c **** 	return status;
 271:Core/Src/usbh_MIDI.c **** }
 272:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 273:Core/Src/usbh_MIDI.c **** 
 274:Core/Src/usbh_MIDI.c **** /**
 275:Core/Src/usbh_MIDI.c ****   * @brief  USBH_MIDI_SOFProcess 
 276:Core/Src/usbh_MIDI.c ****   *         The function is for managing SOF callback 
 277:Core/Src/usbh_MIDI.c ****   * @param  phost: Host handle
 278:Core/Src/usbh_MIDI.c ****   * @retval USBH Status
 279:Core/Src/usbh_MIDI.c ****   */
 280:Core/Src/usbh_MIDI.c **** static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
 281:Core/Src/usbh_MIDI.c **** {
  62              		.loc 1 281 1 is_stmt 1 view -0
  63              		.cfi_startproc
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 7


  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 282:Core/Src/usbh_MIDI.c ****   return USBH_OK;  
  67              		.loc 1 282 3 view .LVU7
 283:Core/Src/usbh_MIDI.c **** }
  68              		.loc 1 283 1 is_stmt 0 view .LVU8
  69 0000 0020     		movs	r0, #0
  70              	.LVL3:
  71              		.loc 1 283 1 view .LVU9
  72 0002 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE243:
  76              		.section	.text.USBH_MIDI_InterfaceDeInit,"ax",%progbits
  77              		.align	1
  78              		.p2align 2,,3
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  83              	USBH_MIDI_InterfaceDeInit:
  84              	.LVL4:
  85              	.LFB239:
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
  86              		.loc 1 162 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Core/Src/usbh_MIDI.c **** 
  90              		.loc 1 163 2 view .LVU11
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
  91              		.loc 1 162 1 is_stmt 0 view .LVU12
  92 0000 38B5     		push	{r3, r4, r5, lr}
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 3, -16
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
 163:Core/Src/usbh_MIDI.c **** 
  98              		.loc 1 163 22 view .LVU13
  99 0002 D0F8C835 		ldr	r3, [r0, #1480]
 100 0006 DD69     		ldr	r5, [r3, #28]
 101              	.LVL5:
 165:Core/Src/usbh_MIDI.c **** 	{
 102              		.loc 1 165 2 is_stmt 1 view .LVU14
 165:Core/Src/usbh_MIDI.c **** 	{
 103              		.loc 1 165 18 is_stmt 0 view .LVU15
 104 0008 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 162:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 105              		.loc 1 162 1 view .LVU16
 106 000a 0446     		mov	r4, r0
 165:Core/Src/usbh_MIDI.c **** 	{
 107              		.loc 1 165 5 view .LVU17
 108 000c 51B9     		cbnz	r1, .L20
 172:Core/Src/usbh_MIDI.c **** 	{
 109              		.loc 1 172 2 is_stmt 1 view .LVU18
 172:Core/Src/usbh_MIDI.c **** 	{
 110              		.loc 1 172 18 is_stmt 0 view .LVU19
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 8


 111 000e 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 172:Core/Src/usbh_MIDI.c **** 	{
 112              		.loc 1 172 5 view .LVU20
 113 0010 91B9     		cbnz	r1, .L9
 114              	.LVL6:
 115              	.L10:
 181:Core/Src/usbh_MIDI.c **** 		phost->pActiveClass->pData = 0;
 116              		.loc 1 181 3 is_stmt 1 view .LVU21
 117 0012 2846     		mov	r0, r5
 118 0014 FFF7FEFF 		bl	free
 119              	.LVL7:
 182:Core/Src/usbh_MIDI.c **** 	}
 120              		.loc 1 182 3 view .LVU22
 182:Core/Src/usbh_MIDI.c **** 	}
 121              		.loc 1 182 30 is_stmt 0 view .LVU23
 122 0018 D4F8C835 		ldr	r3, [r4, #1480]
 123 001c 0022     		movs	r2, #0
 124 001e DA61     		str	r2, [r3, #28]
 185:Core/Src/usbh_MIDI.c **** }
 125              		.loc 1 185 2 is_stmt 1 view .LVU24
 186:Core/Src/usbh_MIDI.c **** 
 126              		.loc 1 186 1 is_stmt 0 view .LVU25
 127 0020 0020     		movs	r0, #0
 128 0022 38BD     		pop	{r3, r4, r5, pc}
 129              	.LVL8:
 130              	.L20:
 167:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 131              		.loc 1 167 3 is_stmt 1 view .LVU26
 132 0024 FFF7FEFF 		bl	USBH_ClosePipe
 133              	.LVL9:
 168:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 134              		.loc 1 168 3 view .LVU27
 135 0028 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 136 002a 2046     		mov	r0, r4
 137 002c FFF7FEFF 		bl	USBH_FreePipe
 138              	.LVL10:
 169:Core/Src/usbh_MIDI.c **** 	}
 139              		.loc 1 169 3 view .LVU28
 172:Core/Src/usbh_MIDI.c **** 	{
 140              		.loc 1 172 18 is_stmt 0 view .LVU29
 141 0030 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 169:Core/Src/usbh_MIDI.c **** 	}
 142              		.loc 1 169 24 view .LVU30
 143 0032 0023     		movs	r3, #0
 144 0034 AB70     		strb	r3, [r5, #2]
 172:Core/Src/usbh_MIDI.c **** 	{
 145              		.loc 1 172 2 is_stmt 1 view .LVU31
 172:Core/Src/usbh_MIDI.c **** 	{
 146              		.loc 1 172 5 is_stmt 0 view .LVU32
 147 0036 41B1     		cbz	r1, .L7
 148              	.L9:
 174:Core/Src/usbh_MIDI.c **** 		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 149              		.loc 1 174 3 is_stmt 1 view .LVU33
 150 0038 2046     		mov	r0, r4
 151 003a FFF7FEFF 		bl	USBH_ClosePipe
 152              	.LVL11:
 175:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 9


 153              		.loc 1 175 3 view .LVU34
 154 003e 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 155 0040 2046     		mov	r0, r4
 156 0042 FFF7FEFF 		bl	USBH_FreePipe
 157              	.LVL12:
 176:Core/Src/usbh_MIDI.c **** 	}
 158              		.loc 1 176 3 view .LVU35
 176:Core/Src/usbh_MIDI.c **** 	}
 159              		.loc 1 176 23 is_stmt 0 view .LVU36
 160 0046 0023     		movs	r3, #0
 161 0048 6B70     		strb	r3, [r5, #1]
 162              	.L7:
 179:Core/Src/usbh_MIDI.c **** 	{
 163              		.loc 1 179 2 is_stmt 1 view .LVU37
 179:Core/Src/usbh_MIDI.c **** 	{
 164              		.loc 1 179 24 is_stmt 0 view .LVU38
 165 004a D4F8C835 		ldr	r3, [r4, #1480]
 166 004e DD69     		ldr	r5, [r3, #28]
 167              	.LVL13:
 179:Core/Src/usbh_MIDI.c **** 	{
 168              		.loc 1 179 4 view .LVU39
 169 0050 002D     		cmp	r5, #0
 170 0052 DED1     		bne	.L10
 186:Core/Src/usbh_MIDI.c **** 
 171              		.loc 1 186 1 view .LVU40
 172 0054 0020     		movs	r0, #0
 173 0056 38BD     		pop	{r3, r4, r5, pc}
 186:Core/Src/usbh_MIDI.c **** 
 174              		.loc 1 186 1 view .LVU41
 175              		.cfi_endproc
 176              	.LFE239:
 178              		.section	.text.USBH_MIDI_InterfaceInit,"ax",%progbits
 179              		.align	1
 180              		.p2align 2,,3
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	USBH_MIDI_InterfaceInit:
 186              	.LVL14:
 187              	.LFB238:
  76:Core/Src/usbh_MIDI.c **** 
 188              		.loc 1 76 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
  78:Core/Src/usbh_MIDI.c **** 	uint8_t interface = 0;
 192              		.loc 1 78 2 view .LVU43
  79:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle;
 193              		.loc 1 79 2 view .LVU44
  80:Core/Src/usbh_MIDI.c **** 
 194              		.loc 1 80 2 view .LVU45
  84:Core/Src/usbh_MIDI.c **** 
 195              		.loc 1 84 2 view .LVU46
  76:Core/Src/usbh_MIDI.c **** 
 196              		.loc 1 76 1 is_stmt 0 view .LVU47
 197 0000 70B5     		push	{r4, r5, r6, lr}
 198              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 10


 199              		.cfi_offset 4, -16
 200              		.cfi_offset 5, -12
 201              		.cfi_offset 6, -8
 202              		.cfi_offset 14, -4
  84:Core/Src/usbh_MIDI.c **** 
 203              		.loc 1 84 14 view .LVU48
 204 0002 FF23     		movs	r3, #255
  76:Core/Src/usbh_MIDI.c **** 
 205              		.loc 1 76 1 view .LVU49
 206 0004 84B0     		sub	sp, sp, #16
 207              		.cfi_def_cfa_offset 32
  84:Core/Src/usbh_MIDI.c **** 
 208              		.loc 1 84 14 view .LVU50
 209 0006 0322     		movs	r2, #3
 210 0008 0121     		movs	r1, #1
  76:Core/Src/usbh_MIDI.c **** 
 211              		.loc 1 76 1 view .LVU51
 212 000a 0546     		mov	r5, r0
  84:Core/Src/usbh_MIDI.c **** 
 213              		.loc 1 84 14 view .LVU52
 214 000c FFF7FEFF 		bl	USBH_FindInterface
 215              	.LVL15:
  86:Core/Src/usbh_MIDI.c **** 	{
 216              		.loc 1 86 2 is_stmt 1 view .LVU53
  86:Core/Src/usbh_MIDI.c **** 	{
 217              		.loc 1 86 4 is_stmt 0 view .LVU54
 218 0010 FF28     		cmp	r0, #255
 219 0012 62D0     		beq	.L27
  93:Core/Src/usbh_MIDI.c **** 
 220              		.loc 1 93 3 is_stmt 1 view .LVU55
 221 0014 0146     		mov	r1, r0
 222 0016 2846     		mov	r0, r5
 223              	.LVL16:
  93:Core/Src/usbh_MIDI.c **** 
 224              		.loc 1 93 3 is_stmt 0 view .LVU56
 225 0018 FFF7FEFF 		bl	USBH_SelectInterface
 226              	.LVL17:
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 227              		.loc 1 95 3 is_stmt 1 view .LVU57
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 228              		.loc 1 95 54 is_stmt 0 view .LVU58
 229 001c 1C20     		movs	r0, #28
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 230              		.loc 1 95 8 view .LVU59
 231 001e D5F8C865 		ldr	r6, [r5, #1480]
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 232              		.loc 1 95 54 view .LVU60
 233 0022 FFF7FEFF 		bl	malloc
 234              	.LVL18:
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 235              		.loc 1 95 30 discriminator 1 view .LVU61
 236 0026 F061     		str	r0, [r6, #28]
  96:Core/Src/usbh_MIDI.c **** 
 237              		.loc 1 96 3 is_stmt 1 view .LVU62
  98:Core/Src/usbh_MIDI.c **** 		{
 238              		.loc 1 98 50 is_stmt 0 view .LVU63
 239 0028 95F82032 		ldrb	r3, [r5, #544]	@ zero_extendqisi2
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 11


  98:Core/Src/usbh_MIDI.c **** 		{
 240              		.loc 1 98 80 view .LVU64
 241 002c 5A22     		movs	r2, #90
 242 002e 02FB0352 		mla	r2, r2, r3, r5
  95:Core/Src/usbh_MIDI.c **** 		MIDI_Handle =  phost->pActiveClass->pData;
 243              		.loc 1 95 54 view .LVU65
 244 0032 0446     		mov	r4, r0
 245              	.LVL19:
  98:Core/Src/usbh_MIDI.c **** 		{
 246              		.loc 1 98 3 is_stmt 1 view .LVU66
  98:Core/Src/usbh_MIDI.c **** 		{
 247              		.loc 1 98 5 is_stmt 0 view .LVU67
 248 0034 92F94A02 		ldrsb	r0, [r2, #586]
 249              	.LVL20:
  98:Core/Src/usbh_MIDI.c **** 		{
 250              		.loc 1 98 80 view .LVU68
 251 0038 92F84A12 		ldrb	r1, [r2, #586]	@ zero_extendqisi2
 101:Core/Src/usbh_MIDI.c **** 		}
 252              		.loc 1 101 27 view .LVU69
 253 003c B2F84C22 		ldrh	r2, [r2, #588]
  98:Core/Src/usbh_MIDI.c **** 		{
 254              		.loc 1 98 5 view .LVU70
 255 0040 0028     		cmp	r0, #0
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 256              		.loc 1 100 4 is_stmt 1 view .LVU71
 101:Core/Src/usbh_MIDI.c **** 		}
 257              		.loc 1 101 27 is_stmt 0 view .LVU72
 258 0042 B4BF     		ite	lt
 259 0044 2281     		strhlt	r2, [r4, #8]	@ movhi
 106:Core/Src/usbh_MIDI.c **** 		}
 260              		.loc 1 106 28 view .LVU73
 261 0046 E280     		strhge	r2, [r4, #6]	@ movhi
 109:Core/Src/usbh_MIDI.c **** 		{
 262              		.loc 1 109 80 view .LVU74
 263 0048 4FF05A02 		mov	r2, #90
 264 004c 02FB0353 		mla	r3, r2, r3, r5
 100:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 265              		.loc 1 100 22 view .LVU75
 266 0050 B4BF     		ite	lt
 267 0052 2171     		strblt	r1, [r4, #4]
 101:Core/Src/usbh_MIDI.c **** 		}
 268              		.loc 1 101 4 is_stmt 1 view .LVU76
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 269              		.loc 1 105 4 view .LVU77
 105:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 270              		.loc 1 105 23 is_stmt 0 view .LVU78
 271 0054 E170     		strbge	r1, [r4, #3]
 106:Core/Src/usbh_MIDI.c **** 		}
 272              		.loc 1 106 4 is_stmt 1 view .LVU79
 109:Core/Src/usbh_MIDI.c **** 		{
 273              		.loc 1 109 3 view .LVU80
 112:Core/Src/usbh_MIDI.c **** 		}
 274              		.loc 1 112 103 is_stmt 0 view .LVU81
 275 0056 B3F85422 		ldrh	r2, [r3, #596]
 109:Core/Src/usbh_MIDI.c **** 		{
 276              		.loc 1 109 80 view .LVU82
 277 005a 93F85212 		ldrb	r1, [r3, #594]	@ zero_extendqisi2
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 12


 109:Core/Src/usbh_MIDI.c **** 		{
 278              		.loc 1 109 5 view .LVU83
 279 005e 93F95232 		ldrsb	r3, [r3, #594]
 280 0062 002B     		cmp	r3, #0
 281 0064 35DB     		blt	.L29
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 282              		.loc 1 116 4 is_stmt 1 view .LVU84
 116:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Des
 283              		.loc 1 116 23 is_stmt 0 view .LVU85
 284 0066 E170     		strb	r1, [r4, #3]
 117:Core/Src/usbh_MIDI.c **** 		}
 285              		.loc 1 117 4 is_stmt 1 view .LVU86
 117:Core/Src/usbh_MIDI.c **** 		}
 286              		.loc 1 117 28 is_stmt 0 view .LVU87
 287 0068 E280     		strh	r2, [r4, #6]	@ movhi
 288              	.L26:
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 289              		.loc 1 120 3 is_stmt 1 view .LVU88
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 290              		.loc 1 120 26 is_stmt 0 view .LVU89
 291 006a 2846     		mov	r0, r5
 292 006c FFF7FEFF 		bl	USBH_AllocPipe
 293              	.LVL21:
 294 0070 0346     		mov	r3, r0
 121:Core/Src/usbh_MIDI.c **** 
 295              		.loc 1 121 25 view .LVU90
 296 0072 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 297              		.loc 1 120 24 discriminator 1 view .LVU91
 298 0074 A370     		strb	r3, [r4, #2]
 121:Core/Src/usbh_MIDI.c **** 
 299              		.loc 1 121 3 is_stmt 1 view .LVU92
 121:Core/Src/usbh_MIDI.c **** 
 300              		.loc 1 121 25 is_stmt 0 view .LVU93
 301 0076 2846     		mov	r0, r5
 302 0078 FFF7FEFF 		bl	USBH_AllocPipe
 303              	.LVL22:
 125:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 304              		.loc 1 125 3 view .LVU94
 305 007c E388     		ldrh	r3, [r4, #6]
 306 007e 0293     		str	r3, [sp, #8]
 307 0080 95F81D32 		ldrb	r3, [r5, #541]	@ zero_extendqisi2
 308 0084 0226     		movs	r6, #2
 309 0086 CDE90036 		strd	r3, r6, [sp]
 121:Core/Src/usbh_MIDI.c **** 
 310              		.loc 1 121 23 discriminator 1 view .LVU95
 311 008a 6070     		strb	r0, [r4, #1]
 125:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->OutPipe,
 312              		.loc 1 125 3 is_stmt 1 view .LVU96
 313 008c 95F81C32 		ldrb	r3, [r5, #540]	@ zero_extendqisi2
 314 0090 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 315 0092 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 316 0094 2846     		mov	r0, r5
 317 0096 FFF7FEFF 		bl	USBH_OpenPipe
 318              	.LVL23:
 133:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 319              		.loc 1 133 3 view .LVU97
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 13


 320 009a 2389     		ldrh	r3, [r4, #8]
 321 009c 95F81D12 		ldrb	r1, [r5, #541]	@ zero_extendqisi2
 322 00a0 CDE90163 		strd	r6, r3, [sp, #4]
 323 00a4 95F81C32 		ldrb	r3, [r5, #540]	@ zero_extendqisi2
 324 00a8 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 325 00aa 0091     		str	r1, [sp]
 142:Core/Src/usbh_MIDI.c **** 
 326              		.loc 1 142 22 is_stmt 0 view .LVU98
 327 00ac 0026     		movs	r6, #0
 133:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe,
 328              		.loc 1 133 3 view .LVU99
 329 00ae 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 330 00b0 2846     		mov	r0, r5
 331 00b2 FFF7FEFF 		bl	USBH_OpenPipe
 332              	.LVL24:
 142:Core/Src/usbh_MIDI.c **** 
 333              		.loc 1 142 3 is_stmt 1 view .LVU100
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 334              		.loc 1 145 3 is_stmt 0 view .LVU101
 335 00b6 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 142:Core/Src/usbh_MIDI.c **** 
 336              		.loc 1 142 22 view .LVU102
 337 00b8 2670     		strb	r6, [r4]
 145:Core/Src/usbh_MIDI.c **** 		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 338              		.loc 1 145 3 is_stmt 1 view .LVU103
 339 00ba 3246     		mov	r2, r6
 340 00bc 2846     		mov	r0, r5
 341 00be FFF7FEFF 		bl	USBH_LL_SetToggle
 342              	.LVL25:
 146:Core/Src/usbh_MIDI.c **** 		status = USBH_OK;
 343              		.loc 1 146 3 view .LVU104
 344 00c2 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 345 00c4 3246     		mov	r2, r6
 346 00c6 2846     		mov	r0, r5
 347 00c8 FFF7FEFF 		bl	USBH_LL_SetToggle
 348              	.LVL26:
 147:Core/Src/usbh_MIDI.c **** 	}
 349              		.loc 1 147 3 view .LVU105
 147:Core/Src/usbh_MIDI.c **** 	}
 350              		.loc 1 147 10 is_stmt 0 view .LVU106
 351 00cc 3046     		mov	r0, r6
 352              	.LVL27:
 149:Core/Src/usbh_MIDI.c **** }
 353              		.loc 1 149 2 is_stmt 1 view .LVU107
 150:Core/Src/usbh_MIDI.c **** 
 354              		.loc 1 150 1 is_stmt 0 view .LVU108
 355 00ce 04B0     		add	sp, sp, #16
 356              		.cfi_remember_state
 357              		.cfi_def_cfa_offset 16
 358              		@ sp needed
 359 00d0 70BD     		pop	{r4, r5, r6, pc}
 360              	.LVL28:
 361              	.L29:
 362              		.cfi_restore_state
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
 363              		.loc 1 111 4 is_stmt 1 view .LVU109
 111:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 14


 364              		.loc 1 111 22 is_stmt 0 view .LVU110
 365 00d2 2171     		strb	r1, [r4, #4]
 112:Core/Src/usbh_MIDI.c **** 		}
 366              		.loc 1 112 4 is_stmt 1 view .LVU111
 112:Core/Src/usbh_MIDI.c **** 		}
 367              		.loc 1 112 27 is_stmt 0 view .LVU112
 368 00d4 2281     		strh	r2, [r4, #8]	@ movhi
 120:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 369              		.loc 1 120 26 view .LVU113
 370 00d6 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 371 00d8 C7E7     		b	.L26
 372              	.LVL29:
 373              	.L27:
  89:Core/Src/usbh_MIDI.c **** 	}
 374              		.loc 1 89 10 view .LVU114
 375 00da 0220     		movs	r0, #2
 376              	.LVL30:
 149:Core/Src/usbh_MIDI.c **** }
 377              		.loc 1 149 2 is_stmt 1 view .LVU115
 150:Core/Src/usbh_MIDI.c **** 
 378              		.loc 1 150 1 is_stmt 0 view .LVU116
 379 00dc 04B0     		add	sp, sp, #16
 380              		.cfi_def_cfa_offset 16
 381              		@ sp needed
 382 00de 70BD     		pop	{r4, r5, r6, pc}
 150:Core/Src/usbh_MIDI.c **** 
 383              		.loc 1 150 1 view .LVU117
 384              		.cfi_endproc
 385              	.LFE238:
 387              		.section	.text.USBH_MIDI_Stop,"ax",%progbits
 388              		.align	1
 389              		.p2align 2,,3
 390              		.global	USBH_MIDI_Stop
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	USBH_MIDI_Stop:
 396              	.LVL31:
 397              	.LFB241:
 214:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 398              		.loc 1 214 1 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 215:Core/Src/usbh_MIDI.c **** 
 402              		.loc 1 215 3 view .LVU119
 217:Core/Src/usbh_MIDI.c ****   {
 403              		.loc 1 217 3 view .LVU120
 214:Core/Src/usbh_MIDI.c ****   MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 404              		.loc 1 214 1 is_stmt 0 view .LVU121
 405 0000 38B5     		push	{r3, r4, r5, lr}
 406              		.cfi_def_cfa_offset 16
 407              		.cfi_offset 3, -16
 408              		.cfi_offset 4, -12
 409              		.cfi_offset 5, -8
 410              		.cfi_offset 14, -4
 217:Core/Src/usbh_MIDI.c ****   {
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 15


 411              		.loc 1 217 11 view .LVU122
 412 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 217:Core/Src/usbh_MIDI.c ****   {
 413              		.loc 1 217 5 view .LVU123
 414 0004 0B2B     		cmp	r3, #11
 415 0006 01D0     		beq	.L33
 224:Core/Src/usbh_MIDI.c **** }
 416              		.loc 1 224 3 is_stmt 1 view .LVU124
 225:Core/Src/usbh_MIDI.c **** 
 417              		.loc 1 225 1 is_stmt 0 view .LVU125
 418 0008 0020     		movs	r0, #0
 419              	.LVL32:
 225:Core/Src/usbh_MIDI.c **** 
 420              		.loc 1 225 1 view .LVU126
 421 000a 38BD     		pop	{r3, r4, r5, pc}
 422              	.LVL33:
 423              	.L33:
 215:Core/Src/usbh_MIDI.c **** 
 424              		.loc 1 215 23 view .LVU127
 425 000c D0F8C825 		ldr	r2, [r0, #1480]
 426 0010 D569     		ldr	r5, [r2, #28]
 219:Core/Src/usbh_MIDI.c **** 
 427              		.loc 1 219 5 is_stmt 1 view .LVU128
 219:Core/Src/usbh_MIDI.c **** 
 428              		.loc 1 219 24 is_stmt 0 view .LVU129
 429 0012 0023     		movs	r3, #0
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 430              		.loc 1 221 5 view .LVU130
 431 0014 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 219:Core/Src/usbh_MIDI.c **** 
 432              		.loc 1 219 24 view .LVU131
 433 0016 2B70     		strb	r3, [r5]
 434              	.LVL34:
 221:Core/Src/usbh_MIDI.c ****     USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 435              		.loc 1 221 5 is_stmt 1 view .LVU132
 436 0018 0446     		mov	r4, r0
 437 001a FFF7FEFF 		bl	USBH_ClosePipe
 438              	.LVL35:
 222:Core/Src/usbh_MIDI.c ****   }
 439              		.loc 1 222 5 view .LVU133
 440 001e A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 441 0020 2046     		mov	r0, r4
 442 0022 FFF7FEFF 		bl	USBH_ClosePipe
 443              	.LVL36:
 224:Core/Src/usbh_MIDI.c **** }
 444              		.loc 1 224 3 view .LVU134
 225:Core/Src/usbh_MIDI.c **** 
 445              		.loc 1 225 1 is_stmt 0 view .LVU135
 446 0026 0020     		movs	r0, #0
 447 0028 38BD     		pop	{r3, r4, r5, pc}
 225:Core/Src/usbh_MIDI.c **** 
 448              		.loc 1 225 1 view .LVU136
 449              		.cfi_endproc
 450              	.LFE241:
 452 002a 00BF     		.section	.text.USBH_MIDI_GetLastReceivedDataSize,"ax",%progbits
 453              		.align	1
 454              		.p2align 2,,3
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 16


 455              		.global	USBH_MIDI_GetLastReceivedDataSize
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 460              	USBH_MIDI_GetLastReceivedDataSize:
 461              	.LVL37:
 462              	.LFB244:
 284:Core/Src/usbh_MIDI.c ****   
 285:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 286:Core/Src/usbh_MIDI.c **** 
 287:Core/Src/usbh_MIDI.c **** /**
 288:Core/Src/usbh_MIDI.c ****  * @brief  This function return last recieved data size
 289:Core/Src/usbh_MIDI.c ****  * @param  None
 290:Core/Src/usbh_MIDI.c ****  * @retval None
 291:Core/Src/usbh_MIDI.c ****  */
 292:Core/Src/usbh_MIDI.c **** uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
 293:Core/Src/usbh_MIDI.c **** {
 463              		.loc 1 293 1 is_stmt 1 view -0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 294:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 467              		.loc 1 294 2 view .LVU138
 295:Core/Src/usbh_MIDI.c **** 
 296:Core/Src/usbh_MIDI.c **** 	if(phost->gState == HOST_CLASS)
 468              		.loc 1 296 2 view .LVU139
 469              		.loc 1 296 10 is_stmt 0 view .LVU140
 470 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 471              		.loc 1 296 4 view .LVU141
 472 0002 0B2A     		cmp	r2, #11
 473 0004 01D0     		beq	.L41
 297:Core/Src/usbh_MIDI.c **** 	{
 298:Core/Src/usbh_MIDI.c **** 		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 299:Core/Src/usbh_MIDI.c **** 	}
 300:Core/Src/usbh_MIDI.c **** 	else
 301:Core/Src/usbh_MIDI.c **** 	{
 302:Core/Src/usbh_MIDI.c **** 		return 0;
 474              		.loc 1 302 10 view .LVU142
 475 0006 0020     		movs	r0, #0
 476              	.LVL38:
 303:Core/Src/usbh_MIDI.c **** 	}
 304:Core/Src/usbh_MIDI.c **** }
 477              		.loc 1 304 1 view .LVU143
 478 0008 7047     		bx	lr
 479              	.LVL39:
 480              	.L41:
 298:Core/Src/usbh_MIDI.c **** 	}
 481              		.loc 1 298 3 is_stmt 1 view .LVU144
 293:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 482              		.loc 1 293 1 is_stmt 0 view .LVU145
 483 000a 08B5     		push	{r3, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 294:Core/Src/usbh_MIDI.c **** 
 487              		.loc 1 294 22 view .LVU146
 488 000c D0F8C835 		ldr	r3, [r0, #1480]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 17


 298:Core/Src/usbh_MIDI.c **** 	}
 489              		.loc 1 298 10 view .LVU147
 490 0010 DB69     		ldr	r3, [r3, #28]
 491 0012 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 492 0014 FFF7FEFF 		bl	USBH_LL_GetLastXferSize
 493              	.LVL40:
 298:Core/Src/usbh_MIDI.c **** 	}
 494              		.loc 1 298 10 discriminator 1 view .LVU148
 495 0018 80B2     		uxth	r0, r0
 496              		.loc 1 304 1 view .LVU149
 497 001a 08BD     		pop	{r3, pc}
 498              		.cfi_endproc
 499              	.LFE244:
 501              		.section	.text.USBH_MIDI_Transmit,"ax",%progbits
 502              		.align	1
 503              		.p2align 2,,3
 504              		.global	USBH_MIDI_Transmit
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 509              	USBH_MIDI_Transmit:
 510              	.LVL41:
 511              	.LFB245:
 305:Core/Src/usbh_MIDI.c **** 
 306:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 307:Core/Src/usbh_MIDI.c **** 
 308:Core/Src/usbh_MIDI.c **** /**
 309:Core/Src/usbh_MIDI.c ****  * @brief  This function prepares the state before issuing the class specific commands
 310:Core/Src/usbh_MIDI.c ****  * @param  None
 311:Core/Src/usbh_MIDI.c ****  * @retval None
 312:Core/Src/usbh_MIDI.c ****  */
 313:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
 314:Core/Src/usbh_MIDI.c **** {
 512              		.loc 1 314 1 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 315:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef Status = USBH_BUSY;
 517              		.loc 1 315 2 view .LVU151
 316:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 518              		.loc 1 316 2 view .LVU152
 519              		.loc 1 316 22 is_stmt 0 view .LVU153
 520 0000 D0F8C835 		ldr	r3, [r0, #1480]
 521 0004 DB69     		ldr	r3, [r3, #28]
 522              	.LVL42:
 317:Core/Src/usbh_MIDI.c **** 
 318:Core/Src/usbh_MIDI.c **** 	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 523              		.loc 1 318 2 is_stmt 1 view .LVU154
 524              		.loc 1 318 4 is_stmt 0 view .LVU155
 525 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 526              	.LVL43:
 527              		.loc 1 318 4 view .LVU156
 528 0008 0128     		cmp	r0, #1
 319:Core/Src/usbh_MIDI.c **** 	{
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->pTxData = pbuff;
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 18


 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 529              		.loc 1 322 22 view .LVU157
 530 000a 4FF00100 		mov	r0, #1
 318:Core/Src/usbh_MIDI.c **** 	{
 531              		.loc 1 318 4 view .LVU158
 532 000e 00D9     		bls	.L45
 533              	.LVL44:
 323:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 324:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 325:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 326:Core/Src/usbh_MIDI.c **** 		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 327:Core/Src/usbh_MIDI.c **** #endif
 328:Core/Src/usbh_MIDI.c **** 	}
 329:Core/Src/usbh_MIDI.c **** 	return Status;
 534              		.loc 1 329 2 is_stmt 1 view .LVU159
 330:Core/Src/usbh_MIDI.c **** }
 535              		.loc 1 330 1 is_stmt 0 view .LVU160
 536 0010 7047     		bx	lr
 537              	.LVL45:
 538              	.L45:
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
 539              		.loc 1 320 3 is_stmt 1 view .LVU161
 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 540              		.loc 1 322 22 is_stmt 0 view .LVU162
 541 0012 1870     		strb	r0, [r3]
 323:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 542              		.loc 1 323 30 view .LVU163
 543 0014 1876     		strb	r0, [r3, #24]
 320:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->TxDataLength = length;
 544              		.loc 1 320 24 view .LVU164
 545 0016 D960     		str	r1, [r3, #12]
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 546              		.loc 1 321 3 is_stmt 1 view .LVU165
 321:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 547              		.loc 1 321 29 is_stmt 0 view .LVU166
 548 0018 9A82     		strh	r2, [r3, #20]	@ movhi
 322:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 549              		.loc 1 322 3 is_stmt 1 view .LVU167
 323:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 550              		.loc 1 323 3 view .LVU168
 324:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 551              		.loc 1 324 3 view .LVU169
 552              	.LVL46:
 324:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 553              		.loc 1 324 10 is_stmt 0 view .LVU170
 554 001a 0020     		movs	r0, #0
 555 001c 7047     		bx	lr
 556              		.cfi_endproc
 557              	.LFE245:
 559 001e 00BF     		.section	.text.USBH_MIDI_Receive,"ax",%progbits
 560              		.align	1
 561              		.p2align 2,,3
 562              		.global	USBH_MIDI_Receive
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 567              	USBH_MIDI_Receive:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 19


 568              	.LVL47:
 569              	.LFB246:
 331:Core/Src/usbh_MIDI.c **** 
 332:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 333:Core/Src/usbh_MIDI.c **** 
 334:Core/Src/usbh_MIDI.c **** /**
 335:Core/Src/usbh_MIDI.c ****  * @brief  This function prepares the state before issuing the class specific commands
 336:Core/Src/usbh_MIDI.c ****  * @param  None
 337:Core/Src/usbh_MIDI.c ****  * @retval None
 338:Core/Src/usbh_MIDI.c ****  */
 339:Core/Src/usbh_MIDI.c **** USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
 340:Core/Src/usbh_MIDI.c **** {
 570              		.loc 1 340 1 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
 341:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef Status = USBH_BUSY;
 575              		.loc 1 341 2 view .LVU172
 342:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 576              		.loc 1 342 2 view .LVU173
 577              		.loc 1 342 22 is_stmt 0 view .LVU174
 578 0000 D0F8C835 		ldr	r3, [r0, #1480]
 579 0004 DB69     		ldr	r3, [r3, #28]
 580              	.LVL48:
 343:Core/Src/usbh_MIDI.c **** 
 344:Core/Src/usbh_MIDI.c **** 	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 581              		.loc 1 344 2 is_stmt 1 view .LVU175
 582              		.loc 1 344 4 is_stmt 0 view .LVU176
 583 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 584              	.LVL49:
 585              		.loc 1 344 4 view .LVU177
 586 0008 0128     		cmp	r0, #1
 587 000a 01D9     		bls	.L49
 341:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 588              		.loc 1 341 21 view .LVU178
 589 000c 0120     		movs	r0, #1
 590              	.LVL50:
 345:Core/Src/usbh_MIDI.c **** 	{
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->pRxData = pbuff;
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 349:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 350:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 351:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 352:Core/Src/usbh_MIDI.c **** 		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 353:Core/Src/usbh_MIDI.c **** #endif
 354:Core/Src/usbh_MIDI.c **** 	}
 355:Core/Src/usbh_MIDI.c **** 	return Status;
 591              		.loc 1 355 2 is_stmt 1 view .LVU179
 356:Core/Src/usbh_MIDI.c **** }
 592              		.loc 1 356 1 is_stmt 0 view .LVU180
 593 000e 7047     		bx	lr
 594              	.LVL51:
 595              	.L49:
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 596              		.loc 1 346 3 is_stmt 1 view .LVU181
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 20


 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 597              		.loc 1 348 22 is_stmt 0 view .LVU182
 598 0010 4FF0010C 		mov	ip, #1
 349:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 599              		.loc 1 349 30 view .LVU183
 600 0014 0320     		movs	r0, #3
 601 0016 5876     		strb	r0, [r3, #25]
 346:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->RxDataLength = length;
 602              		.loc 1 346 24 view .LVU184
 603 0018 1961     		str	r1, [r3, #16]
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 604              		.loc 1 347 3 is_stmt 1 view .LVU185
 347:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 605              		.loc 1 347 29 is_stmt 0 view .LVU186
 606 001a DA82     		strh	r2, [r3, #22]	@ movhi
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 607              		.loc 1 348 3 is_stmt 1 view .LVU187
 348:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 608              		.loc 1 348 22 is_stmt 0 view .LVU188
 609 001c 83F800C0 		strb	ip, [r3]
 349:Core/Src/usbh_MIDI.c **** 		Status = USBH_OK;
 610              		.loc 1 349 3 is_stmt 1 view .LVU189
 350:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 611              		.loc 1 350 3 view .LVU190
 612              	.LVL52:
 350:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 613              		.loc 1 350 10 is_stmt 0 view .LVU191
 614 0020 0020     		movs	r0, #0
 615 0022 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE246:
 619              		.section	.text.USBH_MIDI_TransmitCallback,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.weak	USBH_MIDI_TransmitCallback
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 627              	USBH_MIDI_TransmitCallback:
 628              	.LVL53:
 629              	.LFB249:
 357:Core/Src/usbh_MIDI.c **** 
 358:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 359:Core/Src/usbh_MIDI.c **** 
 360:Core/Src/usbh_MIDI.c **** /**
 361:Core/Src/usbh_MIDI.c ****  * @brief  The function is responsible for sending data to the device
 362:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 363:Core/Src/usbh_MIDI.c ****  * @retval None
 364:Core/Src/usbh_MIDI.c ****  */
 365:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
 366:Core/Src/usbh_MIDI.c **** {
 367:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 368:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 369:Core/Src/usbh_MIDI.c **** 
 370:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->data_tx_state)
 371:Core/Src/usbh_MIDI.c **** 	{
 372:Core/Src/usbh_MIDI.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 21


 373:Core/Src/usbh_MIDI.c **** 	case MIDI_SEND_DATA:
 374:Core/Src/usbh_MIDI.c **** 		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 375:Core/Src/usbh_MIDI.c **** 		{
 376:Core/Src/usbh_MIDI.c **** 			USBH_BulkSendData (phost,
 377:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 378:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutEpSize,
 379:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutPipe,
 380:Core/Src/usbh_MIDI.c **** 					1);
 381:Core/Src/usbh_MIDI.c **** 		}
 382:Core/Src/usbh_MIDI.c **** 		else
 383:Core/Src/usbh_MIDI.c **** 		{
 384:Core/Src/usbh_MIDI.c **** 			USBH_BulkSendData (phost,
 385:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 386:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->TxDataLength,
 387:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->OutPipe,
 388:Core/Src/usbh_MIDI.c **** 					1);
 389:Core/Src/usbh_MIDI.c **** 		}
 390:Core/Src/usbh_MIDI.c **** 
 391:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 392:Core/Src/usbh_MIDI.c **** 
 393:Core/Src/usbh_MIDI.c **** 		break;
 394:Core/Src/usbh_MIDI.c **** 
 395:Core/Src/usbh_MIDI.c **** 	case MIDI_SEND_DATA_WAIT:
 396:Core/Src/usbh_MIDI.c **** 
 397:Core/Src/usbh_MIDI.c **** 		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 398:Core/Src/usbh_MIDI.c **** 
 399:Core/Src/usbh_MIDI.c **** 		/*Check the status done for transmission*/
 400:Core/Src/usbh_MIDI.c **** 		if(URB_Status == USBH_URB_DONE )
 401:Core/Src/usbh_MIDI.c **** 		{
 402:Core/Src/usbh_MIDI.c **** 			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 403:Core/Src/usbh_MIDI.c **** 			{
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 405:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 406:Core/Src/usbh_MIDI.c **** 			}
 407:Core/Src/usbh_MIDI.c **** 			else
 408:Core/Src/usbh_MIDI.c **** 			{
 409:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->TxDataLength = 0;
 410:Core/Src/usbh_MIDI.c **** 			}
 411:Core/Src/usbh_MIDI.c **** 
 412:Core/Src/usbh_MIDI.c **** 			if( MIDI_Handle->TxDataLength > 0)
 413:Core/Src/usbh_MIDI.c **** 			{
 414:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 415:Core/Src/usbh_MIDI.c **** 			}
 416:Core/Src/usbh_MIDI.c **** 			else
 417:Core/Src/usbh_MIDI.c **** 			{
 418:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_tx_state = MIDI_IDLE;
 419:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 420:Core/Src/usbh_MIDI.c **** 			}
 421:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 422:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 423:Core/Src/usbh_MIDI.c **** #endif
 424:Core/Src/usbh_MIDI.c **** 		}
 425:Core/Src/usbh_MIDI.c **** 		else if( URB_Status == USBH_URB_NOTREADY )
 426:Core/Src/usbh_MIDI.c **** 		{
 427:Core/Src/usbh_MIDI.c **** 			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 428:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 429:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 22


 430:Core/Src/usbh_MIDI.c **** #endif
 431:Core/Src/usbh_MIDI.c **** 		}
 432:Core/Src/usbh_MIDI.c **** 		break;
 433:Core/Src/usbh_MIDI.c **** 	default:
 434:Core/Src/usbh_MIDI.c **** 		break;
 435:Core/Src/usbh_MIDI.c **** 	}
 436:Core/Src/usbh_MIDI.c **** }
 437:Core/Src/usbh_MIDI.c **** 
 438:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 439:Core/Src/usbh_MIDI.c **** 
 440:Core/Src/usbh_MIDI.c **** /**
 441:Core/Src/usbh_MIDI.c ****  * @brief  This function responsible for reception of data from the device
 442:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 443:Core/Src/usbh_MIDI.c ****  * @retval None
 444:Core/Src/usbh_MIDI.c ****  */
 445:Core/Src/usbh_MIDI.c **** 
 446:Core/Src/usbh_MIDI.c **** static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
 447:Core/Src/usbh_MIDI.c **** {
 448:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 449:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 450:Core/Src/usbh_MIDI.c **** 	uint16_t length;
 451:Core/Src/usbh_MIDI.c **** 
 452:Core/Src/usbh_MIDI.c **** 	switch(MIDI_Handle->data_rx_state)
 453:Core/Src/usbh_MIDI.c **** 	{
 454:Core/Src/usbh_MIDI.c **** 
 455:Core/Src/usbh_MIDI.c **** 	case MIDI_RECEIVE_DATA:
 456:Core/Src/usbh_MIDI.c **** 
 457:Core/Src/usbh_MIDI.c **** 		USBH_BulkReceiveData (phost,
 458:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData,
 459:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InEpSize,
 460:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->InPipe);
 461:Core/Src/usbh_MIDI.c **** 
 462:Core/Src/usbh_MIDI.c **** 		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 463:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 464:Core/Src/usbh_MIDI.c **** 
 465:Core/Src/usbh_MIDI.c **** 		break;
 466:Core/Src/usbh_MIDI.c **** 
 467:Core/Src/usbh_MIDI.c **** 	case MIDI_RECEIVE_DATA_WAIT:
 468:Core/Src/usbh_MIDI.c **** 
 469:Core/Src/usbh_MIDI.c **** 		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 470:Core/Src/usbh_MIDI.c **** 
 471:Core/Src/usbh_MIDI.c **** 
 472:Core/Src/usbh_MIDI.c **** 
 473:Core/Src/usbh_MIDI.c **** 		/*Check the status done for reception*/
 474:Core/Src/usbh_MIDI.c **** 		if(URB_Status == USBH_URB_DONE )
 475:Core/Src/usbh_MIDI.c **** 		{
 476:Core/Src/usbh_MIDI.c **** 
 477:Core/Src/usbh_MIDI.c **** 
 478:Core/Src/usbh_MIDI.c **** 			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 479:Core/Src/usbh_MIDI.c **** 
 480:Core/Src/usbh_MIDI.c **** 			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 481:Core/Src/usbh_MIDI.c **** 			{
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->RxDataLength -= length ;
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 484:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 485:Core/Src/usbh_MIDI.c **** 			}
 486:Core/Src/usbh_MIDI.c **** 			else
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 23


 487:Core/Src/usbh_MIDI.c **** 			{
 488:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_IDLE;
 489:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 490:Core/Src/usbh_MIDI.c **** 			}
 491:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 492:Core/Src/usbh_MIDI.c **** 			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 493:Core/Src/usbh_MIDI.c **** #endif
 494:Core/Src/usbh_MIDI.c **** 		}
 495:Core/Src/usbh_MIDI.c **** 		break;
 496:Core/Src/usbh_MIDI.c **** 
 497:Core/Src/usbh_MIDI.c **** 	default:
 498:Core/Src/usbh_MIDI.c **** 		break;
 499:Core/Src/usbh_MIDI.c **** 	}
 500:Core/Src/usbh_MIDI.c **** }
 501:Core/Src/usbh_MIDI.c **** 
 502:Core/Src/usbh_MIDI.c **** 
 503:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 504:Core/Src/usbh_MIDI.c **** 
 505:Core/Src/usbh_MIDI.c **** /**
 506:Core/Src/usbh_MIDI.c ****  * @brief  The function informs user that data have been transmitted.
 507:Core/Src/usbh_MIDI.c ****  *  @param  pdev: Selected device
 508:Core/Src/usbh_MIDI.c ****  * @retval None
 509:Core/Src/usbh_MIDI.c ****  */
 510:Core/Src/usbh_MIDI.c **** __weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
 511:Core/Src/usbh_MIDI.c **** {
 630              		.loc 1 511 1 is_stmt 1 view -0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 512:Core/Src/usbh_MIDI.c **** 
 513:Core/Src/usbh_MIDI.c **** }
 635              		.loc 1 513 1 view .LVU193
 636 0000 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE249:
 640 0002 00BF     		.section	.text.USBH_MIDI_ReceiveCallback,"ax",%progbits
 641              		.align	1
 642              		.p2align 2,,3
 643              		.weak	USBH_MIDI_ReceiveCallback
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 648              	USBH_MIDI_ReceiveCallback:
 649              	.LFB252:
 650              		.cfi_startproc
 514:Core/Src/usbh_MIDI.c **** 
 515:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 516:Core/Src/usbh_MIDI.c **** 
 517:Core/Src/usbh_MIDI.c **** /**
 518:Core/Src/usbh_MIDI.c ****  * @brief  The function informs user that data have been received.
 519:Core/Src/usbh_MIDI.c ****  * @retval None
 520:Core/Src/usbh_MIDI.c ****  */
 521:Core/Src/usbh_MIDI.c **** __weak void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
 651              		.loc 1 521 13 view -0
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 24


 654              		@ link register save eliminated.
 655 0000 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE252:
 659 0002 00BF     		.section	.text.USBH_MIDI_Process,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.syntax unified
 663              		.thumb
 664              		.thumb_func
 666              	USBH_MIDI_Process:
 667              	.LVL54:
 668              	.LFB242:
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 669              		.loc 1 237 1 view -0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 673              		.loc 1 238 2 view .LVU196
 239:Core/Src/usbh_MIDI.c **** 	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 674              		.loc 1 239 2 view .LVU197
 240:Core/Src/usbh_MIDI.c **** 
 675              		.loc 1 240 2 view .LVU198
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 676              		.loc 1 237 1 is_stmt 0 view .LVU199
 677 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 678              		.cfi_def_cfa_offset 20
 679              		.cfi_offset 4, -20
 680              		.cfi_offset 5, -16
 681              		.cfi_offset 6, -12
 682              		.cfi_offset 7, -8
 683              		.cfi_offset 14, -4
 240:Core/Src/usbh_MIDI.c **** 
 684              		.loc 1 240 22 view .LVU200
 685 0002 D0F8C835 		ldr	r3, [r0, #1480]
 686 0006 DE69     		ldr	r6, [r3, #28]
 687              	.LVL55:
 242:Core/Src/usbh_MIDI.c **** 	{
 688              		.loc 1 242 2 is_stmt 1 view .LVU201
 242:Core/Src/usbh_MIDI.c **** 	{
 689              		.loc 1 242 20 is_stmt 0 view .LVU202
 690 0008 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 242:Core/Src/usbh_MIDI.c **** 	{
 691              		.loc 1 242 2 view .LVU203
 692 000a 012C     		cmp	r4, #1
 237:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef status = USBH_BUSY;
 693              		.loc 1 237 1 view .LVU204
 694 000c 83B0     		sub	sp, sp, #12
 695              		.cfi_def_cfa_offset 32
 242:Core/Src/usbh_MIDI.c **** 	{
 696              		.loc 1 242 2 view .LVU205
 697 000e 0DD0     		beq	.L53
 698 0010 022C     		cmp	r4, #2
 699 0012 04D0     		beq	.L54
 700 0014 04B1     		cbz	r4, .L71
 701              	.LVL56:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 25


 702              	.L56:
 238:Core/Src/usbh_MIDI.c **** 	USBH_StatusTypeDef req_status = USBH_OK;
 703              		.loc 1 238 21 view .LVU206
 704 0016 0124     		movs	r4, #1
 270:Core/Src/usbh_MIDI.c **** }
 705              		.loc 1 270 2 is_stmt 1 view .LVU207
 706              	.L71:
 271:Core/Src/usbh_MIDI.c **** /*-------------------------------------------------------------------------------------------------
 707              		.loc 1 271 1 is_stmt 0 view .LVU208
 708 0018 2046     		mov	r0, r4
 709 001a 03B0     		add	sp, sp, #12
 710              		.cfi_remember_state
 711              		.cfi_def_cfa_offset 20
 712              		@ sp needed
 713 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 714              	.LVL57:
 715              	.L54:
 716              		.cfi_restore_state
 256:Core/Src/usbh_MIDI.c **** 
 717              		.loc 1 256 3 is_stmt 1 view .LVU209
 256:Core/Src/usbh_MIDI.c **** 
 718              		.loc 1 256 16 is_stmt 0 view .LVU210
 719 001e 0021     		movs	r1, #0
 720 0020 FFF7FEFF 		bl	USBH_ClrFeature
 721              	.LVL58:
 258:Core/Src/usbh_MIDI.c **** 		{
 722              		.loc 1 258 3 is_stmt 1 view .LVU211
 258:Core/Src/usbh_MIDI.c **** 		{
 723              		.loc 1 258 5 is_stmt 0 view .LVU212
 724 0024 0028     		cmp	r0, #0
 725 0026 F6D1     		bne	.L56
 261:Core/Src/usbh_MIDI.c **** 		}
 726              		.loc 1 261 4 is_stmt 1 view .LVU213
 261:Core/Src/usbh_MIDI.c **** 		}
 727              		.loc 1 261 23 is_stmt 0 view .LVU214
 728 0028 3070     		strb	r0, [r6]
 729 002a F4E7     		b	.L56
 730              	.LVL59:
 731              	.L53:
 732              	.LBB6:
 733              	.LBB7:
 370:Core/Src/usbh_MIDI.c **** 	{
 734              		.loc 1 370 20 view .LVU215
 735 002c 377E     		ldrb	r7, [r6, #24]	@ zero_extendqisi2
 370:Core/Src/usbh_MIDI.c **** 	{
 736              		.loc 1 370 2 view .LVU216
 737 002e 012F     		cmp	r7, #1
 738 0030 0546     		mov	r5, r0
 739              	.LBE7:
 740              	.LBE6:
 251:Core/Src/usbh_MIDI.c **** 		MIDI_ProcessReception(phost);
 741              		.loc 1 251 3 is_stmt 1 view .LVU217
 742              	.LVL60:
 743              	.LBB15:
 744              	.LBI6:
 365:Core/Src/usbh_MIDI.c **** {
 745              		.loc 1 365 13 view .LVU218
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 26


 746              	.LBB8:
 367:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 747              		.loc 1 367 2 view .LVU219
 368:Core/Src/usbh_MIDI.c **** 
 748              		.loc 1 368 2 view .LVU220
 370:Core/Src/usbh_MIDI.c **** 	{
 749              		.loc 1 370 2 view .LVU221
 750 0032 2AD0     		beq	.L57
 751              	.LVL61:
 370:Core/Src/usbh_MIDI.c **** 	{
 752              		.loc 1 370 2 is_stmt 0 view .LVU222
 753 0034 022F     		cmp	r7, #2
 754 0036 0AD1     		bne	.L59
 397:Core/Src/usbh_MIDI.c **** 
 755              		.loc 1 397 3 is_stmt 1 view .LVU223
 397:Core/Src/usbh_MIDI.c **** 
 756              		.loc 1 397 16 is_stmt 0 view .LVU224
 757 0038 B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 758 003a FFF7FEFF 		bl	USBH_LL_GetURBState
 759              	.LVL62:
 400:Core/Src/usbh_MIDI.c **** 		{
 760              		.loc 1 400 3 is_stmt 1 view .LVU225
 400:Core/Src/usbh_MIDI.c **** 		{
 761              		.loc 1 400 5 is_stmt 0 view .LVU226
 762 003e 0128     		cmp	r0, #1
 763 0040 3CD0     		beq	.L77
 425:Core/Src/usbh_MIDI.c **** 		{
 764              		.loc 1 425 8 is_stmt 1 view .LVU227
 425:Core/Src/usbh_MIDI.c **** 		{
 765              		.loc 1 425 10 is_stmt 0 view .LVU228
 766 0042 0228     		cmp	r0, #2
 427:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 767              		.loc 1 427 4 is_stmt 1 view .LVU229
 427:Core/Src/usbh_MIDI.c **** #if (USBH_USE_OS == 1)
 768              		.loc 1 427 31 is_stmt 0 view .LVU230
 769 0044 08BF     		it	eq
 770 0046 3476     		strbeq	r4, [r6, #24]
 771              	.LBE8:
 772              	.LBE15:
 773              	.LBB16:
 774              	.LBB17:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 775              		.loc 1 448 22 view .LVU231
 776 0048 D5F8C835 		ldr	r3, [r5, #1480]
 777 004c DE69     		ldr	r6, [r3, #28]
 778              	.LVL63:
 779              	.L59:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 780              		.loc 1 448 22 view .LVU232
 781              	.LBE17:
 782              	.LBE16:
 252:Core/Src/usbh_MIDI.c **** 		break;
 783              		.loc 1 252 3 is_stmt 1 view .LVU233
 784              	.LBB25:
 785              	.LBI16:
 446:Core/Src/usbh_MIDI.c **** {
 786              		.loc 1 446 13 view .LVU234
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 27


 787              	.LBB18:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 788              		.loc 1 448 2 view .LVU235
 449:Core/Src/usbh_MIDI.c **** 	uint16_t length;
 789              		.loc 1 449 2 view .LVU236
 450:Core/Src/usbh_MIDI.c **** 
 790              		.loc 1 450 2 view .LVU237
 452:Core/Src/usbh_MIDI.c **** 	{
 791              		.loc 1 452 2 view .LVU238
 452:Core/Src/usbh_MIDI.c **** 	{
 792              		.loc 1 452 20 is_stmt 0 view .LVU239
 793 004e 737E     		ldrb	r3, [r6, #25]	@ zero_extendqisi2
 452:Core/Src/usbh_MIDI.c **** 	{
 794              		.loc 1 452 2 view .LVU240
 795 0050 032B     		cmp	r3, #3
 796 0052 2AD0     		beq	.L65
 797 0054 042B     		cmp	r3, #4
 798 0056 DED1     		bne	.L56
 469:Core/Src/usbh_MIDI.c **** 
 799              		.loc 1 469 3 is_stmt 1 view .LVU241
 469:Core/Src/usbh_MIDI.c **** 
 800              		.loc 1 469 16 is_stmt 0 view .LVU242
 801 0058 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 802 005a 2846     		mov	r0, r5
 803 005c FFF7FEFF 		bl	USBH_LL_GetURBState
 804              	.LVL64:
 474:Core/Src/usbh_MIDI.c **** 		{
 805              		.loc 1 474 3 is_stmt 1 view .LVU243
 474:Core/Src/usbh_MIDI.c **** 		{
 806              		.loc 1 474 5 is_stmt 0 view .LVU244
 807 0060 0128     		cmp	r0, #1
 808 0062 D8D1     		bne	.L56
 478:Core/Src/usbh_MIDI.c **** 
 809              		.loc 1 478 4 is_stmt 1 view .LVU245
 478:Core/Src/usbh_MIDI.c **** 
 810              		.loc 1 478 13 is_stmt 0 view .LVU246
 811 0064 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 812 0066 2846     		mov	r0, r5
 813              	.LVL65:
 478:Core/Src/usbh_MIDI.c **** 
 814              		.loc 1 478 13 view .LVU247
 815 0068 FFF7FEFF 		bl	USBH_LL_GetLastXferSize
 816              	.LVL66:
 480:Core/Src/usbh_MIDI.c **** 			{
 817              		.loc 1 480 4 is_stmt 1 view .LVU248
 480:Core/Src/usbh_MIDI.c **** 			{
 818              		.loc 1 480 20 is_stmt 0 view .LVU249
 819 006c F38A     		ldrh	r3, [r6, #22]
 820 006e 82B2     		uxth	r2, r0
 480:Core/Src/usbh_MIDI.c **** 			{
 821              		.loc 1 480 6 view .LVU250
 822 0070 9342     		cmp	r3, r2
 823 0072 3BDD     		ble	.L69
 480:Core/Src/usbh_MIDI.c **** 			{
 824              		.loc 1 480 50 discriminator 1 view .LVU251
 825 0074 3189     		ldrh	r1, [r6, #8]
 826 0076 9142     		cmp	r1, r2
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 28


 827 0078 38D2     		bcs	.L69
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 828              		.loc 1 482 5 is_stmt 1 view .LVU252
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 829              		.loc 1 483 26 is_stmt 0 view .LVU253
 830 007a 3169     		ldr	r1, [r6, #16]
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 831              		.loc 1 482 31 view .LVU254
 832 007c 9B1A     		subs	r3, r3, r2
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 833              		.loc 1 483 26 view .LVU255
 834 007e 1144     		add	r1, r1, r2
 484:Core/Src/usbh_MIDI.c **** 			}
 835              		.loc 1 484 32 view .LVU256
 836 0080 0322     		movs	r2, #3
 482:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData += length;
 837              		.loc 1 482 31 view .LVU257
 838 0082 F382     		strh	r3, [r6, #22]	@ movhi
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 839              		.loc 1 483 5 is_stmt 1 view .LVU258
 483:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 840              		.loc 1 483 26 is_stmt 0 view .LVU259
 841 0084 3161     		str	r1, [r6, #16]
 484:Core/Src/usbh_MIDI.c **** 			}
 842              		.loc 1 484 5 is_stmt 1 view .LVU260
 484:Core/Src/usbh_MIDI.c **** 			}
 843              		.loc 1 484 32 is_stmt 0 view .LVU261
 844 0086 7276     		strb	r2, [r6, #25]
 845 0088 C5E7     		b	.L56
 846              	.LVL67:
 847              	.L57:
 484:Core/Src/usbh_MIDI.c **** 			}
 848              		.loc 1 484 32 view .LVU262
 849              	.LBE18:
 850              	.LBE25:
 851              	.LBB26:
 852              	.LBB9:
 374:Core/Src/usbh_MIDI.c **** 		{
 853              		.loc 1 374 3 is_stmt 1 view .LVU263
 374:Core/Src/usbh_MIDI.c **** 		{
 854              		.loc 1 374 17 is_stmt 0 view .LVU264
 855 008a B28A     		ldrh	r2, [r6, #20]
 374:Core/Src/usbh_MIDI.c **** 		{
 856              		.loc 1 374 45 view .LVU265
 857 008c F488     		ldrh	r4, [r6, #6]
 376:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 858              		.loc 1 376 4 view .LVU266
 859 008e B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 860 0090 F168     		ldr	r1, [r6, #12]
 861 0092 0097     		str	r7, [sp]
 374:Core/Src/usbh_MIDI.c **** 		{
 862              		.loc 1 374 5 view .LVU267
 863 0094 A242     		cmp	r2, r4
 376:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 864              		.loc 1 376 4 is_stmt 1 view .LVU268
 865 0096 88BF     		it	hi
 866 0098 2246     		movhi	r2, r4
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 29


 384:Core/Src/usbh_MIDI.c **** 					MIDI_Handle->pTxData,
 867              		.loc 1 384 4 view .LVU269
 868 009a FFF7FEFF 		bl	USBH_BulkSendData
 869              	.LVL68:
 391:Core/Src/usbh_MIDI.c **** 
 870              		.loc 1 391 3 view .LVU270
 391:Core/Src/usbh_MIDI.c **** 
 871              		.loc 1 391 30 is_stmt 0 view .LVU271
 872 009e 0223     		movs	r3, #2
 873 00a0 3376     		strb	r3, [r6, #24]
 393:Core/Src/usbh_MIDI.c **** 
 874              		.loc 1 393 3 is_stmt 1 view .LVU272
 875              	.LBE9:
 876              	.LBE26:
 877              	.LBB27:
 878              	.LBB19:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 879              		.loc 1 448 22 is_stmt 0 view .LVU273
 880 00a2 D5F8C835 		ldr	r3, [r5, #1480]
 881 00a6 DE69     		ldr	r6, [r3, #28]
 882              	.LVL69:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 883              		.loc 1 448 22 view .LVU274
 884              	.LBE19:
 885              	.LBE27:
 886              	.LBB28:
 887              	.LBB10:
 393:Core/Src/usbh_MIDI.c **** 
 888              		.loc 1 393 3 view .LVU275
 889 00a8 D1E7     		b	.L59
 890              	.LVL70:
 891              	.L65:
 393:Core/Src/usbh_MIDI.c **** 
 892              		.loc 1 393 3 view .LVU276
 893              	.LBE10:
 894              	.LBE28:
 895              	.LBB29:
 896              	.LBB20:
 457:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pRxData,
 897              		.loc 1 457 3 is_stmt 1 view .LVU277
 898 00aa 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 899 00ac 3289     		ldrh	r2, [r6, #8]
 900 00ae 3169     		ldr	r1, [r6, #16]
 901 00b0 2846     		mov	r0, r5
 902 00b2 FFF7FEFF 		bl	USBH_BulkReceiveData
 903              	.LVL71:
 462:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 904              		.loc 1 462 3 view .LVU278
 462:Core/Src/usbh_MIDI.c **** 		//BSP_LED_On(LED_Red); //ok only here
 905              		.loc 1 462 30 is_stmt 0 view .LVU279
 906 00b6 0423     		movs	r3, #4
 907 00b8 7376     		strb	r3, [r6, #25]
 465:Core/Src/usbh_MIDI.c **** 
 908              		.loc 1 465 3 is_stmt 1 view .LVU280
 909 00ba ACE7     		b	.L56
 910              	.LVL72:
 911              	.L77:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 30


 465:Core/Src/usbh_MIDI.c **** 
 912              		.loc 1 465 3 is_stmt 0 view .LVU281
 913              	.LBE20:
 914              	.LBE29:
 915              	.LBB30:
 916              	.LBB11:
 402:Core/Src/usbh_MIDI.c **** 			{
 917              		.loc 1 402 4 is_stmt 1 view .LVU282
 402:Core/Src/usbh_MIDI.c **** 			{
 918              		.loc 1 402 18 is_stmt 0 view .LVU283
 919 00bc B38A     		ldrh	r3, [r6, #20]
 402:Core/Src/usbh_MIDI.c **** 			{
 920              		.loc 1 402 46 view .LVU284
 921 00be F288     		ldrh	r2, [r6, #6]
 402:Core/Src/usbh_MIDI.c **** 			{
 922              		.loc 1 402 6 view .LVU285
 923 00c0 9342     		cmp	r3, r2
 924 00c2 09D8     		bhi	.L78
 925 00c4 0023     		movs	r3, #0
 926 00c6 B382     		strh	r3, [r6, #20]	@ movhi
 412:Core/Src/usbh_MIDI.c **** 			{
 927              		.loc 1 412 4 is_stmt 1 view .LVU286
 418:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 928              		.loc 1 418 5 view .LVU287
 418:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_TransmitCallback(phost);
 929              		.loc 1 418 32 is_stmt 0 view .LVU288
 930 00c8 3376     		strb	r3, [r6, #24]
 419:Core/Src/usbh_MIDI.c **** 			}
 931              		.loc 1 419 5 is_stmt 1 view .LVU289
 932 00ca 2846     		mov	r0, r5
 933              	.LVL73:
 419:Core/Src/usbh_MIDI.c **** 			}
 934              		.loc 1 419 5 is_stmt 0 view .LVU290
 935 00cc FFF7FEFF 		bl	USBH_MIDI_TransmitCallback
 936              	.LVL74:
 937              	.LBE11:
 938              	.LBE30:
 939              	.LBB31:
 940              	.LBB21:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 941              		.loc 1 448 22 view .LVU291
 942 00d0 D5F8C835 		ldr	r3, [r5, #1480]
 943 00d4 DE69     		ldr	r6, [r3, #28]
 944              	.LVL75:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 945              		.loc 1 448 22 view .LVU292
 946 00d6 BAE7     		b	.L59
 947              	.LVL76:
 948              	.L78:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 949              		.loc 1 448 22 view .LVU293
 950              	.LBE21:
 951              	.LBE31:
 952              	.LBB32:
 953              	.LBB12:
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 954              		.loc 1 404 5 is_stmt 1 view .LVU294
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 31


 405:Core/Src/usbh_MIDI.c **** 			}
 955              		.loc 1 405 5 view .LVU295
 414:Core/Src/usbh_MIDI.c **** 			}
 956              		.loc 1 414 32 is_stmt 0 view .LVU296
 957 00d8 3076     		strb	r0, [r6, #24]
 404:Core/Src/usbh_MIDI.c **** 				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 958              		.loc 1 404 31 view .LVU297
 959 00da 9B1A     		subs	r3, r3, r2
 960              	.LBE12:
 961              	.LBE32:
 962              	.LBB33:
 963              	.LBB22:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 964              		.loc 1 448 22 view .LVU298
 965 00dc D5F8C815 		ldr	r1, [r5, #1480]
 966 00e0 B382     		strh	r3, [r6, #20]	@ movhi
 967              	.LBE22:
 968              	.LBE33:
 969              	.LBB34:
 970              	.LBB13:
 412:Core/Src/usbh_MIDI.c **** 			{
 971              		.loc 1 412 4 is_stmt 1 view .LVU299
 414:Core/Src/usbh_MIDI.c **** 			}
 972              		.loc 1 414 5 view .LVU300
 405:Core/Src/usbh_MIDI.c **** 			}
 973              		.loc 1 405 26 is_stmt 0 view .LVU301
 974 00e2 F368     		ldr	r3, [r6, #12]
 975 00e4 1344     		add	r3, r3, r2
 976 00e6 F360     		str	r3, [r6, #12]
 977              	.LBE13:
 978              	.LBE34:
 979              	.LBB35:
 980              	.LBB23:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 981              		.loc 1 448 22 view .LVU302
 982 00e8 CE69     		ldr	r6, [r1, #28]
 983              	.LVL77:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 984              		.loc 1 448 22 view .LVU303
 985              	.LBE23:
 986              	.LBE35:
 987              	.LBB36:
 988              	.LBB14:
 989 00ea B0E7     		b	.L59
 990              	.LVL78:
 991              	.L69:
 448:Core/Src/usbh_MIDI.c **** 	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 992              		.loc 1 448 22 view .LVU304
 993              	.LBE14:
 994              	.LBE36:
 995              	.LBB37:
 996              	.LBB24:
 488:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 997              		.loc 1 488 5 is_stmt 1 view .LVU305
 488:Core/Src/usbh_MIDI.c **** 				USBH_MIDI_ReceiveCallback(phost);
 998              		.loc 1 488 32 is_stmt 0 view .LVU306
 999 00ec 0023     		movs	r3, #0
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 32


 1000 00ee 7376     		strb	r3, [r6, #25]
 489:Core/Src/usbh_MIDI.c **** 			}
 1001              		.loc 1 489 5 is_stmt 1 view .LVU307
 1002 00f0 2846     		mov	r0, r5
 1003              	.LVL79:
 489:Core/Src/usbh_MIDI.c **** 			}
 1004              		.loc 1 489 5 is_stmt 0 view .LVU308
 1005 00f2 FFF7FEFF 		bl	USBH_MIDI_ReceiveCallback
 1006              	.LVL80:
 489:Core/Src/usbh_MIDI.c **** 			}
 1007              		.loc 1 489 5 view .LVU309
 1008 00f6 8EE7     		b	.L56
 1009              	.LBE24:
 1010              	.LBE37:
 1011              		.cfi_endproc
 1012              	.LFE242:
 1014              		.global	MIDI_Class
 1015              		.section	.rodata.str1.4,"aMS",%progbits,1
 1016              		.align	2
 1017              	.LC0:
 1018 0000 4D494449 		.ascii	"MIDI\000"
 1018      00
 1019              		.section	.data.MIDI_Class,"aw"
 1020              		.align	2
 1023              	MIDI_Class:
 1024 0000 00000000 		.word	.LC0
 1025 0004 01       		.byte	1
 1026 0005 000000   		.space	3
 1027 0008 00000000 		.word	USBH_MIDI_InterfaceInit
 1028 000c 00000000 		.word	USBH_MIDI_InterfaceDeInit
 1029 0010 00000000 		.word	USBH_MIDI_ClassRequest
 1030 0014 00000000 		.word	USBH_MIDI_Process
 1031 0018 00000000 		.word	USBH_MIDI_SOFProcess
 1032 001c 00000000 		.word	0
 1033              		.text
 1034              	.Letext0:
 1035              		.file 2 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 1036              		.file 3 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 1037              		.file 4 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 1038              		.file 5 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 1039              		.file 6 "Core/Src/../Inc/usbh_MIDI.h"
 1040              		.file 7 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_core.h"
 1041              		.file 8 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_pipes.h"
 1042              		.file 9 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 1043              		.file 10 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ioreq.h"
 1044              		.file 11 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 usbh_MIDI.c
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:21     .text.USBH_MIDI_ClassRequest:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:27     .text.USBH_MIDI_ClassRequest:00000000 USBH_MIDI_ClassRequest
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:53     .text.USBH_MIDI_SOFProcess:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:59     .text.USBH_MIDI_SOFProcess:00000000 USBH_MIDI_SOFProcess
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:77     .text.USBH_MIDI_InterfaceDeInit:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:83     .text.USBH_MIDI_InterfaceDeInit:00000000 USBH_MIDI_InterfaceDeInit
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:179    .text.USBH_MIDI_InterfaceInit:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:185    .text.USBH_MIDI_InterfaceInit:00000000 USBH_MIDI_InterfaceInit
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:388    .text.USBH_MIDI_Stop:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:395    .text.USBH_MIDI_Stop:00000000 USBH_MIDI_Stop
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:453    .text.USBH_MIDI_GetLastReceivedDataSize:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:460    .text.USBH_MIDI_GetLastReceivedDataSize:00000000 USBH_MIDI_GetLastReceivedDataSize
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:502    .text.USBH_MIDI_Transmit:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:509    .text.USBH_MIDI_Transmit:00000000 USBH_MIDI_Transmit
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:560    .text.USBH_MIDI_Receive:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:567    .text.USBH_MIDI_Receive:00000000 USBH_MIDI_Receive
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:620    .text.USBH_MIDI_TransmitCallback:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:627    .text.USBH_MIDI_TransmitCallback:00000000 USBH_MIDI_TransmitCallback
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:641    .text.USBH_MIDI_ReceiveCallback:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:648    .text.USBH_MIDI_ReceiveCallback:00000000 USBH_MIDI_ReceiveCallback
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:660    .text.USBH_MIDI_Process:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:666    .text.USBH_MIDI_Process:00000000 USBH_MIDI_Process
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:1023   .data.MIDI_Class:00000000 MIDI_Class
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:1016   .rodata.str1.4:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccGpPwMl.s:1020   .data.MIDI_Class:00000000 $d

UNDEFINED SYMBOLS
free
USBH_ClosePipe
USBH_FreePipe
USBH_FindInterface
USBH_SelectInterface
malloc
USBH_AllocPipe
USBH_OpenPipe
USBH_LL_SetToggle
USBH_LL_GetLastXferSize
USBH_ClrFeature
USBH_LL_GetURBState
USBH_BulkSendData
USBH_BulkReceiveData
