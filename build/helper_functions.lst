ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"helper_functions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.interp_lin_lut,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.global	interp_lin_lut
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	interp_lin_lut:
  28              	.LVL0:
  29              	.LFB3:
  30              		.file 1 "Core/Src/helper_functions.c"
   1:Core/Src/helper_functions.c **** /**
   2:Core/Src/helper_functions.c ****  * @file helper_functions.c
   3:Core/Src/helper_functions.c ****  * @author johannes regnier
   4:Core/Src/helper_functions.c ****  * @brief Various math tools 
   5:Core/Src/helper_functions.c ****  * @version 0.1
   6:Core/Src/helper_functions.c ****  * @date 2023-12-30
   7:Core/Src/helper_functions.c ****  * 
   8:Core/Src/helper_functions.c ****  * @copyright Copyright (c) 2023
   9:Core/Src/helper_functions.c ****  * 
  10:Core/Src/helper_functions.c ****  */
  11:Core/Src/helper_functions.c **** 
  12:Core/Src/helper_functions.c **** #include "helper_functions.h"
  13:Core/Src/helper_functions.c **** 
  14:Core/Src/helper_functions.c **** 
  15:Core/Src/helper_functions.c **** 
  16:Core/Src/helper_functions.c **** /**
  17:Core/Src/helper_functions.c ****  * @brief Linear interpolation within a given lookup table. Useful for wavetable oscillators.
  18:Core/Src/helper_functions.c ****  * 
  19:Core/Src/helper_functions.c ****  * @param index 
  20:Core/Src/helper_functions.c ****  * @param table_size 
  21:Core/Src/helper_functions.c ****  * @param table 
  22:Core/Src/helper_functions.c ****  * @return float 
  23:Core/Src/helper_functions.c ****  */
  24:Core/Src/helper_functions.c **** float interp_lin_lut(float index, uint16_t table_size, const float *table){
  31              		.loc 1 24 75 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s 			page 2


  35              		@ link register save eliminated.
  25:Core/Src/helper_functions.c ****     float diff;
  26:Core/Src/helper_functions.c ****     uint32_t trunc = (uint32_t)index; // truncate the index but don't overwrite
  36              		.loc 1 26 14 is_stmt 0 view .LVU1
  37 0000 FCEEC07A 		vcvt.u32.f32	s15, s0
  38 0004 17EE903A 		vmov	r3, s15	@ int
  25:Core/Src/helper_functions.c ****     float diff;
  39              		.loc 1 25 5 is_stmt 1 view .LVU2
  40              		.loc 1 26 5 view .LVU3
  41              	.LVL1:
  27:Core/Src/helper_functions.c ****     float frac = index - trunc; // get the fractional part
  42              		.loc 1 27 5 view .LVU4
  43              		.loc 1 27 24 is_stmt 0 view .LVU5
  44 0008 F8EE677A 		vcvt.f32.u32	s15, s15
  28:Core/Src/helper_functions.c **** 
  29:Core/Src/helper_functions.c ****     while (trunc > table_size)
  45              		.loc 1 29 18 view .LVU6
  46 000c 8342     		cmp	r3, r0
  27:Core/Src/helper_functions.c ****     float frac = index - trunc; // get the fractional part
  47              		.loc 1 27 11 view .LVU7
  48 000e 70EE677A 		vsub.f32	s15, s0, s15
  49              	.LVL2:
  50              		.loc 1 29 5 is_stmt 1 view .LVU8
  51              		.loc 1 29 18 view .LVU9
  52 0012 02D9     		bls	.L2
  53              	.L3:
  30:Core/Src/helper_functions.c ****         trunc = trunc - table_size;
  54              		.loc 1 30 9 view .LVU10
  55              		.loc 1 30 15 is_stmt 0 view .LVU11
  56 0014 1B1A     		subs	r3, r3, r0
  57              	.LVL3:
  29:Core/Src/helper_functions.c ****         trunc = trunc - table_size;
  58              		.loc 1 29 18 is_stmt 1 view .LVU12
  59 0016 8342     		cmp	r3, r0
  60 0018 FCD8     		bhi	.L3
  61              	.L2:
  31:Core/Src/helper_functions.c **** 
  32:Core/Src/helper_functions.c ****     // if (trunc == table_size-1) 
  33:Core/Src/helper_functions.c ****     //     diff = table[0] - table[trunc]; // wrap
  34:Core/Src/helper_functions.c ****     // else
  35:Core/Src/helper_functions.c ****     diff = table[trunc+1] - table[trunc]; // no need to check and wrap, table size is 1025
  62              		.loc 1 35 5 view .LVU13
  63              		.loc 1 35 17 is_stmt 0 view .LVU14
  64 001a 0133     		adds	r3, r3, #1
  65              	.LVL4:
  66              		.loc 1 35 34 view .LVU15
  67 001c 01EB8301 		add	r1, r1, r3, lsl #2
  68              	.LVL5:
  69              		.loc 1 35 34 view .LVU16
  70 0020 11ED010A 		vldr.32	s0, [r1, #-4]
  71              	.LVL6:
  36:Core/Src/helper_functions.c **** 
  37:Core/Src/helper_functions.c ****     // get the interpolated output
  38:Core/Src/helper_functions.c ****     return table[trunc] + (diff * frac);
  72              		.loc 1 38 5 is_stmt 1 view .LVU17
  35:Core/Src/helper_functions.c **** 
  73              		.loc 1 35 10 is_stmt 0 view .LVU18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s 			page 3


  74 0024 91ED007A 		vldr.32	s14, [r1]
  75 0028 37EE407A 		vsub.f32	s14, s14, s0
  39:Core/Src/helper_functions.c **** }
  76              		.loc 1 39 1 view .LVU19
  77 002c A7EE870A 		vfma.f32	s0, s15, s14
  78              	.LVL7:
  79              		.loc 1 39 1 view .LVU20
  80 0030 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE3:
  84 0032 00BF     		.section	.text.clip,"ax",%progbits
  85              		.align	1
  86              		.p2align 2,,3
  87              		.global	clip
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	clip:
  93              	.LVL8:
  94              	.LFB4:
  40:Core/Src/helper_functions.c **** 
  41:Core/Src/helper_functions.c **** /**
  42:Core/Src/helper_functions.c ****  * @brief Constrain input value between lower and upper limits
  43:Core/Src/helper_functions.c ****  * 
  44:Core/Src/helper_functions.c ****  * @param input 
  45:Core/Src/helper_functions.c ****  * @param lower 
  46:Core/Src/helper_functions.c ****  * @param upper 
  47:Core/Src/helper_functions.c ****  * @return float 
  48:Core/Src/helper_functions.c ****  */
  49:Core/Src/helper_functions.c **** float clip(float input, float lower, float upper) {
  95              		.loc 1 49 51 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
  50:Core/Src/helper_functions.c ****         return max(lower, min(input, upper));
 100              		.loc 1 50 9 view .LVU22
 101              		.loc 1 50 16 is_stmt 0 view .LVU23
 102 0000 B4EEC10A 		vcmpe.f32	s0, s2
 103 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 104 0008 58BF     		it	pl
 105 000a B0EE410A 		vmovpl.f32	s0, s2
 106              	.LVL9:
 107              		.loc 1 50 16 view .LVU24
 108 000e B4EEE00A 		vcmpe.f32	s0, s1
 109 0012 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  51:Core/Src/helper_functions.c **** }
 110              		.loc 1 51 1 view .LVU25
 111 0016 48BF     		it	mi
 112 0018 B0EE600A 		vmovmi.f32	s0, s1
 113 001c 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE4:
 117 001e 00BF     		.text
 118              	.Letext0:
 119              		.file 2 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 120              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s 			page 4


ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 helper_functions.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s:20     .text.interp_lin_lut:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s:27     .text.interp_lin_lut:0000000000000000 interp_lin_lut
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s:85     .text.clip:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccWC7siK.s:92     .text.clip:0000000000000000 clip

NO UNDEFINED SYMBOLS
