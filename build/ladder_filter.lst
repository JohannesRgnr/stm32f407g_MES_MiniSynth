ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ladder_filter.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MoogLP_init,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	MoogLP_init
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MoogLP_init:
  26              	.LVL0:
  27              	.LFB3:
  28              		.file 1 "Core/Src/ladder_filter.c"
   1:Core/Src/ladder_filter.c **** /**
   2:Core/Src/ladder_filter.c ****  * @file ladder_filter.c
   3:Core/Src/ladder_filter.c ****  * @author johannes regnier
   4:Core/Src/ladder_filter.c ****  * @brief Zero delay feedback 4-pole ladder filter
   5:Core/Src/ladder_filter.c ****  * @note Simple implementation following Vadim Zavalishin (2008) - Preserving the LTI system topolo
   6:Core/Src/ladder_filter.c ****  * @version 0.1
   7:Core/Src/ladder_filter.c ****  * @date 2023-12-31
   8:Core/Src/ladder_filter.c ****  * 
   9:Core/Src/ladder_filter.c ****  * @copyright Copyright (c) 2023
  10:Core/Src/ladder_filter.c ****  * 
  11:Core/Src/ladder_filter.c ****  */
  12:Core/Src/ladder_filter.c **** 
  13:Core/Src/ladder_filter.c **** #include "ladder_filter.h"
  14:Core/Src/ladder_filter.c **** #include "helper_functions.h"
  15:Core/Src/ladder_filter.c **** #include "CONSTS.h"
  16:Core/Src/ladder_filter.c **** #include "lut_tan.h"
  17:Core/Src/ladder_filter.c **** 
  18:Core/Src/ladder_filter.c **** ZDFLadder_t Moog_filter;
  19:Core/Src/ladder_filter.c **** 
  20:Core/Src/ladder_filter.c **** 
  21:Core/Src/ladder_filter.c **** void MoogLP_init(ZDFLadder_t * filter){
  29              		.loc 1 21 39 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  22:Core/Src/ladder_filter.c ****     filter->cutoff = 100.0f;
  34              		.loc 1 22 5 view .LVU1
  23:Core/Src/ladder_filter.c ****     filter->s1 = 0.0f;
  35              		.loc 1 23 16 is_stmt 0 view .LVU2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 2


  36 0000 0023     		movs	r3, #0
  22:Core/Src/ladder_filter.c ****     filter->cutoff = 100.0f;
  37              		.loc 1 22 20 view .LVU3
  38 0002 044A     		ldr	r2, .L3
  39 0004 0260     		str	r2, [r0]	@ float
  40              		.loc 1 23 5 is_stmt 1 view .LVU4
  41              		.loc 1 23 16 is_stmt 0 view .LVU5
  42 0006 4360     		str	r3, [r0, #4]	@ float
  24:Core/Src/ladder_filter.c ****     filter->s2 = 0.0f;
  43              		.loc 1 24 5 is_stmt 1 view .LVU6
  44              		.loc 1 24 16 is_stmt 0 view .LVU7
  45 0008 8360     		str	r3, [r0, #8]	@ float
  25:Core/Src/ladder_filter.c ****     filter->s3 = 0.0f;
  46              		.loc 1 25 5 is_stmt 1 view .LVU8
  47              		.loc 1 25 16 is_stmt 0 view .LVU9
  48 000a C360     		str	r3, [r0, #12]	@ float
  26:Core/Src/ladder_filter.c ****     filter->s4 = 0.0f;
  49              		.loc 1 26 5 is_stmt 1 view .LVU10
  50              		.loc 1 26 16 is_stmt 0 view .LVU11
  51 000c 0361     		str	r3, [r0, #16]	@ float
  27:Core/Src/ladder_filter.c ****     filter->k = 0.0f;
  52              		.loc 1 27 5 is_stmt 1 view .LVU12
  53              		.loc 1 27 15 is_stmt 0 view .LVU13
  54 000e 4361     		str	r3, [r0, #20]	@ float
  28:Core/Src/ladder_filter.c **** }
  55              		.loc 1 28 1 view .LVU14
  56 0010 7047     		bx	lr
  57              	.L4:
  58 0012 00BF     		.align	2
  59              	.L3:
  60 0014 0000C842 		.word	1120403456
  61              		.cfi_endproc
  62              	.LFE3:
  64              		.global	__aeabi_f2d
  65              		.global	__aeabi_dmul
  66              		.global	__aeabi_d2f
  67              		.section	.text.MoogLP_compute,"ax",%progbits
  68              		.align	1
  69              		.p2align 2,,3
  70              		.global	MoogLP_compute
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  75              	MoogLP_compute:
  76              	.LVL1:
  77              	.LFB4:
  29:Core/Src/ladder_filter.c **** 
  30:Core/Src/ladder_filter.c **** 
  31:Core/Src/ladder_filter.c **** 
  32:Core/Src/ladder_filter.c **** 
  33:Core/Src/ladder_filter.c **** float MoogLP_compute(ZDFLadder_t * filter, float input)
  34:Core/Src/ladder_filter.c **** {
  78              		.loc 1 34 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  35:Core/Src/ladder_filter.c **** 	float f, one_over_oneplusf, g, G, y1, y2, y3, y4, feedback;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 3


  82              		.loc 1 35 2 view .LVU16
  36:Core/Src/ladder_filter.c ****     f = interp_lin_lut(LUT_TAN_SIZE * (PI * filter->cutoff * TS), LUT_TAN_SIZE, tan_lut);
  83              		.loc 1 36 5 view .LVU17
  34:Core/Src/ladder_filter.c **** 	float f, one_over_oneplusf, g, G, y1, y2, y3, y4, feedback;
  84              		.loc 1 34 1 is_stmt 0 view .LVU18
  85 0000 10B5     		push	{r4, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 4, -8
  88              		.cfi_offset 14, -4
  89 0002 0446     		mov	r4, r0
  90 0004 2DED028B 		vpush.64	{d8}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 80, -16
  93              		.cfi_offset 81, -12
  94              		.loc 1 36 51 view .LVU19
  95 0008 0068     		ldr	r0, [r0]	@ float
  96              	.LVL2:
  34:Core/Src/ladder_filter.c **** 	float f, one_over_oneplusf, g, G, y1, y2, y3, y4, feedback;
  97              		.loc 1 34 1 view .LVU20
  98 000a B0EE408A 		vmov.f32	s16, s0
  99              		.loc 1 36 51 view .LVU21
 100 000e FFF7FEFF 		bl	__aeabi_f2d
 101              	.LVL3:
 102              		.loc 1 36 37 view .LVU22
 103 0012 5AA3     		adr	r3, .L14+4
 104 0014 D3E90023 		ldrd	r2, [r3]
 105 0018 FFF7FEFF 		bl	__aeabi_dmul
 106              	.LVL4:
 107              		.loc 1 36 9 view .LVU23
 108 001c FFF7FEFF 		bl	__aeabi_d2f
 109              	.LVL5:
 110 0020 5549     		ldr	r1, .L14
 111 0022 00EE100A 		vmov	s0, r0
 112 0026 4FF40060 		mov	r0, #2048
 113 002a FFF7FEFF 		bl	interp_lin_lut
 114              	.LVL6:
  37:Core/Src/ladder_filter.c ****     // f = tanf(PI * filter->cutoff * TS);
  38:Core/Src/ladder_filter.c **** 	one_over_oneplusf = 1 / (1 + f);
 115              		.loc 1 38 29 view .LVU24
 116 002e F7EE006A 		vmov.f32	s13, #1.0e+0
 117 0032 70EE267A 		vadd.f32	s15, s0, s13
  39:Core/Src/ladder_filter.c **** 	g = f * one_over_oneplusf;
  40:Core/Src/ladder_filter.c **** 	G = g*g*g*g;
  41:Core/Src/ladder_filter.c **** 	// at output of 4th stage
  42:Core/Src/ladder_filter.c **** 	y4 = ((one_over_oneplusf)*(filter->s4 + g*filter->s3 + g*g*filter->s2 + g*g*g*filter->s1) + G*inpu
 118              		.loc 1 42 50 view .LVU25
 119 0036 94ED036A 		vldr.32	s12, [r4, #12]
 120              		.loc 1 42 40 view .LVU26
 121 003a D4ED044A 		vldr.32	s9, [r4, #16]
 122              		.loc 1 42 86 view .LVU27
 123 003e 94ED017A 		vldr.32	s14, [r4, #4]
 124              		.loc 1 42 116 view .LVU28
 125 0042 94ED054A 		vldr.32	s8, [r4, #20]
  38:Core/Src/ladder_filter.c **** 	g = f * one_over_oneplusf;
 126              		.loc 1 38 20 view .LVU29
 127 0046 C6EEA73A 		vdiv.f32	s7, s13, s15
 128              		.loc 1 42 67 view .LVU30
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 4


 129 004a D4ED027A 		vldr.32	s15, [r4, #8]
  39:Core/Src/ladder_filter.c **** 	g = f * one_over_oneplusf;
 130              		.loc 1 39 4 view .LVU31
 131 004e 20EE235A 		vmul.f32	s10, s0, s7
 132              	.LBB14:
 133              	.LBB15:
 134              		.file 2 "Core/Inc/helper_functions.h"
   1:Core/Inc/helper_functions.h **** /**
   2:Core/Inc/helper_functions.h ****  * @file helper_functions.h
   3:Core/Inc/helper_functions.h ****  * @author johannes regnier
   4:Core/Inc/helper_functions.h ****  * @brief Various math tools 
   5:Core/Inc/helper_functions.h ****  * @version 0.1
   6:Core/Inc/helper_functions.h ****  * @date 2023-12-30
   7:Core/Inc/helper_functions.h ****  * 
   8:Core/Inc/helper_functions.h ****  * @copyright Copyright (c) 2023
   9:Core/Inc/helper_functions.h ****  * 
  10:Core/Inc/helper_functions.h ****  */
  11:Core/Inc/helper_functions.h **** 
  12:Core/Inc/helper_functions.h **** #ifndef _HELPER_FUNCTIONS_H
  13:Core/Inc/helper_functions.h **** #define _HELPER_FUNCTIONS_H
  14:Core/Inc/helper_functions.h **** 
  15:Core/Inc/helper_functions.h **** 
  16:Core/Inc/helper_functions.h **** #include <math.h>
  17:Core/Inc/helper_functions.h **** #include <stdint.h>
  18:Core/Inc/helper_functions.h **** 
  19:Core/Inc/helper_functions.h **** #ifndef NOMINMAX
  20:Core/Inc/helper_functions.h **** 
  21:Core/Inc/helper_functions.h **** #ifndef max
  22:Core/Inc/helper_functions.h **** #define max(a,b)            (((a) > (b)) ? (a) : (b))
  23:Core/Inc/helper_functions.h **** #endif
  24:Core/Inc/helper_functions.h **** 
  25:Core/Inc/helper_functions.h **** #ifndef min
  26:Core/Inc/helper_functions.h **** #define min(a,b)            (((a) < (b)) ? (a) : (b))
  27:Core/Inc/helper_functions.h **** #endif
  28:Core/Inc/helper_functions.h **** 
  29:Core/Inc/helper_functions.h **** #endif  /* NOMINMAX */
  30:Core/Inc/helper_functions.h **** 
  31:Core/Inc/helper_functions.h **** /**
  32:Core/Inc/helper_functions.h ****  * @brief Keep value between 0 and max
  33:Core/Inc/helper_functions.h ****  * 
  34:Core/Inc/helper_functions.h ****  * @param value 
  35:Core/Inc/helper_functions.h ****  * @param max 
  36:Core/Inc/helper_functions.h ****  * @return float 
  37:Core/Inc/helper_functions.h ****  */
  38:Core/Inc/helper_functions.h **** inline float wrap(float value, float max)   
  39:Core/Inc/helper_functions.h **** {
  40:Core/Inc/helper_functions.h ****     if (value < 0.f)
  41:Core/Inc/helper_functions.h ****         value += max;
  42:Core/Inc/helper_functions.h ****     if (value >= max)
  43:Core/Inc/helper_functions.h ****         value -= max;
  44:Core/Inc/helper_functions.h **** 
  45:Core/Inc/helper_functions.h ****     return value;
  46:Core/Inc/helper_functions.h **** }
  47:Core/Inc/helper_functions.h **** 
  48:Core/Inc/helper_functions.h **** inline float Crossfade(float a, float b, float fade)
  49:Core/Inc/helper_functions.h **** {
  50:Core/Inc/helper_functions.h ****     return a + (b - a) * fade;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 5


  51:Core/Inc/helper_functions.h **** }
  52:Core/Inc/helper_functions.h **** 
  53:Core/Inc/helper_functions.h **** 
  54:Core/Inc/helper_functions.h **** /**
  55:Core/Inc/helper_functions.h ****  * @brief Pade-approximation of tanh for soft clipping
  56:Core/Inc/helper_functions.h ****  * @ from https://www.musicdsp.org/en/latest/Other/238-rational-tanh-approximation.html 
  57:Core/Inc/helper_functions.h ****  * @param x 
  58:Core/Inc/helper_functions.h ****  * @return float 
  59:Core/Inc/helper_functions.h ****  */
  60:Core/Inc/helper_functions.h **** inline float SoftClip(float x)
  61:Core/Inc/helper_functions.h **** {
  62:Core/Inc/helper_functions.h ****     if (x < -3.0f)
 135              		.loc 2 62 8 view .LVU32
 136 0052 F8EE081A 		vmov.f32	s3, #-3.0e+0
 137              	.LBE15:
 138              	.LBE14:
 139              		.loc 1 42 40 view .LVU33
 140 0056 E6EE054A 		vfma.f32	s9, s12, s10
  40:Core/Src/ladder_filter.c **** 	// at output of 4th stage
 141              		.loc 1 40 7 view .LVU34
 142 005a 25EE053A 		vmul.f32	s6, s10, s10
 143              	.LBB23:
 144              	.LBB18:
 145              		.loc 2 62 8 view .LVU35
 146 005e B4EEE18A 		vcmpe.f32	s16, s3
 147              	.LBE18:
 148              	.LBE23:
 149              		.loc 1 42 55 view .LVU36
 150 0062 E3EE274A 		vfma.f32	s9, s6, s15
  40:Core/Src/ladder_filter.c **** 	// at output of 4th stage
 151              		.loc 1 40 9 view .LVU37
 152 0066 23EE052A 		vmul.f32	s4, s6, s10
 153              	.LBB24:
 154              	.LBB19:
 155              		.loc 2 62 8 view .LVU38
 156 006a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 157              	.LBE19:
 158              	.LBE24:
 159              		.loc 1 42 72 view .LVU39
 160 006e E2EE074A 		vfma.f32	s9, s4, s14
  40:Core/Src/ladder_filter.c **** 	// at output of 4th stage
 161              		.loc 1 40 4 view .LVU40
 162 0072 62EE052A 		vmul.f32	s5, s4, s10
 163              		.loc 1 42 108 view .LVU41
 164 0076 B0EE662A 		vmov.f32	s4, s13
 165              		.loc 1 42 95 view .LVU42
 166 007a 22EE883A 		vmul.f32	s6, s5, s16
 167              		.loc 1 42 108 view .LVU43
 168 007e A4EE222A 		vfma.f32	s4, s8, s5
 169              		.loc 1 42 92 view .LVU44
 170 0082 A4EEA33A 		vfma.f32	s6, s9, s7
  36:Core/Src/ladder_filter.c ****     // f = tanf(PI * filter->cutoff * TS);
 171              		.loc 1 36 9 view .LVU45
 172 0086 F0EE405A 		vmov.f32	s11, s0
 173              	.LVL7:
  38:Core/Src/ladder_filter.c **** 	g = f * one_over_oneplusf;
 174              		.loc 1 38 2 is_stmt 1 view .LVU46
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 6


  39:Core/Src/ladder_filter.c **** 	G = g*g*g*g;
 175              		.loc 1 39 2 view .LVU47
  40:Core/Src/ladder_filter.c **** 	// at output of 4th stage
 176              		.loc 1 40 2 view .LVU48
 177              		.loc 1 42 2 view .LVU49
 178              		.loc 1 42 5 is_stmt 0 view .LVU50
 179 008a C3EE024A 		vdiv.f32	s9, s6, s4
 180              	.LVL8:
  43:Core/Src/ladder_filter.c **** 	// at other outputs
  44:Core/Src/ladder_filter.c **** 	feedback = (SoftClip(input) - SoftClip(filter->k*y4)); // naive but good enough
 181              		.loc 1 44 2 is_stmt 1 view .LVU51
 182              	.LBB25:
 183              	.LBI14:
  60:Core/Inc/helper_functions.h **** {
 184              		.loc 2 60 14 view .LVU52
 185              	.LBB20:
 186              		.loc 2 62 5 view .LVU53
 187              		.loc 2 62 8 is_stmt 0 view .LVU54
 188 008e 6ED4     		bmi	.L8
  63:Core/Inc/helper_functions.h ****     {
  64:Core/Inc/helper_functions.h ****         return -1.0f;
  65:Core/Inc/helper_functions.h ****     }
  66:Core/Inc/helper_functions.h ****     else if (x > 3.0f)
 189              		.loc 2 66 10 is_stmt 1 view .LVU55
 190              		.loc 2 66 13 is_stmt 0 view .LVU56
 191 0090 B0EE083A 		vmov.f32	s6, #3.0e+0
 192 0094 B4EEC38A 		vcmpe.f32	s16, s6
 193 0098 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 194 009c 53DD     		ble	.L13
 195              	.LVL9:
 196              	.L6:
 197              		.loc 2 66 13 view .LVU57
 198              	.LBE20:
 199              	.LBE25:
 200              		.loc 1 44 32 view .LVU58
 201 009e 24EE244A 		vmul.f32	s8, s8, s9
 202              	.LVL10:
 203              	.LBB26:
 204              	.LBI26:
  60:Core/Inc/helper_functions.h **** {
 205              		.loc 2 60 14 is_stmt 1 view .LVU59
 206              	.LBB27:
  62:Core/Inc/helper_functions.h ****     {
 207              		.loc 2 62 5 view .LVU60
  62:Core/Inc/helper_functions.h ****     {
 208              		.loc 2 62 8 is_stmt 0 view .LVU61
 209 00a2 B8EE083A 		vmov.f32	s6, #-3.0e+0
 210 00a6 B4EEC34A 		vcmpe.f32	s8, s6
 211 00aa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 212 00ae 5BD4     		bmi	.L10
 213              		.loc 2 66 10 is_stmt 1 view .LVU62
 214              		.loc 2 66 13 is_stmt 0 view .LVU63
 215 00b0 B0EE083A 		vmov.f32	s6, #3.0e+0
 216 00b4 B4EEC34A 		vcmpe.f32	s8, s6
 217 00b8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 218 00bc 40DC     		bgt	.L11
 219              	.LVL11:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 7


 220              	.LBB28:
 221              	.LBI28:
  60:Core/Inc/helper_functions.h **** {
 222              		.loc 2 60 14 is_stmt 1 view .LVU64
 223              	.LBB29:
  67:Core/Inc/helper_functions.h ****     {
  68:Core/Inc/helper_functions.h ****         return 1.0f;
  69:Core/Inc/helper_functions.h ****     }
  70:Core/Inc/helper_functions.h ****     else
  71:Core/Inc/helper_functions.h ****     {
  72:Core/Inc/helper_functions.h ****         return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
 224              		.loc 2 72 9 view .LVU65
 225              		.loc 2 72 31 is_stmt 0 view .LVU66
 226 00be 24EE043A 		vmul.f32	s6, s8, s8
 227              		.loc 2 72 27 view .LVU67
 228 00c2 F3EE0B2A 		vmov.f32	s5, #2.7e+1
 229              		.loc 2 72 45 view .LVU68
 230 00c6 F2EE021A 		vmov.f32	s3, #9.0e+0
 231 00ca B0EE622A 		vmov.f32	s4, s5
 232 00ce A3EE212A 		vfma.f32	s4, s6, s3
 233              		.loc 2 72 27 view .LVU69
 234 00d2 33EE223A 		vadd.f32	s6, s6, s5
 235              		.loc 2 72 18 view .LVU70
 236 00d6 23EE043A 		vmul.f32	s6, s6, s8
 237              		.loc 2 72 36 view .LVU71
 238 00da 83EE024A 		vdiv.f32	s8, s6, s4
 239              	.LVL12:
 240              	.L7:
 241              		.loc 2 72 36 view .LVU72
 242              	.LBE29:
 243              	.LBE28:
 244              	.LBE27:
 245              	.LBE26:
  45:Core/Src/ladder_filter.c **** 	y1 = g*feedback + (filter->s1) * one_over_oneplusf;
  46:Core/Src/ladder_filter.c **** 	y2 = g*y1 + filter->s2 * one_over_oneplusf;
  47:Core/Src/ladder_filter.c **** 	y3 = g*y2 + filter->s3 * one_over_oneplusf;
  48:Core/Src/ladder_filter.c **** 	//update states s = y + v = y + f*(x-y) (=2v + s = 2*f(x-y) + s)
  49:Core/Src/ladder_filter.c **** 	filter->s1 = y1 + f*(feedback - y1);
  50:Core/Src/ladder_filter.c **** 	filter->s2 = y2 + f*(y1 - y2);
  51:Core/Src/ladder_filter.c **** 	filter->s3 = y3 + f*(y2 - y3);
  52:Core/Src/ladder_filter.c **** 	filter->s4 = y4 + f*(y3 - y4);
  53:Core/Src/ladder_filter.c **** 	return(y4);
  54:Core/Src/ladder_filter.c **** }...
 246              		.loc 1 54 1 view .LVU73
 247 00de BDEC028B 		vldm	sp!, {d8}
 248              		.cfi_remember_state
 249              		.cfi_restore 80
 250              		.cfi_restore 81
 251              		.cfi_def_cfa_offset 8
 252              	.LVL13:
  44:Core/Src/ladder_filter.c **** 	feedback = (SoftClip(input) - SoftClip(filter->k*y4)); // naive but good enough
 253              		.loc 1 44 11 view .LVU74
 254 00e2 76EEC46A 		vsub.f32	s13, s13, s8
 255              	.LVL14:
  45:Core/Src/ladder_filter.c **** 	y1 = g*feedback + (filter->s1) * one_over_oneplusf;
 256              		.loc 1 45 2 is_stmt 1 view .LVU75
  45:Core/Src/ladder_filter.c **** 	y1 = g*feedback + (filter->s1) * one_over_oneplusf;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 8


 257              		.loc 1 45 33 is_stmt 0 view .LVU76
 258 00e6 27EE237A 		vmul.f32	s14, s14, s7
  46:Core/Src/ladder_filter.c **** 	y2 = g*y1 + filter->s2 * one_over_oneplusf;
 259              		.loc 1 46 25 view .LVU77
 260 00ea 67EEA37A 		vmul.f32	s15, s15, s7
  45:Core/Src/ladder_filter.c **** 	y1 = g*feedback + (filter->s1) * one_over_oneplusf;
 261              		.loc 1 45 5 view .LVU78
 262 00ee A5EE267A 		vfma.f32	s14, s10, s13
 263              	.LVL15:
  46:Core/Src/ladder_filter.c **** 	y2 = g*y1 + filter->s2 * one_over_oneplusf;
 264              		.loc 1 46 2 is_stmt 1 view .LVU79
  47:Core/Src/ladder_filter.c **** 	y3 = g*y2 + filter->s3 * one_over_oneplusf;
 265              		.loc 1 47 25 is_stmt 0 view .LVU80
 266 00f2 26EE236A 		vmul.f32	s12, s12, s7
  46:Core/Src/ladder_filter.c **** 	y2 = g*y1 + filter->s2 * one_over_oneplusf;
 267              		.loc 1 46 5 view .LVU81
 268 00f6 E5EE077A 		vfma.f32	s15, s10, s14
 269              	.LVL16:
  47:Core/Src/ladder_filter.c **** 	y3 = g*y2 + filter->s3 * one_over_oneplusf;
 270              		.loc 1 47 2 is_stmt 1 view .LVU82
  49:Core/Src/ladder_filter.c **** 	filter->s1 = y1 + f*(feedback - y1);
 271              		.loc 1 49 32 is_stmt 0 view .LVU83
 272 00fa 76EEC76A 		vsub.f32	s13, s13, s14
 273              	.LVL17:
  49:Core/Src/ladder_filter.c **** 	filter->s1 = y1 + f*(feedback - y1);
 274              		.loc 1 49 18 view .LVU84
 275 00fe B0EE474A 		vmov.f32	s8, s14
 276 0102 A6EEA54A 		vfma.f32	s8, s13, s11
  47:Core/Src/ladder_filter.c **** 	y3 = g*y2 + filter->s3 * one_over_oneplusf;
 277              		.loc 1 47 5 view .LVU85
 278 0106 F0EE466A 		vmov.f32	s13, s12
 279 010a E5EE276A 		vfma.f32	s13, s10, s15
 280              	.LVL18:
  49:Core/Src/ladder_filter.c **** 	filter->s1 = y1 + f*(feedback - y1);
 281              		.loc 1 49 2 is_stmt 1 view .LVU86
  50:Core/Src/ladder_filter.c **** 	filter->s2 = y2 + f*(y1 - y2);
 282              		.loc 1 50 26 is_stmt 0 view .LVU87
 283 010e 37EE677A 		vsub.f32	s14, s14, s15
 284              	.LVL19:
  50:Core/Src/ladder_filter.c **** 	filter->s2 = y2 + f*(y1 - y2);
 285              		.loc 1 50 18 view .LVU88
 286 0112 B0EE676A 		vmov.f32	s12, s15
 287 0116 A7EE256A 		vfma.f32	s12, s14, s11
  51:Core/Src/ladder_filter.c **** 	filter->s3 = y3 + f*(y2 - y3);
 288              		.loc 1 51 26 view .LVU89
 289 011a 77EEE67A 		vsub.f32	s15, s15, s13
 290              	.LVL20:
  52:Core/Src/ladder_filter.c **** 	filter->s4 = y4 + f*(y3 - y4);
 291              		.loc 1 52 26 view .LVU90
 292 011e 36EEE47A 		vsub.f32	s14, s13, s9
 293              		.loc 1 54 1 view .LVU91
 294 0122 B0EE640A 		vmov.f32	s0, s9
 295              	.LVL21:
  51:Core/Src/ladder_filter.c **** 	filter->s3 = y3 + f*(y2 - y3);
 296              		.loc 1 51 18 view .LVU92
 297 0126 E7EEA56A 		vfma.f32	s13, s15, s11
 298              	.LVL22:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 9


  52:Core/Src/ladder_filter.c **** 	filter->s4 = y4 + f*(y3 - y4);
 299              		.loc 1 52 18 view .LVU93
 300 012a E7EE254A 		vfma.f32	s9, s14, s11
 301              	.LVL23:
  49:Core/Src/ladder_filter.c **** 	filter->s1 = y1 + f*(feedback - y1);
 302              		.loc 1 49 13 view .LVU94
 303 012e 84ED014A 		vstr.32	s8, [r4, #4]
  50:Core/Src/ladder_filter.c **** 	filter->s2 = y2 + f*(y1 - y2);
 304              		.loc 1 50 2 is_stmt 1 view .LVU95
  50:Core/Src/ladder_filter.c **** 	filter->s2 = y2 + f*(y1 - y2);
 305              		.loc 1 50 13 is_stmt 0 view .LVU96
 306 0132 84ED026A 		vstr.32	s12, [r4, #8]
  51:Core/Src/ladder_filter.c **** 	filter->s3 = y3 + f*(y2 - y3);
 307              		.loc 1 51 2 is_stmt 1 view .LVU97
  51:Core/Src/ladder_filter.c **** 	filter->s3 = y3 + f*(y2 - y3);
 308              		.loc 1 51 13 is_stmt 0 view .LVU98
 309 0136 C4ED036A 		vstr.32	s13, [r4, #12]
  52:Core/Src/ladder_filter.c **** 	filter->s4 = y4 + f*(y3 - y4);
 310              		.loc 1 52 2 is_stmt 1 view .LVU99
  52:Core/Src/ladder_filter.c **** 	filter->s4 = y4 + f*(y3 - y4);
 311              		.loc 1 52 13 is_stmt 0 view .LVU100
 312 013a C4ED044A 		vstr.32	s9, [r4, #16]
  53:Core/Src/ladder_filter.c **** 	return(y4);
 313              		.loc 1 53 2 is_stmt 1 view .LVU101
 314              		.loc 1 54 1 is_stmt 0 view .LVU102
 315 013e 10BD     		pop	{r4, pc}
 316              	.LVL24:
 317              	.L11:
 318              		.cfi_restore_state
 319              	.LBB32:
 320              	.LBB30:
  68:Core/Inc/helper_functions.h ****     }
 321              		.loc 2 68 16 view .LVU103
 322 0140 B7EE004A 		vmov.f32	s8, #1.0e+0
 323              	.LVL25:
  68:Core/Inc/helper_functions.h ****     }
 324              		.loc 2 68 16 view .LVU104
 325 0144 CBE7     		b	.L7
 326              	.LVL26:
 327              	.L13:
  68:Core/Inc/helper_functions.h ****     }
 328              		.loc 2 68 16 view .LVU105
 329              	.LBE30:
 330              	.LBE32:
 331              	.LBB33:
 332              	.LBB21:
 333              	.LBB16:
 334              	.LBI16:
  60:Core/Inc/helper_functions.h **** {
 335              		.loc 2 60 14 is_stmt 1 view .LVU106
 336              	.LBB17:
 337              		.loc 2 72 9 view .LVU107
 338              		.loc 2 72 27 is_stmt 0 view .LVU108
 339 0146 B3EE0B3A 		vmov.f32	s6, #2.7e+1
 340              		.loc 2 72 31 view .LVU109
 341 014a 68EE086A 		vmul.f32	s13, s16, s16
 342              		.loc 2 72 45 view .LVU110
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 10


 343 014e F0EE432A 		vmov.f32	s5, s6
 344              	.LVL27:
 345              		.loc 2 72 45 view .LVU111
 346 0152 B2EE022A 		vmov.f32	s4, #9.0e+0
 347 0156 E6EE822A 		vfma.f32	s5, s13, s4
 348              		.loc 2 72 27 view .LVU112
 349 015a 76EE836A 		vadd.f32	s13, s13, s6
 350              		.loc 2 72 18 view .LVU113
 351 015e 26EE883A 		vmul.f32	s6, s13, s16
 352              		.loc 2 72 36 view .LVU114
 353 0162 C3EE226A 		vdiv.f32	s13, s6, s5
 354              	.LVL28:
 355              		.loc 2 72 36 view .LVU115
 356 0166 9AE7     		b	.L6
 357              	.LVL29:
 358              	.L10:
 359              		.loc 2 72 36 view .LVU116
 360              	.LBE17:
 361              	.LBE16:
 362              	.LBE21:
 363              	.LBE33:
 364              	.LBB34:
 365              	.LBB31:
  64:Core/Inc/helper_functions.h ****     }
 366              		.loc 2 64 16 view .LVU117
 367 0168 BFEE004A 		vmov.f32	s8, #-1.0e+0
 368              	.LVL30:
  64:Core/Inc/helper_functions.h ****     }
 369              		.loc 2 64 16 view .LVU118
 370 016c B7E7     		b	.L7
 371              	.LVL31:
 372              	.L8:
  64:Core/Inc/helper_functions.h ****     }
 373              		.loc 2 64 16 view .LVU119
 374              	.LBE31:
 375              	.LBE34:
 376              	.LBB35:
 377              	.LBB22:
 378 016e FFEE006A 		vmov.f32	s13, #-1.0e+0
 379 0172 94E7     		b	.L6
 380              	.L15:
 381 0174 AFF30080 		.align	3
 382              	.L14:
 383 0178 00000000 		.word	tan_lut
 384 017c A418D245 		.word	1171396772
 385 0180 B2ACC23F 		.word	1069722802
 386              	.LBE22:
 387              	.LBE35:
 388              		.cfi_endproc
 389              	.LFE4:
 391              		.global	Moog_filter
 392              		.section	.bss.Moog_filter,"aw",%nobits
 393              		.align	2
 396              	Moog_filter:
 397 0000 00000000 		.space	24
 397      00000000 
 397      00000000 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 11


 397      00000000 
 397      00000000 
 398              		.text
 399              	.Letext0:
 400              		.file 3 "Core/Inc/ladder_filter.h"
 401              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 402              		.file 5 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 403              		.file 6 "Core/Inc/lut_tan.h"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ladder_filter.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:18     .text.MoogLP_init:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:25     .text.MoogLP_init:0000000000000000 MoogLP_init
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:60     .text.MoogLP_init:0000000000000014 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:68     .text.MoogLP_compute:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:75     .text.MoogLP_compute:0000000000000000 MoogLP_compute
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:383    .text.MoogLP_compute:0000000000000178 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:396    .bss.Moog_filter:0000000000000000 Moog_filter
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccX8lTIq.s:393    .bss.Moog_filter:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
interp_lin_lut
tan_lut
