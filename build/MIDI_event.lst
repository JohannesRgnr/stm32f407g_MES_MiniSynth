ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"MIDI_event.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.allNotesOff,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.global	allNotesOff
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	allNotesOff:
  28              	.LFB137:
  29              		.file 1 "Core/Src/MIDI_event.c"
   1:Core/Src/MIDI_event.c **** /**
   2:Core/Src/MIDI_event.c ****  * @file MIDI_event.c
   3:Core/Src/MIDI_event.c ****  * @author modified by johannes regnier
   4:Core/Src/MIDI_event.c ****  * @brief MIDI events processing
   5:Core/Src/MIDI_event.c ****  * @note Makes use of the great resources from Tom Erbe
   6:Core/Src/MIDI_event.c ****  * @note http://synthnotes.ucsd.edu/wp4/index.php/2019/09/24/adding-the-usb-otg-midi-driver-polypho
   7:Core/Src/MIDI_event.c ****  * @note and of the awesome Xavier Halgand's Dekrispator
   8:Core/Src/MIDI_event.c ****  * @version 0.1
   9:Core/Src/MIDI_event.c ****  * @date 2023-12-30
  10:Core/Src/MIDI_event.c ****  *
  11:Core/Src/MIDI_event.c ****  * @copyright Copyright (c) 2023
  12:Core/Src/MIDI_event.c ****  *
  13:Core/Src/MIDI_event.c ****  */
  14:Core/Src/MIDI_event.c **** 
  15:Core/Src/MIDI_event.c **** #include <stdint.h>
  16:Core/Src/MIDI_event.c **** 
  17:Core/Src/MIDI_event.c **** #include "MIDI_event.h"
  18:Core/Src/MIDI_event.c **** #include "gpio.h"
  19:Core/Src/MIDI_event.c **** #include "SEGGER_RTT.h"
  20:Core/Src/MIDI_event.c **** #include "CONSTS.h"
  21:Core/Src/MIDI_event.c **** #include "helper_functions.h"
  22:Core/Src/MIDI_event.c **** #include "ADSR_envelope.h"
  23:Core/Src/MIDI_event.c **** 
  24:Core/Src/MIDI_event.c **** USBH_HandleTypeDef hUSBHost; /* USB Host handle */
  25:Core/Src/MIDI_event.c **** MIDI_ApplicationTypeDef Appli_state = MIDI_APPLICATION_IDLE;
  26:Core/Src/MIDI_event.c **** 
  27:Core/Src/MIDI_event.c **** uint16_t pitchbend ;
  28:Core/Src/MIDI_event.c **** uint8_t currentPitch ;
  29:Core/Src/MIDI_event.c **** uint8_t velocity ;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 2


  30:Core/Src/MIDI_event.c **** uint8_t notes_Active[128] = {0}; // at most, 128 MIDI notes are active
  31:Core/Src/MIDI_event.c **** int8_t notesCount = 0 ;			 // number of notes active
  32:Core/Src/MIDI_event.c **** extern ADSR_t adsr_amp;
  33:Core/Src/MIDI_event.c **** extern ADSR_t adsr_filt;
  34:Core/Src/MIDI_event.c **** extern ADSR_t adsr_index;
  35:Core/Src/MIDI_event.c **** 
  36:Core/Src/MIDI_event.c **** void allNotesOff(void)
  37:Core/Src/MIDI_event.c **** {
  30              		.loc 1 37 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Core/Src/MIDI_event.c **** 	for (uint8_t i = 0; i < 128; i++)
  34              		.loc 1 38 2 view .LVU1
  35              	.LBB2:
  36              		.loc 1 38 7 view .LVU2
  37              	.LVL0:
  38              		.loc 1 38 24 view .LVU3
  39              	.LBE2:
  37:Core/Src/MIDI_event.c **** 	for (uint8_t i = 0; i < 128; i++)
  40              		.loc 1 37 1 is_stmt 0 view .LVU4
  41 0000 08B5     		push	{r3, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 3, -8
  44              		.cfi_offset 14, -4
  45              	.LBB3:
  39:Core/Src/MIDI_event.c **** 		notes_Active[i] = 0;
  46              		.loc 1 39 19 view .LVU5
  47 0002 8022     		movs	r2, #128
  48 0004 0348     		ldr	r0, .L4
  49 0006 0021     		movs	r1, #0
  50 0008 FFF7FEFF 		bl	memset
  51              	.LVL1:
  52              		.loc 1 39 19 view .LVU6
  53              	.LBE3:
  40:Core/Src/MIDI_event.c **** 	notesCount = 0;
  54              		.loc 1 40 2 is_stmt 1 view .LVU7
  55              		.loc 1 40 13 is_stmt 0 view .LVU8
  56 000c 024B     		ldr	r3, .L4+4
  57 000e 0022     		movs	r2, #0
  58 0010 1A70     		strb	r2, [r3]
  41:Core/Src/MIDI_event.c **** }
  59              		.loc 1 41 1 view .LVU9
  60 0012 08BD     		pop	{r3, pc}
  61              	.L5:
  62              		.align	2
  63              	.L4:
  64 0014 00000000 		.word	.LANCHOR0
  65 0018 00000000 		.word	.LANCHOR1
  66              		.cfi_endproc
  67              	.LFE137:
  69              		.section	.text.MIDI_eventInit,"ax",%progbits
  70              		.align	1
  71              		.p2align 2,,3
  72              		.global	MIDI_eventInit
  73              		.syntax unified
  74              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 3


  75              		.thumb_func
  77              	MIDI_eventInit:
  78              	.LFB138:
  42:Core/Src/MIDI_event.c **** 
  43:Core/Src/MIDI_event.c **** 
  44:Core/Src/MIDI_event.c **** void MIDI_eventInit()
  45:Core/Src/MIDI_event.c **** {
  79              		.loc 1 45 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  46:Core/Src/MIDI_event.c **** 	pitchbend = 8192;
  84              		.loc 1 46 2 view .LVU11
  85              		.loc 1 46 12 is_stmt 0 view .LVU12
  86 0000 024B     		ldr	r3, .L7
  87 0002 4FF40052 		mov	r2, #8192
  88 0006 1A80     		strh	r2, [r3]	@ movhi
  47:Core/Src/MIDI_event.c **** }
  89              		.loc 1 47 1 view .LVU13
  90 0008 7047     		bx	lr
  91              	.L8:
  92 000a 00BF     		.align	2
  93              	.L7:
  94 000c 00000000 		.word	.LANCHOR2
  95              		.cfi_endproc
  96              	.LFE138:
  98              		.section	.text.ProcessMIDI,"ax",%progbits
  99              		.align	1
 100              		.p2align 2,,3
 101              		.global	ProcessMIDI
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	ProcessMIDI:
 107              	.LVL2:
 108              	.LFB139:
  48:Core/Src/MIDI_event.c **** 
  49:Core/Src/MIDI_event.c **** /**
  50:Core/Src/MIDI_event.c ****  * @brief Process incoming MIDI events - Monophonic, with legato
  51:Core/Src/MIDI_event.c ****  * @note Code adapted from Xavier Halgand and from Tom Erbe's version
  52:Core/Src/MIDI_event.c ****  *
  53:Core/Src/MIDI_event.c ****  * @param pack
  54:Core/Src/MIDI_event.c ****  */
  55:Core/Src/MIDI_event.c **** void ProcessMIDI(midi_package_t pack)
  56:Core/Src/MIDI_event.c **** {
 109              		.loc 1 56 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		.loc 1 56 1 is_stmt 0 view .LVU15
 114 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 3, -24
 117              		.cfi_offset 4, -20
 118              		.cfi_offset 5, -16
 119              		.cfi_offset 6, -12
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 4


 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 C0F30743 		ubfx	r3, r0, #16, #8
 123 0006 C0F30766 		ubfx	r6, r0, #24, #8
 124 000a 040E     		lsrs	r4, r0, #24
  57:Core/Src/MIDI_event.c **** 	uint8_t status;
  58:Core/Src/MIDI_event.c **** 
  59:Core/Src/MIDI_event.c **** 	status = pack.evnt0 & 0xF0;
 125              		.loc 1 59 9 view .LVU16
 126 000c C0F30720 		ubfx	r0, r0, #8, #8
 127              	.LVL3:
 128              		.loc 1 59 9 view .LVU17
 129 0010 00F0F000 		and	r0, r0, #240
  60:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
  61:Core/Src/MIDI_event.c **** 	{
  62:Core/Src/MIDI_event.c **** 		switch (pack.evnt0)
  63:Core/Src/MIDI_event.c **** 		{
  64:Core/Src/MIDI_event.c **** 		case 0xF0: // Start of System Exclusive
  65:Core/Src/MIDI_event.c **** 		case 0xF1: // MIDI Time Code Quarter Fram
  66:Core/Src/MIDI_event.c **** 		case 0xF2: // Song Position Pointer
  67:Core/Src/MIDI_event.c **** 		case 0xF3: // Song Select
  68:Core/Src/MIDI_event.c **** 		case 0xF4: // Undefined
  69:Core/Src/MIDI_event.c **** 		case 0xF5: // Undefined
  70:Core/Src/MIDI_event.c **** 		case 0xF6: // Tune Request
  71:Core/Src/MIDI_event.c **** 		case 0xF7: // End of System Exclusive
  72:Core/Src/MIDI_event.c **** 		case 0xF8: // Timing Clock (24 times a quarter note)
  73:Core/Src/MIDI_event.c **** 		case 0xF9: // Undefined
  74:Core/Src/MIDI_event.c **** 		case 0xFA: // Start Sequence
  75:Core/Src/MIDI_event.c **** 		case 0xFB: // Continue Sequence
  76:Core/Src/MIDI_event.c **** 		case 0xFC: // Pause Sequence
  77:Core/Src/MIDI_event.c **** 		case 0xFD: // Undefined
  78:Core/Src/MIDI_event.c **** 		case 0xFE: // Active Sensing
  79:Core/Src/MIDI_event.c **** 		case 0xFF: // Reset all synthesizers to power up
  80:Core/Src/MIDI_event.c **** 			break;
  81:Core/Src/MIDI_event.c **** 		}
  82:Core/Src/MIDI_event.c **** 	}
  83:Core/Src/MIDI_event.c **** 
  84:Core/Src/MIDI_event.c **** 	switch (status)
 130              		.loc 1 84 2 view .LVU18
 131 0014 9028     		cmp	r0, #144
 132 0016 1D46     		mov	r5, r3
 133              	.LVL4:
  57:Core/Src/MIDI_event.c **** 	uint8_t status;
 134              		.loc 1 57 2 is_stmt 1 view .LVU19
  59:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
 135              		.loc 1 59 2 view .LVU20
  60:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
 136              		.loc 1 60 2 view .LVU21
 137              		.loc 1 84 2 view .LVU22
 138 0018 25D0     		beq	.L10
 139 001a E028     		cmp	r0, #224
 140 001c 1ED0     		beq	.L11
 141 001e 8028     		cmp	r0, #128
 142 0020 00D0     		beq	.L32
 143              	.LVL5:
 144              	.L9:
  85:Core/Src/MIDI_event.c **** 	{
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 5


  86:Core/Src/MIDI_event.c **** 	/********************* Real Note Off *************************/	
  87:Core/Src/MIDI_event.c **** 	case 0x80: 
  88:Core/Src/MIDI_event.c **** 		uint8_t noteOff = pack.evnt1;
  89:Core/Src/MIDI_event.c **** 		notes_Active[noteOff] = 0;
  90:Core/Src/MIDI_event.c **** 		notesCount--;
  91:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
  92:Core/Src/MIDI_event.c **** 		{
  93:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_amp); // release envelopes
  94:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
  95:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_index);
  96:Core/Src/MIDI_event.c **** 			notesCount = 0;
  97:Core/Src/MIDI_event.c **** 		}
  98:Core/Src/MIDI_event.c **** 		else // legato 
  99:Core/Src/MIDI_event.c **** 		{
 100:Core/Src/MIDI_event.c **** 			if (noteOff  == currentPitch) // let sound the lowest key pressed
 101:Core/Src/MIDI_event.c **** 			{
 102:Core/Src/MIDI_event.c **** 				uint8_t i;
 103:Core/Src/MIDI_event.c **** 				for (i = 0; i < 128; i++)
 104:Core/Src/MIDI_event.c **** 				{
 105:Core/Src/MIDI_event.c **** 					if (notes_Active[i] == 1) // find the lowest key pressed
 106:Core/Src/MIDI_event.c **** 						break;
 107:Core/Src/MIDI_event.c **** 				}
 108:Core/Src/MIDI_event.c **** 				currentPitch = i; 
 109:Core/Src/MIDI_event.c **** 			}
 110:Core/Src/MIDI_event.c **** 		}
 111:Core/Src/MIDI_event.c **** 		break;
 112:Core/Src/MIDI_event.c **** 	
 113:Core/Src/MIDI_event.c **** 	case 0x90: // Note On
 114:Core/Src/MIDI_event.c **** 		uint8_t noteOn = pack.evnt1;
 115:Core/Src/MIDI_event.c **** 		velocity = pack.evnt2;
 116:Core/Src/MIDI_event.c **** 		/*********************  Note On *************************/	
 117:Core/Src/MIDI_event.c **** 		if (velocity > 0) 
 118:Core/Src/MIDI_event.c **** 		{			
 119:Core/Src/MIDI_event.c **** 			currentPitch = noteOn; 
 120:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp); // start envelopes
 121:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_filt);
 122:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_index);
 123:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note ON, pitch %u\r\n", currentPitch); // debug
 124:Core/Src/MIDI_event.c **** 			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // red LED ON when incoming MIDI note o
 125:Core/Src/MIDI_event.c **** 			notesCount++;
 126:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 127:Core/Src/MIDI_event.c **** 		}
 128:Core/Src/MIDI_event.c **** 		/*********************  Note Off *************************/
 129:Core/Src/MIDI_event.c **** 		else //  common implementation in MIDI devices: Note Off = Note On with velocity 0
 130:Core/Src/MIDI_event.c **** 		{			
 131:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 0;
 132:Core/Src/MIDI_event.c **** 			notesCount--;
 133:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 134:Core/Src/MIDI_event.c **** 			if (notesCount <= 0)
 135:Core/Src/MIDI_event.c **** 			{
 136:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_amp);		// release envelopes
 137:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_filt);
 138:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_index);
 139:Core/Src/MIDI_event.c **** 				notesCount = 0;
 140:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 141:Core/Src/MIDI_event.c **** 			}
 142:Core/Src/MIDI_event.c **** 			else // legato
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 6


 143:Core/Src/MIDI_event.c **** 			{
 144:Core/Src/MIDI_event.c **** 				if (noteOn == currentPitch)
 145:Core/Src/MIDI_event.c **** 				{
 146:Core/Src/MIDI_event.c **** 					uint8_t i;
 147:Core/Src/MIDI_event.c **** 					for (i = 0; i < 128; i++)
 148:Core/Src/MIDI_event.c **** 					{
 149:Core/Src/MIDI_event.c **** 						if (notes_Active[i] == 1) // find the lowest key pressed
 150:Core/Src/MIDI_event.c **** 							break;
 151:Core/Src/MIDI_event.c **** 					}
 152:Core/Src/MIDI_event.c **** 					currentPitch = i; 
 153:Core/Src/MIDI_event.c **** 				}
 154:Core/Src/MIDI_event.c **** 			}
 155:Core/Src/MIDI_event.c **** 		}
 156:Core/Src/MIDI_event.c **** 	/********************* Other MIDI Messages *************************/	
 157:Core/Src/MIDI_event.c **** 	case 0xA0: 	// Polyphonic Pressure
 158:Core/Src/MIDI_event.c **** 		break;
 159:Core/Src/MIDI_event.c **** 	case 0xB0:	// Control Change
 160:Core/Src/MIDI_event.c **** 		// uint8_t cc_number = pack.evnt1;
 161:Core/Src/MIDI_event.c **** 		// uint8_t cc_value = pack.evnt2;
 162:Core/Src/MIDI_event.c **** 		// SEGGER_RTT_printf(0, "CC#  %u %u\r\n", cc_number, cc_value); // debug
 163:Core/Src/MIDI_event.c **** 		switch (pack.evnt1) // CC number --> implement CC actions
 164:Core/Src/MIDI_event.c **** 		{
 165:Core/Src/MIDI_event.c **** 		case 20:
 166:Core/Src/MIDI_event.c **** 			break;
 167:Core/Src/MIDI_event.c **** 		case 7:
 168:Core/Src/MIDI_event.c **** 			break; // master volume
 169:Core/Src/MIDI_event.c **** 		}
 170:Core/Src/MIDI_event.c **** 		break;
 171:Core/Src/MIDI_event.c **** 	case 0xC0: // Program Change
 172:Core/Src/MIDI_event.c **** 		break;
 173:Core/Src/MIDI_event.c **** 	case 0xD0: // After Touch
 174:Core/Src/MIDI_event.c **** 		break;
 175:Core/Src/MIDI_event.c **** 	case 0xE0: // Pitch Bend
 176:Core/Src/MIDI_event.c **** 		pitchbend = pack.evnt2 * 128 + pack.evnt1;
 177:Core/Src/MIDI_event.c **** 		break;
 178:Core/Src/MIDI_event.c **** 	}
 179:Core/Src/MIDI_event.c **** }
 145              		.loc 1 179 1 is_stmt 0 view .LVU23
 146 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 147              	.LVL6:
 148              	.L32:
 149              	.LBB4:
  88:Core/Src/MIDI_event.c **** 		notes_Active[noteOff] = 0;
 150              		.loc 1 88 3 is_stmt 1 view .LVU24
  89:Core/Src/MIDI_event.c **** 		notesCount--;
 151              		.loc 1 89 3 view .LVU25
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
 152              		.loc 1 90 13 is_stmt 0 view .LVU26
 153 0024 3C4E     		ldr	r6, .L41
 154              	.LVL7:
  89:Core/Src/MIDI_event.c **** 		notesCount--;
 155              		.loc 1 89 25 view .LVU27
 156 0026 3D4B     		ldr	r3, .L41+4
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
 157              		.loc 1 90 13 view .LVU28
 158 0028 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 159 002a 013A     		subs	r2, r2, #1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 7


  89:Core/Src/MIDI_event.c **** 		notesCount--;
 160              		.loc 1 89 25 view .LVU29
 161 002c 0024     		movs	r4, #0
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
 162              		.loc 1 90 13 view .LVU30
 163 002e 52B2     		sxtb	r2, r2
  91:Core/Src/MIDI_event.c **** 		{
 164              		.loc 1 91 6 view .LVU31
 165 0030 A242     		cmp	r2, r4
  89:Core/Src/MIDI_event.c **** 		notesCount--;
 166              		.loc 1 89 25 view .LVU32
 167 0032 5C55     		strb	r4, [r3, r5]
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
 168              		.loc 1 90 3 is_stmt 1 view .LVU33
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no notes active anymore
 169              		.loc 1 90 13 is_stmt 0 view .LVU34
 170 0034 3270     		strb	r2, [r6]
  91:Core/Src/MIDI_event.c **** 		{
 171              		.loc 1 91 3 is_stmt 1 view .LVU35
  91:Core/Src/MIDI_event.c **** 		{
 172              		.loc 1 91 6 is_stmt 0 view .LVU36
 173 0036 4CDD     		ble	.L33
 100:Core/Src/MIDI_event.c **** 			{
 174              		.loc 1 100 4 is_stmt 1 view .LVU37
 100:Core/Src/MIDI_event.c **** 			{
 175              		.loc 1 100 17 is_stmt 0 view .LVU38
 176 0038 394E     		ldr	r6, .L41+8
 100:Core/Src/MIDI_event.c **** 			{
 177              		.loc 1 100 7 view .LVU39
 178 003a 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 179 003c AA42     		cmp	r2, r5
 180 003e F0D1     		bne	.L9
 181 0040 1A46     		mov	r2, r3
 182 0042 2346     		mov	r3, r4
 183 0044 01E0     		b	.L16
 184              	.LVL8:
 185              	.L35:
 186              	.LBB5:
 103:Core/Src/MIDI_event.c **** 				{
 187              		.loc 1 103 19 discriminator 2 view .LVU40
 188 0046 802B     		cmp	r3, #128
 189 0048 60D0     		beq	.L34
 190              	.LVL9:
 191              	.L16:
 103:Core/Src/MIDI_event.c **** 				{
 192              		.loc 1 103 27 is_stmt 1 view .LVU41
 103:Core/Src/MIDI_event.c **** 				{
 193              		.loc 1 103 19 view .LVU42
 105:Core/Src/MIDI_event.c **** 						break;
 194              		.loc 1 105 22 is_stmt 0 view .LVU43
 195 004a 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 105:Core/Src/MIDI_event.c **** 						break;
 196              		.loc 1 105 9 view .LVU44
 197 004e 0129     		cmp	r1, #1
 198 0050 D8B2     		uxtb	r0, r3
 199              	.LVL10:
 105:Core/Src/MIDI_event.c **** 						break;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 8


 200              		.loc 1 105 6 is_stmt 1 view .LVU45
 103:Core/Src/MIDI_event.c **** 				{
 201              		.loc 1 103 19 is_stmt 0 view .LVU46
 202 0052 03F10103 		add	r3, r3, #1
 105:Core/Src/MIDI_event.c **** 						break;
 203              		.loc 1 105 9 view .LVU47
 204 0056 F6D1     		bne	.L35
 205              	.LBE5:
 206              	.LBB6:
 152:Core/Src/MIDI_event.c **** 				}
 207              		.loc 1 152 6 is_stmt 1 view .LVU48
 152:Core/Src/MIDI_event.c **** 				}
 208              		.loc 1 152 19 is_stmt 0 view .LVU49
 209 0058 3070     		strb	r0, [r6]
 210              	.LVL11:
 211              	.L40:
 152:Core/Src/MIDI_event.c **** 				}
 212              		.loc 1 152 19 view .LVU50
 213              	.LBE6:
 214              	.LBE4:
 215              		.loc 1 179 1 view .LVU51
 216 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 217              	.LVL12:
 218              	.L11:
 219              	.LBB10:
 176:Core/Src/MIDI_event.c **** 		break;
 220              		.loc 1 176 3 is_stmt 1 view .LVU52
 176:Core/Src/MIDI_event.c **** 		break;
 221              		.loc 1 176 13 is_stmt 0 view .LVU53
 222 005c 314B     		ldr	r3, .L41+12
 176:Core/Src/MIDI_event.c **** 		break;
 223              		.loc 1 176 32 view .LVU54
 224 005e 05EBC412 		add	r2, r5, r4, lsl #7
 176:Core/Src/MIDI_event.c **** 		break;
 225              		.loc 1 176 13 view .LVU55
 226 0062 1A80     		strh	r2, [r3]	@ movhi
 177:Core/Src/MIDI_event.c **** 	}
 227              		.loc 1 177 3 is_stmt 1 view .LVU56
 228              	.LBE10:
 229              		.loc 1 179 1 is_stmt 0 view .LVU57
 230 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 231              	.LVL13:
 232              	.L10:
 233              	.LBB11:
 114:Core/Src/MIDI_event.c **** 		velocity = pack.evnt2;
 234              		.loc 1 114 3 is_stmt 1 view .LVU58
 115:Core/Src/MIDI_event.c **** 		/*********************  Note On *************************/	
 235              		.loc 1 115 3 view .LVU59
 115:Core/Src/MIDI_event.c **** 		/*********************  Note On *************************/	
 236              		.loc 1 115 12 is_stmt 0 view .LVU60
 237 0066 304A     		ldr	r2, .L41+16
 238 0068 1670     		strb	r6, [r2]
 117:Core/Src/MIDI_event.c **** 		{			
 239              		.loc 1 117 3 is_stmt 1 view .LVU61
 117:Core/Src/MIDI_event.c **** 		{			
 240              		.loc 1 117 6 is_stmt 0 view .LVU62
 241 006a CCB9     		cbnz	r4, .L36
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 9


 131:Core/Src/MIDI_event.c **** 			notesCount--;
 242              		.loc 1 131 4 is_stmt 1 view .LVU63
 132:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 243              		.loc 1 132 14 is_stmt 0 view .LVU64
 244 006c 2A4F     		ldr	r7, .L41
 131:Core/Src/MIDI_event.c **** 			notesCount--;
 245              		.loc 1 131 25 view .LVU65
 246 006e 2B4B     		ldr	r3, .L41+4
 132:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 247              		.loc 1 132 14 view .LVU66
 248 0070 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 131:Core/Src/MIDI_event.c **** 			notesCount--;
 249              		.loc 1 131 25 view .LVU67
 250 0072 5E55     		strb	r6, [r3, r5]
 132:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 251              		.loc 1 132 4 is_stmt 1 view .LVU68
 132:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 252              		.loc 1 132 14 is_stmt 0 view .LVU69
 253 0074 013A     		subs	r2, r2, #1
 254 0076 52B2     		sxtb	r2, r2
 134:Core/Src/MIDI_event.c **** 			{
 255              		.loc 1 134 7 view .LVU70
 256 0078 002A     		cmp	r2, #0
 132:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 257              		.loc 1 132 14 view .LVU71
 258 007a 3A70     		strb	r2, [r7]
 134:Core/Src/MIDI_event.c **** 			{
 259              		.loc 1 134 4 is_stmt 1 view .LVU72
 134:Core/Src/MIDI_event.c **** 			{
 260              		.loc 1 134 7 is_stmt 0 view .LVU73
 261 007c 34DD     		ble	.L37
 144:Core/Src/MIDI_event.c **** 				{
 262              		.loc 1 144 5 is_stmt 1 view .LVU74
 144:Core/Src/MIDI_event.c **** 				{
 263              		.loc 1 144 16 is_stmt 0 view .LVU75
 264 007e 284E     		ldr	r6, .L41+8
 265              	.LVL14:
 144:Core/Src/MIDI_event.c **** 				{
 266              		.loc 1 144 8 view .LVU76
 267 0080 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 268 0082 AA42     		cmp	r2, r5
 269 0084 CDD1     		bne	.L9
 270 0086 2246     		mov	r2, r4
 271 0088 01E0     		b	.L21
 272              	.LVL15:
 273              	.L39:
 274              	.LBB7:
 147:Core/Src/MIDI_event.c **** 					{
 275              		.loc 1 147 20 discriminator 2 view .LVU77
 276 008a 802A     		cmp	r2, #128
 277 008c 41D0     		beq	.L38
 278              	.LVL16:
 279              	.L21:
 147:Core/Src/MIDI_event.c **** 					{
 280              		.loc 1 147 28 is_stmt 1 view .LVU78
 147:Core/Src/MIDI_event.c **** 					{
 281              		.loc 1 147 20 view .LVU79
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 10


 149:Core/Src/MIDI_event.c **** 							break;
 282              		.loc 1 149 23 is_stmt 0 view .LVU80
 283 008e 13F8011B 		ldrb	r1, [r3], #1	@ zero_extendqisi2
 149:Core/Src/MIDI_event.c **** 							break;
 284              		.loc 1 149 10 view .LVU81
 285 0092 0129     		cmp	r1, #1
 286 0094 D0B2     		uxtb	r0, r2
 287              	.LVL17:
 149:Core/Src/MIDI_event.c **** 							break;
 288              		.loc 1 149 7 is_stmt 1 view .LVU82
 147:Core/Src/MIDI_event.c **** 					{
 289              		.loc 1 147 20 is_stmt 0 view .LVU83
 290 0096 02F10102 		add	r2, r2, #1
 149:Core/Src/MIDI_event.c **** 							break;
 291              		.loc 1 149 10 view .LVU84
 292 009a F6D1     		bne	.L39
 152:Core/Src/MIDI_event.c **** 				}
 293              		.loc 1 152 6 is_stmt 1 view .LVU85
 152:Core/Src/MIDI_event.c **** 				}
 294              		.loc 1 152 19 is_stmt 0 view .LVU86
 295 009c 3070     		strb	r0, [r6]
 296 009e DCE7     		b	.L40
 297              	.LVL18:
 298              	.L36:
 152:Core/Src/MIDI_event.c **** 				}
 299              		.loc 1 152 19 view .LVU87
 300              	.LBE7:
 119:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp); // start envelopes
 301              		.loc 1 119 4 is_stmt 1 view .LVU88
 119:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp); // start envelopes
 302              		.loc 1 119 17 is_stmt 0 view .LVU89
 303 00a0 1F4A     		ldr	r2, .L41+8
 120:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_filt);
 304              		.loc 1 120 4 view .LVU90
 305 00a2 2248     		ldr	r0, .L41+20
 306              	.LVL19:
 119:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp); // start envelopes
 307              		.loc 1 119 17 view .LVU91
 308 00a4 1370     		strb	r3, [r2]
 120:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_filt);
 309              		.loc 1 120 4 is_stmt 1 view .LVU92
 310 00a6 FFF7FEFF 		bl	ADSR_keyOn
 311              	.LVL20:
 121:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_index);
 312              		.loc 1 121 4 view .LVU93
 313 00aa 2148     		ldr	r0, .L41+24
 314 00ac FFF7FEFF 		bl	ADSR_keyOn
 315              	.LVL21:
 122:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note ON, pitch %u\r\n", currentPitch); // debug
 316              		.loc 1 122 4 view .LVU94
 317 00b0 2048     		ldr	r0, .L41+28
 318 00b2 FFF7FEFF 		bl	ADSR_keyOn
 319              	.LVL22:
 124:Core/Src/MIDI_event.c **** 			notesCount++;
 320              		.loc 1 124 4 view .LVU95
 321 00b6 2048     		ldr	r0, .L41+32
 322 00b8 0122     		movs	r2, #1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 11


 323 00ba 4FF48041 		mov	r1, #16384
 324 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 325              	.LVL23:
 125:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 326              		.loc 1 125 4 view .LVU96
 125:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 327              		.loc 1 125 14 is_stmt 0 view .LVU97
 328 00c2 154A     		ldr	r2, .L41
 126:Core/Src/MIDI_event.c **** 		}
 329              		.loc 1 126 25 view .LVU98
 330 00c4 1549     		ldr	r1, .L41+4
 125:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 331              		.loc 1 125 14 view .LVU99
 332 00c6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 126:Core/Src/MIDI_event.c **** 		}
 333              		.loc 1 126 25 view .LVU100
 334 00c8 0120     		movs	r0, #1
 125:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 335              		.loc 1 125 14 view .LVU101
 336 00ca 0344     		add	r3, r3, r0
 126:Core/Src/MIDI_event.c **** 		}
 337              		.loc 1 126 25 view .LVU102
 338 00cc 4855     		strb	r0, [r1, r5]
 125:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 339              		.loc 1 125 14 view .LVU103
 340 00ce 1370     		strb	r3, [r2]
 126:Core/Src/MIDI_event.c **** 		}
 341              		.loc 1 126 4 is_stmt 1 view .LVU104
 342              	.LBE11:
 343              		.loc 1 179 1 is_stmt 0 view .LVU105
 344 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 345              	.LVL24:
 346              	.L33:
 347              	.LBB12:
  93:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
 348              		.loc 1 93 4 is_stmt 1 view .LVU106
 349 00d2 1648     		ldr	r0, .L41+20
 350              	.LVL25:
  93:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
 351              		.loc 1 93 4 is_stmt 0 view .LVU107
 352 00d4 FFF7FEFF 		bl	ADSR_keyOff
 353              	.LVL26:
  94:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_index);
 354              		.loc 1 94 4 is_stmt 1 view .LVU108
 355 00d8 1548     		ldr	r0, .L41+24
 356 00da FFF7FEFF 		bl	ADSR_keyOff
 357              	.LVL27:
  95:Core/Src/MIDI_event.c **** 			notesCount = 0;
 358              		.loc 1 95 4 view .LVU109
 359 00de 1548     		ldr	r0, .L41+28
 360 00e0 FFF7FEFF 		bl	ADSR_keyOff
 361              	.LVL28:
  96:Core/Src/MIDI_event.c **** 		}
 362              		.loc 1 96 4 view .LVU110
  96:Core/Src/MIDI_event.c **** 		}
 363              		.loc 1 96 15 is_stmt 0 view .LVU111
 364 00e4 3470     		strb	r4, [r6]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 12


 365              	.LBE12:
 366              		.loc 1 179 1 view .LVU112
 367 00e6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 368              	.LVL29:
 369              	.L37:
 370              	.LBB13:
 136:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_filt);
 371              		.loc 1 136 5 is_stmt 1 view .LVU113
 372 00e8 1048     		ldr	r0, .L41+20
 373              	.LVL30:
 136:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_filt);
 374              		.loc 1 136 5 is_stmt 0 view .LVU114
 375 00ea FFF7FEFF 		bl	ADSR_keyOff
 376              	.LVL31:
 137:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_index);
 377              		.loc 1 137 5 is_stmt 1 view .LVU115
 378 00ee 1048     		ldr	r0, .L41+24
 379 00f0 FFF7FEFF 		bl	ADSR_keyOff
 380              	.LVL32:
 138:Core/Src/MIDI_event.c **** 				notesCount = 0;
 381              		.loc 1 138 5 view .LVU116
 382 00f4 0F48     		ldr	r0, .L41+28
 383 00f6 FFF7FEFF 		bl	ADSR_keyOff
 384              	.LVL33:
 139:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 385              		.loc 1 139 5 view .LVU117
 140:Core/Src/MIDI_event.c **** 			}
 386              		.loc 1 140 5 is_stmt 0 view .LVU118
 387 00fa 2246     		mov	r2, r4
 139:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 388              		.loc 1 139 16 view .LVU119
 389 00fc 3E70     		strb	r6, [r7]
 140:Core/Src/MIDI_event.c **** 			}
 390              		.loc 1 140 5 is_stmt 1 view .LVU120
 391 00fe 0E48     		ldr	r0, .L41+32
 392              	.LBE13:
 393              		.loc 1 179 1 is_stmt 0 view .LVU121
 394 0100 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 395              		.cfi_remember_state
 396              		.cfi_restore 14
 397              		.cfi_restore 7
 398              		.cfi_restore 6
 399              		.cfi_restore 5
 400              		.cfi_restore 4
 401              		.cfi_restore 3
 402              		.cfi_def_cfa_offset 0
 403              	.LVL34:
 404              	.LBB14:
 140:Core/Src/MIDI_event.c **** 			}
 405              		.loc 1 140 5 view .LVU122
 406 0104 4FF48041 		mov	r1, #16384
 407 0108 FFF7FEBF 		b	HAL_GPIO_WritePin
 408              	.LVL35:
 409              	.L34:
 410              		.cfi_restore_state
 411              	.LBB8:
 140:Core/Src/MIDI_event.c **** 			}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 13


 412              		.loc 1 140 5 view .LVU123
 413 010c 1846     		mov	r0, r3
 414              	.LVL36:
 108:Core/Src/MIDI_event.c **** 			}
 415              		.loc 1 108 5 is_stmt 1 view .LVU124
 416              	.LBE8:
 417              	.LBB9:
 152:Core/Src/MIDI_event.c **** 				}
 418              		.loc 1 152 6 view .LVU125
 152:Core/Src/MIDI_event.c **** 				}
 419              		.loc 1 152 19 is_stmt 0 view .LVU126
 420 010e 3070     		strb	r0, [r6]
 421 0110 A3E7     		b	.L40
 422              	.LVL37:
 423              	.L38:
 152:Core/Src/MIDI_event.c **** 				}
 424              		.loc 1 152 19 view .LVU127
 425 0112 1046     		mov	r0, r2
 426              	.LVL38:
 152:Core/Src/MIDI_event.c **** 				}
 427              		.loc 1 152 6 is_stmt 1 view .LVU128
 152:Core/Src/MIDI_event.c **** 				}
 428              		.loc 1 152 19 is_stmt 0 view .LVU129
 429 0114 3070     		strb	r0, [r6]
 430 0116 A0E7     		b	.L40
 431              	.L42:
 432              		.align	2
 433              	.L41:
 434 0118 00000000 		.word	.LANCHOR1
 435 011c 00000000 		.word	.LANCHOR0
 436 0120 00000000 		.word	.LANCHOR3
 437 0124 00000000 		.word	.LANCHOR2
 438 0128 00000000 		.word	.LANCHOR4
 439 012c 00000000 		.word	adsr_amp
 440 0130 00000000 		.word	adsr_filt
 441 0134 00000000 		.word	adsr_index
 442 0138 000C0240 		.word	1073875968
 443              	.LBE9:
 444              	.LBE14:
 445              		.cfi_endproc
 446              	.LFE139:
 448              		.section	.text.USBH_UserProcess_callback,"ax",%progbits
 449              		.align	1
 450              		.p2align 2,,3
 451              		.global	USBH_UserProcess_callback
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 456              	USBH_UserProcess_callback:
 457              	.LVL39:
 458              	.LFB140:
 180:Core/Src/MIDI_event.c **** 
 181:Core/Src/MIDI_event.c **** 
 182:Core/Src/MIDI_event.c **** 
 183:Core/Src/MIDI_event.c **** 
 184:Core/Src/MIDI_event.c **** /*=================================================================================================
 185:Core/Src/MIDI_event.c **** /**
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 14


 186:Core/Src/MIDI_event.c ****  * @brief  User Process function callback
 187:Core/Src/MIDI_event.c ****  * @param  phost: Host Handle
 188:Core/Src/MIDI_event.c ****  * @param  id: Host Library user message ID
 189:Core/Src/MIDI_event.c ****  * @retval none
 190:Core/Src/MIDI_event.c ****  */
 191:Core/Src/MIDI_event.c **** void USBH_UserProcess_callback(USBH_HandleTypeDef *pHost, uint8_t vId)
 192:Core/Src/MIDI_event.c **** {
 459              		.loc 1 192 1 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 193:Core/Src/MIDI_event.c **** 	switch (vId)
 463              		.loc 1 193 2 view .LVU131
 464 0000 0429     		cmp	r1, #4
 465 0002 06D0     		beq	.L44
 466 0004 0529     		cmp	r1, #5
 192:Core/Src/MIDI_event.c **** 	switch (vId)
 467              		.loc 1 192 1 is_stmt 0 view .LVU132
 468 0006 10B5     		push	{r4, lr}
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 4, -8
 471              		.cfi_offset 14, -4
 472 0008 0B46     		mov	r3, r1
 473              		.loc 1 193 2 view .LVU133
 474 000a 20D0     		beq	.L45
 475 000c 0229     		cmp	r1, #2
 476 000e 08D0     		beq	.L52
 194:Core/Src/MIDI_event.c **** 	{
 195:Core/Src/MIDI_event.c **** 	case HOST_USER_SELECT_CONFIGURATION:
 196:Core/Src/MIDI_event.c **** 		break;
 197:Core/Src/MIDI_event.c **** 
 198:Core/Src/MIDI_event.c **** 	case HOST_USER_DISCONNECTION:
 199:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_DISCONNECT;
 200:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 201:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 202:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 203:Core/Src/MIDI_event.c **** 		break;
 204:Core/Src/MIDI_event.c **** 
 205:Core/Src/MIDI_event.c **** 	case HOST_USER_CLASS_ACTIVE:
 206:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_READY;
 207:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 208:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 209:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 210:Core/Src/MIDI_event.c **** 		break;
 211:Core/Src/MIDI_event.c **** 
 212:Core/Src/MIDI_event.c **** 	case HOST_USER_CONNECTION:
 213:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_START;
 214:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 215:Core/Src/MIDI_event.c **** 		break;
 216:Core/Src/MIDI_event.c **** 
 217:Core/Src/MIDI_event.c **** 	default:
 218:Core/Src/MIDI_event.c **** 		break;
 219:Core/Src/MIDI_event.c **** 	}
 220:Core/Src/MIDI_event.c **** }
 477              		.loc 1 220 1 view .LVU134
 478 0010 10BD     		pop	{r4, pc}
 479              	.L44:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 15


 480              		.cfi_def_cfa_offset 0
 481              		.cfi_restore 4
 482              		.cfi_restore 14
 213:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 483              		.loc 1 213 3 is_stmt 1 view .LVU135
 213:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 484              		.loc 1 213 15 is_stmt 0 view .LVU136
 485 0012 174B     		ldr	r3, .L53
 214:Core/Src/MIDI_event.c **** 		break;
 486              		.loc 1 214 3 view .LVU137
 487 0014 1748     		ldr	r0, .L53+4
 488              	.LVL40:
 213:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 489              		.loc 1 213 15 view .LVU138
 490 0016 0122     		movs	r2, #1
 214:Core/Src/MIDI_event.c **** 		break;
 491              		.loc 1 214 3 view .LVU139
 492 0018 4FF40041 		mov	r1, #32768
 493              	.LVL41:
 213:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 494              		.loc 1 213 15 view .LVU140
 495 001c 1A70     		strb	r2, [r3]
 214:Core/Src/MIDI_event.c **** 		break;
 496              		.loc 1 214 3 is_stmt 1 view .LVU141
 497 001e FFF7FEBF 		b	HAL_GPIO_WritePin
 498              	.LVL42:
 499              	.L52:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 206:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 503              		.loc 1 206 3 view .LVU142
 206:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 504              		.loc 1 206 15 is_stmt 0 view .LVU143
 505 0022 134C     		ldr	r4, .L53
 207:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 506              		.loc 1 207 3 view .LVU144
 507 0024 1348     		ldr	r0, .L53+4
 508              	.LVL43:
 206:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 509              		.loc 1 206 15 view .LVU145
 510 0026 2370     		strb	r3, [r4]
 207:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 511              		.loc 1 207 3 is_stmt 1 view .LVU146
 512 0028 0122     		movs	r2, #1
 513 002a 4FF48051 		mov	r1, #4096
 514              	.LVL44:
 207:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 515              		.loc 1 207 3 is_stmt 0 view .LVU147
 516 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 517              	.LVL45:
 208:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 518              		.loc 1 208 3 is_stmt 1 view .LVU148
 519 0032 1048     		ldr	r0, .L53+4
 520 0034 0022     		movs	r2, #0
 521 0036 4FF40041 		mov	r1, #32768
 522 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 16


 523              	.LVL46:
 209:Core/Src/MIDI_event.c **** 		break;
 524              		.loc 1 209 3 view .LVU149
 525              		.loc 1 220 1 is_stmt 0 view .LVU150
 526 003e BDE81040 		pop	{r4, lr}
 527              		.cfi_remember_state
 528              		.cfi_restore 14
 529              		.cfi_restore 4
 530              		.cfi_def_cfa_offset 0
 209:Core/Src/MIDI_event.c **** 		break;
 531              		.loc 1 209 3 view .LVU151
 532 0042 0C48     		ldr	r0, .L53+4
 533 0044 0022     		movs	r2, #0
 534 0046 4FF48041 		mov	r1, #16384
 535 004a FFF7FEBF 		b	HAL_GPIO_WritePin
 536              	.LVL47:
 537              	.L45:
 538              		.cfi_restore_state
 199:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 539              		.loc 1 199 3 is_stmt 1 view .LVU152
 199:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 540              		.loc 1 199 15 is_stmt 0 view .LVU153
 541 004e 084B     		ldr	r3, .L53
 201:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 542              		.loc 1 201 3 view .LVU154
 543 0050 0848     		ldr	r0, .L53+4
 544              	.LVL48:
 201:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 545              		.loc 1 201 3 view .LVU155
 546 0052 0022     		movs	r2, #0
 547 0054 4FF48051 		mov	r1, #4096
 548              	.LVL49:
 199:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 549              		.loc 1 199 15 view .LVU156
 550 0058 0424     		movs	r4, #4
 551 005a 1C70     		strb	r4, [r3]
 201:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 552              		.loc 1 201 3 is_stmt 1 view .LVU157
 553 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 554              	.LVL50:
 202:Core/Src/MIDI_event.c **** 		break;
 555              		.loc 1 202 3 view .LVU158
 556              		.loc 1 220 1 is_stmt 0 view .LVU159
 557 0060 BDE81040 		pop	{r4, lr}
 558              		.cfi_restore 14
 559              		.cfi_restore 4
 560              		.cfi_def_cfa_offset 0
 202:Core/Src/MIDI_event.c **** 		break;
 561              		.loc 1 202 3 view .LVU160
 562 0064 0348     		ldr	r0, .L53+4
 563 0066 0022     		movs	r2, #0
 564 0068 4FF40041 		mov	r1, #32768
 565 006c FFF7FEBF 		b	HAL_GPIO_WritePin
 566              	.LVL51:
 567              	.L54:
 568              		.align	2
 569              	.L53:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 17


 570 0070 00000000 		.word	.LANCHOR5
 571 0074 000C0240 		.word	1073875968
 572              		.cfi_endproc
 573              	.LFE140:
 575              		.global	notesCount
 576              		.global	notes_Active
 577              		.global	velocity
 578              		.global	currentPitch
 579              		.global	pitchbend
 580              		.global	Appli_state
 581              		.global	hUSBHost
 582              		.section	.bss.Appli_state,"aw",%nobits
 583              		.set	.LANCHOR5,. + 0
 586              	Appli_state:
 587 0000 00       		.space	1
 588              		.section	.bss.currentPitch,"aw",%nobits
 589              		.set	.LANCHOR3,. + 0
 592              	currentPitch:
 593 0000 00       		.space	1
 594              		.section	.bss.hUSBHost,"aw",%nobits
 595              		.align	2
 598              	hUSBHost:
 599 0000 00000000 		.space	1564
 599      00000000 
 599      00000000 
 599      00000000 
 599      00000000 
 600              		.section	.bss.notesCount,"aw",%nobits
 601              		.set	.LANCHOR1,. + 0
 604              	notesCount:
 605 0000 00       		.space	1
 606              		.section	.bss.notes_Active,"aw",%nobits
 607              		.align	2
 608              		.set	.LANCHOR0,. + 0
 611              	notes_Active:
 612 0000 00000000 		.space	128
 612      00000000 
 612      00000000 
 612      00000000 
 612      00000000 
 613              		.section	.bss.pitchbend,"aw",%nobits
 614              		.align	1
 615              		.set	.LANCHOR2,. + 0
 618              	pitchbend:
 619 0000 0000     		.space	2
 620              		.section	.bss.velocity,"aw",%nobits
 621              		.set	.LANCHOR4,. + 0
 624              	velocity:
 625 0000 00       		.space	1
 626              		.text
 627              	.Letext0:
 628              		.file 2 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 629              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 630              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 631              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 632              		.file 6 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 633              		.file 7 "Core/Inc/usbh_MIDI.h"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 18


 634              		.file 8 "Core/Inc/MIDI_application.h"
 635              		.file 9 "Core/Inc/ADSR_envelope.h"
 636              		.file 10 "<built-in>"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MIDI_event.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:20     .text.allNotesOff:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:27     .text.allNotesOff:0000000000000000 allNotesOff
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:64     .text.allNotesOff:0000000000000014 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:70     .text.MIDI_eventInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:77     .text.MIDI_eventInit:0000000000000000 MIDI_eventInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:94     .text.MIDI_eventInit:000000000000000c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:99     .text.ProcessMIDI:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:106    .text.ProcessMIDI:0000000000000000 ProcessMIDI
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:434    .text.ProcessMIDI:0000000000000118 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:449    .text.USBH_UserProcess_callback:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:456    .text.USBH_UserProcess_callback:0000000000000000 USBH_UserProcess_callback
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:570    .text.USBH_UserProcess_callback:0000000000000070 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:604    .bss.notesCount:0000000000000000 notesCount
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:611    .bss.notes_Active:0000000000000000 notes_Active
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:624    .bss.velocity:0000000000000000 velocity
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:592    .bss.currentPitch:0000000000000000 currentPitch
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:618    .bss.pitchbend:0000000000000000 pitchbend
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:586    .bss.Appli_state:0000000000000000 Appli_state
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:598    .bss.hUSBHost:0000000000000000 hUSBHost
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:587    .bss.Appli_state:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:593    .bss.currentPitch:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:595    .bss.hUSBHost:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:605    .bss.notesCount:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:607    .bss.notes_Active:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:614    .bss.pitchbend:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//cceHnMzl.s:625    .bss.velocity:0000000000000000 $d

UNDEFINED SYMBOLS
memset
ADSR_keyOn
HAL_GPIO_WritePin
ADSR_keyOff
adsr_amp
adsr_filt
adsr_index
