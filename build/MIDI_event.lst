ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"MIDI_event.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.allNotesOff,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.global	allNotesOff
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	allNotesOff:
  28              	.LFB137:
  29              		.file 1 "Core/Src/MIDI_event.c"
   1:Core/Src/MIDI_event.c **** /**
   2:Core/Src/MIDI_event.c ****  * @file MIDI_event.c
   3:Core/Src/MIDI_event.c ****  * @author modified by johannes regnier
   4:Core/Src/MIDI_event.c ****  * @brief MIDI events processing
   5:Core/Src/MIDI_event.c ****  * @note Makes use of the great resources from Tom Erbe
   6:Core/Src/MIDI_event.c ****  * @note http://synthnotes.ucsd.edu/wp4/index.php/2019/09/24/adding-the-usb-otg-midi-driver-polypho
   7:Core/Src/MIDI_event.c ****  * @note and of the awesome Xavier Halgand's Dekrispator
   8:Core/Src/MIDI_event.c ****  * @version 0.1
   9:Core/Src/MIDI_event.c ****  * @date 2023-12-30
  10:Core/Src/MIDI_event.c ****  *
  11:Core/Src/MIDI_event.c ****  * @copyright Copyright (c) 2023
  12:Core/Src/MIDI_event.c ****  *
  13:Core/Src/MIDI_event.c ****  */
  14:Core/Src/MIDI_event.c **** 
  15:Core/Src/MIDI_event.c **** #include <stdint.h>
  16:Core/Src/MIDI_event.c **** 
  17:Core/Src/MIDI_event.c **** #include "MIDI_event.h"
  18:Core/Src/MIDI_event.c **** #include "gpio.h"
  19:Core/Src/MIDI_event.c **** #include "SEGGER_RTT.h"
  20:Core/Src/MIDI_event.c **** #include "CONSTS.h"
  21:Core/Src/MIDI_event.c **** #include "helper_functions.h"
  22:Core/Src/MIDI_event.c **** #include "ADSR_envelope.h"
  23:Core/Src/MIDI_event.c **** 
  24:Core/Src/MIDI_event.c **** USBH_HandleTypeDef hUSBHost; /* USB Host handle */
  25:Core/Src/MIDI_event.c **** MIDI_ApplicationTypeDef Appli_state = MIDI_APPLICATION_IDLE;
  26:Core/Src/MIDI_event.c **** 
  27:Core/Src/MIDI_event.c **** uint16_t pitchbend _CCM_;
  28:Core/Src/MIDI_event.c **** uint8_t currentPitch _CCM_;
  29:Core/Src/MIDI_event.c **** uint8_t velocity _CCM_;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 2


  30:Core/Src/MIDI_event.c **** uint8_t notes_Active[128] = {0}; // at most, 128 MIDI notes are active
  31:Core/Src/MIDI_event.c **** int8_t notesCount = 0 ;			 // number of notes active
  32:Core/Src/MIDI_event.c **** extern ADSR_t adsr_amp;
  33:Core/Src/MIDI_event.c **** extern ADSR_t adsr_filt;
  34:Core/Src/MIDI_event.c **** 
  35:Core/Src/MIDI_event.c **** void allNotesOff(void)
  36:Core/Src/MIDI_event.c **** {
  30              		.loc 1 36 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  37:Core/Src/MIDI_event.c **** 	for (uint8_t i = 0; i < 128; i++)
  34              		.loc 1 37 2 view .LVU1
  35              	.LBB2:
  36              		.loc 1 37 7 view .LVU2
  37              	.LVL0:
  38              		.loc 1 37 24 view .LVU3
  39              	.LBE2:
  36:Core/Src/MIDI_event.c **** 	for (uint8_t i = 0; i < 128; i++)
  40              		.loc 1 36 1 is_stmt 0 view .LVU4
  41 0000 08B5     		push	{r3, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 3, -8
  44              		.cfi_offset 14, -4
  45              	.LBB3:
  38:Core/Src/MIDI_event.c **** 		notes_Active[i] = 0;
  46              		.loc 1 38 19 view .LVU5
  47 0002 8022     		movs	r2, #128
  48 0004 0348     		ldr	r0, .L4
  49 0006 0021     		movs	r1, #0
  50 0008 FFF7FEFF 		bl	memset
  51              	.LVL1:
  52              		.loc 1 38 19 view .LVU6
  53              	.LBE3:
  39:Core/Src/MIDI_event.c **** 	notesCount = 0;
  54              		.loc 1 39 2 is_stmt 1 view .LVU7
  55              		.loc 1 39 13 is_stmt 0 view .LVU8
  56 000c 024B     		ldr	r3, .L4+4
  57 000e 0022     		movs	r2, #0
  58 0010 1A70     		strb	r2, [r3]
  40:Core/Src/MIDI_event.c **** }
  59              		.loc 1 40 1 view .LVU9
  60 0012 08BD     		pop	{r3, pc}
  61              	.L5:
  62              		.align	2
  63              	.L4:
  64 0014 00000000 		.word	.LANCHOR0
  65 0018 00000000 		.word	.LANCHOR1
  66              		.cfi_endproc
  67              	.LFE137:
  69              		.section	.text.MIDI_eventInit,"ax",%progbits
  70              		.align	1
  71              		.p2align 2,,3
  72              		.global	MIDI_eventInit
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 3


  77              	MIDI_eventInit:
  78              	.LFB138:
  41:Core/Src/MIDI_event.c **** 
  42:Core/Src/MIDI_event.c **** 
  43:Core/Src/MIDI_event.c **** void MIDI_eventInit()
  44:Core/Src/MIDI_event.c **** {
  79              		.loc 1 44 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  45:Core/Src/MIDI_event.c **** 	pitchbend = 8192;
  84              		.loc 1 45 2 view .LVU11
  85              		.loc 1 45 12 is_stmt 0 view .LVU12
  86 0000 024B     		ldr	r3, .L7
  87 0002 4FF40052 		mov	r2, #8192
  88 0006 1A80     		strh	r2, [r3]	@ movhi
  46:Core/Src/MIDI_event.c **** }
  89              		.loc 1 46 1 view .LVU13
  90 0008 7047     		bx	lr
  91              	.L8:
  92 000a 00BF     		.align	2
  93              	.L7:
  94 000c 00000000 		.word	.LANCHOR2
  95              		.cfi_endproc
  96              	.LFE138:
  98              		.section	.text.ProcessMIDI,"ax",%progbits
  99              		.align	1
 100              		.p2align 2,,3
 101              		.global	ProcessMIDI
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	ProcessMIDI:
 107              	.LVL2:
 108              	.LFB139:
  47:Core/Src/MIDI_event.c **** 
  48:Core/Src/MIDI_event.c **** /**
  49:Core/Src/MIDI_event.c ****  * @brief Process incoming MIDI events - Monophonic, with legato
  50:Core/Src/MIDI_event.c ****  * @note Code adapted from Xavier Halgand and from Tom Erbe's version
  51:Core/Src/MIDI_event.c ****  *
  52:Core/Src/MIDI_event.c ****  * @param pack
  53:Core/Src/MIDI_event.c ****  */
  54:Core/Src/MIDI_event.c **** void ProcessMIDI(midi_package_t pack)
  55:Core/Src/MIDI_event.c **** {
 109              		.loc 1 55 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		.loc 1 55 1 is_stmt 0 view .LVU15
 114 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 115              		.cfi_def_cfa_offset 24
 116              		.cfi_offset 3, -24
 117              		.cfi_offset 4, -20
 118              		.cfi_offset 5, -16
 119              		.cfi_offset 6, -12
 120              		.cfi_offset 7, -8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 4


 121              		.cfi_offset 14, -4
 122 0002 C0F30743 		ubfx	r3, r0, #16, #8
 123 0006 C0F30766 		ubfx	r6, r0, #24, #8
 124 000a 040E     		lsrs	r4, r0, #24
  56:Core/Src/MIDI_event.c **** 	uint8_t status;
  57:Core/Src/MIDI_event.c **** 
  58:Core/Src/MIDI_event.c **** 	status = pack.evnt0 & 0xF0;
 125              		.loc 1 58 9 view .LVU16
 126 000c C0F30720 		ubfx	r0, r0, #8, #8
 127              	.LVL3:
 128              		.loc 1 58 9 view .LVU17
 129 0010 00F0F000 		and	r0, r0, #240
  59:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
  60:Core/Src/MIDI_event.c **** 	{
  61:Core/Src/MIDI_event.c **** 		switch (pack.evnt0)
  62:Core/Src/MIDI_event.c **** 		{
  63:Core/Src/MIDI_event.c **** 		case 0xF0: // Start of System Exclusive
  64:Core/Src/MIDI_event.c **** 		case 0xF1: // MIDI Time Code Quarter Fram
  65:Core/Src/MIDI_event.c **** 		case 0xF2: // Song Position Pointer
  66:Core/Src/MIDI_event.c **** 		case 0xF3: // Song Select
  67:Core/Src/MIDI_event.c **** 		case 0xF4: // Undefined
  68:Core/Src/MIDI_event.c **** 		case 0xF5: // Undefined
  69:Core/Src/MIDI_event.c **** 		case 0xF6: // Tune Request
  70:Core/Src/MIDI_event.c **** 		case 0xF7: // End of System Exclusive
  71:Core/Src/MIDI_event.c **** 		case 0xF8: // Timing Clock (24 times a quarter note)
  72:Core/Src/MIDI_event.c **** 		case 0xF9: // Undefined
  73:Core/Src/MIDI_event.c **** 		case 0xFA: // Start Sequence
  74:Core/Src/MIDI_event.c **** 		case 0xFB: // Continue Sequence
  75:Core/Src/MIDI_event.c **** 		case 0xFC: // Pause Sequence
  76:Core/Src/MIDI_event.c **** 		case 0xFD: // Undefined
  77:Core/Src/MIDI_event.c **** 		case 0xFE: // Active Sensing
  78:Core/Src/MIDI_event.c **** 		case 0xFF: // Reset all synthesizers to power up
  79:Core/Src/MIDI_event.c **** 			break;
  80:Core/Src/MIDI_event.c **** 		}
  81:Core/Src/MIDI_event.c **** 	}
  82:Core/Src/MIDI_event.c **** 
  83:Core/Src/MIDI_event.c **** 	switch (status)
 130              		.loc 1 83 2 view .LVU18
 131 0014 9028     		cmp	r0, #144
 132 0016 1D46     		mov	r5, r3
 133              	.LVL4:
  56:Core/Src/MIDI_event.c **** 	uint8_t status;
 134              		.loc 1 56 2 is_stmt 1 view .LVU19
  58:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
 135              		.loc 1 58 2 view .LVU20
  59:Core/Src/MIDI_event.c **** 	if (status == 0xF0) // not using any of these
 136              		.loc 1 59 2 view .LVU21
 137              		.loc 1 83 2 view .LVU22
 138 0018 25D0     		beq	.L10
 139 001a E028     		cmp	r0, #224
 140 001c 1ED0     		beq	.L11
 141 001e 8028     		cmp	r0, #128
 142 0020 00D0     		beq	.L32
 143              	.LVL5:
 144              	.L9:
  84:Core/Src/MIDI_event.c **** 	{
  85:Core/Src/MIDI_event.c **** 	/********************* Real Note Off *************************/	
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 5


  86:Core/Src/MIDI_event.c **** 	case 0x80: 
  87:Core/Src/MIDI_event.c **** 		uint8_t noteOff = pack.evnt1;
  88:Core/Src/MIDI_event.c **** 		notes_Active[noteOff] = 0;
  89:Core/Src/MIDI_event.c **** 		notesCount--;
  90:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
  91:Core/Src/MIDI_event.c **** 		{
  92:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_amp);
  93:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
  94:Core/Src/MIDI_event.c **** 			notesCount = 0;
  95:Core/Src/MIDI_event.c **** 		}
  96:Core/Src/MIDI_event.c **** 		else // legato 
  97:Core/Src/MIDI_event.c **** 		{
  98:Core/Src/MIDI_event.c **** 			if ((noteOff - MIN_MIDI_NOTE) == currentPitch) // let sound the lowest key pressed
  99:Core/Src/MIDI_event.c **** 			{
 100:Core/Src/MIDI_event.c **** 				uint8_t i;
 101:Core/Src/MIDI_event.c **** 				for (i = 0; i < 128; i++)
 102:Core/Src/MIDI_event.c **** 				{
 103:Core/Src/MIDI_event.c **** 					if (notes_Active[i] == 1) // find the lowest key pressed
 104:Core/Src/MIDI_event.c **** 						break;
 105:Core/Src/MIDI_event.c **** 				}
 106:Core/Src/MIDI_event.c **** 				currentPitch = i - MIN_MIDI_NOTE; // conversion for mtof[]
 107:Core/Src/MIDI_event.c **** 			}
 108:Core/Src/MIDI_event.c **** 		}
 109:Core/Src/MIDI_event.c **** 		break;
 110:Core/Src/MIDI_event.c **** 	/*********************  Note On *************************/	
 111:Core/Src/MIDI_event.c **** 	case 0x90: // Note On
 112:Core/Src/MIDI_event.c **** 		uint8_t noteOn = pack.evnt1;
 113:Core/Src/MIDI_event.c **** 		velocity = pack.evnt2;
 114:Core/Src/MIDI_event.c **** 		if (velocity > 0) // True note on !
 115:Core/Src/MIDI_event.c **** 		{
 116:Core/Src/MIDI_event.c **** 			if (noteOn < MIN_MIDI_NOTE) // filtering notes
 117:Core/Src/MIDI_event.c **** 			{
 118:Core/Src/MIDI_event.c **** 				currentPitch = 0;
 119:Core/Src/MIDI_event.c **** 			}
 120:Core/Src/MIDI_event.c **** 			else
 121:Core/Src/MIDI_event.c **** 			{
 122:Core/Src/MIDI_event.c **** 				currentPitch = noteOn - MIN_MIDI_NOTE; // conversion for mtof[]
 123:Core/Src/MIDI_event.c **** 			}
 124:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note ON, pitch %u\r\n", currentPitch); // debug
 125:Core/Src/MIDI_event.c **** 			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // red LED ON when incoming MIDI note o
 126:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp);
 127:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_filt);
 128:Core/Src/MIDI_event.c **** 			notesCount++;
 129:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 130:Core/Src/MIDI_event.c **** 		}
 131:Core/Src/MIDI_event.c **** 		/*********************  Note Off *************************/
 132:Core/Src/MIDI_event.c **** 		else //  common implementation in MIDI devices: Note Off = Note On with velocity 0
 133:Core/Src/MIDI_event.c **** 		{			
 134:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 0;
 135:Core/Src/MIDI_event.c **** 			notesCount--;
 136:Core/Src/MIDI_event.c **** 			
 137:Core/Src/MIDI_event.c **** 			// SEGGER_RTT_printf(0, "Note OFF, pitch %u\r\n", currentPitch);
 138:Core/Src/MIDI_event.c **** 			if (notesCount <= 0)
 139:Core/Src/MIDI_event.c **** 			{
 140:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_amp);
 141:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_filt);
 142:Core/Src/MIDI_event.c **** 				notesCount = 0;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 6


 143:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 144:Core/Src/MIDI_event.c **** 			}
 145:Core/Src/MIDI_event.c **** 			else // legato
 146:Core/Src/MIDI_event.c **** 			{
 147:Core/Src/MIDI_event.c **** 				if ((noteOn - MIN_MIDI_NOTE) == currentPitch)
 148:Core/Src/MIDI_event.c **** 				{
 149:Core/Src/MIDI_event.c **** 					uint8_t i;
 150:Core/Src/MIDI_event.c **** 					for (i = 0; i < 128; i++)
 151:Core/Src/MIDI_event.c **** 					{
 152:Core/Src/MIDI_event.c **** 						if (notes_Active[i] == 1) // find the lowest key pressed
 153:Core/Src/MIDI_event.c **** 							break;
 154:Core/Src/MIDI_event.c **** 					}
 155:Core/Src/MIDI_event.c **** 					currentPitch = i - MIN_MIDI_NOTE; // conversion for notesFreq[]
 156:Core/Src/MIDI_event.c **** 				}
 157:Core/Src/MIDI_event.c **** 			}
 158:Core/Src/MIDI_event.c **** 		}
 159:Core/Src/MIDI_event.c **** 	/********************* Other MIDI Messages *************************/	
 160:Core/Src/MIDI_event.c **** 	case 0xA0: 	// Polyphonic Pressure
 161:Core/Src/MIDI_event.c **** 		break;
 162:Core/Src/MIDI_event.c **** 	case 0xB0:	// Control Change
 163:Core/Src/MIDI_event.c **** 		uint8_t cc_number = pack.evnt1;
 164:Core/Src/MIDI_event.c **** 		uint8_t cc_value = pack.evnt2;
 165:Core/Src/MIDI_event.c **** 		// SEGGER_RTT_printf(0, "CC#  %u %u\r\n", cc_number, cc_value); // debug
 166:Core/Src/MIDI_event.c **** 		switch (pack.evnt1) // CC number
 167:Core/Src/MIDI_event.c **** 		{
 168:Core/Src/MIDI_event.c **** 		case 20:
 169:Core/Src/MIDI_event.c **** 			break;
 170:Core/Src/MIDI_event.c **** 		case 7:
 171:Core/Src/MIDI_event.c **** 			break; // master volume
 172:Core/Src/MIDI_event.c **** 		}
 173:Core/Src/MIDI_event.c **** 		break;
 174:Core/Src/MIDI_event.c **** 	case 0xC0: // Program Change
 175:Core/Src/MIDI_event.c **** 		break;
 176:Core/Src/MIDI_event.c **** 	case 0xD0: // After Touch
 177:Core/Src/MIDI_event.c **** 		break;
 178:Core/Src/MIDI_event.c **** 	case 0xE0: // Pitch Bend
 179:Core/Src/MIDI_event.c **** 		pitchbend = pack.evnt2 * 128 + pack.evnt1;
 180:Core/Src/MIDI_event.c **** 		break;
 181:Core/Src/MIDI_event.c **** 	}
 182:Core/Src/MIDI_event.c **** }
 145              		.loc 1 182 1 is_stmt 0 view .LVU23
 146 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 147              	.LVL6:
 148              	.L32:
 149              	.LBB4:
  87:Core/Src/MIDI_event.c **** 		notes_Active[noteOff] = 0;
 150              		.loc 1 87 3 is_stmt 1 view .LVU24
  88:Core/Src/MIDI_event.c **** 		notesCount--;
 151              		.loc 1 88 3 view .LVU25
  89:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
 152              		.loc 1 89 13 is_stmt 0 view .LVU26
 153 0024 374E     		ldr	r6, .L41
 154              	.LVL7:
  88:Core/Src/MIDI_event.c **** 		notesCount--;
 155              		.loc 1 88 25 view .LVU27
 156 0026 384B     		ldr	r3, .L41+4
  89:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 7


 157              		.loc 1 89 13 view .LVU28
 158 0028 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 159 002a 013A     		subs	r2, r2, #1
  88:Core/Src/MIDI_event.c **** 		notesCount--;
 160              		.loc 1 88 25 view .LVU29
 161 002c 0024     		movs	r4, #0
  89:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
 162              		.loc 1 89 13 view .LVU30
 163 002e 52B2     		sxtb	r2, r2
  90:Core/Src/MIDI_event.c **** 		{
 164              		.loc 1 90 6 view .LVU31
 165 0030 A242     		cmp	r2, r4
  88:Core/Src/MIDI_event.c **** 		notesCount--;
 166              		.loc 1 88 25 view .LVU32
 167 0032 5C55     		strb	r4, [r3, r5]
  89:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
 168              		.loc 1 89 3 is_stmt 1 view .LVU33
  89:Core/Src/MIDI_event.c **** 		if (notesCount <= 0) // no more keys pressed
 169              		.loc 1 89 13 is_stmt 0 view .LVU34
 170 0034 3270     		strb	r2, [r6]
  90:Core/Src/MIDI_event.c **** 		{
 171              		.loc 1 90 3 is_stmt 1 view .LVU35
  90:Core/Src/MIDI_event.c **** 		{
 172              		.loc 1 90 6 is_stmt 0 view .LVU36
 173 0036 47DD     		ble	.L33
  98:Core/Src/MIDI_event.c **** 			{
 174              		.loc 1 98 4 is_stmt 1 view .LVU37
  98:Core/Src/MIDI_event.c **** 			{
 175              		.loc 1 98 34 is_stmt 0 view .LVU38
 176 0038 3448     		ldr	r0, .L41+8
 177              	.LVL8:
  98:Core/Src/MIDI_event.c **** 			{
 178              		.loc 1 98 7 view .LVU39
 179 003a 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 180 003c AA42     		cmp	r2, r5
 181 003e F0D1     		bne	.L9
 182 0040 1A46     		mov	r2, r3
 183 0042 2346     		mov	r3, r4
 184 0044 01E0     		b	.L16
 185              	.LVL9:
 186              	.L35:
 187              	.LBB5:
 101:Core/Src/MIDI_event.c **** 				{
 188              		.loc 1 101 19 discriminator 2 view .LVU40
 189 0046 802B     		cmp	r3, #128
 190 0048 55D0     		beq	.L34
 191              	.LVL10:
 192              	.L16:
 101:Core/Src/MIDI_event.c **** 				{
 193              		.loc 1 101 27 is_stmt 1 view .LVU41
 101:Core/Src/MIDI_event.c **** 				{
 194              		.loc 1 101 19 view .LVU42
 103:Core/Src/MIDI_event.c **** 						break;
 195              		.loc 1 103 22 is_stmt 0 view .LVU43
 196 004a 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 103:Core/Src/MIDI_event.c **** 						break;
 197              		.loc 1 103 9 view .LVU44
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 8


 198 004e 0129     		cmp	r1, #1
 199 0050 DCB2     		uxtb	r4, r3
 200              	.LVL11:
 103:Core/Src/MIDI_event.c **** 						break;
 201              		.loc 1 103 6 is_stmt 1 view .LVU45
 101:Core/Src/MIDI_event.c **** 				{
 202              		.loc 1 101 19 is_stmt 0 view .LVU46
 203 0052 03F10103 		add	r3, r3, #1
 103:Core/Src/MIDI_event.c **** 						break;
 204              		.loc 1 103 9 view .LVU47
 205 0056 F6D1     		bne	.L35
 206              	.LBE5:
 207              	.LBB6:
 155:Core/Src/MIDI_event.c **** 				}
 208              		.loc 1 155 6 is_stmt 1 view .LVU48
 155:Core/Src/MIDI_event.c **** 				}
 209              		.loc 1 155 19 is_stmt 0 view .LVU49
 210 0058 8470     		strb	r4, [r0, #2]
 211              	.LVL12:
 212              	.L40:
 155:Core/Src/MIDI_event.c **** 				}
 213              		.loc 1 155 19 view .LVU50
 214              	.LBE6:
 215              	.LBE4:
 216              		.loc 1 182 1 view .LVU51
 217 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.LVL13:
 219              	.L11:
 220              	.LBB10:
 179:Core/Src/MIDI_event.c **** 		break;
 221              		.loc 1 179 3 is_stmt 1 view .LVU52
 179:Core/Src/MIDI_event.c **** 		break;
 222              		.loc 1 179 13 is_stmt 0 view .LVU53
 223 005c 2B4B     		ldr	r3, .L41+8
 179:Core/Src/MIDI_event.c **** 		break;
 224              		.loc 1 179 32 view .LVU54
 225 005e 05EBC412 		add	r2, r5, r4, lsl #7
 179:Core/Src/MIDI_event.c **** 		break;
 226              		.loc 1 179 13 view .LVU55
 227 0062 1A80     		strh	r2, [r3]	@ movhi
 180:Core/Src/MIDI_event.c **** 	}
 228              		.loc 1 180 3 is_stmt 1 view .LVU56
 229              	.LBE10:
 230              		.loc 1 182 1 is_stmt 0 view .LVU57
 231 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 232              	.LVL14:
 233              	.L10:
 234              	.LBB11:
 112:Core/Src/MIDI_event.c **** 		velocity = pack.evnt2;
 235              		.loc 1 112 3 is_stmt 1 view .LVU58
 113:Core/Src/MIDI_event.c **** 		if (velocity > 0) // True note on !
 236              		.loc 1 113 3 view .LVU59
 113:Core/Src/MIDI_event.c **** 		if (velocity > 0) // True note on !
 237              		.loc 1 113 12 is_stmt 0 view .LVU60
 238 0066 2948     		ldr	r0, .L41+8
 239              	.LVL15:
 113:Core/Src/MIDI_event.c **** 		if (velocity > 0) // True note on !
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 9


 240              		.loc 1 113 12 view .LVU61
 241 0068 C670     		strb	r6, [r0, #3]
 114:Core/Src/MIDI_event.c **** 		{
 242              		.loc 1 114 3 is_stmt 1 view .LVU62
 114:Core/Src/MIDI_event.c **** 		{
 243              		.loc 1 114 6 is_stmt 0 view .LVU63
 244 006a C4B9     		cbnz	r4, .L36
 134:Core/Src/MIDI_event.c **** 			notesCount--;
 245              		.loc 1 134 4 is_stmt 1 view .LVU64
 135:Core/Src/MIDI_event.c **** 			
 246              		.loc 1 135 14 is_stmt 0 view .LVU65
 247 006c 254F     		ldr	r7, .L41
 134:Core/Src/MIDI_event.c **** 			notesCount--;
 248              		.loc 1 134 25 view .LVU66
 249 006e 264B     		ldr	r3, .L41+4
 135:Core/Src/MIDI_event.c **** 			
 250              		.loc 1 135 14 view .LVU67
 251 0070 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 134:Core/Src/MIDI_event.c **** 			notesCount--;
 252              		.loc 1 134 25 view .LVU68
 253 0072 5E55     		strb	r6, [r3, r5]
 135:Core/Src/MIDI_event.c **** 			
 254              		.loc 1 135 4 is_stmt 1 view .LVU69
 135:Core/Src/MIDI_event.c **** 			
 255              		.loc 1 135 14 is_stmt 0 view .LVU70
 256 0074 013A     		subs	r2, r2, #1
 257 0076 52B2     		sxtb	r2, r2
 138:Core/Src/MIDI_event.c **** 			{
 258              		.loc 1 138 7 view .LVU71
 259 0078 002A     		cmp	r2, #0
 135:Core/Src/MIDI_event.c **** 			
 260              		.loc 1 135 14 view .LVU72
 261 007a 3A70     		strb	r2, [r7]
 138:Core/Src/MIDI_event.c **** 			{
 262              		.loc 1 138 4 is_stmt 1 view .LVU73
 138:Core/Src/MIDI_event.c **** 			{
 263              		.loc 1 138 7 is_stmt 0 view .LVU74
 264 007c 2CDD     		ble	.L37
 147:Core/Src/MIDI_event.c **** 				{
 265              		.loc 1 147 5 is_stmt 1 view .LVU75
 147:Core/Src/MIDI_event.c **** 				{
 266              		.loc 1 147 8 is_stmt 0 view .LVU76
 267 007e 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 268 0080 AA42     		cmp	r2, r5
 269 0082 CED1     		bne	.L9
 270 0084 2246     		mov	r2, r4
 271 0086 01E0     		b	.L21
 272              	.LVL16:
 273              	.L39:
 274              	.LBB7:
 150:Core/Src/MIDI_event.c **** 					{
 275              		.loc 1 150 20 discriminator 2 view .LVU77
 276 0088 802A     		cmp	r2, #128
 277 008a 37D0     		beq	.L38
 278              	.LVL17:
 279              	.L21:
 150:Core/Src/MIDI_event.c **** 					{
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 10


 280              		.loc 1 150 28 is_stmt 1 view .LVU78
 150:Core/Src/MIDI_event.c **** 					{
 281              		.loc 1 150 20 view .LVU79
 152:Core/Src/MIDI_event.c **** 							break;
 282              		.loc 1 152 23 is_stmt 0 view .LVU80
 283 008c 13F8011B 		ldrb	r1, [r3], #1	@ zero_extendqisi2
 152:Core/Src/MIDI_event.c **** 							break;
 284              		.loc 1 152 10 view .LVU81
 285 0090 0129     		cmp	r1, #1
 286 0092 D4B2     		uxtb	r4, r2
 287              	.LVL18:
 152:Core/Src/MIDI_event.c **** 							break;
 288              		.loc 1 152 7 is_stmt 1 view .LVU82
 150:Core/Src/MIDI_event.c **** 					{
 289              		.loc 1 150 20 is_stmt 0 view .LVU83
 290 0094 02F10102 		add	r2, r2, #1
 152:Core/Src/MIDI_event.c **** 							break;
 291              		.loc 1 152 10 view .LVU84
 292 0098 F6D1     		bne	.L39
 155:Core/Src/MIDI_event.c **** 				}
 293              		.loc 1 155 6 is_stmt 1 view .LVU85
 155:Core/Src/MIDI_event.c **** 				}
 294              		.loc 1 155 19 is_stmt 0 view .LVU86
 295 009a 8470     		strb	r4, [r0, #2]
 296 009c DDE7     		b	.L40
 297              	.LVL19:
 298              	.L36:
 155:Core/Src/MIDI_event.c **** 				}
 299              		.loc 1 155 19 view .LVU87
 300              	.LBE7:
 116:Core/Src/MIDI_event.c **** 			{
 301              		.loc 1 116 4 is_stmt 1 view .LVU88
 122:Core/Src/MIDI_event.c **** 			}
 302              		.loc 1 122 5 view .LVU89
 122:Core/Src/MIDI_event.c **** 			}
 303              		.loc 1 122 18 is_stmt 0 view .LVU90
 304 009e 8370     		strb	r3, [r0, #2]
 125:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_amp);
 305              		.loc 1 125 4 is_stmt 1 view .LVU91
 306 00a0 0122     		movs	r2, #1
 307 00a2 4FF48041 		mov	r1, #16384
 308 00a6 1A48     		ldr	r0, .L41+12
 309 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 310              	.LVL20:
 126:Core/Src/MIDI_event.c **** 			ADSR_keyOn(&adsr_filt);
 311              		.loc 1 126 4 view .LVU92
 312 00ac 1948     		ldr	r0, .L41+16
 313 00ae FFF7FEFF 		bl	ADSR_keyOn
 314              	.LVL21:
 127:Core/Src/MIDI_event.c **** 			notesCount++;
 315              		.loc 1 127 4 view .LVU93
 316 00b2 1948     		ldr	r0, .L41+20
 317 00b4 FFF7FEFF 		bl	ADSR_keyOn
 318              	.LVL22:
 128:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 319              		.loc 1 128 4 view .LVU94
 128:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 11


 320              		.loc 1 128 14 is_stmt 0 view .LVU95
 321 00b8 124A     		ldr	r2, .L41
 129:Core/Src/MIDI_event.c **** 		}
 322              		.loc 1 129 25 view .LVU96
 323 00ba 1349     		ldr	r1, .L41+4
 128:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 324              		.loc 1 128 14 view .LVU97
 325 00bc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 129:Core/Src/MIDI_event.c **** 		}
 326              		.loc 1 129 25 view .LVU98
 327 00be 0120     		movs	r0, #1
 128:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 328              		.loc 1 128 14 view .LVU99
 329 00c0 0344     		add	r3, r3, r0
 129:Core/Src/MIDI_event.c **** 		}
 330              		.loc 1 129 25 view .LVU100
 331 00c2 4855     		strb	r0, [r1, r5]
 128:Core/Src/MIDI_event.c **** 			notes_Active[noteOn] = 1;
 332              		.loc 1 128 14 view .LVU101
 333 00c4 1370     		strb	r3, [r2]
 129:Core/Src/MIDI_event.c **** 		}
 334              		.loc 1 129 4 is_stmt 1 view .LVU102
 335              	.LBE11:
 336              		.loc 1 182 1 is_stmt 0 view .LVU103
 337 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 338              	.LVL23:
 339              	.L33:
 340              	.LBB12:
  92:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
 341              		.loc 1 92 4 is_stmt 1 view .LVU104
 342 00c8 1248     		ldr	r0, .L41+16
 343              	.LVL24:
  92:Core/Src/MIDI_event.c **** 			ADSR_keyOff(&adsr_filt);
 344              		.loc 1 92 4 is_stmt 0 view .LVU105
 345 00ca FFF7FEFF 		bl	ADSR_keyOff
 346              	.LVL25:
  93:Core/Src/MIDI_event.c **** 			notesCount = 0;
 347              		.loc 1 93 4 is_stmt 1 view .LVU106
 348 00ce 1248     		ldr	r0, .L41+20
 349 00d0 FFF7FEFF 		bl	ADSR_keyOff
 350              	.LVL26:
  94:Core/Src/MIDI_event.c **** 		}
 351              		.loc 1 94 4 view .LVU107
  94:Core/Src/MIDI_event.c **** 		}
 352              		.loc 1 94 15 is_stmt 0 view .LVU108
 353 00d4 3470     		strb	r4, [r6]
 354              	.LBE12:
 355              		.loc 1 182 1 view .LVU109
 356 00d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 357              	.LVL27:
 358              	.L37:
 359              	.LBB13:
 140:Core/Src/MIDI_event.c **** 				ADSR_keyOff(&adsr_filt);
 360              		.loc 1 140 5 is_stmt 1 view .LVU110
 361 00d8 0E48     		ldr	r0, .L41+16
 362 00da FFF7FEFF 		bl	ADSR_keyOff
 363              	.LVL28:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 12


 141:Core/Src/MIDI_event.c **** 				notesCount = 0;
 364              		.loc 1 141 5 view .LVU111
 365 00de 0E48     		ldr	r0, .L41+20
 366 00e0 FFF7FEFF 		bl	ADSR_keyOff
 367              	.LVL29:
 142:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 368              		.loc 1 142 5 view .LVU112
 143:Core/Src/MIDI_event.c **** 			}
 369              		.loc 1 143 5 is_stmt 0 view .LVU113
 370 00e4 2246     		mov	r2, r4
 142:Core/Src/MIDI_event.c **** 				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // red LED OFF when all MIDI notes o
 371              		.loc 1 142 16 view .LVU114
 372 00e6 3E70     		strb	r6, [r7]
 143:Core/Src/MIDI_event.c **** 			}
 373              		.loc 1 143 5 is_stmt 1 view .LVU115
 374 00e8 0948     		ldr	r0, .L41+12
 375              	.LBE13:
 376              		.loc 1 182 1 is_stmt 0 view .LVU116
 377 00ea BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 378              		.cfi_remember_state
 379              		.cfi_restore 14
 380              		.cfi_restore 7
 381              		.cfi_restore 6
 382              		.cfi_restore 5
 383              		.cfi_restore 4
 384              		.cfi_restore 3
 385              		.cfi_def_cfa_offset 0
 386              	.LVL30:
 387              	.LBB14:
 143:Core/Src/MIDI_event.c **** 			}
 388              		.loc 1 143 5 view .LVU117
 389 00ee 4FF48041 		mov	r1, #16384
 390 00f2 FFF7FEBF 		b	HAL_GPIO_WritePin
 391              	.LVL31:
 392              	.L34:
 393              		.cfi_restore_state
 394              	.LBB8:
 143:Core/Src/MIDI_event.c **** 			}
 395              		.loc 1 143 5 view .LVU118
 396 00f6 1C46     		mov	r4, r3
 397              	.LVL32:
 106:Core/Src/MIDI_event.c **** 			}
 398              		.loc 1 106 5 is_stmt 1 view .LVU119
 399              	.LBE8:
 400              	.LBB9:
 155:Core/Src/MIDI_event.c **** 				}
 401              		.loc 1 155 6 view .LVU120
 155:Core/Src/MIDI_event.c **** 				}
 402              		.loc 1 155 19 is_stmt 0 view .LVU121
 403 00f8 8470     		strb	r4, [r0, #2]
 404 00fa AEE7     		b	.L40
 405              	.LVL33:
 406              	.L38:
 155:Core/Src/MIDI_event.c **** 				}
 407              		.loc 1 155 19 view .LVU122
 408 00fc 1446     		mov	r4, r2
 409              	.LVL34:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 13


 155:Core/Src/MIDI_event.c **** 				}
 410              		.loc 1 155 6 is_stmt 1 view .LVU123
 155:Core/Src/MIDI_event.c **** 				}
 411              		.loc 1 155 19 is_stmt 0 view .LVU124
 412 00fe 8470     		strb	r4, [r0, #2]
 413 0100 ABE7     		b	.L40
 414              	.L42:
 415 0102 00BF     		.align	2
 416              	.L41:
 417 0104 00000000 		.word	.LANCHOR1
 418 0108 00000000 		.word	.LANCHOR0
 419 010c 00000000 		.word	.LANCHOR2
 420 0110 000C0240 		.word	1073875968
 421 0114 00000000 		.word	adsr_amp
 422 0118 00000000 		.word	adsr_filt
 423              	.LBE9:
 424              	.LBE14:
 425              		.cfi_endproc
 426              	.LFE139:
 428              		.section	.text.USBH_UserProcess_callback,"ax",%progbits
 429              		.align	1
 430              		.p2align 2,,3
 431              		.global	USBH_UserProcess_callback
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 436              	USBH_UserProcess_callback:
 437              	.LVL35:
 438              	.LFB140:
 183:Core/Src/MIDI_event.c **** 
 184:Core/Src/MIDI_event.c **** 
 185:Core/Src/MIDI_event.c **** 
 186:Core/Src/MIDI_event.c **** 
 187:Core/Src/MIDI_event.c **** /*=================================================================================================
 188:Core/Src/MIDI_event.c **** /**
 189:Core/Src/MIDI_event.c ****  * @brief  User Process function callback
 190:Core/Src/MIDI_event.c ****  * @param  phost: Host Handle
 191:Core/Src/MIDI_event.c ****  * @param  id: Host Library user message ID
 192:Core/Src/MIDI_event.c ****  * @retval none
 193:Core/Src/MIDI_event.c ****  */
 194:Core/Src/MIDI_event.c **** void USBH_UserProcess_callback(USBH_HandleTypeDef *pHost, uint8_t vId)
 195:Core/Src/MIDI_event.c **** {
 439              		.loc 1 195 1 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 196:Core/Src/MIDI_event.c **** 	switch (vId)
 443              		.loc 1 196 2 view .LVU126
 444 0000 0429     		cmp	r1, #4
 445 0002 06D0     		beq	.L44
 446 0004 0529     		cmp	r1, #5
 195:Core/Src/MIDI_event.c **** 	switch (vId)
 447              		.loc 1 195 1 is_stmt 0 view .LVU127
 448 0006 10B5     		push	{r4, lr}
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 14


 452 0008 0B46     		mov	r3, r1
 453              		.loc 1 196 2 view .LVU128
 454 000a 20D0     		beq	.L45
 455 000c 0229     		cmp	r1, #2
 456 000e 08D0     		beq	.L52
 197:Core/Src/MIDI_event.c **** 	{
 198:Core/Src/MIDI_event.c **** 	case HOST_USER_SELECT_CONFIGURATION:
 199:Core/Src/MIDI_event.c **** 		break;
 200:Core/Src/MIDI_event.c **** 
 201:Core/Src/MIDI_event.c **** 	case HOST_USER_DISCONNECTION:
 202:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_DISCONNECT;
 203:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 204:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 205:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 206:Core/Src/MIDI_event.c **** 		break;
 207:Core/Src/MIDI_event.c **** 
 208:Core/Src/MIDI_event.c **** 	case HOST_USER_CLASS_ACTIVE:
 209:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_READY;
 210:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 211:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 212:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 213:Core/Src/MIDI_event.c **** 		break;
 214:Core/Src/MIDI_event.c **** 
 215:Core/Src/MIDI_event.c **** 	case HOST_USER_CONNECTION:
 216:Core/Src/MIDI_event.c **** 		Appli_state = MIDI_APPLICATION_START;
 217:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 218:Core/Src/MIDI_event.c **** 		break;
 219:Core/Src/MIDI_event.c **** 
 220:Core/Src/MIDI_event.c **** 	default:
 221:Core/Src/MIDI_event.c **** 		break;
 222:Core/Src/MIDI_event.c **** 	}
 223:Core/Src/MIDI_event.c **** }
 457              		.loc 1 223 1 view .LVU129
 458 0010 10BD     		pop	{r4, pc}
 459              	.L44:
 460              		.cfi_def_cfa_offset 0
 461              		.cfi_restore 4
 462              		.cfi_restore 14
 216:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 463              		.loc 1 216 3 is_stmt 1 view .LVU130
 216:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 464              		.loc 1 216 15 is_stmt 0 view .LVU131
 465 0012 174B     		ldr	r3, .L53
 217:Core/Src/MIDI_event.c **** 		break;
 466              		.loc 1 217 3 view .LVU132
 467 0014 1748     		ldr	r0, .L53+4
 468              	.LVL36:
 216:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 469              		.loc 1 216 15 view .LVU133
 470 0016 0122     		movs	r2, #1
 217:Core/Src/MIDI_event.c **** 		break;
 471              		.loc 1 217 3 view .LVU134
 472 0018 4FF40041 		mov	r1, #32768
 473              	.LVL37:
 216:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(GPIOD, 0x8000, GPIO_PIN_SET);
 474              		.loc 1 216 15 view .LVU135
 475 001c 1A70     		strb	r2, [r3]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 15


 217:Core/Src/MIDI_event.c **** 		break;
 476              		.loc 1 217 3 is_stmt 1 view .LVU136
 477 001e FFF7FEBF 		b	HAL_GPIO_WritePin
 478              	.LVL38:
 479              	.L52:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 4, -8
 482              		.cfi_offset 14, -4
 209:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 483              		.loc 1 209 3 view .LVU137
 209:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 484              		.loc 1 209 15 is_stmt 0 view .LVU138
 485 0022 134C     		ldr	r4, .L53
 210:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 486              		.loc 1 210 3 view .LVU139
 487 0024 1348     		ldr	r0, .L53+4
 488              	.LVL39:
 209:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 489              		.loc 1 209 15 view .LVU140
 490 0026 2370     		strb	r3, [r4]
 210:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 491              		.loc 1 210 3 is_stmt 1 view .LVU141
 492 0028 0122     		movs	r2, #1
 493 002a 4FF48051 		mov	r1, #4096
 494              	.LVL40:
 210:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 495              		.loc 1 210 3 is_stmt 0 view .LVU142
 496 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 497              	.LVL41:
 211:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 498              		.loc 1 211 3 is_stmt 1 view .LVU143
 499 0032 1048     		ldr	r0, .L53+4
 500 0034 0022     		movs	r2, #0
 501 0036 4FF40041 		mov	r1, #32768
 502 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 503              	.LVL42:
 212:Core/Src/MIDI_event.c **** 		break;
 504              		.loc 1 212 3 view .LVU144
 505              		.loc 1 223 1 is_stmt 0 view .LVU145
 506 003e BDE81040 		pop	{r4, lr}
 507              		.cfi_remember_state
 508              		.cfi_restore 14
 509              		.cfi_restore 4
 510              		.cfi_def_cfa_offset 0
 212:Core/Src/MIDI_event.c **** 		break;
 511              		.loc 1 212 3 view .LVU146
 512 0042 0C48     		ldr	r0, .L53+4
 513 0044 0022     		movs	r2, #0
 514 0046 4FF48041 		mov	r1, #16384
 515 004a FFF7FEBF 		b	HAL_GPIO_WritePin
 516              	.LVL43:
 517              	.L45:
 518              		.cfi_restore_state
 202:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 519              		.loc 1 202 3 is_stmt 1 view .LVU147
 202:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 520              		.loc 1 202 15 is_stmt 0 view .LVU148
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 16


 521 004e 084B     		ldr	r3, .L53
 204:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 522              		.loc 1 204 3 view .LVU149
 523 0050 0848     		ldr	r0, .L53+4
 524              	.LVL44:
 204:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 525              		.loc 1 204 3 view .LVU150
 526 0052 0022     		movs	r2, #0
 527 0054 4FF48051 		mov	r1, #4096
 528              	.LVL45:
 202:Core/Src/MIDI_event.c **** 		// 4 - green, 3 - orange, 5 - red, 6 - blue
 529              		.loc 1 202 15 view .LVU151
 530 0058 0424     		movs	r4, #4
 531 005a 1C70     		strb	r4, [r3]
 204:Core/Src/MIDI_event.c **** 		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 532              		.loc 1 204 3 is_stmt 1 view .LVU152
 533 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 534              	.LVL46:
 205:Core/Src/MIDI_event.c **** 		break;
 535              		.loc 1 205 3 view .LVU153
 536              		.loc 1 223 1 is_stmt 0 view .LVU154
 537 0060 BDE81040 		pop	{r4, lr}
 538              		.cfi_restore 14
 539              		.cfi_restore 4
 540              		.cfi_def_cfa_offset 0
 205:Core/Src/MIDI_event.c **** 		break;
 541              		.loc 1 205 3 view .LVU155
 542 0064 0348     		ldr	r0, .L53+4
 543 0066 0022     		movs	r2, #0
 544 0068 4FF40041 		mov	r1, #32768
 545 006c FFF7FEBF 		b	HAL_GPIO_WritePin
 546              	.LVL47:
 547              	.L54:
 548              		.align	2
 549              	.L53:
 550 0070 00000000 		.word	.LANCHOR3
 551 0074 000C0240 		.word	1073875968
 552              		.cfi_endproc
 553              	.LFE140:
 555              		.global	notesCount
 556              		.global	notes_Active
 557              		.global	velocity
 558              		.global	currentPitch
 559              		.global	pitchbend
 560              		.global	Appli_state
 561              		.global	hUSBHost
 562              		.section	.bss.Appli_state,"aw",%nobits
 563              		.set	.LANCHOR3,. + 0
 566              	Appli_state:
 567 0000 00       		.space	1
 568              		.section	.bss.hUSBHost,"aw",%nobits
 569              		.align	2
 572              	hUSBHost:
 573 0000 00000000 		.space	1564
 573      00000000 
 573      00000000 
 573      00000000 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 17


 573      00000000 
 574              		.section	.bss.notesCount,"aw",%nobits
 575              		.set	.LANCHOR1,. + 0
 578              	notesCount:
 579 0000 00       		.space	1
 580              		.section	.bss.notes_Active,"aw",%nobits
 581              		.align	2
 582              		.set	.LANCHOR0,. + 0
 585              	notes_Active:
 586 0000 00000000 		.space	128
 586      00000000 
 586      00000000 
 586      00000000 
 586      00000000 
 587              		.section	.ccmram,"aw"
 588              		.align	1
 589              		.set	.LANCHOR2,. + 0
 592              	pitchbend:
 593 0000 0000     		.space	2
 596              	currentPitch:
 597 0002 00       		.space	1
 600              	velocity:
 601 0003 00       		.space	1
 602              		.text
 603              	.Letext0:
 604              		.file 2 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 605              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 606              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 607              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 608              		.file 6 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 609              		.file 7 "Core/Inc/usbh_MIDI.h"
 610              		.file 8 "Core/Inc/MIDI_application.h"
 611              		.file 9 "Core/Inc/ADSR_envelope.h"
 612              		.file 10 "<built-in>"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MIDI_event.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:20     .text.allNotesOff:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:27     .text.allNotesOff:0000000000000000 allNotesOff
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:64     .text.allNotesOff:0000000000000014 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:70     .text.MIDI_eventInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:77     .text.MIDI_eventInit:0000000000000000 MIDI_eventInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:94     .text.MIDI_eventInit:000000000000000c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:99     .text.ProcessMIDI:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:106    .text.ProcessMIDI:0000000000000000 ProcessMIDI
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:417    .text.ProcessMIDI:0000000000000104 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:429    .text.USBH_UserProcess_callback:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:436    .text.USBH_UserProcess_callback:0000000000000000 USBH_UserProcess_callback
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:550    .text.USBH_UserProcess_callback:0000000000000070 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:578    .bss.notesCount:0000000000000000 notesCount
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:585    .bss.notes_Active:0000000000000000 notes_Active
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:600    .ccmram:0000000000000003 velocity
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:596    .ccmram:0000000000000002 currentPitch
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:592    .ccmram:0000000000000000 pitchbend
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:566    .bss.Appli_state:0000000000000000 Appli_state
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:572    .bss.hUSBHost:0000000000000000 hUSBHost
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:567    .bss.Appli_state:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:569    .bss.hUSBHost:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:579    .bss.notesCount:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:581    .bss.notes_Active:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccNAJaMk.s:588    .ccmram:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
ADSR_keyOn
ADSR_keyOff
adsr_amp
adsr_filt
