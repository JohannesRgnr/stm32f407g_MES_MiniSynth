ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._WriteNoCheck,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_WriteNoCheck:
  27              	.LVL0:
  28              	.LFB2:
  29              		.file 1 "Core/Src/SEGGER_RTT.c"
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 2


  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 26642 $
  50:Core/Src/SEGGER_RTT.c **** 
  51:Core/Src/SEGGER_RTT.c **** Additional information:
  52:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  54:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:Core/Src/SEGGER_RTT.c **** 
  59:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:Core/Src/SEGGER_RTT.c **** 
  68:Core/Src/SEGGER_RTT.c **** 
  69:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:Core/Src/SEGGER_RTT.c **** */
  71:Core/Src/SEGGER_RTT.c **** 
  72:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:Core/Src/SEGGER_RTT.c **** 
  76:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  77:Core/Src/SEGGER_RTT.c **** *
  78:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  79:Core/Src/SEGGER_RTT.c **** *
  80:Core/Src/SEGGER_RTT.c **** **********************************************************************
  81:Core/Src/SEGGER_RTT.c **** */
  82:Core/Src/SEGGER_RTT.c **** 
  83:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  84:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  85:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  86:Core/Src/SEGGER_RTT.c ****   #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 3


  87:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  88:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  89:Core/Src/SEGGER_RTT.c ****   #endif
  90:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  91:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  92:Core/Src/SEGGER_RTT.c ****   #endif
  93:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  94:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  95:Core/Src/SEGGER_RTT.c ****   #endif
  96:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  97:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  98:Core/Src/SEGGER_RTT.c ****   #endif
  99:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 100:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 101:Core/Src/SEGGER_RTT.c ****   #endif
 102:Core/Src/SEGGER_RTT.c **** #endif
 103:Core/Src/SEGGER_RTT.c **** 
 104:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 105:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 106:Core/Src/SEGGER_RTT.c **** #endif
 107:Core/Src/SEGGER_RTT.c **** 
 108:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 109:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 110:Core/Src/SEGGER_RTT.c **** #endif
 111:Core/Src/SEGGER_RTT.c **** 
 112:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 113:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 114:Core/Src/SEGGER_RTT.c **** #endif
 115:Core/Src/SEGGER_RTT.c **** 
 116:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 117:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 118:Core/Src/SEGGER_RTT.c **** #endif
 119:Core/Src/SEGGER_RTT.c **** 
 120:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 121:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 122:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 123:Core/Src/SEGGER_RTT.c ****   #endif
 124:Core/Src/SEGGER_RTT.c **** #endif
 125:Core/Src/SEGGER_RTT.c **** 
 126:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 127:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 128:Core/Src/SEGGER_RTT.c **** #endif
 129:Core/Src/SEGGER_RTT.c **** 
 130:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 131:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 132:Core/Src/SEGGER_RTT.c **** #endif
 133:Core/Src/SEGGER_RTT.c **** 
 134:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 135:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 136:Core/Src/SEGGER_RTT.c **** #endif
 137:Core/Src/SEGGER_RTT.c **** 
 138:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 139:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 140:Core/Src/SEGGER_RTT.c **** #endif
 141:Core/Src/SEGGER_RTT.c **** 
 142:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 143:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 4


 144:Core/Src/SEGGER_RTT.c **** #endif
 145:Core/Src/SEGGER_RTT.c **** 
 146:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 147:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 148:Core/Src/SEGGER_RTT.c **** #endif
 149:Core/Src/SEGGER_RTT.c **** 
 150:Core/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 151:Core/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 152:Core/Src/SEGGER_RTT.c **** #endif
 153:Core/Src/SEGGER_RTT.c **** 
 154:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 155:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 156:Core/Src/SEGGER_RTT.c **** #endif
 157:Core/Src/SEGGER_RTT.c **** 
 158:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 159:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 160:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 161:Core/Src/SEGGER_RTT.c ****   #else
 162:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 163:Core/Src/SEGGER_RTT.c ****   #endif
 164:Core/Src/SEGGER_RTT.c **** #endif
 165:Core/Src/SEGGER_RTT.c **** 
 166:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 167:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 168:Core/Src/SEGGER_RTT.c **** #endif
 169:Core/Src/SEGGER_RTT.c **** 
 170:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 171:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 172:Core/Src/SEGGER_RTT.c **** #endif
 173:Core/Src/SEGGER_RTT.c **** //
 174:Core/Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 175:Core/Src/SEGGER_RTT.c **** //
 176:Core/Src/SEGGER_RTT.c **** #ifndef NULL
 177:Core/Src/SEGGER_RTT.c ****   #define NULL 0
 178:Core/Src/SEGGER_RTT.c **** #endif
 179:Core/Src/SEGGER_RTT.c **** 
 180:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 181:Core/Src/SEGGER_RTT.c **** *
 182:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 183:Core/Src/SEGGER_RTT.c **** *
 184:Core/Src/SEGGER_RTT.c **** **********************************************************************
 185:Core/Src/SEGGER_RTT.c **** */
 186:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 187:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 188:Core/Src/SEGGER_RTT.c **** #endif
 189:Core/Src/SEGGER_RTT.c **** 
 190:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 191:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 192:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 193:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 195:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 196:Core/Src/SEGGER_RTT.c ****                                   Var
 197:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 198:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 199:Core/Src/SEGGER_RTT.c ****   #else
 200:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 5


 201:Core/Src/SEGGER_RTT.c ****   #endif
 202:Core/Src/SEGGER_RTT.c **** #else
 203:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 204:Core/Src/SEGGER_RTT.c **** #endif
 205:Core/Src/SEGGER_RTT.c **** 
 206:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 207:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 208:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 209:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 210:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 211:Core/Src/SEGGER_RTT.c ****                                         Var
 212:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 213:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 214:Core/Src/SEGGER_RTT.c ****   #else
 215:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 216:Core/Src/SEGGER_RTT.c ****   #endif
 217:Core/Src/SEGGER_RTT.c **** #else
 218:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 219:Core/Src/SEGGER_RTT.c **** #endif
 220:Core/Src/SEGGER_RTT.c **** 
 221:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 222:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 223:Core/Src/SEGGER_RTT.c **** #else
 224:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 225:Core/Src/SEGGER_RTT.c **** #endif
 226:Core/Src/SEGGER_RTT.c **** 
 227:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 228:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 229:Core/Src/SEGGER_RTT.c **** #else
 230:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 231:Core/Src/SEGGER_RTT.c **** #endif
 232:Core/Src/SEGGER_RTT.c **** 
 233:Core/Src/SEGGER_RTT.c **** 
 234:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 235:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 236:Core/Src/SEGGER_RTT.c **** #else
 237:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 238:Core/Src/SEGGER_RTT.c **** #endif
 239:Core/Src/SEGGER_RTT.c **** 
 240:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 241:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 242:Core/Src/SEGGER_RTT.c **** #else
 243:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 244:Core/Src/SEGGER_RTT.c **** #endif
 245:Core/Src/SEGGER_RTT.c **** 
 246:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 247:Core/Src/SEGGER_RTT.c **** *
 248:Core/Src/SEGGER_RTT.c **** *       Static const data
 249:Core/Src/SEGGER_RTT.c **** *
 250:Core/Src/SEGGER_RTT.c **** **********************************************************************
 251:Core/Src/SEGGER_RTT.c **** */
 252:Core/Src/SEGGER_RTT.c **** 
 253:Core/Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 254:Core/Src/SEGGER_RTT.c **** 
 255:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 256:Core/Src/SEGGER_RTT.c **** *
 257:Core/Src/SEGGER_RTT.c **** *       Static data
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 6


 258:Core/Src/SEGGER_RTT.c **** *
 259:Core/Src/SEGGER_RTT.c **** **********************************************************************
 260:Core/Src/SEGGER_RTT.c **** */
 261:Core/Src/SEGGER_RTT.c **** 
 262:Core/Src/SEGGER_RTT.c **** //
 263:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 264:Core/Src/SEGGER_RTT.c **** //
 265:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 266:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 267:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 268:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 269:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 270:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 271:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 272:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 273:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 274:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 275:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 276:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 277:Core/Src/SEGGER_RTT.c ****   #else
 278:Core/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 279:Core/Src/SEGGER_RTT.c ****   #endif
 280:Core/Src/SEGGER_RTT.c **** #else
 281:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 282:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 283:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 284:Core/Src/SEGGER_RTT.c **** #endif
 285:Core/Src/SEGGER_RTT.c **** 
 286:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 287:Core/Src/SEGGER_RTT.c **** 
 288:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 289:Core/Src/SEGGER_RTT.c **** *
 290:Core/Src/SEGGER_RTT.c **** *       Static functions
 291:Core/Src/SEGGER_RTT.c **** *
 292:Core/Src/SEGGER_RTT.c **** **********************************************************************
 293:Core/Src/SEGGER_RTT.c **** */
 294:Core/Src/SEGGER_RTT.c **** 
 295:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 296:Core/Src/SEGGER_RTT.c **** *
 297:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 298:Core/Src/SEGGER_RTT.c **** *
 299:Core/Src/SEGGER_RTT.c **** *  Function description
 300:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 301:Core/Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 302:Core/Src/SEGGER_RTT.c **** *
 303:Core/Src/SEGGER_RTT.c **** */
 304:Core/Src/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 305:Core/Src/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 306:Core/Src/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 307:Core/Src/SEGGER_RTT.c ****                   do {                                                                             
 308:Core/Src/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 309:Core/Src/SEGGER_RTT.c ****                       _DoInit();                                                                   
 310:Core/Src/SEGGER_RTT.c ****                     }                                                                              
 311:Core/Src/SEGGER_RTT.c ****                   } while (0);                                                                     
 312:Core/Src/SEGGER_RTT.c ****                 }
 313:Core/Src/SEGGER_RTT.c **** 
 314:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 7


 315:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 316:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:Core/Src/SEGGER_RTT.c ****   unsigned i;
 318:Core/Src/SEGGER_RTT.c ****   //
 319:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 320:Core/Src/SEGGER_RTT.c ****   //
 321:Core/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 322:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 324:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 325:Core/Src/SEGGER_RTT.c ****   //
 326:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:Core/Src/SEGGER_RTT.c ****   //
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 333:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 334:Core/Src/SEGGER_RTT.c ****   //
 335:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 336:Core/Src/SEGGER_RTT.c ****   //
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 342:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 343:Core/Src/SEGGER_RTT.c ****   //
 344:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:Core/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:Core/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:Core/Src/SEGGER_RTT.c ****   //
 348:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 350:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 351:Core/Src/SEGGER_RTT.c ****   }
 352:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 353:Core/Src/SEGGER_RTT.c **** }
 354:Core/Src/SEGGER_RTT.c **** 
 355:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 356:Core/Src/SEGGER_RTT.c **** *
 357:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:Core/Src/SEGGER_RTT.c **** *
 359:Core/Src/SEGGER_RTT.c **** *  Function description
 360:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:Core/Src/SEGGER_RTT.c **** *    read by the host.
 363:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:Core/Src/SEGGER_RTT.c **** *
 366:Core/Src/SEGGER_RTT.c **** *  Parameters
 367:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:Core/Src/SEGGER_RTT.c **** *
 371:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 8


 372:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 373:Core/Src/SEGGER_RTT.c **** */
 374:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 378:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 379:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 380:Core/Src/SEGGER_RTT.c ****   //
 381:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:Core/Src/SEGGER_RTT.c ****   //
 383:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 384:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 385:Core/Src/SEGGER_RTT.c ****   do {
 386:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 387:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 388:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 389:Core/Src/SEGGER_RTT.c ****     } else {
 390:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 391:Core/Src/SEGGER_RTT.c ****     }
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 393:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 394:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 395:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:Core/Src/SEGGER_RTT.c ****     };
 402:Core/Src/SEGGER_RTT.c **** #else
 403:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 404:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 405:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 406:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 407:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 408:Core/Src/SEGGER_RTT.c **** #endif
 409:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 410:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 411:Core/Src/SEGGER_RTT.c ****     }
 412:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 413:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 414:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 415:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 416:Core/Src/SEGGER_RTT.c **** }
 417:Core/Src/SEGGER_RTT.c **** 
 418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 419:Core/Src/SEGGER_RTT.c **** *
 420:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:Core/Src/SEGGER_RTT.c **** *
 422:Core/Src/SEGGER_RTT.c **** *  Function description
 423:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:Core/Src/SEGGER_RTT.c **** *    read by the host.
 426:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 427:Core/Src/SEGGER_RTT.c **** *
 428:Core/Src/SEGGER_RTT.c **** *  Parameters
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 9


 429:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 430:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:Core/Src/SEGGER_RTT.c **** *
 433:Core/Src/SEGGER_RTT.c **** *  Notes
 434:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:Core/Src/SEGGER_RTT.c **** */
 436:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
  30              		.loc 1 436 94 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 437:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  34              		.loc 1 437 3 view .LVU1
 438:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 438 3 view .LVU2
 439:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
  36              		.loc 1 439 3 view .LVU3
 440:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
  37              		.loc 1 440 3 view .LVU4
 441:Core/Src/SEGGER_RTT.c **** 
 442:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  38              		.loc 1 442 3 view .LVU5
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  39              		.loc 1 436 94 is_stmt 0 view .LVU6
  40 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  41              		.cfi_def_cfa_offset 32
  42              		.cfi_offset 3, -32
  43              		.cfi_offset 4, -28
  44              		.cfi_offset 5, -24
  45              		.cfi_offset 6, -20
  46              		.cfi_offset 7, -16
  47              		.cfi_offset 8, -12
  48              		.cfi_offset 9, -8
  49              		.cfi_offset 14, -4
  50              		.loc 1 442 9 view .LVU7
  51 0004 C568     		ldr	r5, [r0, #12]
  52              	.LVL1:
 443:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
  53              		.loc 1 443 3 is_stmt 1 view .LVU8
  54              		.loc 1 443 14 is_stmt 0 view .LVU9
  55 0006 D0F80890 		ldr	r9, [r0, #8]
  56              		.loc 1 443 7 view .LVU10
  57 000a A9EB0508 		sub	r8, r9, r5
  58              	.LVL2:
 444:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
  59              		.loc 1 444 3 is_stmt 1 view .LVU11
  60              		.loc 1 444 6 is_stmt 0 view .LVU12
  61 000e 9045     		cmp	r8, r2
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  62              		.loc 1 436 94 view .LVU13
  63 0010 0446     		mov	r4, r0
  64 0012 1646     		mov	r6, r2
  65              		.loc 1 444 6 view .LVU14
  66 0014 09D9     		bls	.L2
 445:Core/Src/SEGGER_RTT.c ****     //
 446:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 10


 447:Core/Src/SEGGER_RTT.c ****     //
 448:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
  67              		.loc 1 448 5 is_stmt 1 view .LVU15
  68              	.LVL3:
 449:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 450:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:Core/Src/SEGGER_RTT.c ****     };
 454:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:Core/Src/SEGGER_RTT.c **** #else
 457:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
  69              		.loc 1 457 5 view .LVU16
 448:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  70              		.loc 1 448 10 is_stmt 0 view .LVU17
  71 0016 4068     		ldr	r0, [r0, #4]
  72              	.LVL4:
  73              		.loc 1 457 5 view .LVU18
  74 0018 2844     		add	r0, r0, r5
  75              	.LVL5:
  76              		.loc 1 457 5 view .LVU19
  77 001a FFF7FEFF 		bl	memcpy
  78              	.LVL6:
 458:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
  79              		.loc 1 458 5 is_stmt 1 view .LVU20
  80              		.syntax unified
  81              	@ 458 "Core/Src/SEGGER_RTT.c" 1
  82 001e BFF35F8F 		dmb
  83              	
  84              	@ 0 "" 2
  85              		.loc 1 458 15 view .LVU21
 459:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
  86              		.loc 1 459 5 view .LVU22
  87              		.loc 1 459 26 is_stmt 0 view .LVU23
  88              		.thumb
  89              		.syntax unified
  90 0022 3544     		add	r5, r5, r6
  91              	.LVL7:
  92              		.loc 1 459 18 view .LVU24
  93 0024 E560     		str	r5, [r4, #12]
 460:Core/Src/SEGGER_RTT.c **** #endif
 461:Core/Src/SEGGER_RTT.c ****   } else {
 462:Core/Src/SEGGER_RTT.c ****     //
 463:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:Core/Src/SEGGER_RTT.c ****     //
 465:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:Core/Src/SEGGER_RTT.c ****     };
 471:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:Core/Src/SEGGER_RTT.c ****     };
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 11


 476:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:Core/Src/SEGGER_RTT.c **** #else
 479:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 480:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 482:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 483:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 484:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 485:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 486:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 487:Core/Src/SEGGER_RTT.c **** #endif
 488:Core/Src/SEGGER_RTT.c ****   }
 489:Core/Src/SEGGER_RTT.c **** }
  94              		.loc 1 489 1 view .LVU25
  95 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
  96              	.LVL8:
  97              	.L2:
 479:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
  98              		.loc 1 479 5 is_stmt 1 view .LVU26
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
  99              		.loc 1 480 5 view .LVU27
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 100              		.loc 1 481 5 view .LVU28
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 101              		.loc 1 480 10 is_stmt 0 view .LVU29
 102 002a 4068     		ldr	r0, [r0, #4]
 103              	.LVL9:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 104              		.loc 1 481 5 view .LVU30
 105 002c 4246     		mov	r2, r8
 106              	.LVL10:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 107              		.loc 1 481 5 view .LVU31
 108 002e 2844     		add	r0, r0, r5
 109              	.LVL11:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 110              		.loc 1 481 5 view .LVU32
 111 0030 0F46     		mov	r7, r1
 112 0032 FFF7FEFF 		bl	memcpy
 113              	.LVL12:
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 114              		.loc 1 482 5 is_stmt 1 view .LVU33
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 115              		.loc 1 482 20 is_stmt 0 view .LVU34
 116 0036 AA19     		adds	r2, r5, r6
 117 0038 A2EB0905 		sub	r5, r2, r9
 118              	.LVL13:
 483:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 119              		.loc 1 483 5 is_stmt 1 view .LVU35
 484:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 120              		.loc 1 484 5 view .LVU36
 121 003c 6068     		ldr	r0, [r4, #4]
 122 003e 2A46     		mov	r2, r5
 123 0040 07EB0801 		add	r1, r7, r8
 124 0044 FFF7FEFF 		bl	memcpy
 125              	.LVL14:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 12


 485:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 126              		.loc 1 485 5 view .LVU37
 127              		.syntax unified
 128              	@ 485 "Core/Src/SEGGER_RTT.c" 1
 129 0048 BFF35F8F 		dmb
 130              	
 131              	@ 0 "" 2
 485:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 132              		.loc 1 485 15 view .LVU38
 486:Core/Src/SEGGER_RTT.c **** #endif
 133              		.loc 1 486 5 view .LVU39
 459:Core/Src/SEGGER_RTT.c **** #endif
 134              		.loc 1 459 18 is_stmt 0 view .LVU40
 135              		.thumb
 136              		.syntax unified
 137 004c E560     		str	r5, [r4, #12]
 138              		.loc 1 489 1 view .LVU41
 139 004e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 140              		.loc 1 489 1 view .LVU42
 141              		.cfi_endproc
 142              	.LFE2:
 144 0052 00BF     		.section	.text._WriteBlocking,"ax",%progbits
 145              		.align	1
 146              		.p2align 2,,3
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 151              	_WriteBlocking:
 152              	.LVL15:
 153              	.LFB1:
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 154              		.loc 1 374 101 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 158              		.loc 1 375 3 view .LVU44
 376:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 159              		.loc 1 376 3 view .LVU45
 377:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 160              		.loc 1 377 3 view .LVU46
 378:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 161              		.loc 1 378 3 view .LVU47
 379:Core/Src/SEGGER_RTT.c ****   //
 162              		.loc 1 379 3 view .LVU48
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 163              		.loc 1 383 3 view .LVU49
 384:Core/Src/SEGGER_RTT.c ****   do {
 164              		.loc 1 384 3 view .LVU50
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 165              		.loc 1 374 101 is_stmt 0 view .LVU51
 166 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 167              		.cfi_def_cfa_offset 32
 168              		.cfi_offset 3, -32
 169              		.cfi_offset 4, -28
 170              		.cfi_offset 5, -24
 171              		.cfi_offset 6, -20
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 13


 172              		.cfi_offset 7, -16
 173              		.cfi_offset 8, -12
 174              		.cfi_offset 9, -8
 175              		.cfi_offset 14, -4
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 176              		.loc 1 374 101 view .LVU52
 177 0004 0646     		mov	r6, r0
 390:Core/Src/SEGGER_RTT.c ****     }
 178              		.loc 1 390 30 view .LVU53
 179 0006 D0E90204 		ldrd	r0, r4, [r0, #8]
 180              	.LVL16:
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 181              		.loc 1 374 101 view .LVU54
 182 000a 8946     		mov	r9, r1
 183 000c 1746     		mov	r7, r2
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 184              		.loc 1 383 19 view .LVU55
 185 000e 4FF00008 		mov	r8, #0
 186              	.LVL17:
 187              	.L10:
 385:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 188              		.loc 1 385 3 is_stmt 1 view .LVU56
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 189              		.loc 1 386 5 view .LVU57
 388:Core/Src/SEGGER_RTT.c ****     } else {
 190              		.loc 1 388 7 view .LVU58
 390:Core/Src/SEGGER_RTT.c ****     }
 191              		.loc 1 390 7 view .LVU59
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 192              		.loc 1 386 11 is_stmt 0 view .LVU60
 193 0012 3369     		ldr	r3, [r6, #16]
 194              	.LVL18:
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 195              		.loc 1 387 5 is_stmt 1 view .LVU61
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 196              		.loc 1 387 8 is_stmt 0 view .LVU62
 197 0014 9C42     		cmp	r4, r3
 388:Core/Src/SEGGER_RTT.c ****     } else {
 198              		.loc 1 388 23 view .LVU63
 199 0016 03F1FF32 		add	r2, r3, #-1
 390:Core/Src/SEGGER_RTT.c ****     }
 200              		.loc 1 390 23 view .LVU64
 201 001a 28BF     		it	cs
 202 001c 03F1FF33 		addcs	r3, r3, #-1
 203              	.LVL19:
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 204              		.loc 1 392 23 view .LVU65
 205 0020 A0EB0405 		sub	r5, r0, r4
 390:Core/Src/SEGGER_RTT.c ****     }
 206              		.loc 1 390 23 view .LVU66
 207 0024 2ABF     		itet	cs
 208 0026 1B18     		addcs	r3, r3, r0
 388:Core/Src/SEGGER_RTT.c ****     } else {
 209              		.loc 1 388 23 view .LVU67
 210 0028 131B     		subcc	r3, r2, r4
 390:Core/Src/SEGGER_RTT.c ****     }
 211              		.loc 1 390 23 view .LVU68
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 14


 212 002a 1B1B     		subcs	r3, r3, r4
 213              	.LVL20:
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 214              		.loc 1 392 5 is_stmt 1 view .LVU69
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 215              		.loc 1 393 5 view .LVU70
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 216              		.loc 1 393 21 is_stmt 0 view .LVU71
 217 002c BD42     		cmp	r5, r7
 218 002e 28BF     		it	cs
 219 0030 3D46     		movcs	r5, r7
 220              	.LVL21:
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 221              		.loc 1 393 21 view .LVU72
 222 0032 9D42     		cmp	r5, r3
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 223              		.loc 1 394 10 view .LVU73
 224 0034 7068     		ldr	r0, [r6, #4]
 225              	.LVL22:
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 226              		.loc 1 393 21 view .LVU74
 227 0036 28BF     		it	cs
 228 0038 1D46     		movcs	r5, r3
 229              	.LVL23:
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 230              		.loc 1 394 5 is_stmt 1 view .LVU75
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 231              		.loc 1 403 5 view .LVU76
 232 003a 4946     		mov	r1, r9
 233 003c 2044     		add	r0, r0, r4
 234              	.LVL24:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 235              		.loc 1 403 5 is_stmt 0 view .LVU77
 236 003e 2A46     		mov	r2, r5
 237              	.LVL25:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 238              		.loc 1 403 5 view .LVU78
 239 0040 FFF7FEFF 		bl	memcpy
 240              	.LVL26:
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 241              		.loc 1 404 5 is_stmt 1 view .LVU79
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 242              		.loc 1 409 23 is_stmt 0 view .LVU80
 243 0044 B068     		ldr	r0, [r6, #8]
 407:Core/Src/SEGGER_RTT.c **** #endif
 244              		.loc 1 407 21 view .LVU81
 245 0046 2C44     		add	r4, r4, r5
 246              	.LVL27:
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 247              		.loc 1 404 21 view .LVU82
 248 0048 A844     		add	r8, r8, r5
 249              	.LVL28:
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 250              		.loc 1 405 5 is_stmt 1 view .LVU83
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 251              		.loc 1 405 21 is_stmt 0 view .LVU84
 252 004a A944     		add	r9, r9, r5
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 15


 253              	.LVL29:
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 254              		.loc 1 406 5 is_stmt 1 view .LVU85
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 255              		.loc 1 406 21 is_stmt 0 view .LVU86
 256 004c 7F1B     		subs	r7, r7, r5
 257              	.LVL30:
 407:Core/Src/SEGGER_RTT.c **** #endif
 258              		.loc 1 407 5 is_stmt 1 view .LVU87
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 259              		.loc 1 409 5 view .LVU88
 410:Core/Src/SEGGER_RTT.c ****     }
 260              		.loc 1 410 13 is_stmt 0 view .LVU89
 261 004e A042     		cmp	r0, r4
 262 0050 08BF     		it	eq
 263 0052 0024     		moveq	r4, #0
 264              	.LVL31:
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 265              		.loc 1 412 5 is_stmt 1 view .LVU90
 266              		.syntax unified
 267              	@ 412 "Core/Src/SEGGER_RTT.c" 1
 268 0054 BFF35F8F 		dmb
 269              	
 270              	@ 0 "" 2
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 271              		.loc 1 412 15 view .LVU91
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 272              		.loc 1 413 5 view .LVU92
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 273              		.loc 1 413 18 is_stmt 0 view .LVU93
 274              		.thumb
 275              		.syntax unified
 276 0058 F460     		str	r4, [r6, #12]
 414:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 277              		.loc 1 414 12 is_stmt 1 view .LVU94
 278 005a 002F     		cmp	r7, #0
 279 005c D9D1     		bne	.L10
 415:Core/Src/SEGGER_RTT.c **** }
 280              		.loc 1 415 3 view .LVU95
 416:Core/Src/SEGGER_RTT.c **** 
 281              		.loc 1 416 1 is_stmt 0 view .LVU96
 282 005e 4046     		mov	r0, r8
 283 0060 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 416:Core/Src/SEGGER_RTT.c **** 
 284              		.loc 1 416 1 view .LVU97
 285              		.cfi_endproc
 286              	.LFE1:
 288              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 289              		.align	2
 290              	.LC0:
 291 0000 5465726D 		.ascii	"Terminal\000"
 291      696E616C 
 291      00
 292              		.section	.text._DoInit,"ax",%progbits
 293              		.align	1
 294              		.p2align 2,,3
 295              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 16


 296              		.thumb
 297              		.thumb_func
 299              	_DoInit:
 300              	.LFB0:
 314:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 301              		.loc 1 314 27 is_stmt 1 view -0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 315:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 305              		.loc 1 315 3 view .LVU99
 316:Core/Src/SEGGER_RTT.c ****   unsigned i;
 306              		.loc 1 316 3 view .LVU100
 317:Core/Src/SEGGER_RTT.c ****   //
 307              		.loc 1 317 3 view .LVU101
 321:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 308              		.loc 1 321 3 view .LVU102
 309              	.LVL32:
 322:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 310              		.loc 1 322 3 view .LVU103
 314:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 311              		.loc 1 314 27 is_stmt 0 view .LVU104
 312 0000 10B5     		push	{r4, lr}
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 4, -8
 315              		.cfi_offset 14, -4
 322:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 316              		.loc 1 322 3 view .LVU105
 317 0002 164C     		ldr	r4, .L19
 318 0004 A822     		movs	r2, #168
 319 0006 0021     		movs	r1, #0
 320 0008 2046     		mov	r0, r4
 321 000a FFF7FEFF 		bl	memset
 322              	.LVL33:
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 323              		.loc 1 323 3 is_stmt 1 view .LVU106
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 324              		.loc 1 323 25 is_stmt 0 view .LVU107
 325 000e 0321     		movs	r1, #3
 326 0010 2161     		str	r1, [r4, #16]
 324:Core/Src/SEGGER_RTT.c ****   //
 327              		.loc 1 324 3 is_stmt 1 view .LVU108
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 328              		.loc 1 328 27 is_stmt 0 view .LVU109
 329 0012 134A     		ldr	r2, .L19+4
 324:Core/Src/SEGGER_RTT.c ****   //
 330              		.loc 1 324 25 view .LVU110
 331 0014 6161     		str	r1, [r4, #20]
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 332              		.loc 1 328 3 is_stmt 1 view .LVU111
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 333              		.loc 1 329 27 is_stmt 0 view .LVU112
 334 0016 1348     		ldr	r0, .L19+8
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 335              		.loc 1 328 27 view .LVU113
 336 0018 A261     		str	r2, [r4, #24]
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 17


 337              		.loc 1 329 3 is_stmt 1 view .LVU114
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 338              		.loc 1 330 27 is_stmt 0 view .LVU115
 339 001a 4FF48061 		mov	r1, #1024
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 340              		.loc 1 329 27 view .LVU116
 341 001e E061     		str	r0, [r4, #28]
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 342              		.loc 1 330 3 is_stmt 1 view .LVU117
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 343              		.loc 1 331 27 is_stmt 0 view .LVU118
 344 0020 0023     		movs	r3, #0
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 345              		.loc 1 330 27 view .LVU119
 346 0022 2162     		str	r1, [r4, #32]
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 347              		.loc 1 331 3 is_stmt 1 view .LVU120
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 348              		.loc 1 338 29 is_stmt 0 view .LVU121
 349 0024 1048     		ldr	r0, .L19+12
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 350              		.loc 1 331 27 view .LVU122
 351 0026 A362     		str	r3, [r4, #40]
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 352              		.loc 1 332 3 is_stmt 1 view .LVU123
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 353              		.loc 1 339 29 is_stmt 0 view .LVU124
 354 0028 1021     		movs	r1, #16
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 355              		.loc 1 332 27 view .LVU125
 356 002a 6362     		str	r3, [r4, #36]
 333:Core/Src/SEGGER_RTT.c ****   //
 357              		.loc 1 333 3 is_stmt 1 view .LVU126
 333:Core/Src/SEGGER_RTT.c ****   //
 358              		.loc 1 333 27 is_stmt 0 view .LVU127
 359 002c E362     		str	r3, [r4, #44]
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 360              		.loc 1 337 3 is_stmt 1 view .LVU128
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 361              		.loc 1 337 29 is_stmt 0 view .LVU129
 362 002e 2266     		str	r2, [r4, #96]
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 363              		.loc 1 338 3 is_stmt 1 view .LVU130
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 364              		.loc 1 338 29 is_stmt 0 view .LVU131
 365 0030 6066     		str	r0, [r4, #100]
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 366              		.loc 1 339 3 is_stmt 1 view .LVU132
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 367              		.loc 1 339 29 is_stmt 0 view .LVU133
 368 0032 A166     		str	r1, [r4, #104]
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 369              		.loc 1 340 3 is_stmt 1 view .LVU134
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 370              		.loc 1 340 29 is_stmt 0 view .LVU135
 371 0034 2367     		str	r3, [r4, #112]
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 18


 372              		.loc 1 341 3 is_stmt 1 view .LVU136
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 373              		.loc 1 341 29 is_stmt 0 view .LVU137
 374 0036 E366     		str	r3, [r4, #108]
 342:Core/Src/SEGGER_RTT.c ****   //
 375              		.loc 1 342 3 is_stmt 1 view .LVU138
 342:Core/Src/SEGGER_RTT.c ****   //
 376              		.loc 1 342 29 is_stmt 0 view .LVU139
 377 0038 6367     		str	r3, [r4, #116]
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 378              		.loc 1 348 3 is_stmt 1 view .LVU140
 379              		.syntax unified
 380              	@ 348 "Core/Src/SEGGER_RTT.c" 1
 381 003a BFF35F8F 		dmb
 382              	
 383              	@ 0 "" 2
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 384              		.loc 1 348 13 view .LVU141
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 385              		.loc 1 349 3 view .LVU142
 386              	.LVL34:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 387              		.loc 1 349 17 view .LVU143
 388              		.thumb
 389              		.syntax unified
 390 003e 0B4B     		ldr	r3, .L19+16
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 391              		.loc 1 348 3 is_stmt 0 view .LVU144
 392 0040 5321     		movs	r1, #83
 393 0042 A3F10F0C 		sub	ip, r3, #15
 394 0046 1846     		mov	r0, r3
 395 0048 01E0     		b	.L15
 396              	.LVL35:
 397              	.L18:
 350:Core/Src/SEGGER_RTT.c ****   }
 398              		.loc 1 350 27 view .LVU145
 399 004a 13F80119 		ldrb	r1, [r3], #-1	@ zero_extendqisi2
 400              	.LVL36:
 401              	.L15:
 350:Core/Src/SEGGER_RTT.c ****   }
 402              		.loc 1 350 27 view .LVU146
 403 004e C21A     		subs	r2, r0, r3
 404              	.LVL37:
 350:Core/Src/SEGGER_RTT.c ****   }
 405              		.loc 1 350 5 is_stmt 1 discriminator 3 view .LVU147
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 406              		.loc 1 349 17 is_stmt 0 discriminator 3 view .LVU148
 407 0050 6345     		cmp	r3, ip
 350:Core/Src/SEGGER_RTT.c ****   }
 408              		.loc 1 350 16 discriminator 3 view .LVU149
 409 0052 A154     		strb	r1, [r4, r2]
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 410              		.loc 1 349 42 is_stmt 1 discriminator 3 view .LVU150
 411              	.LVL38:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 412              		.loc 1 349 17 discriminator 3 view .LVU151
 413 0054 F9D1     		bne	.L18
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 19


 352:Core/Src/SEGGER_RTT.c **** }
 414              		.loc 1 352 3 view .LVU152
 415              		.syntax unified
 416              	@ 352 "Core/Src/SEGGER_RTT.c" 1
 417 0056 BFF35F8F 		dmb
 418              	
 419              	@ 0 "" 2
 352:Core/Src/SEGGER_RTT.c **** }
 420              		.loc 1 352 13 view .LVU153
 353:Core/Src/SEGGER_RTT.c **** 
 421              		.loc 1 353 1 is_stmt 0 view .LVU154
 422              		.thumb
 423              		.syntax unified
 424 005a 10BD     		pop	{r4, pc}
 425              	.L20:
 426              		.align	2
 427              	.L19:
 428 005c 00000000 		.word	.LANCHOR0
 429 0060 00000000 		.word	.LC0
 430 0064 00000000 		.word	.LANCHOR1
 431 0068 00000000 		.word	.LANCHOR2
 432 006c 0E000000 		.word	.LANCHOR3+14
 433              		.cfi_endproc
 434              	.LFE0:
 436              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 437              		.align	1
 438              		.p2align 2,,3
 439              		.global	SEGGER_RTT_ReadUpBufferNoLock
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 444              	SEGGER_RTT_ReadUpBufferNoLock:
 445              	.LVL39:
 446              	.LFB5:
 490:Core/Src/SEGGER_RTT.c **** 
 491:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 492:Core/Src/SEGGER_RTT.c **** *
 493:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:Core/Src/SEGGER_RTT.c **** *
 495:Core/Src/SEGGER_RTT.c **** *  Function description
 496:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:Core/Src/SEGGER_RTT.c **** *
 500:Core/Src/SEGGER_RTT.c **** *  Parameters
 501:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:Core/Src/SEGGER_RTT.c **** */
 504:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 505:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:Core/Src/SEGGER_RTT.c **** 
 507:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 508:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 509:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 510:Core/Src/SEGGER_RTT.c **** }
 511:Core/Src/SEGGER_RTT.c **** 
 512:Core/Src/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 20


 513:Core/Src/SEGGER_RTT.c **** *
 514:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:Core/Src/SEGGER_RTT.c **** *
 516:Core/Src/SEGGER_RTT.c **** *  Function description
 517:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
 519:Core/Src/SEGGER_RTT.c **** *
 520:Core/Src/SEGGER_RTT.c **** *  Parameters
 521:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:Core/Src/SEGGER_RTT.c **** *
 523:Core/Src/SEGGER_RTT.c **** *  Return value
 524:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:Core/Src/SEGGER_RTT.c **** */
 526:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 527:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 528:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 529:Core/Src/SEGGER_RTT.c ****   unsigned r;
 530:Core/Src/SEGGER_RTT.c ****   //
 531:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:Core/Src/SEGGER_RTT.c ****   //
 534:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 535:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 536:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 537:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 538:Core/Src/SEGGER_RTT.c ****   } else {
 539:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 540:Core/Src/SEGGER_RTT.c ****   }
 541:Core/Src/SEGGER_RTT.c ****   return r;
 542:Core/Src/SEGGER_RTT.c **** }
 543:Core/Src/SEGGER_RTT.c **** 
 544:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 545:Core/Src/SEGGER_RTT.c **** *
 546:Core/Src/SEGGER_RTT.c **** *       Public code
 547:Core/Src/SEGGER_RTT.c **** *
 548:Core/Src/SEGGER_RTT.c **** **********************************************************************
 549:Core/Src/SEGGER_RTT.c **** */
 550:Core/Src/SEGGER_RTT.c **** 
 551:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 552:Core/Src/SEGGER_RTT.c **** *
 553:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:Core/Src/SEGGER_RTT.c **** *
 555:Core/Src/SEGGER_RTT.c **** *  Function description
 556:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 558:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 560:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:Core/Src/SEGGER_RTT.c **** *
 562:Core/Src/SEGGER_RTT.c **** *  Parameters
 563:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 565:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:Core/Src/SEGGER_RTT.c **** *
 567:Core/Src/SEGGER_RTT.c **** *  Return value
 568:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 21


 570:Core/Src/SEGGER_RTT.c **** *  Additional information
 571:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:Core/Src/SEGGER_RTT.c **** */
 573:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 447              		.loc 1 573 96 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		.loc 1 573 96 is_stmt 0 view .LVU156
 452 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 453              		.cfi_def_cfa_offset 36
 454              		.cfi_offset 4, -36
 455              		.cfi_offset 5, -32
 456              		.cfi_offset 6, -28
 457              		.cfi_offset 7, -24
 458              		.cfi_offset 8, -20
 459              		.cfi_offset 9, -16
 460              		.cfi_offset 10, -12
 461              		.cfi_offset 11, -8
 462              		.cfi_offset 14, -4
 463              	.LBB20:
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 575:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 576:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 577:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 578:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 579:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 580:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 581:Core/Src/SEGGER_RTT.c **** 
 582:Core/Src/SEGGER_RTT.c ****   INIT();
 464              		.loc 1 582 3 view .LVU157
 465 0004 DFF8BC90 		ldr	r9, .L39
 466 0008 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 467              	.LBE20:
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 468              		.loc 1 573 96 view .LVU158
 469 000c 83B0     		sub	sp, sp, #12
 470              		.cfi_def_cfa_offset 48
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 471              		.loc 1 573 96 view .LVU159
 472 000e 0446     		mov	r4, r0
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 473              		.loc 1 574 3 is_stmt 1 view .LVU160
 575:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 474              		.loc 1 575 3 view .LVU161
 576:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 475              		.loc 1 576 3 view .LVU162
 577:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 476              		.loc 1 577 3 view .LVU163
 578:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 477              		.loc 1 578 3 view .LVU164
 579:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 478              		.loc 1 579 3 view .LVU165
 580:Core/Src/SEGGER_RTT.c **** 
 479              		.loc 1 580 3 view .LVU166
 480              	.LBB21:
 481              		.loc 1 582 3 view .LVU167
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 22


 482              		.loc 1 582 3 view .LVU168
 483              	.LVL40:
 484              		.loc 1 582 3 view .LVU169
 485              		.loc 1 582 3 view .LVU170
 486              	.LBE21:
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 487              		.loc 1 573 96 is_stmt 0 view .LVU171
 488 0010 8A46     		mov	r10, r1
 489 0012 1646     		mov	r6, r2
 490              	.LBB22:
 491              		.loc 1 582 3 view .LVU172
 492 0014 002B     		cmp	r3, #0
 493 0016 52D0     		beq	.L37
 494              	.LVL41:
 495              	.L22:
 496              		.loc 1 582 3 is_stmt 1 discriminator 3 view .LVU173
 497              	.LBE22:
 498              		.loc 1 582 9 discriminator 3 view .LVU174
 583:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 499              		.loc 1 583 3 discriminator 3 view .LVU175
 584:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 500              		.loc 1 584 3 discriminator 3 view .LVU176
 585:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 501              		.loc 1 585 3 discriminator 3 view .LVU177
 502              		.loc 1 585 9 is_stmt 0 discriminator 3 view .LVU178
 503 0018 04EB4407 		add	r7, r4, r4, lsl #1
 504 001c 09EBC707 		add	r7, r9, r7, lsl #3
 505 0020 4FEA440B 		lsl	fp, r4, #1
 506 0024 BD6A     		ldr	r5, [r7, #40]
 507              	.LVL42:
 586:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 508              		.loc 1 586 3 is_stmt 1 discriminator 3 view .LVU179
 509              		.loc 1 586 9 is_stmt 0 discriminator 3 view .LVU180
 510 0026 D7F82480 		ldr	r8, [r7, #36]
 511              	.LVL43:
 587:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 512              		.loc 1 587 3 is_stmt 1 discriminator 3 view .LVU181
 588:Core/Src/SEGGER_RTT.c ****   //
 589:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:Core/Src/SEGGER_RTT.c ****   //
 591:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 513              		.loc 1 591 3 discriminator 3 view .LVU182
 514              		.loc 1 591 6 is_stmt 0 discriminator 3 view .LVU183
 515 002a 4545     		cmp	r5, r8
 516 002c 22D8     		bhi	.L38
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 593:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 594:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 595:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 599:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:Core/Src/SEGGER_RTT.c ****     };
 602:Core/Src/SEGGER_RTT.c **** #else
 603:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 23


 604:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 605:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 606:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:Core/Src/SEGGER_RTT.c **** #endif
 609:Core/Src/SEGGER_RTT.c ****     //
 610:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:Core/Src/SEGGER_RTT.c ****     //
 612:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 613:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 614:Core/Src/SEGGER_RTT.c ****     }
 615:Core/Src/SEGGER_RTT.c ****   }
 616:Core/Src/SEGGER_RTT.c ****   //
 617:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:Core/Src/SEGGER_RTT.c ****   //
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 517              		.loc 1 619 3 is_stmt 1 view .LVU184
 518              		.loc 1 619 15 is_stmt 0 view .LVU185
 519 002e A8EB0508 		sub	r8, r8, r5
 520              	.LVL44:
 620:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 521              		.loc 1 620 3 is_stmt 1 view .LVU186
 522              		.loc 1 620 15 is_stmt 0 view .LVU187
 523 0032 4645     		cmp	r6, r8
 524 0034 3246     		mov	r2, r6
 525 0036 28BF     		it	cs
 526 0038 4246     		movcs	r2, r8
 527              	.LVL45:
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 528              		.loc 1 621 3 is_stmt 1 view .LVU188
 529              		.loc 1 621 6 is_stmt 0 view .LVU189
 530 003a 1AB9     		cbnz	r2, .L29
 531              	.LVL46:
 532              	.L21:
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 623:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:Core/Src/SEGGER_RTT.c ****     };
 630:Core/Src/SEGGER_RTT.c **** #else
 631:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 632:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 634:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 635:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 636:Core/Src/SEGGER_RTT.c **** #endif
 637:Core/Src/SEGGER_RTT.c ****   }
 638:Core/Src/SEGGER_RTT.c ****   //
 639:Core/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:Core/Src/SEGGER_RTT.c ****   //
 641:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 642:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 643:Core/Src/SEGGER_RTT.c ****   }
 644:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 24


 645:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 646:Core/Src/SEGGER_RTT.c **** }
 533              		.loc 1 646 1 view .LVU190
 534 003c 1046     		mov	r0, r2
 535 003e 03B0     		add	sp, sp, #12
 536              		.cfi_remember_state
 537              		.cfi_def_cfa_offset 36
 538              		@ sp needed
 539 0040 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 540              	.LVL47:
 541              	.L29:
 542              		.cfi_restore_state
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 543              		.loc 1 621 6 view .LVU191
 544 0044 1746     		mov	r7, r2
 545              	.LVL48:
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 546              		.loc 1 621 6 view .LVU192
 547 0046 631C     		adds	r3, r4, #1
 548              	.LVL49:
 549              	.L27:
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 550              		.loc 1 622 5 is_stmt 1 view .LVU193
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 551              		.loc 1 631 5 view .LVU194
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 552              		.loc 1 622 18 is_stmt 0 view .LVU195
 553 0048 03EB4303 		add	r3, r3, r3, lsl #1
 554 004c 09EBC303 		add	r3, r9, r3, lsl #3
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 555              		.loc 1 631 5 view .LVU196
 556 0050 5046     		mov	r0, r10
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 557              		.loc 1 622 10 view .LVU197
 558 0052 5968     		ldr	r1, [r3, #4]
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 559              		.loc 1 631 5 view .LVU198
 560 0054 2944     		add	r1, r1, r5
 635:Core/Src/SEGGER_RTT.c **** #endif
 561              		.loc 1 635 18 view .LVU199
 562 0056 1544     		add	r5, r5, r2
 563              	.LVL50:
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 564              		.loc 1 631 5 view .LVU200
 565 0058 FFF7FEFF 		bl	memcpy
 566              	.LVL51:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 567              		.loc 1 632 5 is_stmt 1 view .LVU201
 633:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 568              		.loc 1 633 5 view .LVU202
 634:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 569              		.loc 1 634 5 view .LVU203
 635:Core/Src/SEGGER_RTT.c **** #endif
 570              		.loc 1 635 5 view .LVU204
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 571              		.loc 1 632 18 is_stmt 0 view .LVU205
 572 005c 3A46     		mov	r2, r7
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 25


 573              	.L25:
 574              	.LVL52:
 641:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 575              		.loc 1 641 3 is_stmt 1 view .LVU206
 641:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 576              		.loc 1 641 6 is_stmt 0 view .LVU207
 577 005e 002A     		cmp	r2, #0
 578 0060 ECD0     		beq	.L21
 642:Core/Src/SEGGER_RTT.c ****   }
 579              		.loc 1 642 5 is_stmt 1 view .LVU208
 642:Core/Src/SEGGER_RTT.c ****   }
 580              		.loc 1 642 18 is_stmt 0 view .LVU209
 581 0062 A344     		add	fp, fp, r4
 582 0064 09EBCB0B 		add	fp, r9, fp, lsl #3
 583              		.loc 1 646 1 view .LVU210
 584 0068 1046     		mov	r0, r2
 642:Core/Src/SEGGER_RTT.c ****   }
 585              		.loc 1 642 18 view .LVU211
 586 006a CBF82850 		str	r5, [fp, #40]
 587              	.LVL53:
 645:Core/Src/SEGGER_RTT.c **** }
 588              		.loc 1 645 3 is_stmt 1 view .LVU212
 589              		.loc 1 646 1 is_stmt 0 view .LVU213
 590 006e 03B0     		add	sp, sp, #12
 591              		.cfi_remember_state
 592              		.cfi_def_cfa_offset 36
 593              		@ sp needed
 594 0070 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 595              	.LVL54:
 596              	.L38:
 597              		.cfi_restore_state
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 598              		.loc 1 592 5 is_stmt 1 view .LVU214
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 599              		.loc 1 594 18 is_stmt 0 view .LVU215
 600 0074 631C     		adds	r3, r4, #1
 601 0076 03EB4302 		add	r2, r3, r3, lsl #1
 602 007a 09EBC202 		add	r2, r9, r2, lsl #3
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 603              		.loc 1 603 5 view .LVU216
 604 007e 5046     		mov	r0, r10
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 605              		.loc 1 594 10 view .LVU217
 606 0080 5168     		ldr	r1, [r2, #4]
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 607              		.loc 1 592 17 view .LVU218
 608 0082 3A6A     		ldr	r2, [r7, #32]
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 609              		.loc 1 594 18 view .LVU219
 610 0084 0193     		str	r3, [sp, #4]
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 611              		.loc 1 592 17 view .LVU220
 612 0086 521B     		subs	r2, r2, r5
 613              	.LVL55:
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 614              		.loc 1 593 5 is_stmt 1 view .LVU221
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 26


 615              		.loc 1 593 17 is_stmt 0 view .LVU222
 616 0088 B242     		cmp	r2, r6
 617 008a 28BF     		it	cs
 618 008c 3246     		movcs	r2, r6
 619              	.LVL56:
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 620              		.loc 1 594 5 is_stmt 1 view .LVU223
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 621              		.loc 1 603 5 view .LVU224
 622 008e 2944     		add	r1, r1, r5
 623 0090 0092     		str	r2, [sp]
 607:Core/Src/SEGGER_RTT.c **** #endif
 624              		.loc 1 607 18 is_stmt 0 view .LVU225
 625 0092 1544     		add	r5, r5, r2
 626              	.LVL57:
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 627              		.loc 1 603 5 view .LVU226
 628 0094 FFF7FEFF 		bl	memcpy
 629              	.LVL58:
 604:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 630              		.loc 1 604 5 is_stmt 1 view .LVU227
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 631              		.loc 1 605 5 view .LVU228
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 632              		.loc 1 606 5 view .LVU229
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 633              		.loc 1 612 8 is_stmt 0 view .LVU230
 634 0098 396A     		ldr	r1, [r7, #32]
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 635              		.loc 1 606 18 view .LVU231
 636 009a 009A     		ldr	r2, [sp]
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 637              		.loc 1 612 8 view .LVU232
 638 009c 019B     		ldr	r3, [sp, #4]
 639 009e A942     		cmp	r1, r5
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 640              		.loc 1 606 18 view .LVU233
 641 00a0 A6EB0206 		sub	r6, r6, r2
 642              	.LVL59:
 607:Core/Src/SEGGER_RTT.c **** #endif
 643              		.loc 1 607 5 is_stmt 1 view .LVU234
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 644              		.loc 1 612 5 view .LVU235
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 645              		.loc 1 619 15 is_stmt 0 view .LVU236
 646 00a4 14BF     		ite	ne
 647 00a6 A8EB0508 		subne	r8, r8, r5
 648              	.LVL60:
 613:Core/Src/SEGGER_RTT.c ****     }
 649              		.loc 1 613 13 view .LVU237
 650 00aa 0025     		moveq	r5, #0
 651              	.LVL61:
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 652              		.loc 1 619 3 is_stmt 1 view .LVU238
 620:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 653              		.loc 1 620 3 view .LVU239
 620:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 27


 654              		.loc 1 620 15 is_stmt 0 view .LVU240
 655 00ac 4645     		cmp	r6, r8
 656 00ae 28BF     		it	cs
 657 00b0 4646     		movcs	r6, r8
 658              	.LVL62:
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 659              		.loc 1 621 3 is_stmt 1 view .LVU241
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 660              		.loc 1 621 6 is_stmt 0 view .LVU242
 661 00b2 002E     		cmp	r6, #0
 662 00b4 D3D0     		beq	.L25
 663              	.LVL63:
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 664              		.loc 1 605 18 view .LVU243
 665 00b6 9244     		add	r10, r10, r2
 666              	.LVL64:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 667              		.loc 1 632 18 view .LVU244
 668 00b8 9719     		adds	r7, r2, r6
 669 00ba 3246     		mov	r2, r6
 670 00bc C4E7     		b	.L27
 671              	.LVL65:
 672              	.L37:
 673              	.LBB23:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 674              		.loc 1 582 3 is_stmt 1 discriminator 1 view .LVU245
 675 00be FFF7FEFF 		bl	_DoInit
 676              	.LVL66:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 677              		.loc 1 582 3 is_stmt 0 discriminator 1 view .LVU246
 678 00c2 A9E7     		b	.L22
 679              	.L40:
 680              		.align	2
 681              	.L39:
 682 00c4 00000000 		.word	.LANCHOR0
 683              	.LBE23:
 684              		.cfi_endproc
 685              	.LFE5:
 687              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 688              		.align	1
 689              		.p2align 2,,3
 690              		.global	SEGGER_RTT_ReadNoLock
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 695              	SEGGER_RTT_ReadNoLock:
 696              	.LVL67:
 697              	.LFB6:
 647:Core/Src/SEGGER_RTT.c **** 
 648:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 649:Core/Src/SEGGER_RTT.c **** *
 650:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:Core/Src/SEGGER_RTT.c **** *
 652:Core/Src/SEGGER_RTT.c **** *  Function description
 653:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 28


 656:Core/Src/SEGGER_RTT.c **** *
 657:Core/Src/SEGGER_RTT.c **** *  Parameters
 658:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 659:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:Core/Src/SEGGER_RTT.c **** *
 662:Core/Src/SEGGER_RTT.c **** *  Return value
 663:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:Core/Src/SEGGER_RTT.c **** */
 665:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 698              		.loc 1 665 88 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 8
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		.loc 1 665 88 is_stmt 0 view .LVU248
 703 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 704              		.cfi_def_cfa_offset 36
 705              		.cfi_offset 4, -36
 706              		.cfi_offset 5, -32
 707              		.cfi_offset 6, -28
 708              		.cfi_offset 7, -24
 709              		.cfi_offset 8, -20
 710              		.cfi_offset 9, -16
 711              		.cfi_offset 10, -12
 712              		.cfi_offset 11, -8
 713              		.cfi_offset 14, -4
 714              	.LBB24:
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 667:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 668:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 669:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 670:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 671:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 672:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 673:Core/Src/SEGGER_RTT.c ****   //
 674:Core/Src/SEGGER_RTT.c ****   INIT();
 715              		.loc 1 674 3 view .LVU249
 716 0004 DFF8ACA0 		ldr	r10, .L59
 717 0008 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 718              	.LBE24:
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 719              		.loc 1 665 88 view .LVU250
 720 000c 83B0     		sub	sp, sp, #12
 721              		.cfi_def_cfa_offset 48
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 722              		.loc 1 665 88 view .LVU251
 723 000e 0546     		mov	r5, r0
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 724              		.loc 1 666 3 is_stmt 1 view .LVU252
 667:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 725              		.loc 1 667 3 view .LVU253
 668:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 726              		.loc 1 668 3 view .LVU254
 669:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 727              		.loc 1 669 3 view .LVU255
 670:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 728              		.loc 1 670 3 view .LVU256
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 29


 671:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 729              		.loc 1 671 3 view .LVU257
 672:Core/Src/SEGGER_RTT.c ****   //
 730              		.loc 1 672 3 view .LVU258
 731              	.LBB25:
 732              		.loc 1 674 3 view .LVU259
 733              		.loc 1 674 3 view .LVU260
 734              	.LVL68:
 735              		.loc 1 674 3 view .LVU261
 736              		.loc 1 674 3 view .LVU262
 737              	.LBE25:
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 738              		.loc 1 665 88 is_stmt 0 view .LVU263
 739 0010 8946     		mov	r9, r1
 740 0012 9046     		mov	r8, r2
 741              	.LBB26:
 742              		.loc 1 674 3 view .LVU264
 743 0014 002B     		cmp	r3, #0
 744 0016 49D0     		beq	.L57
 745              	.LVL69:
 746              	.L42:
 747              		.loc 1 674 3 is_stmt 1 discriminator 3 view .LVU265
 748              	.LBE26:
 749              		.loc 1 674 9 discriminator 3 view .LVU266
 675:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 750              		.loc 1 675 3 discriminator 3 view .LVU267
 676:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 751              		.loc 1 676 3 discriminator 3 view .LVU268
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 752              		.loc 1 677 3 discriminator 3 view .LVU269
 753              		.loc 1 677 9 is_stmt 0 discriminator 3 view .LVU270
 754 0018 05EB4507 		add	r7, r5, r5, lsl #1
 755 001c 0AEBC707 		add	r7, r10, r7, lsl #3
 756 0020 4FEA450B 		lsl	fp, r5, #1
 678:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 757              		.loc 1 678 9 discriminator 3 view .LVU271
 758 0024 FB6E     		ldr	r3, [r7, #108]
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 759              		.loc 1 677 9 discriminator 3 view .LVU272
 760 0026 3E6F     		ldr	r6, [r7, #112]
 761              	.LVL70:
 762              		.loc 1 678 3 is_stmt 1 discriminator 3 view .LVU273
 679:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 763              		.loc 1 679 3 discriminator 3 view .LVU274
 680:Core/Src/SEGGER_RTT.c ****   //
 681:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:Core/Src/SEGGER_RTT.c ****   //
 683:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 764              		.loc 1 683 3 discriminator 3 view .LVU275
 765              		.loc 1 683 6 is_stmt 0 discriminator 3 view .LVU276
 766 0028 9E42     		cmp	r6, r3
 767 002a 21D8     		bhi	.L58
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 685:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 686:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 687:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 30


 689:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:Core/Src/SEGGER_RTT.c ****     };
 694:Core/Src/SEGGER_RTT.c **** #else
 695:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 696:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 697:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 698:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:Core/Src/SEGGER_RTT.c **** #endif
 701:Core/Src/SEGGER_RTT.c ****     //
 702:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:Core/Src/SEGGER_RTT.c ****     //
 704:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 705:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 706:Core/Src/SEGGER_RTT.c ****     }
 707:Core/Src/SEGGER_RTT.c ****   }
 708:Core/Src/SEGGER_RTT.c ****   //
 709:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:Core/Src/SEGGER_RTT.c ****   //
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 768              		.loc 1 711 3 is_stmt 1 view .LVU277
 769              		.loc 1 711 15 is_stmt 0 view .LVU278
 770 002c 9B1B     		subs	r3, r3, r6
 771              	.LVL71:
 712:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 772              		.loc 1 712 3 is_stmt 1 view .LVU279
 773              		.loc 1 712 15 is_stmt 0 view .LVU280
 774 002e 9845     		cmp	r8, r3
 775 0030 4446     		mov	r4, r8
 776 0032 28BF     		it	cs
 777 0034 1C46     		movcs	r4, r3
 778              	.LVL72:
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 779              		.loc 1 713 3 is_stmt 1 view .LVU281
 780              		.loc 1 713 6 is_stmt 0 view .LVU282
 781 0036 1CB9     		cbnz	r4, .L49
 782              	.LVL73:
 783              	.L41:
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 715:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:Core/Src/SEGGER_RTT.c ****     };
 722:Core/Src/SEGGER_RTT.c **** #else
 723:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 724:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 725:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 726:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 727:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 728:Core/Src/SEGGER_RTT.c **** #endif
 729:Core/Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 31


 730:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 731:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 732:Core/Src/SEGGER_RTT.c ****   }
 733:Core/Src/SEGGER_RTT.c ****   //
 734:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 735:Core/Src/SEGGER_RTT.c **** }
 784              		.loc 1 735 1 view .LVU283
 785 0038 2046     		mov	r0, r4
 786 003a 03B0     		add	sp, sp, #12
 787              		.cfi_remember_state
 788              		.cfi_def_cfa_offset 36
 789              		@ sp needed
 790 003c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 791              	.LVL74:
 792              	.L49:
 793              		.cfi_restore_state
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 794              		.loc 1 713 6 view .LVU284
 795 0040 2746     		mov	r7, r4
 796              	.LVL75:
 797              	.L47:
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 798              		.loc 1 714 5 is_stmt 1 view .LVU285
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 799              		.loc 1 723 5 view .LVU286
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800              		.loc 1 714 18 is_stmt 0 view .LVU287
 801 0042 0BEB0503 		add	r3, fp, r5
 802 0046 0AEBC303 		add	r3, r10, r3, lsl #3
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 803              		.loc 1 723 5 view .LVU288
 804 004a 2246     		mov	r2, r4
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 805              		.loc 1 714 10 view .LVU289
 806 004c 596E     		ldr	r1, [r3, #100]
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 807              		.loc 1 723 5 view .LVU290
 808 004e 4846     		mov	r0, r9
 809 0050 3144     		add	r1, r1, r6
 810 0052 FFF7FEFF 		bl	memcpy
 811              	.LVL76:
 727:Core/Src/SEGGER_RTT.c **** #endif
 812              		.loc 1 727 18 view .LVU291
 813 0056 2644     		add	r6, r6, r4
 814              	.LVL77:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 815              		.loc 1 724 5 is_stmt 1 view .LVU292
 725:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 816              		.loc 1 725 5 view .LVU293
 726:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 817              		.loc 1 726 5 view .LVU294
 727:Core/Src/SEGGER_RTT.c **** #endif
 818              		.loc 1 727 5 view .LVU295
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 819              		.loc 1 724 18 is_stmt 0 view .LVU296
 820 0058 3C46     		mov	r4, r7
 821              	.LVL78:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 32


 822              	.L45:
 730:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 823              		.loc 1 730 3 is_stmt 1 view .LVU297
 730:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 824              		.loc 1 730 6 is_stmt 0 view .LVU298
 825 005a 002C     		cmp	r4, #0
 826 005c ECD0     		beq	.L41
 731:Core/Src/SEGGER_RTT.c ****   }
 827              		.loc 1 731 5 is_stmt 1 view .LVU299
 731:Core/Src/SEGGER_RTT.c ****   }
 828              		.loc 1 731 18 is_stmt 0 view .LVU300
 829 005e AB44     		add	fp, fp, r5
 830 0060 0AEBCB0B 		add	fp, r10, fp, lsl #3
 831              		.loc 1 735 1 view .LVU301
 832 0064 2046     		mov	r0, r4
 731:Core/Src/SEGGER_RTT.c ****   }
 833              		.loc 1 731 18 view .LVU302
 834 0066 CBF87060 		str	r6, [fp, #112]
 835              	.LVL79:
 734:Core/Src/SEGGER_RTT.c **** }
 836              		.loc 1 734 3 is_stmt 1 view .LVU303
 837              		.loc 1 735 1 is_stmt 0 view .LVU304
 838 006a 03B0     		add	sp, sp, #12
 839              		.cfi_remember_state
 840              		.cfi_def_cfa_offset 36
 841              		@ sp needed
 842 006c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 843              	.LVL80:
 844              	.L58:
 845              		.cfi_restore_state
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 846              		.loc 1 684 5 is_stmt 1 view .LVU305
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 847              		.loc 1 684 17 is_stmt 0 view .LVU306
 848 0070 BC6E     		ldr	r4, [r7, #104]
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 849              		.loc 1 686 10 view .LVU307
 850 0072 796E     		ldr	r1, [r7, #100]
 851 0074 0193     		str	r3, [sp, #4]
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 852              		.loc 1 684 17 view .LVU308
 853 0076 A41B     		subs	r4, r4, r6
 854              	.LVL81:
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 855              		.loc 1 685 5 is_stmt 1 view .LVU309
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 856              		.loc 1 685 17 is_stmt 0 view .LVU310
 857 0078 4445     		cmp	r4, r8
 858 007a 28BF     		it	cs
 859 007c 4446     		movcs	r4, r8
 860              	.LVL82:
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 861              		.loc 1 686 5 is_stmt 1 view .LVU311
 695:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 862              		.loc 1 695 5 view .LVU312
 863 007e 3144     		add	r1, r1, r6
 864 0080 2246     		mov	r2, r4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 33


 865 0082 4846     		mov	r0, r9
 866 0084 FFF7FEFF 		bl	memcpy
 867              	.LVL83:
 696:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 868              		.loc 1 696 5 view .LVU313
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 869              		.loc 1 697 5 view .LVU314
 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 870              		.loc 1 698 5 view .LVU315
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 871              		.loc 1 704 8 is_stmt 0 view .LVU316
 872 0088 BA6E     		ldr	r2, [r7, #104]
 873 008a 019B     		ldr	r3, [sp, #4]
 699:Core/Src/SEGGER_RTT.c **** #endif
 874              		.loc 1 699 18 view .LVU317
 875 008c 2644     		add	r6, r6, r4
 876              	.LVL84:
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 877              		.loc 1 704 8 view .LVU318
 878 008e B242     		cmp	r2, r6
 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 879              		.loc 1 698 18 view .LVU319
 880 0090 A8EB0408 		sub	r8, r8, r4
 881              	.LVL85:
 699:Core/Src/SEGGER_RTT.c **** #endif
 882              		.loc 1 699 5 is_stmt 1 view .LVU320
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 883              		.loc 1 704 5 view .LVU321
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 884              		.loc 1 711 15 is_stmt 0 view .LVU322
 885 0094 14BF     		ite	ne
 886 0096 9B1B     		subne	r3, r3, r6
 705:Core/Src/SEGGER_RTT.c ****     }
 887              		.loc 1 705 13 view .LVU323
 888 0098 0026     		moveq	r6, #0
 889              	.LVL86:
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 890              		.loc 1 711 3 is_stmt 1 view .LVU324
 712:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 891              		.loc 1 712 3 view .LVU325
 712:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 892              		.loc 1 712 15 is_stmt 0 view .LVU326
 893 009a 4345     		cmp	r3, r8
 894 009c 28BF     		it	cs
 895 009e 4346     		movcs	r3, r8
 896              	.LVL87:
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 897              		.loc 1 713 3 is_stmt 1 view .LVU327
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 898              		.loc 1 713 6 is_stmt 0 view .LVU328
 899 00a0 002B     		cmp	r3, #0
 900 00a2 DAD0     		beq	.L45
 901              	.LVL88:
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 902              		.loc 1 697 18 view .LVU329
 903 00a4 A144     		add	r9, r9, r4
 904              	.LVL89:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 34


 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 905              		.loc 1 724 18 view .LVU330
 906 00a6 E718     		adds	r7, r4, r3
 907 00a8 1C46     		mov	r4, r3
 908              	.LVL90:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 909              		.loc 1 724 18 view .LVU331
 910 00aa CAE7     		b	.L47
 911              	.LVL91:
 912              	.L57:
 913              	.LBB27:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 914              		.loc 1 674 3 is_stmt 1 discriminator 1 view .LVU332
 915 00ac FFF7FEFF 		bl	_DoInit
 916              	.LVL92:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 917              		.loc 1 674 3 is_stmt 0 discriminator 1 view .LVU333
 918 00b0 B2E7     		b	.L42
 919              	.L60:
 920 00b2 00BF     		.align	2
 921              	.L59:
 922 00b4 00000000 		.word	.LANCHOR0
 923              	.LBE27:
 924              		.cfi_endproc
 925              	.LFE6:
 927              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 928              		.align	1
 929              		.p2align 2,,3
 930              		.global	SEGGER_RTT_ReadUpBuffer
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 935              	SEGGER_RTT_ReadUpBuffer:
 936              	.LVL93:
 937              	.LFB7:
 736:Core/Src/SEGGER_RTT.c **** 
 737:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 738:Core/Src/SEGGER_RTT.c **** *
 739:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:Core/Src/SEGGER_RTT.c **** *
 741:Core/Src/SEGGER_RTT.c **** *  Function description
 742:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 745:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:Core/Src/SEGGER_RTT.c **** *
 747:Core/Src/SEGGER_RTT.c **** *  Parameters
 748:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:Core/Src/SEGGER_RTT.c **** *
 752:Core/Src/SEGGER_RTT.c **** *  Return value
 753:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:Core/Src/SEGGER_RTT.c **** *
 755:Core/Src/SEGGER_RTT.c **** *  Additional information
 756:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 35


 758:Core/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:Core/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 760:Core/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 761:Core/Src/SEGGER_RTT.c **** */
 762:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 938              		.loc 1 762 92 is_stmt 1 view -0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 763:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 942              		.loc 1 763 3 view .LVU335
 943              	.LBB28:
 764:Core/Src/SEGGER_RTT.c **** 
 765:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 944              		.loc 1 765 3 view .LVU336
 945              		.loc 1 765 3 view .LVU337
 946              	.LBE28:
 762:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 947              		.loc 1 762 92 is_stmt 0 view .LVU338
 948 0000 10B5     		push	{r4, lr}
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 4, -8
 951              		.cfi_offset 14, -4
 762:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 952              		.loc 1 762 92 view .LVU339
 953 0002 0B46     		mov	r3, r1
 954              	.LBB29:
 955              		.loc 1 765 3 view .LVU340
 956              		.syntax unified
 957              	@ 765 "Core/Src/SEGGER_RTT.c" 1
 958 0004 EFF31184 		mrs   r4, basepri  
 959 0008 4FF02001 		mov   r1, #32       
 960 000c 81F31188 		msr   basepri, r1  
 961              		
 962              	@ 0 "" 2
 963              	.LVL94:
 964              		.loc 1 765 20 is_stmt 1 view .LVU341
 766:Core/Src/SEGGER_RTT.c ****   //
 767:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:Core/Src/SEGGER_RTT.c ****   //
 769:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 965              		.loc 1 769 3 view .LVU342
 966              		.loc 1 769 18 is_stmt 0 view .LVU343
 967              		.thumb
 968              		.syntax unified
 969 0010 1946     		mov	r1, r3
 970 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 971              	.LVL95:
 770:Core/Src/SEGGER_RTT.c ****   //
 771:Core/Src/SEGGER_RTT.c ****   // Finish up.
 772:Core/Src/SEGGER_RTT.c ****   //
 773:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 972              		.loc 1 773 3 is_stmt 1 view .LVU344
 973              		.syntax unified
 974              	@ 773 "Core/Src/SEGGER_RTT.c" 1
 975 0016 84F31188 		msr   basepri, r4  
 976              		
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 36


 977              	@ 0 "" 2
 978              		.thumb
 979              		.syntax unified
 980              	.LBE29:
 981              		.loc 1 773 22 view .LVU345
 774:Core/Src/SEGGER_RTT.c ****   //
 775:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 982              		.loc 1 775 3 view .LVU346
 776:Core/Src/SEGGER_RTT.c **** }
 983              		.loc 1 776 1 is_stmt 0 view .LVU347
 984 001a 10BD     		pop	{r4, pc}
 985              		.loc 1 776 1 view .LVU348
 986              		.cfi_endproc
 987              	.LFE7:
 989              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 990              		.align	1
 991              		.p2align 2,,3
 992              		.global	SEGGER_RTT_Read
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	SEGGER_RTT_Read:
 998              	.LVL96:
 999              	.LFB8:
 777:Core/Src/SEGGER_RTT.c **** 
 778:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 779:Core/Src/SEGGER_RTT.c **** *
 780:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:Core/Src/SEGGER_RTT.c **** *
 782:Core/Src/SEGGER_RTT.c **** *  Function description
 783:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:Core/Src/SEGGER_RTT.c **** *
 786:Core/Src/SEGGER_RTT.c **** *  Parameters
 787:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:Core/Src/SEGGER_RTT.c **** *
 791:Core/Src/SEGGER_RTT.c **** *  Return value
 792:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:Core/Src/SEGGER_RTT.c **** */
 794:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1000              		.loc 1 794 84 is_stmt 1 view -0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 795:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1004              		.loc 1 795 3 view .LVU350
 1005              	.LBB31:
 796:Core/Src/SEGGER_RTT.c **** 
 797:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1006              		.loc 1 797 3 view .LVU351
 1007              		.loc 1 797 3 view .LVU352
 1008              	.LBE31:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1009              		.loc 1 794 84 is_stmt 0 view .LVU353
 1010 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 37


 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 4, -8
 1013              		.cfi_offset 14, -4
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1014              		.loc 1 794 84 view .LVU354
 1015 0002 0B46     		mov	r3, r1
 1016              	.LBB32:
 1017              		.loc 1 797 3 view .LVU355
 1018              		.syntax unified
 1019              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 1020 0004 EFF31184 		mrs   r4, basepri  
 1021 0008 4FF02001 		mov   r1, #32       
 1022 000c 81F31188 		msr   basepri, r1  
 1023              		
 1024              	@ 0 "" 2
 1025              	.LVL97:
 1026              		.loc 1 797 20 is_stmt 1 view .LVU356
 798:Core/Src/SEGGER_RTT.c ****   //
 799:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:Core/Src/SEGGER_RTT.c ****   //
 801:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1027              		.loc 1 801 3 view .LVU357
 1028              		.loc 1 801 18 is_stmt 0 view .LVU358
 1029              		.thumb
 1030              		.syntax unified
 1031 0010 1946     		mov	r1, r3
 1032 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1033              	.LVL98:
 802:Core/Src/SEGGER_RTT.c ****   //
 803:Core/Src/SEGGER_RTT.c ****   // Finish up.
 804:Core/Src/SEGGER_RTT.c ****   //
 805:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1034              		.loc 1 805 3 is_stmt 1 view .LVU359
 1035              		.syntax unified
 1036              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 1037 0016 84F31188 		msr   basepri, r4  
 1038              		
 1039              	@ 0 "" 2
 1040              		.thumb
 1041              		.syntax unified
 1042              	.LBE32:
 1043              		.loc 1 805 22 view .LVU360
 806:Core/Src/SEGGER_RTT.c ****   //
 807:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1044              		.loc 1 807 3 view .LVU361
 808:Core/Src/SEGGER_RTT.c **** }
 1045              		.loc 1 808 1 is_stmt 0 view .LVU362
 1046 001a 10BD     		pop	{r4, pc}
 1047              		.loc 1 808 1 view .LVU363
 1048              		.cfi_endproc
 1049              	.LFE8:
 1051              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1052              		.align	1
 1053              		.p2align 2,,3
 1054              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1055              		.syntax unified
 1056              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 38


 1057              		.thumb_func
 1059              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1060              	.LVL99:
 1061              	.LFB9:
 809:Core/Src/SEGGER_RTT.c **** 
 810:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 811:Core/Src/SEGGER_RTT.c **** *
 812:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:Core/Src/SEGGER_RTT.c **** *
 814:Core/Src/SEGGER_RTT.c **** *  Function description
 815:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 816:Core/Src/SEGGER_RTT.c **** *    control block.
 817:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 818:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:Core/Src/SEGGER_RTT.c **** *
 820:Core/Src/SEGGER_RTT.c **** *  Parameters
 821:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 822:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:Core/Src/SEGGER_RTT.c **** *
 825:Core/Src/SEGGER_RTT.c **** *  Notes
 826:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 831:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:Core/Src/SEGGER_RTT.c **** */
 833:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1062              		.loc 1 833 104 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 834:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1066              		.loc 1 834 3 view .LVU365
 835:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1067              		.loc 1 835 3 view .LVU366
 836:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1068              		.loc 1 836 3 view .LVU367
 837:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1069              		.loc 1 837 3 view .LVU368
 838:Core/Src/SEGGER_RTT.c ****   //
 839:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:Core/Src/SEGGER_RTT.c ****   //
 841:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1070              		.loc 1 841 3 view .LVU369
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1071              		.loc 1 833 104 is_stmt 0 view .LVU370
 1072 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1073              		.cfi_def_cfa_offset 40
 1074              		.cfi_offset 3, -40
 1075              		.cfi_offset 4, -36
 1076              		.cfi_offset 5, -32
 1077              		.cfi_offset 6, -28
 1078              		.cfi_offset 7, -24
 1079              		.cfi_offset 8, -20
 1080              		.cfi_offset 9, -16
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 39


 1081              		.cfi_offset 10, -12
 1082              		.cfi_offset 11, -8
 1083              		.cfi_offset 14, -4
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 843:Core/Src/SEGGER_RTT.c ****   //
 844:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:Core/Src/SEGGER_RTT.c ****   //
 846:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1084              		.loc 1 846 12 view .LVU371
 1085 0004 DFF8D0B0 		ldr	fp, .L78
 1086 0008 00EB4003 		add	r3, r0, r0, lsl #1
 1087 000c 0BEBC303 		add	r3, fp, r3, lsl #3
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1088              		.loc 1 833 104 view .LVU372
 1089 0010 0746     		mov	r7, r0
 1090 0012 1546     		mov	r5, r2
 1091              		.loc 1 846 12 view .LVU373
 1092 0014 4FEA4008 		lsl	r8, r0, #1
 1093              		.loc 1 846 28 view .LVU374
 1094 0018 9A6A     		ldr	r2, [r3, #40]
 1095              	.LVL100:
 1096              		.loc 1 846 12 view .LVU375
 1097 001a 586A     		ldr	r0, [r3, #36]
 1098              	.LVL101:
 1099              		.loc 1 846 6 view .LVU376
 1100 001c 9042     		cmp	r0, r2
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1101              		.loc 1 833 104 view .LVU377
 1102 001e 0E46     		mov	r6, r1
 1103              	.LVL102:
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1104              		.loc 1 842 3 is_stmt 1 view .LVU378
 1105              		.loc 1 846 3 view .LVU379
 1106              		.loc 1 846 6 is_stmt 0 view .LVU380
 1107 0020 56D0     		beq	.L77
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 848:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1108              		.loc 1 848 10 is_stmt 1 view .LVU381
 1109              		.loc 1 848 35 is_stmt 0 view .LVU382
 1110 0022 9A6A     		ldr	r2, [r3, #40]
 1111              		.loc 1 848 13 view .LVU383
 1112 0024 9042     		cmp	r0, r2
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1113              		.loc 1 849 5 is_stmt 1 view .LVU384
 850:Core/Src/SEGGER_RTT.c ****   } else {
 851:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1114              		.loc 1 851 18 is_stmt 0 view .LVU385
 1115 0026 25BF     		ittet	cs
 1116 0028 9A6A     		ldrcs	r2, [r3, #40]
 1117              		.loc 1 851 11 view .LVU386
 1118 002a 1B6A     		ldrcs	r3, [r3, #32]
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1119              		.loc 1 849 18 view .LVU387
 1120 002c 9B6A     		ldrcc	r3, [r3, #40]
 1121              		.loc 1 851 5 is_stmt 1 view .LVU388
 1122              		.loc 1 851 11 is_stmt 0 view .LVU389
 1123 002e 9B18     		addcs	r3, r3, r2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 40


 1124 0030 013B     		subs	r3, r3, #1
 1125 0032 1B1A     		subs	r3, r3, r0
 1126              	.LVL103:
 1127              	.L67:
 852:Core/Src/SEGGER_RTT.c ****   }
 853:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1128              		.loc 1 853 3 is_stmt 1 view .LVU390
 1129              		.loc 1 853 6 is_stmt 0 view .LVU391
 1130 0034 AB42     		cmp	r3, r5
 1131 0036 11D2     		bcs	.L69
 854:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1132              		.loc 1 854 5 is_stmt 1 view .LVU392
 1133              		.loc 1 854 18 is_stmt 0 view .LVU393
 1134 0038 08EB0702 		add	r2, r8, r7
 1135 003c 0BEBC202 		add	r2, fp, r2, lsl #3
 1136 0040 916A     		ldr	r1, [r2, #40]
 1137              	.LVL104:
 1138              		.loc 1 854 18 view .LVU394
 1139 0042 2944     		add	r1, r1, r5
 1140 0044 CB1A     		subs	r3, r1, r3
 1141              	.LVL105:
 1142              		.loc 1 854 18 view .LVU395
 1143 0046 9362     		str	r3, [r2, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1144              		.loc 1 855 5 is_stmt 1 view .LVU396
 1145              		.loc 1 855 25 view .LVU397
 1146              		.loc 1 855 17 is_stmt 0 view .LVU398
 1147 0048 936A     		ldr	r3, [r2, #40]
 1148              		.loc 1 855 33 view .LVU399
 1149 004a 116A     		ldr	r1, [r2, #32]
 1150              		.loc 1 855 25 view .LVU400
 1151 004c 8B42     		cmp	r3, r1
 1152 004e 05D3     		bcc	.L69
 1153              	.L70:
 856:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1154              		.loc 1 856 7 is_stmt 1 view .LVU401
 1155              		.loc 1 856 20 is_stmt 0 view .LVU402
 1156 0050 936A     		ldr	r3, [r2, #40]
 1157 0052 5B1A     		subs	r3, r3, r1
 1158 0054 9362     		str	r3, [r2, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1159              		.loc 1 855 25 is_stmt 1 view .LVU403
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1160              		.loc 1 855 17 is_stmt 0 view .LVU404
 1161 0056 936A     		ldr	r3, [r2, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1162              		.loc 1 855 25 view .LVU405
 1163 0058 8B42     		cmp	r3, r1
 1164 005a F9D2     		bcs	.L70
 1165              	.L69:
 857:Core/Src/SEGGER_RTT.c ****     }
 858:Core/Src/SEGGER_RTT.c ****   }
 859:Core/Src/SEGGER_RTT.c ****   //
 860:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:Core/Src/SEGGER_RTT.c ****   //
 862:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1166              		.loc 1 862 3 is_stmt 1 view .LVU406
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 41


 1167              		.loc 1 862 16 is_stmt 0 view .LVU407
 1168 005c 08EB0703 		add	r3, r8, r7
 1169 0060 0BEBC303 		add	r3, fp, r3, lsl #3
 1170 0064 07F1010A 		add	r10, r7, #1
 1171              		.loc 1 862 9 view .LVU408
 1172 0068 1C6A     		ldr	r4, [r3, #32]
 863:Core/Src/SEGGER_RTT.c ****   do {
 864:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 865:Core/Src/SEGGER_RTT.c ****       //
 866:Core/Src/SEGGER_RTT.c ****       // Last round
 867:Core/Src/SEGGER_RTT.c ****       //
 868:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 869:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:Core/Src/SEGGER_RTT.c ****       };
 874:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:Core/Src/SEGGER_RTT.c **** #else
 877:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 878:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 880:Core/Src/SEGGER_RTT.c **** #endif
 881:Core/Src/SEGGER_RTT.c ****       break;
 882:Core/Src/SEGGER_RTT.c ****     } else {
 883:Core/Src/SEGGER_RTT.c ****       //
 884:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 885:Core/Src/SEGGER_RTT.c ****       //
 886:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1173              		.loc 1 886 20 view .LVU409
 1174 006a 0AEB4A09 		add	r9, r10, r10, lsl #1
 862:Core/Src/SEGGER_RTT.c ****   do {
 1175              		.loc 1 862 9 view .LVU410
 1176 006e 241A     		subs	r4, r4, r0
 1177              	.LVL106:
 1178              		.loc 1 886 20 view .LVU411
 1179 0070 4FEAC909 		lsl	r9, r9, #3
 1180 0074 10E0     		b	.L73
 1181              	.LVL107:
 1182              	.L71:
 1183              		.loc 1 886 12 view .LVU412
 1184 0076 5B68     		ldr	r3, [r3, #4]
 887:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
 890:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:Core/Src/SEGGER_RTT.c ****       };
 892:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:Core/Src/SEGGER_RTT.c **** #else
 895:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1185              		.loc 1 895 7 view .LVU413
 1186 0078 1844     		add	r0, r0, r3
 1187              	.LVL108:
 1188              		.loc 1 895 7 view .LVU414
 1189 007a FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 42


 1190              	.LVL109:
 896:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1191              		.loc 1 896 7 is_stmt 1 view .LVU415
 1192              		.loc 1 896 13 is_stmt 0 view .LVU416
 1193 007e 2644     		add	r6, r6, r4
 1194              	.LVL110:
 897:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1195              		.loc 1 897 7 is_stmt 1 view .LVU417
 1196              		.syntax unified
 1197              	@ 897 "Core/Src/SEGGER_RTT.c" 1
 1198 0080 BFF35F8F 		dmb
 1199              	
 1200              	@ 0 "" 2
 1201              		.loc 1 897 17 view .LVU418
 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1202              		.loc 1 898 7 view .LVU419
 1203              		.loc 1 898 20 is_stmt 0 view .LVU420
 1204              		.thumb
 1205              		.syntax unified
 1206 0084 08EB0703 		add	r3, r8, r7
 1207 0088 0BEBC303 		add	r3, fp, r3, lsl #3
 1208 008c 0020     		movs	r0, #0
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 900:Core/Src/SEGGER_RTT.c **** #endif
 901:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1209              		.loc 1 901 13 view .LVU421
 1210 008e 1A6A     		ldr	r2, [r3, #32]
 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1211              		.loc 1 898 20 view .LVU422
 1212 0090 5862     		str	r0, [r3, #36]
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1213              		.loc 1 899 7 is_stmt 1 view .LVU423
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1214              		.loc 1 899 16 is_stmt 0 view .LVU424
 1215 0092 2D1B     		subs	r5, r5, r4
 1216              	.LVL111:
 1217              		.loc 1 901 7 is_stmt 1 view .LVU425
 1218              		.loc 1 901 13 is_stmt 0 view .LVU426
 1219 0094 541E     		subs	r4, r2, #1
 1220              	.LVL112:
 902:Core/Src/SEGGER_RTT.c ****     }
 903:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 1221              		.loc 1 903 12 is_stmt 1 view .LVU427
 1222 0096 CDB1     		cbz	r5, .L65
 1223              	.L73:
 863:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1224              		.loc 1 863 3 view .LVU428
 864:Core/Src/SEGGER_RTT.c ****       //
 1225              		.loc 1 864 5 view .LVU429
 886:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1226              		.loc 1 886 7 view .LVU430
 1227              	.LVL113:
 895:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1228              		.loc 1 895 7 view .LVU431
 864:Core/Src/SEGGER_RTT.c ****       //
 1229              		.loc 1 864 8 is_stmt 0 view .LVU432
 1230 0098 A542     		cmp	r5, r4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 43


 886:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1231              		.loc 1 886 20 view .LVU433
 1232 009a 0BEB0903 		add	r3, fp, r9
 895:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1233              		.loc 1 895 7 view .LVU434
 1234 009e 3146     		mov	r1, r6
 1235 00a0 2246     		mov	r2, r4
 864:Core/Src/SEGGER_RTT.c ****       //
 1236              		.loc 1 864 8 view .LVU435
 1237 00a2 E8D2     		bcs	.L71
 1238              	.LVL114:
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1239              		.loc 1 868 7 is_stmt 1 view .LVU436
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1240              		.loc 1 877 7 view .LVU437
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1241              		.loc 1 868 20 is_stmt 0 view .LVU438
 1242 00a4 0AEB4A0A 		add	r10, r10, r10, lsl #1
 1243 00a8 0BEBCA0A 		add	r10, fp, r10, lsl #3
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1244              		.loc 1 877 7 view .LVU439
 1245 00ac 2A46     		mov	r2, r5
 1246              	.LVL115:
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1247              		.loc 1 868 12 view .LVU440
 1248 00ae DAF80430 		ldr	r3, [r10, #4]
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1249              		.loc 1 877 7 view .LVU441
 1250 00b2 1844     		add	r0, r0, r3
 1251              	.LVL116:
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1252              		.loc 1 877 7 view .LVU442
 1253 00b4 FFF7FEFF 		bl	memcpy
 1254              	.LVL117:
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1255              		.loc 1 878 7 is_stmt 1 view .LVU443
 1256              		.syntax unified
 1257              	@ 878 "Core/Src/SEGGER_RTT.c" 1
 1258 00b8 BFF35F8F 		dmb
 1259              	
 1260              	@ 0 "" 2
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1261              		.loc 1 878 17 view .LVU444
 879:Core/Src/SEGGER_RTT.c **** #endif
 1262              		.loc 1 879 7 view .LVU445
 879:Core/Src/SEGGER_RTT.c **** #endif
 1263              		.loc 1 879 20 is_stmt 0 view .LVU446
 1264              		.thumb
 1265              		.syntax unified
 1266 00bc B844     		add	r8, r8, r7
 1267 00be 0BEBC80B 		add	fp, fp, r8, lsl #3
 1268 00c2 DBF82430 		ldr	r3, [fp, #36]
 1269 00c6 2B44     		add	r3, r3, r5
 1270 00c8 CBF82430 		str	r3, [fp, #36]
 881:Core/Src/SEGGER_RTT.c ****     } else {
 1271              		.loc 1 881 7 is_stmt 1 view .LVU447
 1272              	.L65:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 44


 904:Core/Src/SEGGER_RTT.c **** }
 1273              		.loc 1 904 1 is_stmt 0 view .LVU448
 1274 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1275              	.LVL118:
 1276              	.L77:
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1277              		.loc 1 847 5 is_stmt 1 view .LVU449
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1278              		.loc 1 847 11 is_stmt 0 view .LVU450
 1279 00d0 1B6A     		ldr	r3, [r3, #32]
 1280 00d2 013B     		subs	r3, r3, #1
 1281              	.LVL119:
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1282              		.loc 1 847 11 view .LVU451
 1283 00d4 AEE7     		b	.L67
 1284              	.L79:
 1285 00d6 00BF     		.align	2
 1286              	.L78:
 1287 00d8 00000000 		.word	.LANCHOR0
 1288              		.cfi_endproc
 1289              	.LFE9:
 1291              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1292              		.align	1
 1293              		.p2align 2,,3
 1294              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1299              	SEGGER_RTT_WriteDownBufferNoLock:
 1300              	.LVL120:
 1301              	.LFB10:
 905:Core/Src/SEGGER_RTT.c **** 
 906:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 907:Core/Src/SEGGER_RTT.c **** *
 908:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:Core/Src/SEGGER_RTT.c **** *
 910:Core/Src/SEGGER_RTT.c **** *  Function description
 911:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:Core/Src/SEGGER_RTT.c **** *
 916:Core/Src/SEGGER_RTT.c **** *  Parameters
 917:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:Core/Src/SEGGER_RTT.c **** *
 923:Core/Src/SEGGER_RTT.c **** *  Return value
 924:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 925:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:Core/Src/SEGGER_RTT.c **** *
 927:Core/Src/SEGGER_RTT.c **** *  Notes
 928:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 45


 931:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:Core/Src/SEGGER_RTT.c **** */
 933:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 936:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 938:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 941:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:Core/Src/SEGGER_RTT.c ****   //
 943:Core/Src/SEGGER_RTT.c ****   // Cases:
 944:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:Core/Src/SEGGER_RTT.c ****   //
 950:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:Core/Src/SEGGER_RTT.c ****   //
 952:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 954:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 957:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 958:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 959:Core/Src/SEGGER_RTT.c **** CopyStraight:
 960:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 961:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 962:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 963:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 964:Core/Src/SEGGER_RTT.c ****       return 1;
 965:Core/Src/SEGGER_RTT.c ****     }
 966:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 967:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 968:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 969:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 970:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 971:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 972:Core/Src/SEGGER_RTT.c ****       //
 973:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 974:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 975:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 976:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 977:Core/Src/SEGGER_RTT.c ****       //
 978:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 979:Core/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 980:Core/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 981:Core/Src/SEGGER_RTT.c ****       }
 982:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 983:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 984:Core/Src/SEGGER_RTT.c ****       return 1;
 985:Core/Src/SEGGER_RTT.c ****     }
 986:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 987:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 46


 988:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 989:Core/Src/SEGGER_RTT.c ****       goto CopyStraight;
 990:Core/Src/SEGGER_RTT.c ****     }
 991:Core/Src/SEGGER_RTT.c ****   }
 992:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 993:Core/Src/SEGGER_RTT.c **** }
 994:Core/Src/SEGGER_RTT.c **** #endif
 995:Core/Src/SEGGER_RTT.c **** 
 996:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 997:Core/Src/SEGGER_RTT.c **** *
 998:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 999:Core/Src/SEGGER_RTT.c **** *
1000:Core/Src/SEGGER_RTT.c **** *  Function description
1001:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1002:Core/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1003:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1004:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1005:Core/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1006:Core/Src/SEGGER_RTT.c **** *
1007:Core/Src/SEGGER_RTT.c **** *  Parameters
1008:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1009:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1010:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1011:Core/Src/SEGGER_RTT.c **** *
1012:Core/Src/SEGGER_RTT.c **** *  Return value
1013:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1014:Core/Src/SEGGER_RTT.c **** *
1015:Core/Src/SEGGER_RTT.c **** *  Notes
1016:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1017:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1018:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1019:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1020:Core/Src/SEGGER_RTT.c **** *
1021:Core/Src/SEGGER_RTT.c **** *  Additional information
1022:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1023:Core/Src/SEGGER_RTT.c **** */
1024:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1302              		.loc 1 1024 105 is_stmt 1 view -0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
1025:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1306              		.loc 1 1025 3 view .LVU453
1026:Core/Src/SEGGER_RTT.c ****   unsigned                Avail;
 1307              		.loc 1 1026 3 view .LVU454
1027:Core/Src/SEGGER_RTT.c ****   const char*             pData;
 1308              		.loc 1 1027 3 view .LVU455
1028:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1309              		.loc 1 1028 3 view .LVU456
1029:Core/Src/SEGGER_RTT.c ****   //
1030:Core/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1031:Core/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1032:Core/Src/SEGGER_RTT.c ****   //
1033:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1310              		.loc 1 1033 3 view .LVU457
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1311              		.loc 1 1024 105 is_stmt 0 view .LVU458
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 47


 1312 0000 38B5     		push	{r3, r4, r5, lr}
 1313              		.cfi_def_cfa_offset 16
 1314              		.cfi_offset 3, -16
 1315              		.cfi_offset 4, -12
 1316              		.cfi_offset 5, -8
 1317              		.cfi_offset 14, -4
1034:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1318              		.loc 1 1034 9 view .LVU459
 1319 0002 1A4B     		ldr	r3, .L91
 1320 0004 00EB4000 		add	r0, r0, r0, lsl #1
 1321              	.LVL121:
 1322              		.loc 1 1034 9 view .LVU460
 1323 0008 03EBC000 		add	r0, r3, r0, lsl #3
 1324 000c 6030     		adds	r0, r0, #96
1035:Core/Src/SEGGER_RTT.c ****   //
1036:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1037:Core/Src/SEGGER_RTT.c ****   //
1038:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1325              		.loc 1 1038 16 view .LVU461
 1326 000e 4469     		ldr	r4, [r0, #20]
 1327              		.loc 1 1038 3 view .LVU462
 1328 0010 012C     		cmp	r4, #1
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1329              		.loc 1 1024 105 view .LVU463
 1330 0012 8C46     		mov	ip, r1
 1331              	.LVL122:
1034:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1332              		.loc 1 1034 3 is_stmt 1 view .LVU464
 1333              		.loc 1 1038 3 view .LVU465
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1334              		.loc 1 1024 105 is_stmt 0 view .LVU466
 1335 0014 1546     		mov	r5, r2
 1336              		.loc 1 1038 3 view .LVU467
 1337 0016 05D0     		beq	.L81
 1338 0018 022C     		cmp	r4, #2
 1339 001a 23D0     		beq	.L82
 1340 001c 94B1     		cbz	r4, .L90
 1341 001e 0024     		movs	r4, #0
 1342              	.LVL123:
1039:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1040:Core/Src/SEGGER_RTT.c ****     //
1041:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1042:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1043:Core/Src/SEGGER_RTT.c ****     //
1044:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1045:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1046:Core/Src/SEGGER_RTT.c ****       Status = 0u;
1047:Core/Src/SEGGER_RTT.c ****     } else {
1048:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1049:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1050:Core/Src/SEGGER_RTT.c ****     }
1051:Core/Src/SEGGER_RTT.c ****     break;
1052:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1053:Core/Src/SEGGER_RTT.c ****     //
1054:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1055:Core/Src/SEGGER_RTT.c ****     //
1056:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 48


1057:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1058:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1059:Core/Src/SEGGER_RTT.c ****     break;
1060:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1061:Core/Src/SEGGER_RTT.c ****     //
1062:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1063:Core/Src/SEGGER_RTT.c ****     //
1064:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1065:Core/Src/SEGGER_RTT.c ****     break;
1066:Core/Src/SEGGER_RTT.c ****   default:
1067:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1068:Core/Src/SEGGER_RTT.c ****     break;
1069:Core/Src/SEGGER_RTT.c ****   }
1070:Core/Src/SEGGER_RTT.c ****   //
1071:Core/Src/SEGGER_RTT.c ****   // Finish up.
1072:Core/Src/SEGGER_RTT.c ****   //
1073:Core/Src/SEGGER_RTT.c ****   return Status;
 1343              		.loc 1 1073 3 is_stmt 1 view .LVU468
 1344              	.L80:
1074:Core/Src/SEGGER_RTT.c **** }
 1345              		.loc 1 1074 1 is_stmt 0 view .LVU469
 1346 0020 2046     		mov	r0, r4
 1347 0022 38BD     		pop	{r3, r4, r5, pc}
 1348              	.LVL124:
 1349              	.L81:
1056:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1350              		.loc 1 1056 5 is_stmt 1 view .LVU470
 1351              	.LBB33:
 1352              	.LBI33:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1353              		.loc 1 526 17 view .LVU471
 1354              	.LBB34:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1355              		.loc 1 527 3 view .LVU472
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1356              		.loc 1 528 3 view .LVU473
 529:Core/Src/SEGGER_RTT.c ****   //
 1357              		.loc 1 529 3 view .LVU474
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1358              		.loc 1 534 3 view .LVU475
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1359              		.loc 1 534 9 is_stmt 0 view .LVU476
 1360 0024 0369     		ldr	r3, [r0, #16]
 1361              	.LVL125:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1362              		.loc 1 535 3 is_stmt 1 view .LVU477
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1363              		.loc 1 535 9 is_stmt 0 view .LVU478
 1364 0026 C468     		ldr	r4, [r0, #12]
 1365              	.LVL126:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1366              		.loc 1 536 3 is_stmt 1 view .LVU479
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1367              		.loc 1 536 6 is_stmt 0 view .LVU480
 1368 0028 A342     		cmp	r3, r4
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1369              		.loc 1 537 5 is_stmt 1 view .LVU481
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 49


 537:Core/Src/SEGGER_RTT.c ****   } else {
 1370              		.loc 1 537 7 is_stmt 0 view .LVU482
 1371 002a 9CBF     		itt	ls
 1372 002c 8268     		ldrls	r2, [r0, #8]
 1373              	.LVL127:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1374              		.loc 1 537 7 view .LVU483
 1375 002e 9B18     		addls	r3, r3, r2
 1376              	.LVL128:
 539:Core/Src/SEGGER_RTT.c ****   }
 1377              		.loc 1 539 5 is_stmt 1 view .LVU484
 539:Core/Src/SEGGER_RTT.c ****   }
 1378              		.loc 1 539 7 is_stmt 0 view .LVU485
 1379 0030 013B     		subs	r3, r3, #1
 1380 0032 1C1B     		subs	r4, r3, r4
 1381              	.LVL129:
 541:Core/Src/SEGGER_RTT.c **** }
 1382              		.loc 1 541 3 is_stmt 1 view .LVU486
 541:Core/Src/SEGGER_RTT.c **** }
 1383              		.loc 1 541 3 is_stmt 0 view .LVU487
 1384              	.LBE34:
 1385              	.LBE33:
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1386              		.loc 1 1057 5 is_stmt 1 view .LVU488
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1387              		.loc 1 1057 12 is_stmt 0 view .LVU489
 1388 0034 AC42     		cmp	r4, r5
 1389 0036 28BF     		it	cs
 1390 0038 2C46     		movcs	r4, r5
 1391              	.LVL130:
1058:Core/Src/SEGGER_RTT.c ****     break;
 1392              		.loc 1 1058 5 is_stmt 1 view .LVU490
 1393 003a 2246     		mov	r2, r4
 1394 003c FFF7FEFF 		bl	_WriteNoCheck
 1395              	.LVL131:
1059:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1396              		.loc 1 1059 5 view .LVU491
 1397              		.loc 1 1074 1 is_stmt 0 view .LVU492
 1398 0040 2046     		mov	r0, r4
 1399 0042 38BD     		pop	{r3, r4, r5, pc}
 1400              	.LVL132:
 1401              	.L90:
1044:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1402              		.loc 1 1044 5 is_stmt 1 view .LVU493
 1403              	.LBB35:
 1404              	.LBI35:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1405              		.loc 1 526 17 view .LVU494
 1406              	.LBB36:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1407              		.loc 1 527 3 view .LVU495
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1408              		.loc 1 528 3 view .LVU496
 529:Core/Src/SEGGER_RTT.c ****   //
 1409              		.loc 1 529 3 view .LVU497
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1410              		.loc 1 534 3 view .LVU498
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 50


 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1411              		.loc 1 534 9 is_stmt 0 view .LVU499
 1412 0044 0369     		ldr	r3, [r0, #16]
 1413              	.LVL133:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1414              		.loc 1 535 3 is_stmt 1 view .LVU500
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1415              		.loc 1 535 9 is_stmt 0 view .LVU501
 1416 0046 C268     		ldr	r2, [r0, #12]
 1417              	.LVL134:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1418              		.loc 1 536 3 is_stmt 1 view .LVU502
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1419              		.loc 1 536 6 is_stmt 0 view .LVU503
 1420 0048 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1421              		.loc 1 537 5 is_stmt 1 view .LVU504
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1422              		.loc 1 537 7 is_stmt 0 view .LVU505
 1423 004a 9CBF     		itt	ls
 1424 004c 8168     		ldrls	r1, [r0, #8]
 1425              	.LVL135:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1426              		.loc 1 537 7 view .LVU506
 1427 004e 5B18     		addls	r3, r3, r1
 1428              	.LVL136:
 539:Core/Src/SEGGER_RTT.c ****   }
 1429              		.loc 1 539 5 is_stmt 1 view .LVU507
 539:Core/Src/SEGGER_RTT.c ****   }
 1430              		.loc 1 539 7 is_stmt 0 view .LVU508
 1431 0050 013B     		subs	r3, r3, #1
 1432 0052 9A1A     		subs	r2, r3, r2
 1433              	.LVL137:
 541:Core/Src/SEGGER_RTT.c **** }
 1434              		.loc 1 541 3 is_stmt 1 view .LVU509
 541:Core/Src/SEGGER_RTT.c **** }
 1435              		.loc 1 541 3 is_stmt 0 view .LVU510
 1436              	.LBE36:
 1437              	.LBE35:
1045:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1438              		.loc 1 1045 5 is_stmt 1 view .LVU511
1045:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1439              		.loc 1 1045 8 is_stmt 0 view .LVU512
 1440 0054 9542     		cmp	r5, r2
 1441 0056 E3D8     		bhi	.L80
1048:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1442              		.loc 1 1048 7 is_stmt 1 view .LVU513
 1443              	.LVL138:
1049:Core/Src/SEGGER_RTT.c ****     }
 1444              		.loc 1 1049 7 view .LVU514
 1445 0058 2A46     		mov	r2, r5
 1446              	.LVL139:
1049:Core/Src/SEGGER_RTT.c ****     }
 1447              		.loc 1 1049 7 is_stmt 0 view .LVU515
 1448 005a 6146     		mov	r1, ip
 1449 005c FFF7FEFF 		bl	_WriteNoCheck
 1450              	.LVL140:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 51


1049:Core/Src/SEGGER_RTT.c ****     }
 1451              		.loc 1 1049 7 view .LVU516
 1452 0060 2C46     		mov	r4, r5
 1453 0062 DDE7     		b	.L80
 1454              	.LVL141:
 1455              	.L82:
1064:Core/Src/SEGGER_RTT.c ****     break;
 1456              		.loc 1 1064 5 is_stmt 1 view .LVU517
 1457              		.loc 1 1074 1 is_stmt 0 view .LVU518
 1458 0064 BDE83840 		pop	{r3, r4, r5, lr}
 1459              		.cfi_restore 14
 1460              		.cfi_restore 5
 1461              		.cfi_restore 4
 1462              		.cfi_restore 3
 1463              		.cfi_def_cfa_offset 0
1064:Core/Src/SEGGER_RTT.c ****     break;
 1464              		.loc 1 1064 14 view .LVU519
 1465 0068 FFF7FEBF 		b	_WriteBlocking
 1466              	.LVL142:
 1467              	.L92:
1064:Core/Src/SEGGER_RTT.c ****     break;
 1468              		.loc 1 1064 14 view .LVU520
 1469              		.align	2
 1470              	.L91:
 1471 006c 00000000 		.word	.LANCHOR0
 1472              		.cfi_endproc
 1473              	.LFE10:
 1475              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1476              		.align	1
 1477              		.p2align 2,,3
 1478              		.global	SEGGER_RTT_WriteNoLock
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1483              	SEGGER_RTT_WriteNoLock:
 1484              	.LVL143:
 1485              	.LFB11:
1075:Core/Src/SEGGER_RTT.c **** 
1076:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1077:Core/Src/SEGGER_RTT.c **** *
1078:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1079:Core/Src/SEGGER_RTT.c **** *
1080:Core/Src/SEGGER_RTT.c **** *  Function description
1081:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1082:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1083:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1084:Core/Src/SEGGER_RTT.c **** *
1085:Core/Src/SEGGER_RTT.c **** *  Parameters
1086:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1087:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1088:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1089:Core/Src/SEGGER_RTT.c **** *
1090:Core/Src/SEGGER_RTT.c **** *  Return value
1091:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1092:Core/Src/SEGGER_RTT.c **** *
1093:Core/Src/SEGGER_RTT.c **** *  Notes
1094:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 52


1095:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1096:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1097:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1098:Core/Src/SEGGER_RTT.c **** */
1099:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1486              		.loc 1 1099 95 is_stmt 1 view -0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 0
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
1100:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1490              		.loc 1 1100 3 view .LVU522
1101:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1491              		.loc 1 1101 3 view .LVU523
1102:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1492              		.loc 1 1102 3 view .LVU524
1103:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1493              		.loc 1 1103 3 view .LVU525
1104:Core/Src/SEGGER_RTT.c ****   //
1105:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1106:Core/Src/SEGGER_RTT.c ****   //
1107:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1494              		.loc 1 1107 3 view .LVU526
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1495              		.loc 1 1099 95 is_stmt 0 view .LVU527
 1496 0000 38B5     		push	{r3, r4, r5, lr}
 1497              		.cfi_def_cfa_offset 16
 1498              		.cfi_offset 3, -16
 1499              		.cfi_offset 4, -12
 1500              		.cfi_offset 5, -8
 1501              		.cfi_offset 14, -4
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1502              		.loc 1 1108 9 view .LVU528
 1503 0002 204B     		ldr	r3, .L104
1109:Core/Src/SEGGER_RTT.c ****   //
1110:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1111:Core/Src/SEGGER_RTT.c ****   //
1112:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1504              		.loc 1 1112 16 view .LVU529
 1505 0004 00EB4004 		add	r4, r0, r0, lsl #1
 1506 0008 03EBC40E 		add	lr, r3, r4, lsl #3
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1507              		.loc 1 1108 9 view .LVU530
 1508 000c 0130     		adds	r0, r0, #1
 1509              	.LVL144:
 1510              		.loc 1 1112 16 view .LVU531
 1511 000e DEF82C40 		ldr	r4, [lr, #44]
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1512              		.loc 1 1108 9 view .LVU532
 1513 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1514              	.LVL145:
 1515              		.loc 1 1112 3 view .LVU533
 1516 0016 012C     		cmp	r4, #1
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1517              		.loc 1 1099 95 view .LVU534
 1518 0018 8C46     		mov	ip, r1
 1519              	.LVL146:
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 53


 1520              		.loc 1 1108 3 is_stmt 1 view .LVU535
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1521              		.loc 1 1099 95 is_stmt 0 view .LVU536
 1522 001a 1546     		mov	r5, r2
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1523              		.loc 1 1108 9 view .LVU537
 1524 001c 03EBC000 		add	r0, r3, r0, lsl #3
 1525              	.LVL147:
 1526              		.loc 1 1112 3 is_stmt 1 view .LVU538
 1527 0020 05D0     		beq	.L94
 1528 0022 022C     		cmp	r4, #2
 1529 0024 2AD0     		beq	.L95
 1530 0026 B4B1     		cbz	r4, .L103
 1531 0028 0024     		movs	r4, #0
 1532              	.LVL148:
1113:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1114:Core/Src/SEGGER_RTT.c ****     //
1115:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1116:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1117:Core/Src/SEGGER_RTT.c ****     //
1118:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1119:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1120:Core/Src/SEGGER_RTT.c ****       Status = 0u;
1121:Core/Src/SEGGER_RTT.c ****     } else {
1122:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1123:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1124:Core/Src/SEGGER_RTT.c ****     }
1125:Core/Src/SEGGER_RTT.c ****     break;
1126:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1127:Core/Src/SEGGER_RTT.c ****     //
1128:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1129:Core/Src/SEGGER_RTT.c ****     //
1130:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1131:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1132:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1133:Core/Src/SEGGER_RTT.c ****     break;
1134:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1135:Core/Src/SEGGER_RTT.c ****     //
1136:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1137:Core/Src/SEGGER_RTT.c ****     //
1138:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1139:Core/Src/SEGGER_RTT.c ****     break;
1140:Core/Src/SEGGER_RTT.c ****   default:
1141:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1142:Core/Src/SEGGER_RTT.c ****     break;
1143:Core/Src/SEGGER_RTT.c ****   }
1144:Core/Src/SEGGER_RTT.c ****   //
1145:Core/Src/SEGGER_RTT.c ****   // Finish up.
1146:Core/Src/SEGGER_RTT.c ****   //
1147:Core/Src/SEGGER_RTT.c ****   return Status;
 1533              		.loc 1 1147 3 view .LVU539
 1534              	.L93:
1148:Core/Src/SEGGER_RTT.c **** }
 1535              		.loc 1 1148 1 is_stmt 0 view .LVU540
 1536 002a 2046     		mov	r0, r4
 1537 002c 38BD     		pop	{r3, r4, r5, pc}
 1538              	.LVL149:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 54


 1539              	.L94:
1130:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1540              		.loc 1 1130 5 is_stmt 1 view .LVU541
 1541              	.LBB37:
 1542              	.LBI37:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1543              		.loc 1 526 17 view .LVU542
 1544              	.LBB38:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1545              		.loc 1 527 3 view .LVU543
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1546              		.loc 1 528 3 view .LVU544
 529:Core/Src/SEGGER_RTT.c ****   //
 1547              		.loc 1 529 3 view .LVU545
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1548              		.loc 1 534 3 view .LVU546
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1549              		.loc 1 534 9 is_stmt 0 view .LVU547
 1550 002e DEF82830 		ldr	r3, [lr, #40]
 1551              	.LVL150:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1552              		.loc 1 535 3 is_stmt 1 view .LVU548
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1553              		.loc 1 535 9 is_stmt 0 view .LVU549
 1554 0032 DEF82440 		ldr	r4, [lr, #36]
 1555              	.LVL151:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1556              		.loc 1 536 3 is_stmt 1 view .LVU550
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1557              		.loc 1 536 6 is_stmt 0 view .LVU551
 1558 0036 A342     		cmp	r3, r4
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1559              		.loc 1 537 5 is_stmt 1 view .LVU552
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1560              		.loc 1 537 7 is_stmt 0 view .LVU553
 1561 0038 9CBF     		itt	ls
 1562 003a DEF82010 		ldrls	r1, [lr, #32]
 1563              	.LVL152:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1564              		.loc 1 537 7 view .LVU554
 1565 003e 5B18     		addls	r3, r3, r1
 1566              	.LVL153:
 539:Core/Src/SEGGER_RTT.c ****   }
 1567              		.loc 1 539 5 is_stmt 1 view .LVU555
 539:Core/Src/SEGGER_RTT.c ****   }
 1568              		.loc 1 539 7 is_stmt 0 view .LVU556
 1569 0040 013B     		subs	r3, r3, #1
 1570 0042 1C1B     		subs	r4, r3, r4
 1571              	.LVL154:
 541:Core/Src/SEGGER_RTT.c **** }
 1572              		.loc 1 541 3 is_stmt 1 view .LVU557
 541:Core/Src/SEGGER_RTT.c **** }
 1573              		.loc 1 541 3 is_stmt 0 view .LVU558
 1574              	.LBE38:
 1575              	.LBE37:
1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1576              		.loc 1 1131 5 is_stmt 1 view .LVU559
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 55


1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1577              		.loc 1 1131 12 is_stmt 0 view .LVU560
 1578 0044 9442     		cmp	r4, r2
 1579 0046 28BF     		it	cs
 1580 0048 1446     		movcs	r4, r2
 1581              	.LVL155:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1582              		.loc 1 1132 5 is_stmt 1 view .LVU561
 1583 004a 2246     		mov	r2, r4
 1584              	.LVL156:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1585              		.loc 1 1132 5 is_stmt 0 view .LVU562
 1586 004c 6146     		mov	r1, ip
 1587 004e FFF7FEFF 		bl	_WriteNoCheck
 1588              	.LVL157:
1133:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1589              		.loc 1 1133 5 is_stmt 1 view .LVU563
 1590              		.loc 1 1148 1 is_stmt 0 view .LVU564
 1591 0052 2046     		mov	r0, r4
 1592 0054 38BD     		pop	{r3, r4, r5, pc}
 1593              	.LVL158:
 1594              	.L103:
1118:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1595              		.loc 1 1118 5 is_stmt 1 view .LVU565
 1596              	.LBB39:
 1597              	.LBI39:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1598              		.loc 1 526 17 view .LVU566
 1599              	.LBB40:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1600              		.loc 1 527 3 view .LVU567
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1601              		.loc 1 528 3 view .LVU568
 529:Core/Src/SEGGER_RTT.c ****   //
 1602              		.loc 1 529 3 view .LVU569
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1603              		.loc 1 534 3 view .LVU570
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1604              		.loc 1 534 9 is_stmt 0 view .LVU571
 1605 0056 DEF82830 		ldr	r3, [lr, #40]
 1606              	.LVL159:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1607              		.loc 1 535 3 is_stmt 1 view .LVU572
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1608              		.loc 1 535 9 is_stmt 0 view .LVU573
 1609 005a DEF82420 		ldr	r2, [lr, #36]
 1610              	.LVL160:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1611              		.loc 1 536 3 is_stmt 1 view .LVU574
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1612              		.loc 1 536 6 is_stmt 0 view .LVU575
 1613 005e 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1614              		.loc 1 537 5 is_stmt 1 view .LVU576
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1615              		.loc 1 537 7 is_stmt 0 view .LVU577
 1616 0060 9CBF     		itt	ls
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 56


 1617 0062 DEF82010 		ldrls	r1, [lr, #32]
 1618              	.LVL161:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1619              		.loc 1 537 7 view .LVU578
 1620 0066 5B18     		addls	r3, r3, r1
 1621              	.LVL162:
 539:Core/Src/SEGGER_RTT.c ****   }
 1622              		.loc 1 539 5 is_stmt 1 view .LVU579
 539:Core/Src/SEGGER_RTT.c ****   }
 1623              		.loc 1 539 7 is_stmt 0 view .LVU580
 1624 0068 013B     		subs	r3, r3, #1
 1625 006a 9A1A     		subs	r2, r3, r2
 1626              	.LVL163:
 541:Core/Src/SEGGER_RTT.c **** }
 1627              		.loc 1 541 3 is_stmt 1 view .LVU581
 541:Core/Src/SEGGER_RTT.c **** }
 1628              		.loc 1 541 3 is_stmt 0 view .LVU582
 1629              	.LBE40:
 1630              	.LBE39:
1119:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1631              		.loc 1 1119 5 is_stmt 1 view .LVU583
1119:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1632              		.loc 1 1119 8 is_stmt 0 view .LVU584
 1633 006c 9542     		cmp	r5, r2
 1634 006e DCD8     		bhi	.L93
1122:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1635              		.loc 1 1122 7 is_stmt 1 view .LVU585
 1636              	.LVL164:
1123:Core/Src/SEGGER_RTT.c ****     }
 1637              		.loc 1 1123 7 view .LVU586
 1638 0070 2A46     		mov	r2, r5
 1639              	.LVL165:
1123:Core/Src/SEGGER_RTT.c ****     }
 1640              		.loc 1 1123 7 is_stmt 0 view .LVU587
 1641 0072 6146     		mov	r1, ip
 1642 0074 FFF7FEFF 		bl	_WriteNoCheck
 1643              	.LVL166:
1123:Core/Src/SEGGER_RTT.c ****     }
 1644              		.loc 1 1123 7 view .LVU588
 1645 0078 2C46     		mov	r4, r5
 1646 007a D6E7     		b	.L93
 1647              	.LVL167:
 1648              	.L95:
1138:Core/Src/SEGGER_RTT.c ****     break;
 1649              		.loc 1 1138 5 is_stmt 1 view .LVU589
 1650              		.loc 1 1148 1 is_stmt 0 view .LVU590
 1651 007c BDE83840 		pop	{r3, r4, r5, lr}
 1652              		.cfi_restore 14
 1653              		.cfi_restore 5
 1654              		.cfi_restore 4
 1655              		.cfi_restore 3
 1656              		.cfi_def_cfa_offset 0
1138:Core/Src/SEGGER_RTT.c ****     break;
 1657              		.loc 1 1138 14 view .LVU591
 1658 0080 FFF7FEBF 		b	_WriteBlocking
 1659              	.LVL168:
 1660              	.L105:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 57


1138:Core/Src/SEGGER_RTT.c ****     break;
 1661              		.loc 1 1138 14 view .LVU592
 1662              		.align	2
 1663              	.L104:
 1664 0084 00000000 		.word	.LANCHOR0
 1665              		.cfi_endproc
 1666              	.LFE11:
 1668              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1669              		.align	1
 1670              		.p2align 2,,3
 1671              		.global	SEGGER_RTT_WriteDownBuffer
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1676              	SEGGER_RTT_WriteDownBuffer:
 1677              	.LVL169:
 1678              	.LFB12:
1149:Core/Src/SEGGER_RTT.c **** 
1150:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1151:Core/Src/SEGGER_RTT.c **** *
1152:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1153:Core/Src/SEGGER_RTT.c **** *
1154:Core/Src/SEGGER_RTT.c **** *  Function description
1155:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1156:Core/Src/SEGGER_RTT.c **** *
1157:Core/Src/SEGGER_RTT.c **** *  Parameters
1158:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1159:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1160:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1161:Core/Src/SEGGER_RTT.c **** *
1162:Core/Src/SEGGER_RTT.c **** *  Return value
1163:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1164:Core/Src/SEGGER_RTT.c **** *
1165:Core/Src/SEGGER_RTT.c **** *  Notes
1166:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1167:Core/Src/SEGGER_RTT.c **** *
1168:Core/Src/SEGGER_RTT.c **** *  Additional information
1169:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1170:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1171:Core/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1172:Core/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1173:Core/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1174:Core/Src/SEGGER_RTT.c **** */
1175:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1679              		.loc 1 1175 99 is_stmt 1 view -0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 8
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
1176:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1683              		.loc 1 1176 3 view .LVU594
 1684              	.LBB41:
1177:Core/Src/SEGGER_RTT.c **** 
1178:Core/Src/SEGGER_RTT.c ****   INIT();
 1685              		.loc 1 1178 3 view .LVU595
 1686              		.loc 1 1178 3 view .LVU596
 1687              		.loc 1 1178 3 view .LVU597
 1688              		.loc 1 1178 3 view .LVU598
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 58


 1689              	.LBE41:
1175:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1690              		.loc 1 1175 99 is_stmt 0 view .LVU599
 1691 0000 30B5     		push	{r4, r5, lr}
 1692              		.cfi_def_cfa_offset 12
 1693              		.cfi_offset 4, -12
 1694              		.cfi_offset 5, -8
 1695              		.cfi_offset 14, -4
 1696              	.LBB42:
 1697              		.loc 1 1178 3 view .LVU600
 1698 0002 0C4B     		ldr	r3, .L110
 1699 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1700              	.LBE42:
1175:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1701              		.loc 1 1175 99 view .LVU601
 1702 0006 83B0     		sub	sp, sp, #12
 1703              		.cfi_def_cfa_offset 24
1175:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1704              		.loc 1 1175 99 view .LVU602
 1705 0008 0C46     		mov	r4, r1
 1706              	.LBB43:
 1707              		.loc 1 1178 3 view .LVU603
 1708 000a 63B1     		cbz	r3, .L109
 1709              	.LVL170:
 1710              	.L107:
 1711              		.loc 1 1178 3 is_stmt 1 discriminator 3 view .LVU604
 1712              	.LBE43:
 1713              		.loc 1 1178 9 discriminator 3 view .LVU605
 1714              	.LBB44:
1179:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1715              		.loc 1 1179 3 discriminator 3 view .LVU606
 1716              		.loc 1 1179 3 discriminator 3 view .LVU607
 1717              		.syntax unified
 1718              	@ 1179 "Core/Src/SEGGER_RTT.c" 1
 1719 000c EFF31185 		mrs   r5, basepri  
 1720 0010 4FF02001 		mov   r1, #32       
 1721 0014 81F31188 		msr   basepri, r1  
 1722              		
 1723              	@ 0 "" 2
 1724              	.LVL171:
 1725              		.loc 1 1179 20 discriminator 3 view .LVU608
1180:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1726              		.loc 1 1180 3 discriminator 3 view .LVU609
 1727              		.loc 1 1180 12 is_stmt 0 discriminator 3 view .LVU610
 1728              		.thumb
 1729              		.syntax unified
 1730 0018 2146     		mov	r1, r4
 1731 001a FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1732              	.LVL172:
1181:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1733              		.loc 1 1181 3 is_stmt 1 discriminator 3 view .LVU611
 1734              		.syntax unified
 1735              	@ 1181 "Core/Src/SEGGER_RTT.c" 1
 1736 001e 85F31188 		msr   basepri, r5  
 1737              		
 1738              	@ 0 "" 2
 1739              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 59


 1740              		.syntax unified
 1741              	.LBE44:
 1742              		.loc 1 1181 22 discriminator 3 view .LVU612
1182:Core/Src/SEGGER_RTT.c ****   return Status;
 1743              		.loc 1 1182 3 discriminator 3 view .LVU613
1183:Core/Src/SEGGER_RTT.c **** }
 1744              		.loc 1 1183 1 is_stmt 0 discriminator 3 view .LVU614
 1745 0022 03B0     		add	sp, sp, #12
 1746              		.cfi_remember_state
 1747              		.cfi_def_cfa_offset 12
 1748              		@ sp needed
 1749 0024 30BD     		pop	{r4, r5, pc}
 1750              	.LVL173:
 1751              	.L109:
 1752              		.cfi_restore_state
 1753              		.loc 1 1183 1 discriminator 3 view .LVU615
 1754 0026 CDE90002 		strd	r0, r2, [sp]
 1755              	.LBB45:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1756              		.loc 1 1178 3 is_stmt 1 discriminator 1 view .LVU616
 1757 002a FFF7FEFF 		bl	_DoInit
 1758              	.LVL174:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1759              		.loc 1 1178 3 is_stmt 0 discriminator 1 view .LVU617
 1760 002e DDE90002 		ldrd	r0, r2, [sp]
 1761 0032 EBE7     		b	.L107
 1762              	.L111:
 1763              		.align	2
 1764              	.L110:
 1765 0034 00000000 		.word	.LANCHOR0
 1766              	.LBE45:
 1767              		.cfi_endproc
 1768              	.LFE12:
 1770              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.global	SEGGER_RTT_Write
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1778              	SEGGER_RTT_Write:
 1779              	.LVL175:
 1780              	.LFB13:
1184:Core/Src/SEGGER_RTT.c **** 
1185:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1186:Core/Src/SEGGER_RTT.c **** *
1187:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1188:Core/Src/SEGGER_RTT.c **** *
1189:Core/Src/SEGGER_RTT.c **** *  Function description
1190:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1191:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1192:Core/Src/SEGGER_RTT.c **** *
1193:Core/Src/SEGGER_RTT.c **** *  Parameters
1194:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1195:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1196:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1197:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 60


1198:Core/Src/SEGGER_RTT.c **** *  Return value
1199:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1200:Core/Src/SEGGER_RTT.c **** *
1201:Core/Src/SEGGER_RTT.c **** *  Notes
1202:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1203:Core/Src/SEGGER_RTT.c **** */
1204:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1781              		.loc 1 1204 89 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 8
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1205:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1785              		.loc 1 1205 3 view .LVU619
 1786              	.LBB48:
1206:Core/Src/SEGGER_RTT.c **** 
1207:Core/Src/SEGGER_RTT.c ****   INIT();
 1787              		.loc 1 1207 3 view .LVU620
 1788              		.loc 1 1207 3 view .LVU621
 1789              		.loc 1 1207 3 view .LVU622
 1790              		.loc 1 1207 3 view .LVU623
 1791              	.LBE48:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1792              		.loc 1 1204 89 is_stmt 0 view .LVU624
 1793 0000 30B5     		push	{r4, r5, lr}
 1794              		.cfi_def_cfa_offset 12
 1795              		.cfi_offset 4, -12
 1796              		.cfi_offset 5, -8
 1797              		.cfi_offset 14, -4
 1798              	.LBB49:
 1799              		.loc 1 1207 3 view .LVU625
 1800 0002 0C4B     		ldr	r3, .L116
 1801 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1802              	.LBE49:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1803              		.loc 1 1204 89 view .LVU626
 1804 0006 83B0     		sub	sp, sp, #12
 1805              		.cfi_def_cfa_offset 24
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1806              		.loc 1 1204 89 view .LVU627
 1807 0008 0C46     		mov	r4, r1
 1808              	.LBB50:
 1809              		.loc 1 1207 3 view .LVU628
 1810 000a 63B1     		cbz	r3, .L115
 1811              	.LVL176:
 1812              	.L113:
 1813              		.loc 1 1207 3 is_stmt 1 discriminator 3 view .LVU629
 1814              	.LBE50:
 1815              		.loc 1 1207 9 discriminator 3 view .LVU630
 1816              	.LBB51:
1208:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1817              		.loc 1 1208 3 discriminator 3 view .LVU631
 1818              		.loc 1 1208 3 discriminator 3 view .LVU632
 1819              		.syntax unified
 1820              	@ 1208 "Core/Src/SEGGER_RTT.c" 1
 1821 000c EFF31185 		mrs   r5, basepri  
 1822 0010 4FF02001 		mov   r1, #32       
 1823 0014 81F31188 		msr   basepri, r1  
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 61


 1824              		
 1825              	@ 0 "" 2
 1826              	.LVL177:
 1827              		.loc 1 1208 20 discriminator 3 view .LVU633
1209:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1828              		.loc 1 1209 3 discriminator 3 view .LVU634
 1829              		.loc 1 1209 12 is_stmt 0 discriminator 3 view .LVU635
 1830              		.thumb
 1831              		.syntax unified
 1832 0018 2146     		mov	r1, r4
 1833 001a FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1834              	.LVL178:
1210:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1835              		.loc 1 1210 3 is_stmt 1 discriminator 3 view .LVU636
 1836              		.syntax unified
 1837              	@ 1210 "Core/Src/SEGGER_RTT.c" 1
 1838 001e 85F31188 		msr   basepri, r5  
 1839              		
 1840              	@ 0 "" 2
 1841              		.thumb
 1842              		.syntax unified
 1843              	.LBE51:
 1844              		.loc 1 1210 22 discriminator 3 view .LVU637
1211:Core/Src/SEGGER_RTT.c ****   return Status;
 1845              		.loc 1 1211 3 discriminator 3 view .LVU638
1212:Core/Src/SEGGER_RTT.c **** }
 1846              		.loc 1 1212 1 is_stmt 0 discriminator 3 view .LVU639
 1847 0022 03B0     		add	sp, sp, #12
 1848              		.cfi_remember_state
 1849              		.cfi_def_cfa_offset 12
 1850              		@ sp needed
 1851 0024 30BD     		pop	{r4, r5, pc}
 1852              	.LVL179:
 1853              	.L115:
 1854              		.cfi_restore_state
 1855              		.loc 1 1212 1 discriminator 3 view .LVU640
 1856 0026 CDE90002 		strd	r0, r2, [sp]
 1857              	.LBB52:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1858              		.loc 1 1207 3 is_stmt 1 discriminator 1 view .LVU641
 1859 002a FFF7FEFF 		bl	_DoInit
 1860              	.LVL180:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1861              		.loc 1 1207 3 is_stmt 0 discriminator 1 view .LVU642
 1862 002e DDE90002 		ldrd	r0, r2, [sp]
 1863 0032 EBE7     		b	.L113
 1864              	.L117:
 1865              		.align	2
 1866              	.L116:
 1867 0034 00000000 		.word	.LANCHOR0
 1868              	.LBE52:
 1869              		.cfi_endproc
 1870              	.LFE13:
 1872              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1873              		.align	1
 1874              		.p2align 2,,3
 1875              		.global	SEGGER_RTT_WriteString
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 62


 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1880              	SEGGER_RTT_WriteString:
 1881              	.LVL181:
 1882              	.LFB14:
1213:Core/Src/SEGGER_RTT.c **** 
1214:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1215:Core/Src/SEGGER_RTT.c **** *
1216:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1217:Core/Src/SEGGER_RTT.c **** *
1218:Core/Src/SEGGER_RTT.c **** *  Function description
1219:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1220:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
1221:Core/Src/SEGGER_RTT.c **** *
1222:Core/Src/SEGGER_RTT.c **** *  Parameters
1223:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1224:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1225:Core/Src/SEGGER_RTT.c **** *
1226:Core/Src/SEGGER_RTT.c **** *  Return value
1227:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1228:Core/Src/SEGGER_RTT.c **** *
1229:Core/Src/SEGGER_RTT.c **** *  Notes
1230:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1231:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1232:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1233:Core/Src/SEGGER_RTT.c **** */
1234:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1883              		.loc 1 1234 70 is_stmt 1 view -0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 8
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
1235:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1887              		.loc 1 1235 3 view .LVU644
1236:Core/Src/SEGGER_RTT.c **** 
1237:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1888              		.loc 1 1237 3 view .LVU645
1234:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1889              		.loc 1 1234 70 is_stmt 0 view .LVU646
 1890 0000 70B5     		push	{r4, r5, r6, lr}
 1891              		.cfi_def_cfa_offset 16
 1892              		.cfi_offset 4, -16
 1893              		.cfi_offset 5, -12
 1894              		.cfi_offset 6, -8
 1895              		.cfi_offset 14, -4
 1896 0002 0546     		mov	r5, r0
 1897 0004 82B0     		sub	sp, sp, #8
 1898              		.cfi_def_cfa_offset 24
 1899              		.loc 1 1237 9 view .LVU647
 1900 0006 0846     		mov	r0, r1
 1901              	.LVL182:
1234:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1902              		.loc 1 1234 70 view .LVU648
 1903 0008 0C46     		mov	r4, r1
 1904              		.loc 1 1237 9 view .LVU649
 1905 000a FFF7FEFF 		bl	strlen
 1906              	.LVL183:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 63


 1907              	.LBB57:
 1908              	.LBB58:
 1909              	.LBB59:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1910              		.loc 1 1207 3 view .LVU650
 1911 000e 0B4B     		ldr	r3, .L122
 1912 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1913              	.LBE59:
 1914              	.LBE58:
 1915              	.LBE57:
 1916              		.loc 1 1237 9 view .LVU651
 1917 0012 0246     		mov	r2, r0
 1918              	.LVL184:
1238:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1919              		.loc 1 1238 3 is_stmt 1 view .LVU652
 1920              	.LBB65:
 1921              	.LBI57:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1922              		.loc 1 1204 10 view .LVU653
 1923              	.LBB63:
1205:Core/Src/SEGGER_RTT.c **** 
 1924              		.loc 1 1205 3 view .LVU654
 1925              	.LBB60:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1926              		.loc 1 1207 3 view .LVU655
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1927              		.loc 1 1207 3 view .LVU656
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1928              		.loc 1 1207 3 view .LVU657
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1929              		.loc 1 1207 3 view .LVU658
 1930 0014 6BB1     		cbz	r3, .L121
 1931              	.LVL185:
 1932              	.L119:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1933              		.loc 1 1207 3 view .LVU659
 1934              	.LBE60:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1935              		.loc 1 1207 9 view .LVU660
 1936              	.LBB61:
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1937              		.loc 1 1208 3 view .LVU661
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1938              		.loc 1 1208 3 view .LVU662
 1939              		.syntax unified
 1940              	@ 1208 "Core/Src/SEGGER_RTT.c" 1
 1941 0016 EFF31186 		mrs   r6, basepri  
 1942 001a 4FF02001 		mov   r1, #32       
 1943 001e 81F31188 		msr   basepri, r1  
 1944              		
 1945              	@ 0 "" 2
 1946              	.LVL186:
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1947              		.loc 1 1208 20 view .LVU663
1209:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1948              		.loc 1 1209 3 view .LVU664
1209:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 64


 1949              		.loc 1 1209 12 is_stmt 0 view .LVU665
 1950              		.thumb
 1951              		.syntax unified
 1952 0022 2146     		mov	r1, r4
 1953 0024 2846     		mov	r0, r5
 1954 0026 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1955              	.LVL187:
1210:Core/Src/SEGGER_RTT.c ****   return Status;
 1956              		.loc 1 1210 3 is_stmt 1 view .LVU666
 1957              		.syntax unified
 1958              	@ 1210 "Core/Src/SEGGER_RTT.c" 1
 1959 002a 86F31188 		msr   basepri, r6  
 1960              		
 1961              	@ 0 "" 2
 1962              		.thumb
 1963              		.syntax unified
 1964              	.LBE61:
1210:Core/Src/SEGGER_RTT.c ****   return Status;
 1965              		.loc 1 1210 22 view .LVU667
1211:Core/Src/SEGGER_RTT.c **** }
 1966              		.loc 1 1211 3 view .LVU668
 1967              	.LVL188:
1211:Core/Src/SEGGER_RTT.c **** }
 1968              		.loc 1 1211 3 is_stmt 0 view .LVU669
 1969              	.LBE63:
 1970              	.LBE65:
1239:Core/Src/SEGGER_RTT.c **** }
 1971              		.loc 1 1239 1 view .LVU670
 1972 002e 02B0     		add	sp, sp, #8
 1973              		.cfi_remember_state
 1974              		.cfi_def_cfa_offset 16
 1975              		@ sp needed
 1976 0030 70BD     		pop	{r4, r5, r6, pc}
 1977              	.LVL189:
 1978              	.L121:
 1979              		.cfi_restore_state
 1980              		.loc 1 1239 1 view .LVU671
 1981 0032 0190     		str	r0, [sp, #4]
 1982              	.LBB66:
 1983              	.LBB64:
 1984              	.LBB62:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1985              		.loc 1 1207 3 is_stmt 1 view .LVU672
 1986 0034 FFF7FEFF 		bl	_DoInit
 1987              	.LVL190:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1988              		.loc 1 1207 3 is_stmt 0 view .LVU673
 1989 0038 019A     		ldr	r2, [sp, #4]
 1990 003a ECE7     		b	.L119
 1991              	.L123:
 1992              		.align	2
 1993              	.L122:
 1994 003c 00000000 		.word	.LANCHOR0
 1995              	.LBE62:
 1996              	.LBE64:
 1997              	.LBE66:
 1998              		.cfi_endproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 65


 1999              	.LFE14:
 2001              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 2002              		.align	1
 2003              		.p2align 2,,3
 2004              		.global	SEGGER_RTT_PutCharSkipNoLock
 2005              		.syntax unified
 2006              		.thumb
 2007              		.thumb_func
 2009              	SEGGER_RTT_PutCharSkipNoLock:
 2010              	.LVL191:
 2011              	.LFB15:
1240:Core/Src/SEGGER_RTT.c **** 
1241:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1242:Core/Src/SEGGER_RTT.c **** *
1243:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1244:Core/Src/SEGGER_RTT.c **** *
1245:Core/Src/SEGGER_RTT.c **** *  Function description
1246:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1247:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1248:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1249:Core/Src/SEGGER_RTT.c **** *
1250:Core/Src/SEGGER_RTT.c **** *  Parameters
1251:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1252:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1253:Core/Src/SEGGER_RTT.c **** *
1254:Core/Src/SEGGER_RTT.c **** *  Return value
1255:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1256:Core/Src/SEGGER_RTT.c **** *
1257:Core/Src/SEGGER_RTT.c **** *  Notes
1258:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1259:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1260:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1261:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1262:Core/Src/SEGGER_RTT.c **** */
1263:Core/Src/SEGGER_RTT.c **** 
1264:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 2012              		.loc 1 1264 69 is_stmt 1 view -0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 0, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
1265:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2017              		.loc 1 1265 3 view .LVU675
1266:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2018              		.loc 1 1266 3 view .LVU676
1267:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2019              		.loc 1 1267 3 view .LVU677
1268:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2020              		.loc 1 1268 3 view .LVU678
1269:Core/Src/SEGGER_RTT.c ****   //
1270:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1271:Core/Src/SEGGER_RTT.c ****   //
1272:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2021              		.loc 1 1272 3 view .LVU679
1264:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2022              		.loc 1 1264 69 is_stmt 0 view .LVU680
 2023 0000 F0B4     		push	{r4, r5, r6, r7}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 66


 2024              		.cfi_def_cfa_offset 16
 2025              		.cfi_offset 4, -16
 2026              		.cfi_offset 5, -12
 2027              		.cfi_offset 6, -8
 2028              		.cfi_offset 7, -4
1273:Core/Src/SEGGER_RTT.c ****   //
1274:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1275:Core/Src/SEGGER_RTT.c ****   //
1276:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2029              		.loc 1 1276 16 view .LVU681
 2030 0002 0F4C     		ldr	r4, .L129
 2031              	.LVL192:
 2032              		.loc 1 1276 3 is_stmt 1 view .LVU682
 2033              		.loc 1 1276 16 is_stmt 0 view .LVU683
 2034 0004 00EB4003 		add	r3, r0, r0, lsl #1
 2035 0008 04EBC303 		add	r3, r4, r3, lsl #3
 2036 000c 5D6A     		ldr	r5, [r3, #36]
1277:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
1278:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2037              		.loc 1 1278 11 view .LVU684
 2038 000e 1F6A     		ldr	r7, [r3, #32]
1279:Core/Src/SEGGER_RTT.c ****   }
1280:Core/Src/SEGGER_RTT.c ****   //
1281:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1282:Core/Src/SEGGER_RTT.c ****   //
1283:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2039              		.loc 1 1283 21 view .LVU685
 2040 0010 9E6A     		ldr	r6, [r3, #40]
1276:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2041              		.loc 1 1276 9 view .LVU686
 2042 0012 6A1C     		adds	r2, r5, #1
 2043              	.LVL193:
1277:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2044              		.loc 1 1277 3 is_stmt 1 view .LVU687
1278:Core/Src/SEGGER_RTT.c ****   }
 2045              		.loc 1 1278 11 is_stmt 0 view .LVU688
 2046 0014 9742     		cmp	r7, r2
 2047 0016 08BF     		it	eq
 2048 0018 0022     		moveq	r2, #0
 2049              	.LVL194:
 2050              		.loc 1 1283 3 is_stmt 1 view .LVU689
 2051              		.loc 1 1283 6 is_stmt 0 view .LVU690
 2052 001a 9642     		cmp	r6, r2
 2053 001c 0CD0     		beq	.L127
1284:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2054              		.loc 1 1284 5 is_stmt 1 view .LVU691
 2055              		.loc 1 1284 18 is_stmt 0 view .LVU692
 2056 001e 0130     		adds	r0, r0, #1
 2057              	.LVL195:
 2058              		.loc 1 1284 18 view .LVU693
 2059 0020 00EB4000 		add	r0, r0, r0, lsl #1
 2060              	.LVL196:
 2061              		.loc 1 1284 18 view .LVU694
 2062 0024 04EBC004 		add	r4, r4, r0, lsl #3
 2063              		.loc 1 1284 10 view .LVU695
 2064 0028 6068     		ldr	r0, [r4, #4]
 2065              	.LVL197:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 67


1285:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2066              		.loc 1 1285 5 is_stmt 1 view .LVU696
 2067              		.loc 1 1285 11 is_stmt 0 view .LVU697
 2068 002a 4155     		strb	r1, [r0, r5]
1286:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2069              		.loc 1 1286 5 is_stmt 1 view .LVU698
 2070              		.syntax unified
 2071              	@ 1286 "Core/Src/SEGGER_RTT.c" 1
 2072 002c BFF35F8F 		dmb
 2073              	
 2074              	@ 0 "" 2
 2075              		.loc 1 1286 15 view .LVU699
1287:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2076              		.loc 1 1287 5 view .LVU700
1288:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2077              		.loc 1 1288 12 is_stmt 0 view .LVU701
 2078              		.thumb
 2079              		.syntax unified
 2080 0030 0120     		movs	r0, #1
 2081              	.LVL198:
1289:Core/Src/SEGGER_RTT.c ****   } else {
1290:Core/Src/SEGGER_RTT.c ****     Status = 0;
1291:Core/Src/SEGGER_RTT.c ****   }
1292:Core/Src/SEGGER_RTT.c ****   //
1293:Core/Src/SEGGER_RTT.c ****   return Status;
1294:Core/Src/SEGGER_RTT.c **** }
 2082              		.loc 1 1294 1 view .LVU702
 2083 0032 F0BC     		pop	{r4, r5, r6, r7}
 2084              		.cfi_remember_state
 2085              		.cfi_restore 7
 2086              		.cfi_restore 6
 2087              		.cfi_restore 5
 2088              		.cfi_restore 4
 2089              		.cfi_def_cfa_offset 0
1287:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2090              		.loc 1 1287 18 view .LVU703
 2091 0034 5A62     		str	r2, [r3, #36]
1288:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2092              		.loc 1 1288 5 is_stmt 1 view .LVU704
 2093              	.LVL199:
 2094              		.loc 1 1294 1 is_stmt 0 view .LVU705
 2095 0036 7047     		bx	lr
 2096              	.LVL200:
 2097              	.L127:
 2098              		.cfi_restore_state
1290:Core/Src/SEGGER_RTT.c ****   }
 2099              		.loc 1 1290 12 view .LVU706
 2100 0038 0020     		movs	r0, #0
 2101              	.LVL201:
1293:Core/Src/SEGGER_RTT.c **** }
 2102              		.loc 1 1293 3 is_stmt 1 view .LVU707
 2103              		.loc 1 1294 1 is_stmt 0 view .LVU708
 2104 003a F0BC     		pop	{r4, r5, r6, r7}
 2105              		.cfi_restore 7
 2106              		.cfi_restore 6
 2107              		.cfi_restore 5
 2108              		.cfi_restore 4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 68


 2109              		.cfi_def_cfa_offset 0
 2110 003c 7047     		bx	lr
 2111              	.L130:
 2112 003e 00BF     		.align	2
 2113              	.L129:
 2114 0040 00000000 		.word	.LANCHOR0
 2115              		.cfi_endproc
 2116              	.LFE15:
 2118              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 2119              		.align	1
 2120              		.p2align 2,,3
 2121              		.global	SEGGER_RTT_PutCharSkip
 2122              		.syntax unified
 2123              		.thumb
 2124              		.thumb_func
 2126              	SEGGER_RTT_PutCharSkip:
 2127              	.LVL202:
 2128              	.LFB16:
1295:Core/Src/SEGGER_RTT.c **** 
1296:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1297:Core/Src/SEGGER_RTT.c **** *
1298:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1299:Core/Src/SEGGER_RTT.c **** *
1300:Core/Src/SEGGER_RTT.c **** *  Function description
1301:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1302:Core/Src/SEGGER_RTT.c **** *
1303:Core/Src/SEGGER_RTT.c **** *  Parameters
1304:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1305:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1306:Core/Src/SEGGER_RTT.c **** *
1307:Core/Src/SEGGER_RTT.c **** *  Return value
1308:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1309:Core/Src/SEGGER_RTT.c **** *
1310:Core/Src/SEGGER_RTT.c **** *  Notes
1311:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1312:Core/Src/SEGGER_RTT.c **** */
1313:Core/Src/SEGGER_RTT.c **** 
1314:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 2129              		.loc 1 1314 63 is_stmt 1 view -0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
1315:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2133              		.loc 1 1315 3 view .LVU710
1316:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2134              		.loc 1 1316 3 view .LVU711
1317:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2135              		.loc 1 1317 3 view .LVU712
1318:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2136              		.loc 1 1318 3 view .LVU713
 2137              	.LBB67:
1319:Core/Src/SEGGER_RTT.c ****   //
1320:Core/Src/SEGGER_RTT.c ****   // Prepare
1321:Core/Src/SEGGER_RTT.c ****   //
1322:Core/Src/SEGGER_RTT.c ****   INIT();
 2138              		.loc 1 1322 3 view .LVU714
 2139              		.loc 1 1322 3 view .LVU715
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 69


 2140              		.loc 1 1322 3 view .LVU716
 2141              		.loc 1 1322 3 view .LVU717
 2142              	.LBE67:
1314:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2143              		.loc 1 1314 63 is_stmt 0 view .LVU718
 2144 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2145              		.cfi_def_cfa_offset 24
 2146              		.cfi_offset 3, -24
 2147              		.cfi_offset 4, -20
 2148              		.cfi_offset 5, -16
 2149              		.cfi_offset 6, -12
 2150              		.cfi_offset 7, -8
 2151              		.cfi_offset 14, -4
 2152              	.LBB68:
 2153              		.loc 1 1322 3 view .LVU719
 2154 0002 164D     		ldr	r5, .L138
 2155 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2156              	.LBE68:
1314:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2157              		.loc 1 1314 63 view .LVU720
 2158 0006 0446     		mov	r4, r0
 2159 0008 0E46     		mov	r6, r1
 2160              	.LBB69:
 2161              		.loc 1 1322 3 view .LVU721
 2162 000a 23B3     		cbz	r3, .L137
 2163              	.LVL203:
 2164              	.L132:
 2165              		.loc 1 1322 3 is_stmt 1 discriminator 3 view .LVU722
 2166              	.LBE69:
 2167              		.loc 1 1322 9 discriminator 3 view .LVU723
 2168              	.LBB70:
1323:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2169              		.loc 1 1323 3 discriminator 3 view .LVU724
 2170              		.loc 1 1323 3 discriminator 3 view .LVU725
 2171              		.syntax unified
 2172              	@ 1323 "Core/Src/SEGGER_RTT.c" 1
 2173 000c EFF3118C 		mrs   ip, basepri  
 2174 0010 4FF02001 		mov   r1, #32       
 2175 0014 81F31188 		msr   basepri, r1  
 2176              		
 2177              	@ 0 "" 2
 2178              	.LVL204:
 2179              		.loc 1 1323 20 discriminator 3 view .LVU726
1324:Core/Src/SEGGER_RTT.c ****   //
1325:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1326:Core/Src/SEGGER_RTT.c ****   //
1327:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2180              		.loc 1 1327 3 discriminator 3 view .LVU727
1328:Core/Src/SEGGER_RTT.c ****   //
1329:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1330:Core/Src/SEGGER_RTT.c ****   //
1331:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2181              		.loc 1 1331 3 discriminator 3 view .LVU728
 2182              		.loc 1 1331 16 is_stmt 0 discriminator 3 view .LVU729
 2183              		.thumb
 2184              		.syntax unified
 2185 0018 04EB4403 		add	r3, r4, r4, lsl #1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 70


 2186 001c 05EBC303 		add	r3, r5, r3, lsl #3
1332:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2187              		.loc 1 1332 6 discriminator 3 view .LVU730
 2188 0020 D3E90801 		ldrd	r0, r1, [r3, #32]
1333:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1334:Core/Src/SEGGER_RTT.c ****   }
1335:Core/Src/SEGGER_RTT.c ****   //
1336:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1337:Core/Src/SEGGER_RTT.c ****   //
1338:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2189              		.loc 1 1338 21 discriminator 3 view .LVU731
 2190 0024 9F6A     		ldr	r7, [r3, #40]
1331:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2191              		.loc 1 1331 9 discriminator 3 view .LVU732
 2192 0026 4A1C     		adds	r2, r1, #1
 2193              	.LVL205:
1332:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2194              		.loc 1 1332 3 is_stmt 1 discriminator 3 view .LVU733
1333:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2195              		.loc 1 1333 11 is_stmt 0 discriminator 3 view .LVU734
 2196 0028 9042     		cmp	r0, r2
 2197 002a 08BF     		it	eq
 2198 002c 0022     		moveq	r2, #0
 2199              	.LVL206:
 2200              		.loc 1 1338 3 is_stmt 1 discriminator 3 view .LVU735
 2201              		.loc 1 1338 6 is_stmt 0 discriminator 3 view .LVU736
 2202 002e 9742     		cmp	r7, r2
 2203 0030 0DD0     		beq	.L135
1339:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2204              		.loc 1 1339 5 is_stmt 1 view .LVU737
 2205              		.loc 1 1339 19 is_stmt 0 view .LVU738
 2206 0032 0134     		adds	r4, r4, #1
 2207              	.LVL207:
 2208              		.loc 1 1339 19 view .LVU739
 2209 0034 04EB4404 		add	r4, r4, r4, lsl #1
 2210              	.LVL208:
 2211              		.loc 1 1339 19 view .LVU740
 2212 0038 05EBC405 		add	r5, r5, r4, lsl #3
 2213              		.loc 1 1339 11 view .LVU741
 2214 003c 6868     		ldr	r0, [r5, #4]
 2215              	.LVL209:
1340:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2216              		.loc 1 1340 5 is_stmt 1 view .LVU742
 2217              		.loc 1 1340 11 is_stmt 0 view .LVU743
 2218 003e 4654     		strb	r6, [r0, r1]
1341:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2219              		.loc 1 1341 5 is_stmt 1 view .LVU744
 2220              		.syntax unified
 2221              	@ 1341 "Core/Src/SEGGER_RTT.c" 1
 2222 0040 BFF35F8F 		dmb
 2223              	
 2224              	@ 0 "" 2
 2225              		.loc 1 1341 15 view .LVU745
1342:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2226              		.loc 1 1342 5 view .LVU746
1343:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2227              		.loc 1 1343 12 is_stmt 0 view .LVU747
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 71


 2228              		.thumb
 2229              		.syntax unified
 2230 0044 0120     		movs	r0, #1
 2231              	.LVL210:
1342:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2232              		.loc 1 1342 18 view .LVU748
 2233 0046 5A62     		str	r2, [r3, #36]
 2234              		.loc 1 1343 5 is_stmt 1 view .LVU749
 2235              	.LVL211:
1344:Core/Src/SEGGER_RTT.c ****   } else {
1345:Core/Src/SEGGER_RTT.c ****     Status = 0;
1346:Core/Src/SEGGER_RTT.c ****   }
1347:Core/Src/SEGGER_RTT.c ****   //
1348:Core/Src/SEGGER_RTT.c ****   // Finish up.
1349:Core/Src/SEGGER_RTT.c ****   //
1350:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2236              		.loc 1 1350 3 view .LVU750
 2237              		.syntax unified
 2238              	@ 1350 "Core/Src/SEGGER_RTT.c" 1
 2239 0048 8CF31188 		msr   basepri, ip  
 2240              		
 2241              	@ 0 "" 2
 2242              		.thumb
 2243              		.syntax unified
 2244              	.LBE70:
 2245              		.loc 1 1350 22 view .LVU751
1351:Core/Src/SEGGER_RTT.c ****   //
1352:Core/Src/SEGGER_RTT.c ****   return Status;
 2246              		.loc 1 1352 3 view .LVU752
1353:Core/Src/SEGGER_RTT.c **** }
 2247              		.loc 1 1353 1 is_stmt 0 view .LVU753
 2248 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2249              	.LVL212:
 2250              	.L135:
 2251              	.LBB71:
1345:Core/Src/SEGGER_RTT.c ****   }
 2252              		.loc 1 1345 12 view .LVU754
 2253 004e 0020     		movs	r0, #0
 2254              	.LVL213:
1350:Core/Src/SEGGER_RTT.c ****   //
 2255              		.loc 1 1350 3 is_stmt 1 view .LVU755
 2256              		.syntax unified
 2257              	@ 1350 "Core/Src/SEGGER_RTT.c" 1
 2258 0050 8CF31188 		msr   basepri, ip  
 2259              		
 2260              	@ 0 "" 2
 2261              		.thumb
 2262              		.syntax unified
 2263              	.LBE71:
1350:Core/Src/SEGGER_RTT.c ****   //
 2264              		.loc 1 1350 22 view .LVU756
1352:Core/Src/SEGGER_RTT.c **** }
 2265              		.loc 1 1352 3 view .LVU757
 2266              		.loc 1 1353 1 is_stmt 0 view .LVU758
 2267 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2268              	.LVL214:
 2269              	.L137:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 72


 2270              	.LBB72:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2271              		.loc 1 1322 3 is_stmt 1 discriminator 1 view .LVU759
 2272 0056 FFF7FEFF 		bl	_DoInit
 2273              	.LVL215:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2274              		.loc 1 1322 3 is_stmt 0 discriminator 1 view .LVU760
 2275 005a D7E7     		b	.L132
 2276              	.L139:
 2277              		.align	2
 2278              	.L138:
 2279 005c 00000000 		.word	.LANCHOR0
 2280              	.LBE72:
 2281              		.cfi_endproc
 2282              	.LFE16:
 2284              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2285              		.align	1
 2286              		.p2align 2,,3
 2287              		.global	SEGGER_RTT_PutChar
 2288              		.syntax unified
 2289              		.thumb
 2290              		.thumb_func
 2292              	SEGGER_RTT_PutChar:
 2293              	.LVL216:
 2294              	.LFB17:
1354:Core/Src/SEGGER_RTT.c **** 
1355:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1356:Core/Src/SEGGER_RTT.c **** *
1357:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1358:Core/Src/SEGGER_RTT.c **** *
1359:Core/Src/SEGGER_RTT.c **** *  Function description
1360:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1361:Core/Src/SEGGER_RTT.c **** *
1362:Core/Src/SEGGER_RTT.c **** *  Parameters
1363:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1364:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1365:Core/Src/SEGGER_RTT.c **** *
1366:Core/Src/SEGGER_RTT.c **** *  Return value
1367:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1368:Core/Src/SEGGER_RTT.c **** *
1369:Core/Src/SEGGER_RTT.c **** *  Notes
1370:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1371:Core/Src/SEGGER_RTT.c **** */
1372:Core/Src/SEGGER_RTT.c **** 
1373:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2295              		.loc 1 1373 59 is_stmt 1 view -0
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 0
 2298              		@ frame_needed = 0, uses_anonymous_args = 0
1374:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2299              		.loc 1 1374 3 view .LVU762
1375:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2300              		.loc 1 1375 3 view .LVU763
1376:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2301              		.loc 1 1376 3 view .LVU764
1377:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2302              		.loc 1 1377 3 view .LVU765
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 73


 2303              	.LBB73:
1378:Core/Src/SEGGER_RTT.c ****   //
1379:Core/Src/SEGGER_RTT.c ****   // Prepare
1380:Core/Src/SEGGER_RTT.c ****   //
1381:Core/Src/SEGGER_RTT.c ****   INIT();
 2304              		.loc 1 1381 3 view .LVU766
 2305              		.loc 1 1381 3 view .LVU767
 2306              		.loc 1 1381 3 view .LVU768
 2307              		.loc 1 1381 3 view .LVU769
 2308              	.LBE73:
1373:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2309              		.loc 1 1373 59 is_stmt 0 view .LVU770
 2310 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2311              		.cfi_def_cfa_offset 24
 2312              		.cfi_offset 3, -24
 2313              		.cfi_offset 4, -20
 2314              		.cfi_offset 5, -16
 2315              		.cfi_offset 6, -12
 2316              		.cfi_offset 7, -8
 2317              		.cfi_offset 14, -4
 2318              	.LBB74:
 2319              		.loc 1 1381 3 view .LVU771
 2320 0002 1F4D     		ldr	r5, .L151
 2321 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2322              	.LBE74:
1373:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2323              		.loc 1 1373 59 view .LVU772
 2324 0006 0446     		mov	r4, r0
 2325 0008 0E46     		mov	r6, r1
 2326              	.LBB75:
 2327              		.loc 1 1381 3 view .LVU773
 2328 000a 002B     		cmp	r3, #0
 2329 000c 34D0     		beq	.L150
 2330              	.LVL217:
 2331              	.L141:
 2332              		.loc 1 1381 3 is_stmt 1 discriminator 3 view .LVU774
 2333              	.LBE75:
 2334              		.loc 1 1381 9 discriminator 3 view .LVU775
 2335              	.LBB76:
1382:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2336              		.loc 1 1382 3 discriminator 3 view .LVU776
 2337              		.loc 1 1382 3 discriminator 3 view .LVU777
 2338              		.syntax unified
 2339              	@ 1382 "Core/Src/SEGGER_RTT.c" 1
 2340 000e EFF3118C 		mrs   ip, basepri  
 2341 0012 4FF02001 		mov   r1, #32       
 2342 0016 81F31188 		msr   basepri, r1  
 2343              		
 2344              	@ 0 "" 2
 2345              	.LVL218:
 2346              		.loc 1 1382 20 discriminator 3 view .LVU778
1383:Core/Src/SEGGER_RTT.c ****   //
1384:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1385:Core/Src/SEGGER_RTT.c ****   //
1386:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2347              		.loc 1 1386 3 discriminator 3 view .LVU779
1387:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 74


1388:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1389:Core/Src/SEGGER_RTT.c ****   //
1390:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2348              		.loc 1 1390 3 discriminator 3 view .LVU780
 2349              		.loc 1 1390 16 is_stmt 0 discriminator 3 view .LVU781
 2350              		.thumb
 2351              		.syntax unified
 2352 001a 04EB4403 		add	r3, r4, r4, lsl #1
 2353 001e 05EBC303 		add	r3, r5, r3, lsl #3
1391:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2354              		.loc 1 1391 6 discriminator 3 view .LVU782
 2355 0022 D3E90807 		ldrd	r0, r7, [r3, #32]
1392:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1393:Core/Src/SEGGER_RTT.c ****   }
1394:Core/Src/SEGGER_RTT.c ****   //
1395:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1396:Core/Src/SEGGER_RTT.c ****   //
1397:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2356              		.loc 1 1397 6 discriminator 3 view .LVU783
 2357 0026 D96A     		ldr	r1, [r3, #44]
1390:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2358              		.loc 1 1390 9 discriminator 3 view .LVU784
 2359 0028 7A1C     		adds	r2, r7, #1
 2360              	.LVL219:
1391:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2361              		.loc 1 1391 3 is_stmt 1 discriminator 3 view .LVU785
1392:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2362              		.loc 1 1392 11 is_stmt 0 discriminator 3 view .LVU786
 2363 002a 9042     		cmp	r0, r2
 2364 002c 08BF     		it	eq
 2365 002e 0022     		moveq	r2, #0
 2366              	.LVL220:
 2367              		.loc 1 1397 3 is_stmt 1 discriminator 3 view .LVU787
 2368              		.loc 1 1397 6 is_stmt 0 discriminator 3 view .LVU788
 2369 0030 0229     		cmp	r1, #2
1390:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2370              		.loc 1 1390 16 discriminator 3 view .LVU789
 2371 0032 4FEA440E 		lsl	lr, r4, #1
 2372              		.loc 1 1397 6 discriminator 3 view .LVU790
 2373 0036 14D0     		beq	.L144
 2374              	.L143:
1398:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1399:Core/Src/SEGGER_RTT.c ****       ;
1400:Core/Src/SEGGER_RTT.c ****     }
1401:Core/Src/SEGGER_RTT.c ****   }
1402:Core/Src/SEGGER_RTT.c ****   //
1403:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1404:Core/Src/SEGGER_RTT.c ****   //
1405:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2375              		.loc 1 1405 3 is_stmt 1 view .LVU791
 2376              		.loc 1 1405 21 is_stmt 0 view .LVU792
 2377 0038 0EEB0403 		add	r3, lr, r4
 2378 003c 05EBC303 		add	r3, r5, r3, lsl #3
 2379 0040 996A     		ldr	r1, [r3, #40]
 2380              		.loc 1 1405 6 view .LVU793
 2381 0042 9142     		cmp	r1, r2
 2382 0044 14D0     		beq	.L146
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 75


1406:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2383              		.loc 1 1406 5 is_stmt 1 view .LVU794
 2384              		.loc 1 1406 19 is_stmt 0 view .LVU795
 2385 0046 0134     		adds	r4, r4, #1
 2386              	.LVL221:
 2387              		.loc 1 1406 19 view .LVU796
 2388 0048 04EB4404 		add	r4, r4, r4, lsl #1
 2389              	.LVL222:
 2390              		.loc 1 1406 19 view .LVU797
 2391 004c 05EBC405 		add	r5, r5, r4, lsl #3
 2392              		.loc 1 1406 11 view .LVU798
 2393 0050 6968     		ldr	r1, [r5, #4]
 2394              	.LVL223:
1407:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2395              		.loc 1 1407 5 is_stmt 1 view .LVU799
 2396              		.loc 1 1407 11 is_stmt 0 view .LVU800
 2397 0052 CE55     		strb	r6, [r1, r7]
1408:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2398              		.loc 1 1408 5 is_stmt 1 view .LVU801
 2399              		.syntax unified
 2400              	@ 1408 "Core/Src/SEGGER_RTT.c" 1
 2401 0054 BFF35F8F 		dmb
 2402              	
 2403              	@ 0 "" 2
 2404              		.loc 1 1408 15 view .LVU802
1409:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2405              		.loc 1 1409 5 view .LVU803
1410:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2406              		.loc 1 1410 12 is_stmt 0 view .LVU804
 2407              		.thumb
 2408              		.syntax unified
 2409 0058 0120     		movs	r0, #1
1409:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2410              		.loc 1 1409 18 view .LVU805
 2411 005a 5A62     		str	r2, [r3, #36]
 2412              		.loc 1 1410 5 is_stmt 1 view .LVU806
 2413              	.LVL224:
1411:Core/Src/SEGGER_RTT.c ****   } else {
1412:Core/Src/SEGGER_RTT.c ****     Status = 0;
1413:Core/Src/SEGGER_RTT.c ****   }
1414:Core/Src/SEGGER_RTT.c ****   //
1415:Core/Src/SEGGER_RTT.c ****   // Finish up.
1416:Core/Src/SEGGER_RTT.c ****   //
1417:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2414              		.loc 1 1417 3 view .LVU807
 2415              		.syntax unified
 2416              	@ 1417 "Core/Src/SEGGER_RTT.c" 1
 2417 005c 8CF31188 		msr   basepri, ip  
 2418              		
 2419              	@ 0 "" 2
 2420              		.thumb
 2421              		.syntax unified
 2422              	.LBE76:
 2423              		.loc 1 1417 22 view .LVU808
1418:Core/Src/SEGGER_RTT.c ****   return Status;
 2424              		.loc 1 1418 3 view .LVU809
1419:Core/Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 76


 2425              		.loc 1 1419 1 is_stmt 0 view .LVU810
 2426 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2427              	.LVL225:
 2428              	.L144:
 2429              	.LBB77:
1399:Core/Src/SEGGER_RTT.c ****     }
 2430              		.loc 1 1399 7 is_stmt 1 discriminator 1 view .LVU811
1398:Core/Src/SEGGER_RTT.c ****       ;
 2431              		.loc 1 1398 18 discriminator 1 view .LVU812
1398:Core/Src/SEGGER_RTT.c ****       ;
 2432              		.loc 1 1398 26 is_stmt 0 discriminator 1 view .LVU813
 2433 0062 996A     		ldr	r1, [r3, #40]
1398:Core/Src/SEGGER_RTT.c ****       ;
 2434              		.loc 1 1398 18 discriminator 1 view .LVU814
 2435 0064 9142     		cmp	r1, r2
 2436 0066 E7D1     		bne	.L143
1399:Core/Src/SEGGER_RTT.c ****     }
 2437              		.loc 1 1399 7 is_stmt 1 view .LVU815
1398:Core/Src/SEGGER_RTT.c ****       ;
 2438              		.loc 1 1398 18 view .LVU816
1398:Core/Src/SEGGER_RTT.c ****       ;
 2439              		.loc 1 1398 26 is_stmt 0 view .LVU817
 2440 0068 996A     		ldr	r1, [r3, #40]
1398:Core/Src/SEGGER_RTT.c ****       ;
 2441              		.loc 1 1398 18 view .LVU818
 2442 006a 9142     		cmp	r1, r2
 2443 006c F9D0     		beq	.L144
 2444 006e E3E7     		b	.L143
 2445              	.L146:
1412:Core/Src/SEGGER_RTT.c ****   }
 2446              		.loc 1 1412 12 view .LVU819
 2447 0070 0020     		movs	r0, #0
 2448              	.LVL226:
1417:Core/Src/SEGGER_RTT.c ****   return Status;
 2449              		.loc 1 1417 3 is_stmt 1 view .LVU820
 2450              		.syntax unified
 2451              	@ 1417 "Core/Src/SEGGER_RTT.c" 1
 2452 0072 8CF31188 		msr   basepri, ip  
 2453              		
 2454              	@ 0 "" 2
 2455              		.thumb
 2456              		.syntax unified
 2457              	.LBE77:
1417:Core/Src/SEGGER_RTT.c ****   return Status;
 2458              		.loc 1 1417 22 view .LVU821
1418:Core/Src/SEGGER_RTT.c **** }
 2459              		.loc 1 1418 3 view .LVU822
 2460              		.loc 1 1419 1 is_stmt 0 view .LVU823
 2461 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2462              	.LVL227:
 2463              	.L150:
 2464              	.LBB78:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2465              		.loc 1 1381 3 is_stmt 1 discriminator 1 view .LVU824
 2466 0078 FFF7FEFF 		bl	_DoInit
 2467              	.LVL228:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 77


 2468              		.loc 1 1381 3 is_stmt 0 discriminator 1 view .LVU825
 2469 007c C7E7     		b	.L141
 2470              	.L152:
 2471 007e 00BF     		.align	2
 2472              	.L151:
 2473 0080 00000000 		.word	.LANCHOR0
 2474              	.LBE78:
 2475              		.cfi_endproc
 2476              	.LFE17:
 2478              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2479              		.align	1
 2480              		.p2align 2,,3
 2481              		.global	SEGGER_RTT_GetKey
 2482              		.syntax unified
 2483              		.thumb
 2484              		.thumb_func
 2486              	SEGGER_RTT_GetKey:
 2487              	.LFB18:
1420:Core/Src/SEGGER_RTT.c **** 
1421:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1422:Core/Src/SEGGER_RTT.c **** *
1423:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1424:Core/Src/SEGGER_RTT.c **** *
1425:Core/Src/SEGGER_RTT.c **** *  Function description
1426:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1427:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1428:Core/Src/SEGGER_RTT.c **** *
1429:Core/Src/SEGGER_RTT.c **** *  Return value
1430:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1431:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1432:Core/Src/SEGGER_RTT.c **** *
1433:Core/Src/SEGGER_RTT.c **** *  Notes
1434:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1435:Core/Src/SEGGER_RTT.c **** */
1436:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2488              		.loc 1 1436 29 is_stmt 1 view -0
 2489              		.cfi_startproc
 2490              		@ args = 0, pretend = 0, frame = 8
 2491              		@ frame_needed = 0, uses_anonymous_args = 0
1437:Core/Src/SEGGER_RTT.c ****   char c;
 2492              		.loc 1 1437 3 view .LVU827
1438:Core/Src/SEGGER_RTT.c ****   int r;
 2493              		.loc 1 1438 3 view .LVU828
1439:Core/Src/SEGGER_RTT.c **** 
1440:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2494              		.loc 1 1440 3 view .LVU829
 2495              	.LVL229:
1436:Core/Src/SEGGER_RTT.c ****   char c;
 2496              		.loc 1 1436 29 is_stmt 0 view .LVU830
 2497 0000 10B5     		push	{r4, lr}
 2498              		.cfi_def_cfa_offset 8
 2499              		.cfi_offset 4, -8
 2500              		.cfi_offset 14, -4
 2501 0002 82B0     		sub	sp, sp, #8
 2502              		.cfi_def_cfa_offset 16
 2503              	.LVL230:
 2504              	.LBB82:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 78


 2505              	.LBI82:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 2506              		.loc 1 794 10 is_stmt 1 view .LVU831
 2507              	.LBB83:
 795:Core/Src/SEGGER_RTT.c **** 
 2508              		.loc 1 795 3 view .LVU832
 2509              	.LBB84:
 797:Core/Src/SEGGER_RTT.c ****   //
 2510              		.loc 1 797 3 view .LVU833
 797:Core/Src/SEGGER_RTT.c ****   //
 2511              		.loc 1 797 3 view .LVU834
 2512              		.syntax unified
 2513              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 2514 0004 EFF31184 		mrs   r4, basepri  
 2515 0008 4FF02001 		mov   r1, #32       
 2516 000c 81F31188 		msr   basepri, r1  
 2517              		
 2518              	@ 0 "" 2
 2519              	.LVL231:
 797:Core/Src/SEGGER_RTT.c ****   //
 2520              		.loc 1 797 20 view .LVU835
 801:Core/Src/SEGGER_RTT.c ****   //
 2521              		.loc 1 801 3 view .LVU836
 801:Core/Src/SEGGER_RTT.c ****   //
 2522              		.loc 1 801 18 is_stmt 0 view .LVU837
 2523              		.thumb
 2524              		.syntax unified
 2525 0010 0122     		movs	r2, #1
 2526 0012 0DF10701 		add	r1, sp, #7
 2527              	.LVL232:
 801:Core/Src/SEGGER_RTT.c ****   //
 2528              		.loc 1 801 18 view .LVU838
 2529 0016 0020     		movs	r0, #0
 2530 0018 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 2531              	.LVL233:
 805:Core/Src/SEGGER_RTT.c ****   //
 2532              		.loc 1 805 3 is_stmt 1 view .LVU839
 2533              		.syntax unified
 2534              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 2535 001c 84F31188 		msr   basepri, r4  
 2536              		
 2537              	@ 0 "" 2
 2538              		.thumb
 2539              		.syntax unified
 2540              	.LBE84:
 805:Core/Src/SEGGER_RTT.c ****   //
 2541              		.loc 1 805 22 view .LVU840
 807:Core/Src/SEGGER_RTT.c **** }
 2542              		.loc 1 807 3 view .LVU841
 2543              	.LVL234:
 807:Core/Src/SEGGER_RTT.c **** }
 2544              		.loc 1 807 3 is_stmt 0 view .LVU842
 2545              	.LBE83:
 2546              	.LBE82:
1441:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2547              		.loc 1 1441 3 is_stmt 1 view .LVU843
 2548              		.loc 1 1441 6 is_stmt 0 view .LVU844
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 79


 2549 0020 0128     		cmp	r0, #1
1442:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2550              		.loc 1 1442 5 is_stmt 1 view .LVU845
 2551              		.loc 1 1442 7 is_stmt 0 view .LVU846
 2552 0022 0CBF     		ite	eq
 2553 0024 9DF80700 		ldrbeq	r0, [sp, #7]	@ zero_extendqisi2
 2554              	.LVL235:
1443:Core/Src/SEGGER_RTT.c ****   } else {
1444:Core/Src/SEGGER_RTT.c ****     r = -1;
 2555              		.loc 1 1444 7 view .LVU847
 2556 0028 4FF0FF30 		movne	r0, #-1
 2557              	.LVL236:
1445:Core/Src/SEGGER_RTT.c ****   }
1446:Core/Src/SEGGER_RTT.c ****   return r;
 2558              		.loc 1 1446 3 is_stmt 1 view .LVU848
1447:Core/Src/SEGGER_RTT.c **** }
 2559              		.loc 1 1447 1 is_stmt 0 view .LVU849
 2560 002c 02B0     		add	sp, sp, #8
 2561              		.cfi_def_cfa_offset 8
 2562              		@ sp needed
 2563 002e 10BD     		pop	{r4, pc}
 2564              		.cfi_endproc
 2565              	.LFE18:
 2567              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2568              		.align	1
 2569              		.p2align 2,,3
 2570              		.global	SEGGER_RTT_WaitKey
 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2575              	SEGGER_RTT_WaitKey:
 2576              	.LFB19:
1448:Core/Src/SEGGER_RTT.c **** 
1449:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1450:Core/Src/SEGGER_RTT.c **** *
1451:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1452:Core/Src/SEGGER_RTT.c **** *
1453:Core/Src/SEGGER_RTT.c **** *  Function description
1454:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1455:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1456:Core/Src/SEGGER_RTT.c **** *
1457:Core/Src/SEGGER_RTT.c **** *  Return value
1458:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1459:Core/Src/SEGGER_RTT.c **** *
1460:Core/Src/SEGGER_RTT.c **** *  Notes
1461:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1462:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1463:Core/Src/SEGGER_RTT.c **** */
1464:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2577              		.loc 1 1464 30 is_stmt 1 view -0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 8
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 2581 0000 10B5     		push	{r4, lr}
 2582              		.cfi_def_cfa_offset 8
 2583              		.cfi_offset 4, -8
 2584              		.cfi_offset 14, -4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 80


 2585 0002 82B0     		sub	sp, sp, #8
 2586              		.cfi_def_cfa_offset 16
 2587              	.L159:
1465:Core/Src/SEGGER_RTT.c ****   int r;
 2588              		.loc 1 1465 3 discriminator 1 view .LVU851
1466:Core/Src/SEGGER_RTT.c **** 
1467:Core/Src/SEGGER_RTT.c ****   do {
 2589              		.loc 1 1467 3 discriminator 1 view .LVU852
1468:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2590              		.loc 1 1468 5 discriminator 1 view .LVU853
 2591              	.LBB90:
 2592              	.LBI90:
1436:Core/Src/SEGGER_RTT.c ****   char c;
 2593              		.loc 1 1436 5 discriminator 1 view .LVU854
 2594              	.LBB91:
1437:Core/Src/SEGGER_RTT.c ****   int r;
 2595              		.loc 1 1437 3 discriminator 1 view .LVU855
1438:Core/Src/SEGGER_RTT.c **** 
 2596              		.loc 1 1438 3 discriminator 1 view .LVU856
1440:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2597              		.loc 1 1440 3 discriminator 1 view .LVU857
 2598              	.LVL237:
 2599              	.LBB92:
 2600              	.LBI92:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 2601              		.loc 1 794 10 discriminator 1 view .LVU858
 2602              	.LBB93:
 795:Core/Src/SEGGER_RTT.c **** 
 2603              		.loc 1 795 3 discriminator 1 view .LVU859
 2604              	.LBB94:
 797:Core/Src/SEGGER_RTT.c ****   //
 2605              		.loc 1 797 3 discriminator 1 view .LVU860
 797:Core/Src/SEGGER_RTT.c ****   //
 2606              		.loc 1 797 3 discriminator 1 view .LVU861
 2607              		.syntax unified
 2608              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 2609 0004 EFF31184 		mrs   r4, basepri  
 2610 0008 4FF02001 		mov   r1, #32       
 2611 000c 81F31188 		msr   basepri, r1  
 2612              		
 2613              	@ 0 "" 2
 2614              	.LVL238:
 797:Core/Src/SEGGER_RTT.c ****   //
 2615              		.loc 1 797 20 discriminator 1 view .LVU862
 801:Core/Src/SEGGER_RTT.c ****   //
 2616              		.loc 1 801 3 discriminator 1 view .LVU863
 801:Core/Src/SEGGER_RTT.c ****   //
 2617              		.loc 1 801 18 is_stmt 0 discriminator 1 view .LVU864
 2618              		.thumb
 2619              		.syntax unified
 2620 0010 0122     		movs	r2, #1
 2621 0012 0DF10701 		add	r1, sp, #7
 2622              	.LVL239:
 801:Core/Src/SEGGER_RTT.c ****   //
 2623              		.loc 1 801 18 discriminator 1 view .LVU865
 2624 0016 0020     		movs	r0, #0
 2625 0018 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 81


 2626              	.LVL240:
 805:Core/Src/SEGGER_RTT.c ****   //
 2627              		.loc 1 805 3 is_stmt 1 discriminator 1 view .LVU866
 2628              		.syntax unified
 2629              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 2630 001c 84F31188 		msr   basepri, r4  
 2631              		
 2632              	@ 0 "" 2
 2633              		.thumb
 2634              		.syntax unified
 2635              	.LBE94:
 805:Core/Src/SEGGER_RTT.c ****   //
 2636              		.loc 1 805 22 discriminator 1 view .LVU867
 807:Core/Src/SEGGER_RTT.c **** }
 2637              		.loc 1 807 3 discriminator 1 view .LVU868
 2638              	.LVL241:
 807:Core/Src/SEGGER_RTT.c **** }
 2639              		.loc 1 807 3 is_stmt 0 discriminator 1 view .LVU869
 2640              	.LBE93:
 2641              	.LBE92:
1441:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2642              		.loc 1 1441 3 is_stmt 1 discriminator 1 view .LVU870
1441:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2643              		.loc 1 1441 6 is_stmt 0 discriminator 1 view .LVU871
 2644 0020 0128     		cmp	r0, #1
 2645 0022 EFD1     		bne	.L159
1442:Core/Src/SEGGER_RTT.c ****   } else {
 2646              		.loc 1 1442 5 is_stmt 1 view .LVU872
 2647              	.LVL242:
1446:Core/Src/SEGGER_RTT.c **** }
 2648              		.loc 1 1446 3 view .LVU873
1446:Core/Src/SEGGER_RTT.c **** }
 2649              		.loc 1 1446 3 is_stmt 0 view .LVU874
 2650              	.LBE91:
 2651              	.LBE90:
1469:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 2652              		.loc 1 1469 14 is_stmt 1 view .LVU875
1470:Core/Src/SEGGER_RTT.c ****   return r;
 2653              		.loc 1 1470 3 view .LVU876
1471:Core/Src/SEGGER_RTT.c **** }
 2654              		.loc 1 1471 1 is_stmt 0 view .LVU877
 2655 0024 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2656 0028 02B0     		add	sp, sp, #8
 2657              		.cfi_def_cfa_offset 8
 2658              		@ sp needed
 2659 002a 10BD     		pop	{r4, pc}
 2660              		.loc 1 1471 1 view .LVU878
 2661              		.cfi_endproc
 2662              	.LFE19:
 2664              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2665              		.align	1
 2666              		.p2align 2,,3
 2667              		.global	SEGGER_RTT_HasKey
 2668              		.syntax unified
 2669              		.thumb
 2670              		.thumb_func
 2672              	SEGGER_RTT_HasKey:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 82


 2673              	.LFB20:
1472:Core/Src/SEGGER_RTT.c **** 
1473:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1474:Core/Src/SEGGER_RTT.c **** *
1475:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1476:Core/Src/SEGGER_RTT.c **** *
1477:Core/Src/SEGGER_RTT.c **** *  Function description
1478:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1479:Core/Src/SEGGER_RTT.c **** *
1480:Core/Src/SEGGER_RTT.c **** *  Return value
1481:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1482:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1483:Core/Src/SEGGER_RTT.c **** *
1484:Core/Src/SEGGER_RTT.c **** *  Notes
1485:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1486:Core/Src/SEGGER_RTT.c **** */
1487:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2674              		.loc 1 1487 29 is_stmt 1 view -0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
1488:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2678              		.loc 1 1488 3 view .LVU880
1489:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 2679              		.loc 1 1489 3 view .LVU881
1490:Core/Src/SEGGER_RTT.c ****   int r;
 2680              		.loc 1 1490 3 view .LVU882
 2681              	.LBB95:
1491:Core/Src/SEGGER_RTT.c **** 
1492:Core/Src/SEGGER_RTT.c ****   INIT();
 2682              		.loc 1 1492 3 view .LVU883
 2683              		.loc 1 1492 3 view .LVU884
 2684              	.LVL243:
 2685              		.loc 1 1492 3 view .LVU885
 2686              		.loc 1 1492 3 view .LVU886
 2687              	.LBE95:
1487:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2688              		.loc 1 1487 29 is_stmt 0 view .LVU887
 2689 0000 10B5     		push	{r4, lr}
 2690              		.cfi_def_cfa_offset 8
 2691              		.cfi_offset 4, -8
 2692              		.cfi_offset 14, -4
 2693              	.LBB96:
 2694              		.loc 1 1492 3 view .LVU888
 2695 0002 064C     		ldr	r4, .L165
 2696 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2697 0006 2BB1     		cbz	r3, .L164
 2698              	.L162:
 2699              		.loc 1 1492 3 is_stmt 1 discriminator 3 view .LVU889
 2700              	.LBE96:
 2701              		.loc 1 1492 9 discriminator 3 view .LVU890
1493:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2702              		.loc 1 1493 3 discriminator 3 view .LVU891
 2703              	.LVL244:
1494:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2704              		.loc 1 1494 3 discriminator 3 view .LVU892
1495:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 83


 2705              		.loc 1 1495 3 discriminator 3 view .LVU893
 2706              		.loc 1 1495 21 is_stmt 0 discriminator 3 view .LVU894
 2707 0008 E36E     		ldr	r3, [r4, #108]
 2708              	.LVL245:
1496:Core/Src/SEGGER_RTT.c ****     r = 1;
1497:Core/Src/SEGGER_RTT.c ****   } else {
1498:Core/Src/SEGGER_RTT.c ****     r = 0;
1499:Core/Src/SEGGER_RTT.c ****   }
1500:Core/Src/SEGGER_RTT.c ****   return r;
 2709              		.loc 1 1500 3 is_stmt 1 discriminator 3 view .LVU895
1495:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2710              		.loc 1 1495 6 is_stmt 0 discriminator 3 view .LVU896
 2711 000a 206F     		ldr	r0, [r4, #112]
1501:Core/Src/SEGGER_RTT.c **** }
 2712              		.loc 1 1501 1 discriminator 3 view .LVU897
 2713 000c C01A     		subs	r0, r0, r3
 2714 000e 18BF     		it	ne
 2715 0010 0120     		movne	r0, #1
 2716 0012 10BD     		pop	{r4, pc}
 2717              	.LVL246:
 2718              	.L164:
 2719              	.LBB97:
1492:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2720              		.loc 1 1492 3 is_stmt 1 discriminator 1 view .LVU898
 2721 0014 FFF7FEFF 		bl	_DoInit
 2722              	.LVL247:
 2723 0018 F6E7     		b	.L162
 2724              	.L166:
 2725 001a 00BF     		.align	2
 2726              	.L165:
 2727 001c 00000000 		.word	.LANCHOR0
 2728              	.LBE97:
 2729              		.cfi_endproc
 2730              	.LFE20:
 2732              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2733              		.align	1
 2734              		.p2align 2,,3
 2735              		.global	SEGGER_RTT_HasData
 2736              		.syntax unified
 2737              		.thumb
 2738              		.thumb_func
 2740              	SEGGER_RTT_HasData:
 2741              	.LVL248:
 2742              	.LFB21:
1502:Core/Src/SEGGER_RTT.c **** 
1503:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1504:Core/Src/SEGGER_RTT.c **** *
1505:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1506:Core/Src/SEGGER_RTT.c **** *
1507:Core/Src/SEGGER_RTT.c **** *  Function description
1508:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1509:Core/Src/SEGGER_RTT.c **** *
1510:Core/Src/SEGGER_RTT.c **** *  Return value:
1511:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1512:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1513:Core/Src/SEGGER_RTT.c **** *
1514:Core/Src/SEGGER_RTT.c **** */
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 84


1515:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2743              		.loc 1 1515 51 view -0
 2744              		.cfi_startproc
 2745              		@ args = 0, pretend = 0, frame = 0
 2746              		@ frame_needed = 0, uses_anonymous_args = 0
 2747              		@ link register save eliminated.
1516:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2748              		.loc 1 1516 3 view .LVU900
1517:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2749              		.loc 1 1517 3 view .LVU901
1518:Core/Src/SEGGER_RTT.c **** 
1519:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2750              		.loc 1 1519 3 view .LVU902
1520:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2751              		.loc 1 1520 3 view .LVU903
 2752              		.loc 1 1520 5 is_stmt 0 view .LVU904
 2753 0000 044B     		ldr	r3, .L168
 2754 0002 00EB4000 		add	r0, r0, r0, lsl #1
 2755              	.LVL249:
 2756              		.loc 1 1520 5 view .LVU905
 2757 0006 03EBC003 		add	r3, r3, r0, lsl #3
 2758 000a D86E     		ldr	r0, [r3, #108]
 2759              	.LVL250:
1521:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2760              		.loc 1 1521 3 is_stmt 1 view .LVU906
 2761              		.loc 1 1521 12 is_stmt 0 view .LVU907
 2762 000c 1B6F     		ldr	r3, [r3, #112]
1522:Core/Src/SEGGER_RTT.c **** }
 2763              		.loc 1 1522 1 view .LVU908
 2764 000e C01A     		subs	r0, r0, r3
 2765              	.LVL251:
 2766              		.loc 1 1522 1 view .LVU909
 2767 0010 7047     		bx	lr
 2768              	.L169:
 2769 0012 00BF     		.align	2
 2770              	.L168:
 2771 0014 00000000 		.word	.LANCHOR0
 2772              		.cfi_endproc
 2773              	.LFE21:
 2775              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2776              		.align	1
 2777              		.p2align 2,,3
 2778              		.global	SEGGER_RTT_HasDataUp
 2779              		.syntax unified
 2780              		.thumb
 2781              		.thumb_func
 2783              	SEGGER_RTT_HasDataUp:
 2784              	.LVL252:
 2785              	.LFB22:
1523:Core/Src/SEGGER_RTT.c **** 
1524:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1525:Core/Src/SEGGER_RTT.c **** *
1526:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1527:Core/Src/SEGGER_RTT.c **** *
1528:Core/Src/SEGGER_RTT.c **** *  Function description
1529:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1530:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 85


1531:Core/Src/SEGGER_RTT.c **** *  Return value:
1532:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1533:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1534:Core/Src/SEGGER_RTT.c **** *
1535:Core/Src/SEGGER_RTT.c **** */
1536:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2786              		.loc 1 1536 53 is_stmt 1 view -0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 0
 2789              		@ frame_needed = 0, uses_anonymous_args = 0
 2790              		@ link register save eliminated.
1537:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2791              		.loc 1 1537 3 view .LVU911
1538:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2792              		.loc 1 1538 3 view .LVU912
1539:Core/Src/SEGGER_RTT.c **** 
1540:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2793              		.loc 1 1540 3 view .LVU913
1541:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2794              		.loc 1 1541 3 view .LVU914
 2795              		.loc 1 1541 5 is_stmt 0 view .LVU915
 2796 0000 044B     		ldr	r3, .L171
 2797 0002 00EB4000 		add	r0, r0, r0, lsl #1
 2798              	.LVL253:
 2799              		.loc 1 1541 5 view .LVU916
 2800 0006 03EBC003 		add	r3, r3, r0, lsl #3
 2801 000a 9A6A     		ldr	r2, [r3, #40]
 2802              	.LVL254:
1542:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2803              		.loc 1 1542 3 is_stmt 1 view .LVU917
 2804              		.loc 1 1542 23 is_stmt 0 view .LVU918
 2805 000c 586A     		ldr	r0, [r3, #36]
1543:Core/Src/SEGGER_RTT.c **** }
 2806              		.loc 1 1543 1 view .LVU919
 2807 000e 801A     		subs	r0, r0, r2
 2808 0010 7047     		bx	lr
 2809              	.L172:
 2810 0012 00BF     		.align	2
 2811              	.L171:
 2812 0014 00000000 		.word	.LANCHOR0
 2813              		.cfi_endproc
 2814              	.LFE22:
 2816              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2817              		.align	1
 2818              		.p2align 2,,3
 2819              		.global	SEGGER_RTT_AllocDownBuffer
 2820              		.syntax unified
 2821              		.thumb
 2822              		.thumb_func
 2824              	SEGGER_RTT_AllocDownBuffer:
 2825              	.LVL255:
 2826              	.LFB23:
1544:Core/Src/SEGGER_RTT.c **** 
1545:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1546:Core/Src/SEGGER_RTT.c **** *
1547:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1548:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 86


1549:Core/Src/SEGGER_RTT.c **** *  Function description
1550:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1551:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1552:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1553:Core/Src/SEGGER_RTT.c **** *
1554:Core/Src/SEGGER_RTT.c **** *  Parameters
1555:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1556:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1557:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1558:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1559:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1560:Core/Src/SEGGER_RTT.c **** *
1561:Core/Src/SEGGER_RTT.c **** *  Return value
1562:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1563:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1564:Core/Src/SEGGER_RTT.c **** */
1565:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2827              		.loc 1 1565 103 is_stmt 1 view -0
 2828              		.cfi_startproc
 2829              		@ args = 0, pretend = 0, frame = 0
 2830              		@ frame_needed = 0, uses_anonymous_args = 0
1566:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2831              		.loc 1 1566 3 view .LVU921
1567:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2832              		.loc 1 1567 3 view .LVU922
 2833              	.LBB98:
1568:Core/Src/SEGGER_RTT.c **** 
1569:Core/Src/SEGGER_RTT.c ****   INIT();
 2834              		.loc 1 1569 3 view .LVU923
 2835              		.loc 1 1569 3 view .LVU924
 2836              		.loc 1 1569 3 view .LVU925
 2837              		.loc 1 1569 3 view .LVU926
 2838              	.LBE98:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2839              		.loc 1 1565 103 is_stmt 0 view .LVU927
 2840 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2841              		.cfi_def_cfa_offset 32
 2842              		.cfi_offset 3, -32
 2843              		.cfi_offset 4, -28
 2844              		.cfi_offset 5, -24
 2845              		.cfi_offset 6, -20
 2846              		.cfi_offset 7, -16
 2847              		.cfi_offset 8, -12
 2848              		.cfi_offset 9, -8
 2849              		.cfi_offset 14, -4
 2850              	.LBB99:
 2851              		.loc 1 1569 3 view .LVU928
 2852 0004 1B4C     		ldr	r4, .L186
 2853              	.LBE99:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2854              		.loc 1 1565 103 view .LVU929
 2855 0006 1E46     		mov	r6, r3
 2856              	.LBB100:
 2857              		.loc 1 1569 3 view .LVU930
 2858 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2859              	.LVL256:
 2860              		.loc 1 1569 3 view .LVU931
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 87


 2861              	.LBE100:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2862              		.loc 1 1565 103 view .LVU932
 2863 000a 8146     		mov	r9, r0
 2864 000c 8846     		mov	r8, r1
 2865 000e 1746     		mov	r7, r2
 2866              	.LBB101:
 2867              		.loc 1 1569 3 view .LVU933
 2868 0010 4BB3     		cbz	r3, .L184
 2869              	.LVL257:
 2870              	.L174:
 2871              		.loc 1 1569 3 is_stmt 1 discriminator 3 view .LVU934
 2872              	.LBE101:
 2873              		.loc 1 1569 9 discriminator 3 view .LVU935
 2874              	.LBB102:
1570:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2875              		.loc 1 1570 3 discriminator 3 view .LVU936
 2876              		.loc 1 1570 3 discriminator 3 view .LVU937
 2877              		.syntax unified
 2878              	@ 1570 "Core/Src/SEGGER_RTT.c" 1
 2879 0012 EFF31182 		mrs   r2, basepri  
 2880 0016 4FF02001 		mov   r1, #32       
 2881 001a 81F31188 		msr   basepri, r1  
 2882              		
 2883              	@ 0 "" 2
 2884              	.LVL258:
 2885              		.loc 1 1570 20 discriminator 3 view .LVU938
1571:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2886              		.loc 1 1571 3 discriminator 3 view .LVU939
1572:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2887              		.loc 1 1572 3 discriminator 3 view .LVU940
 2888              		.loc 1 1572 15 is_stmt 0 discriminator 3 view .LVU941
 2889              		.thumb
 2890              		.syntax unified
 2891 001e 0020     		movs	r0, #0
 2892 0020 03E0     		b	.L176
 2893              	.LVL259:
 2894              	.L185:
1573:Core/Src/SEGGER_RTT.c ****   do {
1574:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
1575:Core/Src/SEGGER_RTT.c ****       break;
1576:Core/Src/SEGGER_RTT.c ****     }
1577:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
1578:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2895              		.loc 1 1578 32 view .LVU942
 2896 0022 6569     		ldr	r5, [r4, #20]
1577:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2897              		.loc 1 1577 16 view .LVU943
 2898 0024 0130     		adds	r0, r0, #1
 2899              	.LVL260:
 2900              		.loc 1 1578 24 is_stmt 1 view .LVU944
 2901 0026 8542     		cmp	r5, r0
 2902 0028 07DD     		ble	.L175
 2903              	.LVL261:
 2904              	.L176:
1573:Core/Src/SEGGER_RTT.c ****   do {
 2905              		.loc 1 1573 3 view .LVU945
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 88


1574:Core/Src/SEGGER_RTT.c ****       break;
 2906              		.loc 1 1574 5 view .LVU946
1577:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2907              		.loc 1 1577 5 view .LVU947
1574:Core/Src/SEGGER_RTT.c ****       break;
 2908              		.loc 1 1574 35 is_stmt 0 view .LVU948
 2909 002a 00EB400C 		add	ip, r0, r0, lsl #1
 2910 002e 04EBCC0C 		add	ip, r4, ip, lsl #3
 2911 0032 DCF86450 		ldr	r5, [ip, #100]
1574:Core/Src/SEGGER_RTT.c ****       break;
 2912              		.loc 1 1574 8 view .LVU949
 2913 0036 002D     		cmp	r5, #0
 2914 0038 F3D1     		bne	.L185
 2915              	.L175:
1579:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2916              		.loc 1 1579 3 is_stmt 1 view .LVU950
 2917              		.loc 1 1579 27 is_stmt 0 view .LVU951
 2918 003a 6369     		ldr	r3, [r4, #20]
 2919              		.loc 1 1579 6 view .LVU952
 2920 003c 8342     		cmp	r3, r0
 2921 003e 15DD     		ble	.L178
1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2922              		.loc 1 1580 5 is_stmt 1 view .LVU953
 2923              		.loc 1 1580 45 is_stmt 0 view .LVU954
 2924 0040 00EB4003 		add	r3, r0, r0, lsl #1
 2925 0044 04EBC304 		add	r4, r4, r3, lsl #3
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
1583:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2926              		.loc 1 1583 45 view .LVU955
 2927 0048 0023     		movs	r3, #0
1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2928              		.loc 1 1580 45 view .LVU956
 2929 004a C4F86090 		str	r9, [r4, #96]
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2930              		.loc 1 1581 5 is_stmt 1 view .LVU957
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2931              		.loc 1 1581 45 is_stmt 0 view .LVU958
 2932 004e C4F86480 		str	r8, [r4, #100]
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2933              		.loc 1 1582 5 is_stmt 1 view .LVU959
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2934              		.loc 1 1582 45 is_stmt 0 view .LVU960
 2935 0052 A766     		str	r7, [r4, #104]
 2936              		.loc 1 1583 5 is_stmt 1 view .LVU961
 2937              		.loc 1 1583 45 is_stmt 0 view .LVU962
 2938 0054 2367     		str	r3, [r4, #112]
1584:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2939              		.loc 1 1584 5 is_stmt 1 view .LVU963
 2940              		.loc 1 1584 45 is_stmt 0 view .LVU964
 2941 0056 E366     		str	r3, [r4, #108]
1585:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2942              		.loc 1 1585 5 is_stmt 1 view .LVU965
 2943              		.loc 1 1585 45 is_stmt 0 view .LVU966
 2944 0058 6667     		str	r6, [r4, #116]
1586:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2945              		.loc 1 1586 5 is_stmt 1 view .LVU967
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 89


 2946              		.syntax unified
 2947              	@ 1586 "Core/Src/SEGGER_RTT.c" 1
 2948 005a BFF35F8F 		dmb
 2949              	
 2950              	@ 0 "" 2
 2951              		.loc 1 1586 15 view .LVU968
 2952              	.LVL262:
 2953              		.thumb
 2954              		.syntax unified
 2955              	.L177:
1587:Core/Src/SEGGER_RTT.c ****   } else {
1588:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1589:Core/Src/SEGGER_RTT.c ****   }
1590:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2956              		.loc 1 1590 3 view .LVU969
 2957              		.syntax unified
 2958              	@ 1590 "Core/Src/SEGGER_RTT.c" 1
 2959 005e 82F31188 		msr   basepri, r2  
 2960              		
 2961              	@ 0 "" 2
 2962              		.thumb
 2963              		.syntax unified
 2964              	.LBE102:
 2965              		.loc 1 1590 22 view .LVU970
1591:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2966              		.loc 1 1591 3 view .LVU971
1592:Core/Src/SEGGER_RTT.c **** }
 2967              		.loc 1 1592 1 is_stmt 0 view .LVU972
 2968 0062 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2969              	.LVL263:
 2970              	.L184:
 2971              	.LBB103:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2972              		.loc 1 1569 3 is_stmt 1 discriminator 1 view .LVU973
 2973 0066 FFF7FEFF 		bl	_DoInit
 2974              	.LVL264:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2975              		.loc 1 1569 3 is_stmt 0 discriminator 1 view .LVU974
 2976 006a D2E7     		b	.L174
 2977              	.LVL265:
 2978              	.L178:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2979              		.loc 1 1569 3 discriminator 1 view .LVU975
 2980              	.LBE103:
 2981              	.LBB104:
1588:Core/Src/SEGGER_RTT.c ****   }
 2982              		.loc 1 1588 17 view .LVU976
 2983 006c 4FF0FF30 		mov	r0, #-1
 2984              	.LVL266:
1588:Core/Src/SEGGER_RTT.c ****   }
 2985              		.loc 1 1588 17 view .LVU977
 2986 0070 F5E7     		b	.L177
 2987              	.L187:
 2988 0072 00BF     		.align	2
 2989              	.L186:
 2990 0074 00000000 		.word	.LANCHOR0
 2991              	.LBE104:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 90


 2992              		.cfi_endproc
 2993              	.LFE23:
 2995              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2996              		.align	1
 2997              		.p2align 2,,3
 2998              		.global	SEGGER_RTT_AllocUpBuffer
 2999              		.syntax unified
 3000              		.thumb
 3001              		.thumb_func
 3003              	SEGGER_RTT_AllocUpBuffer:
 3004              	.LVL267:
 3005              	.LFB24:
1593:Core/Src/SEGGER_RTT.c **** 
1594:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1595:Core/Src/SEGGER_RTT.c **** *
1596:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1597:Core/Src/SEGGER_RTT.c **** *
1598:Core/Src/SEGGER_RTT.c **** *  Function description
1599:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1600:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1601:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1602:Core/Src/SEGGER_RTT.c **** *
1603:Core/Src/SEGGER_RTT.c **** *  Parameters
1604:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1605:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1606:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1607:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1608:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1609:Core/Src/SEGGER_RTT.c **** *
1610:Core/Src/SEGGER_RTT.c **** *  Return value
1611:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1612:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1613:Core/Src/SEGGER_RTT.c **** */
1614:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 3006              		.loc 1 1614 101 is_stmt 1 view -0
 3007              		.cfi_startproc
 3008              		@ args = 0, pretend = 0, frame = 0
 3009              		@ frame_needed = 0, uses_anonymous_args = 0
1615:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 3010              		.loc 1 1615 3 view .LVU979
1616:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3011              		.loc 1 1616 3 view .LVU980
 3012              	.LBB105:
1617:Core/Src/SEGGER_RTT.c **** 
1618:Core/Src/SEGGER_RTT.c ****   INIT();
 3013              		.loc 1 1618 3 view .LVU981
 3014              		.loc 1 1618 3 view .LVU982
 3015              		.loc 1 1618 3 view .LVU983
 3016              		.loc 1 1618 3 view .LVU984
 3017              	.LBE105:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 3018              		.loc 1 1614 101 is_stmt 0 view .LVU985
 3019 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3020              		.cfi_def_cfa_offset 32
 3021              		.cfi_offset 3, -32
 3022              		.cfi_offset 4, -28
 3023              		.cfi_offset 5, -24
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 91


 3024              		.cfi_offset 6, -20
 3025              		.cfi_offset 7, -16
 3026              		.cfi_offset 8, -12
 3027              		.cfi_offset 9, -8
 3028              		.cfi_offset 14, -4
 3029              	.LBB106:
 3030              		.loc 1 1618 3 view .LVU986
 3031 0004 1E4C     		ldr	r4, .L201
 3032              	.LBE106:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 3033              		.loc 1 1614 101 view .LVU987
 3034 0006 1E46     		mov	r6, r3
 3035              	.LBB107:
 3036              		.loc 1 1618 3 view .LVU988
 3037 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3038              	.LVL268:
 3039              		.loc 1 1618 3 view .LVU989
 3040              	.LBE107:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 3041              		.loc 1 1614 101 view .LVU990
 3042 000a 8146     		mov	r9, r0
 3043 000c 8846     		mov	r8, r1
 3044 000e 1746     		mov	r7, r2
 3045              	.LBB108:
 3046              		.loc 1 1618 3 view .LVU991
 3047 0010 83B3     		cbz	r3, .L199
 3048              	.LVL269:
 3049              	.L189:
 3050              		.loc 1 1618 3 is_stmt 1 discriminator 3 view .LVU992
 3051              	.LBE108:
 3052              		.loc 1 1618 9 discriminator 3 view .LVU993
 3053              	.LBB109:
1619:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3054              		.loc 1 1619 3 discriminator 3 view .LVU994
 3055              		.loc 1 1619 3 discriminator 3 view .LVU995
 3056              		.syntax unified
 3057              	@ 1619 "Core/Src/SEGGER_RTT.c" 1
 3058 0012 EFF31183 		mrs   r3, basepri  
 3059 0016 4FF02001 		mov   r1, #32       
 3060 001a 81F31188 		msr   basepri, r1  
 3061              		
 3062              	@ 0 "" 2
 3063              	.LVL270:
 3064              		.loc 1 1619 20 discriminator 3 view .LVU996
1620:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3065              		.loc 1 1620 3 discriminator 3 view .LVU997
1621:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 3066              		.loc 1 1621 3 discriminator 3 view .LVU998
 3067              		.loc 1 1621 15 is_stmt 0 discriminator 3 view .LVU999
 3068              		.thumb
 3069              		.syntax unified
 3070 001e 0020     		movs	r0, #0
 3071 0020 03E0     		b	.L191
 3072              	.LVL271:
 3073              	.L200:
1622:Core/Src/SEGGER_RTT.c ****   do {
1623:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 92


1624:Core/Src/SEGGER_RTT.c ****       break;
1625:Core/Src/SEGGER_RTT.c ****     }
1626:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
1627:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3074              		.loc 1 1627 32 view .LVU1000
 3075 0022 2569     		ldr	r5, [r4, #16]
 3076              		.loc 1 1627 24 view .LVU1001
 3077 0024 7545     		cmp	r5, lr
1626:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3078              		.loc 1 1626 16 view .LVU1002
 3079 0026 7046     		mov	r0, lr
 3080              	.LVL272:
 3081              		.loc 1 1627 24 is_stmt 1 view .LVU1003
 3082 0028 09DD     		ble	.L190
 3083              	.LVL273:
 3084              	.L191:
1622:Core/Src/SEGGER_RTT.c ****   do {
 3085              		.loc 1 1622 3 view .LVU1004
1623:Core/Src/SEGGER_RTT.c ****       break;
 3086              		.loc 1 1623 5 view .LVU1005
1626:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3087              		.loc 1 1626 5 view .LVU1006
1623:Core/Src/SEGGER_RTT.c ****       break;
 3088              		.loc 1 1623 33 is_stmt 0 view .LVU1007
 3089 002a 00F1010E 		add	lr, r0, #1
 3090 002e 0EEB4E0C 		add	ip, lr, lr, lsl #1
 3091 0032 04EBCC0C 		add	ip, r4, ip, lsl #3
 3092 0036 DCF80450 		ldr	r5, [ip, #4]
1623:Core/Src/SEGGER_RTT.c ****       break;
 3093              		.loc 1 1623 8 view .LVU1008
 3094 003a 002D     		cmp	r5, #0
 3095 003c F1D1     		bne	.L200
 3096              	.L190:
1628:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 3097              		.loc 1 1628 3 is_stmt 1 view .LVU1009
 3098              		.loc 1 1628 27 is_stmt 0 view .LVU1010
 3099 003e 2269     		ldr	r2, [r4, #16]
 3100              		.loc 1 1628 6 view .LVU1011
 3101 0040 8242     		cmp	r2, r0
 3102 0042 1ADD     		ble	.L193
1629:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 3103              		.loc 1 1629 5 is_stmt 1 view .LVU1012
 3104              		.loc 1 1629 43 is_stmt 0 view .LVU1013
 3105 0044 421C     		adds	r2, r0, #1
 3106 0046 02EB4202 		add	r2, r2, r2, lsl #1
 3107 004a D200     		lsls	r2, r2, #3
 3108 004c 44F80290 		str	r9, [r4, r2]
1630:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 3109              		.loc 1 1630 5 is_stmt 1 view .LVU1014
 3110              		.loc 1 1630 43 is_stmt 0 view .LVU1015
 3111 0050 2244     		add	r2, r2, r4
 3112 0052 C2F80480 		str	r8, [r2, #4]
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 3113              		.loc 1 1631 5 is_stmt 1 view .LVU1016
 3114              		.loc 1 1631 43 is_stmt 0 view .LVU1017
 3115 0056 00EB4002 		add	r2, r0, r0, lsl #1
 3116 005a 04EBC204 		add	r4, r4, r2, lsl #3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 93


1632:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 3117              		.loc 1 1632 43 view .LVU1018
 3118 005e 0022     		movs	r2, #0
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 3119              		.loc 1 1631 43 view .LVU1019
 3120 0060 2762     		str	r7, [r4, #32]
 3121              		.loc 1 1632 5 is_stmt 1 view .LVU1020
 3122              		.loc 1 1632 43 is_stmt 0 view .LVU1021
 3123 0062 A262     		str	r2, [r4, #40]
1633:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 3124              		.loc 1 1633 5 is_stmt 1 view .LVU1022
 3125              		.loc 1 1633 43 is_stmt 0 view .LVU1023
 3126 0064 6262     		str	r2, [r4, #36]
1634:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 3127              		.loc 1 1634 5 is_stmt 1 view .LVU1024
 3128              		.loc 1 1634 43 is_stmt 0 view .LVU1025
 3129 0066 E662     		str	r6, [r4, #44]
1635:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3130              		.loc 1 1635 5 is_stmt 1 view .LVU1026
 3131              		.syntax unified
 3132              	@ 1635 "Core/Src/SEGGER_RTT.c" 1
 3133 0068 BFF35F8F 		dmb
 3134              	
 3135              	@ 0 "" 2
 3136              		.loc 1 1635 15 view .LVU1027
 3137              	.LVL274:
 3138              		.thumb
 3139              		.syntax unified
 3140              	.L192:
1636:Core/Src/SEGGER_RTT.c ****   } else {
1637:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1638:Core/Src/SEGGER_RTT.c ****   }
1639:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 3141              		.loc 1 1639 3 view .LVU1028
 3142              		.syntax unified
 3143              	@ 1639 "Core/Src/SEGGER_RTT.c" 1
 3144 006c 83F31188 		msr   basepri, r3  
 3145              		
 3146              	@ 0 "" 2
 3147              		.thumb
 3148              		.syntax unified
 3149              	.LBE109:
 3150              		.loc 1 1639 22 view .LVU1029
1640:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 3151              		.loc 1 1640 3 view .LVU1030
1641:Core/Src/SEGGER_RTT.c **** }
 3152              		.loc 1 1641 1 is_stmt 0 view .LVU1031
 3153 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3154              	.LVL275:
 3155              	.L199:
 3156              	.LBB110:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3157              		.loc 1 1618 3 is_stmt 1 discriminator 1 view .LVU1032
 3158 0074 FFF7FEFF 		bl	_DoInit
 3159              	.LVL276:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3160              		.loc 1 1618 3 is_stmt 0 discriminator 1 view .LVU1033
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 94


 3161 0078 CBE7     		b	.L189
 3162              	.LVL277:
 3163              	.L193:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3164              		.loc 1 1618 3 discriminator 1 view .LVU1034
 3165              	.LBE110:
 3166              	.LBB111:
1637:Core/Src/SEGGER_RTT.c ****   }
 3167              		.loc 1 1637 17 view .LVU1035
 3168 007a 4FF0FF30 		mov	r0, #-1
 3169              	.LVL278:
1637:Core/Src/SEGGER_RTT.c ****   }
 3170              		.loc 1 1637 17 view .LVU1036
 3171 007e F5E7     		b	.L192
 3172              	.L202:
 3173              		.align	2
 3174              	.L201:
 3175 0080 00000000 		.word	.LANCHOR0
 3176              	.LBE111:
 3177              		.cfi_endproc
 3178              	.LFE24:
 3180              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 3181              		.align	1
 3182              		.p2align 2,,3
 3183              		.global	SEGGER_RTT_ConfigUpBuffer
 3184              		.syntax unified
 3185              		.thumb
 3186              		.thumb_func
 3188              	SEGGER_RTT_ConfigUpBuffer:
 3189              	.LVL279:
 3190              	.LFB25:
1642:Core/Src/SEGGER_RTT.c **** 
1643:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1644:Core/Src/SEGGER_RTT.c **** *
1645:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1646:Core/Src/SEGGER_RTT.c **** *
1647:Core/Src/SEGGER_RTT.c **** *  Function description
1648:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1649:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1650:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1651:Core/Src/SEGGER_RTT.c **** *
1652:Core/Src/SEGGER_RTT.c **** *  Parameters
1653:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1654:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1655:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1656:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1657:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1658:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1659:Core/Src/SEGGER_RTT.c **** *
1660:Core/Src/SEGGER_RTT.c **** *  Return value
1661:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1662:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1663:Core/Src/SEGGER_RTT.c **** *
1664:Core/Src/SEGGER_RTT.c **** *  Additional information
1665:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1666:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1667:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 95


1668:Core/Src/SEGGER_RTT.c **** */
1669:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 3191              		.loc 1 1669 124 is_stmt 1 view -0
 3192              		.cfi_startproc
 3193              		@ args = 4, pretend = 0, frame = 0
 3194              		@ frame_needed = 0, uses_anonymous_args = 0
1670:Core/Src/SEGGER_RTT.c ****   int r;
 3195              		.loc 1 1670 3 view .LVU1038
1671:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3196              		.loc 1 1671 3 view .LVU1039
1672:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3197              		.loc 1 1672 3 view .LVU1040
 3198              	.LBB112:
1673:Core/Src/SEGGER_RTT.c **** 
1674:Core/Src/SEGGER_RTT.c ****   INIT();
 3199              		.loc 1 1674 3 view .LVU1041
 3200              		.loc 1 1674 3 view .LVU1042
 3201              		.loc 1 1674 3 view .LVU1043
 3202              		.loc 1 1674 3 view .LVU1044
 3203              	.LBE112:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3204              		.loc 1 1669 124 is_stmt 0 view .LVU1045
 3205 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3206              		.cfi_def_cfa_offset 24
 3207              		.cfi_offset 4, -24
 3208              		.cfi_offset 5, -20
 3209              		.cfi_offset 6, -16
 3210              		.cfi_offset 7, -12
 3211              		.cfi_offset 8, -8
 3212              		.cfi_offset 14, -4
 3213              	.LBB113:
 3214              		.loc 1 1674 3 view .LVU1046
 3215 0004 194D     		ldr	r5, .L213
 3216              	.LBE113:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3217              		.loc 1 1669 124 view .LVU1047
 3218 0006 1E46     		mov	r6, r3
 3219              	.LBB114:
 3220              		.loc 1 1674 3 view .LVU1048
 3221 0008 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3222              	.LVL280:
 3223              		.loc 1 1674 3 view .LVU1049
 3224              	.LBE114:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3225              		.loc 1 1669 124 view .LVU1050
 3226 000a 0446     		mov	r4, r0
 3227 000c 8846     		mov	r8, r1
 3228 000e 1746     		mov	r7, r2
 3229              	.LBB115:
 3230              		.loc 1 1674 3 view .LVU1051
 3231 0010 2BB3     		cbz	r3, .L212
 3232              	.LVL281:
 3233              	.L204:
 3234              		.loc 1 1674 3 is_stmt 1 discriminator 3 view .LVU1052
 3235              	.LBE115:
 3236              		.loc 1 1674 9 discriminator 3 view .LVU1053
1675:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 96


 3237              		.loc 1 1675 3 discriminator 3 view .LVU1054
1676:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3238              		.loc 1 1676 3 discriminator 3 view .LVU1055
 3239              		.loc 1 1676 6 is_stmt 0 discriminator 3 view .LVU1056
 3240 0012 022C     		cmp	r4, #2
 3241 0014 26D8     		bhi	.L207
 3242              	.LBB116:
1677:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3243              		.loc 1 1677 5 is_stmt 1 view .LVU1057
 3244              		.loc 1 1677 5 view .LVU1058
 3245              		.syntax unified
 3246              	@ 1677 "Core/Src/SEGGER_RTT.c" 1
 3247 0016 EFF3118C 		mrs   ip, basepri  
 3248 001a 4FF02001 		mov   r1, #32       
 3249 001e 81F31188 		msr   basepri, r1  
 3250              		
 3251              	@ 0 "" 2
 3252              	.LVL282:
 3253              		.loc 1 1677 22 view .LVU1059
1678:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3254              		.loc 1 1678 5 view .LVU1060
1679:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3255              		.loc 1 1679 5 view .LVU1061
 3256              		.loc 1 1679 8 is_stmt 0 view .LVU1062
 3257              		.thumb
 3258              		.syntax unified
 3259 0022 54B9     		cbnz	r4, .L210
 3260 0024 2246     		mov	r2, r4
 3261              	.L206:
1680:Core/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
1681:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
1682:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
1683:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
1684:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
1685:Core/Src/SEGGER_RTT.c ****     }
1686:Core/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 3262              		.loc 1 1686 5 is_stmt 1 view .LVU1063
 3263              		.loc 1 1686 25 is_stmt 0 view .LVU1064
 3264 0026 1319     		adds	r3, r2, r4
 3265 0028 05EBC305 		add	r5, r5, r3, lsl #3
 3266 002c 069B     		ldr	r3, [sp, #24]
 3267 002e EB62     		str	r3, [r5, #44]
1687:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3268              		.loc 1 1687 5 is_stmt 1 view .LVU1065
 3269              		.syntax unified
 3270              	@ 1687 "Core/Src/SEGGER_RTT.c" 1
 3271 0030 8CF31188 		msr   basepri, ip  
 3272              		
 3273              	@ 0 "" 2
 3274              		.thumb
 3275              		.syntax unified
 3276              	.LBE116:
 3277              		.loc 1 1687 24 view .LVU1066
1688:Core/Src/SEGGER_RTT.c ****     r =  0;
 3278              		.loc 1 1688 5 view .LVU1067
 3279              	.LVL283:
 3280              		.loc 1 1688 7 is_stmt 0 view .LVU1068
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 97


 3281 0034 0020     		movs	r0, #0
 3282              	.LVL284:
 3283              	.L203:
1689:Core/Src/SEGGER_RTT.c ****   } else {
1690:Core/Src/SEGGER_RTT.c ****     r = -1;
1691:Core/Src/SEGGER_RTT.c ****   }
1692:Core/Src/SEGGER_RTT.c ****   return r;
1693:Core/Src/SEGGER_RTT.c **** }
 3284              		.loc 1 1693 1 view .LVU1069
 3285 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3286              	.LVL285:
 3287              	.L210:
 3288              	.LBB117:
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3289              		.loc 1 1680 7 is_stmt 1 view .LVU1070
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3290              		.loc 1 1680 25 is_stmt 0 view .LVU1071
 3291 003a 601C     		adds	r0, r4, #1
 3292 003c 00EB4000 		add	r0, r0, r0, lsl #1
 3293 0040 C000     		lsls	r0, r0, #3
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3294              		.loc 1 1682 25 view .LVU1072
 3295 0042 04EB4403 		add	r3, r4, r4, lsl #1
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3296              		.loc 1 1680 25 view .LVU1073
 3297 0046 45F80080 		str	r8, [r5, r0]
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3298              		.loc 1 1681 7 is_stmt 1 view .LVU1074
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3299              		.loc 1 1682 25 is_stmt 0 view .LVU1075
 3300 004a 05EBC303 		add	r3, r5, r3, lsl #3
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3301              		.loc 1 1681 25 view .LVU1076
 3302 004e 2844     		add	r0, r0, r5
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3303              		.loc 1 1683 25 view .LVU1077
 3304 0050 0021     		movs	r1, #0
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3305              		.loc 1 1681 25 view .LVU1078
 3306 0052 4760     		str	r7, [r0, #4]
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3307              		.loc 1 1682 7 is_stmt 1 view .LVU1079
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3308              		.loc 1 1682 25 is_stmt 0 view .LVU1080
 3309 0054 6200     		lsls	r2, r4, #1
 3310 0056 1E62     		str	r6, [r3, #32]
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3311              		.loc 1 1683 7 is_stmt 1 view .LVU1081
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3312              		.loc 1 1683 25 is_stmt 0 view .LVU1082
 3313 0058 9962     		str	r1, [r3, #40]
1684:Core/Src/SEGGER_RTT.c ****     }
 3314              		.loc 1 1684 7 is_stmt 1 view .LVU1083
1684:Core/Src/SEGGER_RTT.c ****     }
 3315              		.loc 1 1684 25 is_stmt 0 view .LVU1084
 3316 005a 5962     		str	r1, [r3, #36]
 3317 005c E3E7     		b	.L206
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 98


 3318              	.LVL286:
 3319              	.L212:
1684:Core/Src/SEGGER_RTT.c ****     }
 3320              		.loc 1 1684 25 view .LVU1085
 3321              	.LBE117:
 3322              	.LBB118:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3323              		.loc 1 1674 3 is_stmt 1 discriminator 1 view .LVU1086
 3324 005e FFF7FEFF 		bl	_DoInit
 3325              	.LVL287:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3326              		.loc 1 1674 3 is_stmt 0 discriminator 1 view .LVU1087
 3327 0062 D6E7     		b	.L204
 3328              	.LVL288:
 3329              	.L207:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3330              		.loc 1 1674 3 discriminator 1 view .LVU1088
 3331              	.LBE118:
1690:Core/Src/SEGGER_RTT.c ****   }
 3332              		.loc 1 1690 7 view .LVU1089
 3333 0064 4FF0FF30 		mov	r0, #-1
 3334              	.LVL289:
1692:Core/Src/SEGGER_RTT.c **** }
 3335              		.loc 1 1692 3 is_stmt 1 view .LVU1090
1692:Core/Src/SEGGER_RTT.c **** }
 3336              		.loc 1 1692 10 is_stmt 0 view .LVU1091
 3337 0068 E5E7     		b	.L203
 3338              	.L214:
 3339 006a 00BF     		.align	2
 3340              	.L213:
 3341 006c 00000000 		.word	.LANCHOR0
 3342              		.cfi_endproc
 3343              	.LFE25:
 3345              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3346              		.align	1
 3347              		.p2align 2,,3
 3348              		.global	SEGGER_RTT_ConfigDownBuffer
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3353              	SEGGER_RTT_ConfigDownBuffer:
 3354              	.LVL290:
 3355              	.LFB26:
1694:Core/Src/SEGGER_RTT.c **** 
1695:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1696:Core/Src/SEGGER_RTT.c **** *
1697:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1698:Core/Src/SEGGER_RTT.c **** *
1699:Core/Src/SEGGER_RTT.c **** *  Function description
1700:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1701:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1702:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1703:Core/Src/SEGGER_RTT.c **** *
1704:Core/Src/SEGGER_RTT.c **** *  Parameters
1705:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1706:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1707:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 99


1708:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1709:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1710:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1711:Core/Src/SEGGER_RTT.c **** *
1712:Core/Src/SEGGER_RTT.c **** *  Return value
1713:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1714:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1715:Core/Src/SEGGER_RTT.c **** *
1716:Core/Src/SEGGER_RTT.c **** *  Additional information
1717:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1718:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1719:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1720:Core/Src/SEGGER_RTT.c **** */
1721:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3356              		.loc 1 1721 126 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 4, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
1722:Core/Src/SEGGER_RTT.c ****   int r;
 3360              		.loc 1 1722 3 view .LVU1093
1723:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3361              		.loc 1 1723 3 view .LVU1094
1724:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3362              		.loc 1 1724 3 view .LVU1095
 3363              	.LBB119:
1725:Core/Src/SEGGER_RTT.c **** 
1726:Core/Src/SEGGER_RTT.c ****   INIT();
 3364              		.loc 1 1726 3 view .LVU1096
 3365              		.loc 1 1726 3 view .LVU1097
 3366              		.loc 1 1726 3 view .LVU1098
 3367              		.loc 1 1726 3 view .LVU1099
 3368              	.LBE119:
1721:Core/Src/SEGGER_RTT.c ****   int r;
 3369              		.loc 1 1721 126 is_stmt 0 view .LVU1100
 3370 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3371              		.cfi_def_cfa_offset 24
 3372              		.cfi_offset 4, -24
 3373              		.cfi_offset 5, -20
 3374              		.cfi_offset 6, -16
 3375              		.cfi_offset 7, -12
 3376              		.cfi_offset 8, -8
 3377              		.cfi_offset 14, -4
 3378              	.LBB120:
 3379              		.loc 1 1726 3 view .LVU1101
 3380 0004 174D     		ldr	r5, .L225
 3381              	.LBE120:
1721:Core/Src/SEGGER_RTT.c ****   int r;
 3382              		.loc 1 1721 126 view .LVU1102
 3383 0006 1E46     		mov	r6, r3
 3384              	.LBB121:
 3385              		.loc 1 1726 3 view .LVU1103
 3386 0008 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3387              	.LVL291:
 3388              		.loc 1 1726 3 view .LVU1104
 3389              	.LBE121:
1721:Core/Src/SEGGER_RTT.c ****   int r;
 3390              		.loc 1 1721 126 view .LVU1105
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 100


 3391 000a 0446     		mov	r4, r0
 3392 000c 8846     		mov	r8, r1
 3393 000e 1746     		mov	r7, r2
 3394              	.LBB122:
 3395              		.loc 1 1726 3 view .LVU1106
 3396 0010 13B3     		cbz	r3, .L224
 3397              	.LVL292:
 3398              	.L216:
 3399              		.loc 1 1726 3 is_stmt 1 discriminator 3 view .LVU1107
 3400              	.LBE122:
 3401              		.loc 1 1726 9 discriminator 3 view .LVU1108
1727:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3402              		.loc 1 1727 3 discriminator 3 view .LVU1109
1728:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3403              		.loc 1 1728 3 discriminator 3 view .LVU1110
 3404              		.loc 1 1728 6 is_stmt 0 discriminator 3 view .LVU1111
 3405 0012 022C     		cmp	r4, #2
 3406 0014 23D8     		bhi	.L219
 3407              	.LBB123:
1729:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3408              		.loc 1 1729 5 is_stmt 1 view .LVU1112
 3409              		.loc 1 1729 5 view .LVU1113
 3410              		.syntax unified
 3411              	@ 1729 "Core/Src/SEGGER_RTT.c" 1
 3412 0016 EFF31182 		mrs   r2, basepri  
 3413 001a 4FF02001 		mov   r1, #32       
 3414 001e 81F31188 		msr   basepri, r1  
 3415              		
 3416              	@ 0 "" 2
 3417              	.LVL293:
 3418              		.loc 1 1729 22 view .LVU1114
1730:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3419              		.loc 1 1730 5 view .LVU1115
1731:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3420              		.loc 1 1731 5 view .LVU1116
 3421              		.loc 1 1731 8 is_stmt 0 view .LVU1117
 3422              		.thumb
 3423              		.syntax unified
 3424 0022 64B9     		cbnz	r4, .L222
 3425 0024 2346     		mov	r3, r4
 3426              	.L218:
1732:Core/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
1733:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
1734:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
1735:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
1736:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
1737:Core/Src/SEGGER_RTT.c ****     }
1738:Core/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3427              		.loc 1 1738 5 is_stmt 1 view .LVU1118
 3428              		.loc 1 1738 27 is_stmt 0 view .LVU1119
 3429 0026 2344     		add	r3, r3, r4
 3430 0028 05EBC305 		add	r5, r5, r3, lsl #3
 3431 002c 069B     		ldr	r3, [sp, #24]
 3432 002e 6B67     		str	r3, [r5, #116]
1739:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3433              		.loc 1 1739 5 is_stmt 1 view .LVU1120
 3434              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 101


 3435              	@ 1739 "Core/Src/SEGGER_RTT.c" 1
 3436 0030 BFF35F8F 		dmb
 3437              	
 3438              	@ 0 "" 2
 3439              		.loc 1 1739 15 view .LVU1121
1740:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3440              		.loc 1 1740 5 view .LVU1122
 3441              	@ 1740 "Core/Src/SEGGER_RTT.c" 1
 3442 0034 82F31188 		msr   basepri, r2  
 3443              		
 3444              	@ 0 "" 2
 3445              		.thumb
 3446              		.syntax unified
 3447              	.LBE123:
 3448              		.loc 1 1740 24 view .LVU1123
1741:Core/Src/SEGGER_RTT.c ****     r =  0;
 3449              		.loc 1 1741 5 view .LVU1124
 3450              	.LVL294:
 3451              		.loc 1 1741 7 is_stmt 0 view .LVU1125
 3452 0038 0020     		movs	r0, #0
 3453              	.LVL295:
 3454              	.L215:
1742:Core/Src/SEGGER_RTT.c ****   } else {
1743:Core/Src/SEGGER_RTT.c ****     r = -1;
1744:Core/Src/SEGGER_RTT.c ****   }
1745:Core/Src/SEGGER_RTT.c ****   return r;
1746:Core/Src/SEGGER_RTT.c **** }
 3455              		.loc 1 1746 1 view .LVU1126
 3456 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3457              	.LVL296:
 3458              	.L222:
 3459              	.LBB124:
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3460              		.loc 1 1732 7 is_stmt 1 view .LVU1127
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3461              		.loc 1 1732 27 is_stmt 0 view .LVU1128
 3462 003e 04EB4400 		add	r0, r4, r4, lsl #1
 3463 0042 05EBC000 		add	r0, r5, r0, lsl #3
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3464              		.loc 1 1735 27 view .LVU1129
 3465 0046 0023     		movs	r3, #0
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3466              		.loc 1 1732 27 view .LVU1130
 3467 0048 C0F86080 		str	r8, [r0, #96]
1733:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3468              		.loc 1 1733 7 is_stmt 1 view .LVU1131
1733:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3469              		.loc 1 1733 27 is_stmt 0 view .LVU1132
 3470 004c 4766     		str	r7, [r0, #100]
1734:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3471              		.loc 1 1734 7 is_stmt 1 view .LVU1133
1734:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3472              		.loc 1 1734 27 is_stmt 0 view .LVU1134
 3473 004e 8666     		str	r6, [r0, #104]
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3474              		.loc 1 1735 7 is_stmt 1 view .LVU1135
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 102


 3475              		.loc 1 1735 27 is_stmt 0 view .LVU1136
 3476 0050 0367     		str	r3, [r0, #112]
1736:Core/Src/SEGGER_RTT.c ****     }
 3477              		.loc 1 1736 7 is_stmt 1 view .LVU1137
1736:Core/Src/SEGGER_RTT.c ****     }
 3478              		.loc 1 1736 27 is_stmt 0 view .LVU1138
 3479 0052 C366     		str	r3, [r0, #108]
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3480              		.loc 1 1732 27 view .LVU1139
 3481 0054 6300     		lsls	r3, r4, #1
 3482 0056 E6E7     		b	.L218
 3483              	.LVL297:
 3484              	.L224:
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3485              		.loc 1 1732 27 view .LVU1140
 3486              	.LBE124:
 3487              	.LBB125:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3488              		.loc 1 1726 3 is_stmt 1 discriminator 1 view .LVU1141
 3489 0058 FFF7FEFF 		bl	_DoInit
 3490              	.LVL298:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3491              		.loc 1 1726 3 is_stmt 0 discriminator 1 view .LVU1142
 3492 005c D9E7     		b	.L216
 3493              	.LVL299:
 3494              	.L219:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3495              		.loc 1 1726 3 discriminator 1 view .LVU1143
 3496              	.LBE125:
1743:Core/Src/SEGGER_RTT.c ****   }
 3497              		.loc 1 1743 7 view .LVU1144
 3498 005e 4FF0FF30 		mov	r0, #-1
 3499              	.LVL300:
1745:Core/Src/SEGGER_RTT.c **** }
 3500              		.loc 1 1745 3 is_stmt 1 view .LVU1145
1745:Core/Src/SEGGER_RTT.c **** }
 3501              		.loc 1 1745 10 is_stmt 0 view .LVU1146
 3502 0062 EAE7     		b	.L215
 3503              	.L226:
 3504              		.align	2
 3505              	.L225:
 3506 0064 00000000 		.word	.LANCHOR0
 3507              		.cfi_endproc
 3508              	.LFE26:
 3510              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3511              		.align	1
 3512              		.p2align 2,,3
 3513              		.global	SEGGER_RTT_SetNameUpBuffer
 3514              		.syntax unified
 3515              		.thumb
 3516              		.thumb_func
 3518              	SEGGER_RTT_SetNameUpBuffer:
 3519              	.LVL301:
 3520              	.LFB27:
1747:Core/Src/SEGGER_RTT.c **** 
1748:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1749:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 103


1750:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1751:Core/Src/SEGGER_RTT.c **** *
1752:Core/Src/SEGGER_RTT.c **** *  Function description
1753:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1754:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1755:Core/Src/SEGGER_RTT.c **** *
1756:Core/Src/SEGGER_RTT.c **** *  Parameters
1757:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1758:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1759:Core/Src/SEGGER_RTT.c **** *
1760:Core/Src/SEGGER_RTT.c **** *  Return value
1761:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1762:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1763:Core/Src/SEGGER_RTT.c **** */
1764:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3521              		.loc 1 1764 73 is_stmt 1 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 0
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
1765:Core/Src/SEGGER_RTT.c ****   int r;
 3525              		.loc 1 1765 3 view .LVU1148
1766:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3526              		.loc 1 1766 3 view .LVU1149
1767:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3527              		.loc 1 1767 3 view .LVU1150
 3528              	.LBB126:
1768:Core/Src/SEGGER_RTT.c **** 
1769:Core/Src/SEGGER_RTT.c ****   INIT();
 3529              		.loc 1 1769 3 view .LVU1151
 3530              		.loc 1 1769 3 view .LVU1152
 3531              		.loc 1 1769 3 view .LVU1153
 3532              		.loc 1 1769 3 view .LVU1154
 3533              	.LBE126:
1764:Core/Src/SEGGER_RTT.c ****   int r;
 3534              		.loc 1 1764 73 is_stmt 0 view .LVU1155
 3535 0000 70B5     		push	{r4, r5, r6, lr}
 3536              		.cfi_def_cfa_offset 16
 3537              		.cfi_offset 4, -16
 3538              		.cfi_offset 5, -12
 3539              		.cfi_offset 6, -8
 3540              		.cfi_offset 14, -4
 3541              	.LBB127:
 3542              		.loc 1 1769 3 view .LVU1156
 3543 0002 0E4E     		ldr	r6, .L233
 3544 0004 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 3545              	.LBE127:
1764:Core/Src/SEGGER_RTT.c ****   int r;
 3546              		.loc 1 1764 73 view .LVU1157
 3547 0006 0446     		mov	r4, r0
 3548 0008 0D46     		mov	r5, r1
 3549              	.LBB128:
 3550              		.loc 1 1769 3 view .LVU1158
 3551 000a 83B1     		cbz	r3, .L232
 3552              	.LVL302:
 3553              	.L228:
 3554              		.loc 1 1769 3 is_stmt 1 discriminator 3 view .LVU1159
 3555              	.LBE128:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 104


 3556              		.loc 1 1769 9 discriminator 3 view .LVU1160
1770:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3557              		.loc 1 1770 3 discriminator 3 view .LVU1161
1771:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3558              		.loc 1 1771 3 discriminator 3 view .LVU1162
 3559              		.loc 1 1771 6 is_stmt 0 discriminator 3 view .LVU1163
 3560 000c 022C     		cmp	r4, #2
 3561 000e 11D8     		bhi	.L230
 3562              	.LBB129:
1772:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3563              		.loc 1 1772 5 is_stmt 1 view .LVU1164
 3564              		.loc 1 1772 5 view .LVU1165
 3565              		.syntax unified
 3566              	@ 1772 "Core/Src/SEGGER_RTT.c" 1
 3567 0010 EFF31183 		mrs   r3, basepri  
 3568 0014 4FF02001 		mov   r1, #32       
 3569 0018 81F31188 		msr   basepri, r1  
 3570              		
 3571              	@ 0 "" 2
 3572              	.LVL303:
 3573              		.loc 1 1772 22 view .LVU1166
1773:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3574              		.loc 1 1773 5 view .LVU1167
1774:Core/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3575              		.loc 1 1774 5 view .LVU1168
 3576              		.loc 1 1774 16 is_stmt 0 view .LVU1169
 3577              		.thumb
 3578              		.syntax unified
 3579 001c 0134     		adds	r4, r4, #1
 3580              	.LVL304:
 3581              		.loc 1 1774 16 view .LVU1170
 3582 001e 04EB4404 		add	r4, r4, r4, lsl #1
 3583              	.LVL305:
 3584              		.loc 1 1774 16 view .LVU1171
 3585 0022 E400     		lsls	r4, r4, #3
 3586 0024 3551     		str	r5, [r6, r4]
1775:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3587              		.loc 1 1775 5 is_stmt 1 view .LVU1172
 3588              		.syntax unified
 3589              	@ 1775 "Core/Src/SEGGER_RTT.c" 1
 3590 0026 83F31188 		msr   basepri, r3  
 3591              		
 3592              	@ 0 "" 2
 3593              		.thumb
 3594              		.syntax unified
 3595              	.LBE129:
 3596              		.loc 1 1775 24 view .LVU1173
1776:Core/Src/SEGGER_RTT.c ****     r =  0;
 3597              		.loc 1 1776 5 view .LVU1174
 3598              	.LVL306:
 3599              		.loc 1 1776 7 is_stmt 0 view .LVU1175
 3600 002a 0020     		movs	r0, #0
1777:Core/Src/SEGGER_RTT.c ****   } else {
1778:Core/Src/SEGGER_RTT.c ****     r = -1;
1779:Core/Src/SEGGER_RTT.c ****   }
1780:Core/Src/SEGGER_RTT.c ****   return r;
1781:Core/Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 105


 3601              		.loc 1 1781 1 view .LVU1176
 3602 002c 70BD     		pop	{r4, r5, r6, pc}
 3603              	.LVL307:
 3604              	.L232:
 3605              	.LBB130:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3606              		.loc 1 1769 3 is_stmt 1 discriminator 1 view .LVU1177
 3607 002e FFF7FEFF 		bl	_DoInit
 3608              	.LVL308:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3609              		.loc 1 1769 3 is_stmt 0 discriminator 1 view .LVU1178
 3610 0032 EBE7     		b	.L228
 3611              	.LVL309:
 3612              	.L230:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3613              		.loc 1 1769 3 discriminator 1 view .LVU1179
 3614              	.LBE130:
1778:Core/Src/SEGGER_RTT.c ****   }
 3615              		.loc 1 1778 7 view .LVU1180
 3616 0034 4FF0FF30 		mov	r0, #-1
 3617              	.LVL310:
1780:Core/Src/SEGGER_RTT.c **** }
 3618              		.loc 1 1780 3 is_stmt 1 view .LVU1181
 3619              		.loc 1 1781 1 is_stmt 0 view .LVU1182
 3620 0038 70BD     		pop	{r4, r5, r6, pc}
 3621              	.LVL311:
 3622              	.L234:
 3623              		.loc 1 1781 1 view .LVU1183
 3624 003a 00BF     		.align	2
 3625              	.L233:
 3626 003c 00000000 		.word	.LANCHOR0
 3627              		.cfi_endproc
 3628              	.LFE27:
 3630              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3631              		.align	1
 3632              		.p2align 2,,3
 3633              		.global	SEGGER_RTT_SetNameDownBuffer
 3634              		.syntax unified
 3635              		.thumb
 3636              		.thumb_func
 3638              	SEGGER_RTT_SetNameDownBuffer:
 3639              	.LVL312:
 3640              	.LFB28:
1782:Core/Src/SEGGER_RTT.c **** 
1783:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1784:Core/Src/SEGGER_RTT.c **** *
1785:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1786:Core/Src/SEGGER_RTT.c **** *
1787:Core/Src/SEGGER_RTT.c **** *  Function description
1788:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1789:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1790:Core/Src/SEGGER_RTT.c **** *
1791:Core/Src/SEGGER_RTT.c **** *  Parameters
1792:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1793:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1794:Core/Src/SEGGER_RTT.c **** *
1795:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 106


1796:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1797:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1798:Core/Src/SEGGER_RTT.c **** */
1799:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3641              		.loc 1 1799 75 is_stmt 1 view -0
 3642              		.cfi_startproc
 3643              		@ args = 0, pretend = 0, frame = 0
 3644              		@ frame_needed = 0, uses_anonymous_args = 0
1800:Core/Src/SEGGER_RTT.c ****   int r;
 3645              		.loc 1 1800 3 view .LVU1185
1801:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3646              		.loc 1 1801 3 view .LVU1186
1802:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3647              		.loc 1 1802 3 view .LVU1187
 3648              	.LBB131:
1803:Core/Src/SEGGER_RTT.c **** 
1804:Core/Src/SEGGER_RTT.c ****   INIT();
 3649              		.loc 1 1804 3 view .LVU1188
 3650              		.loc 1 1804 3 view .LVU1189
 3651              		.loc 1 1804 3 view .LVU1190
 3652              		.loc 1 1804 3 view .LVU1191
 3653              	.LBE131:
1799:Core/Src/SEGGER_RTT.c ****   int r;
 3654              		.loc 1 1799 75 is_stmt 0 view .LVU1192
 3655 0000 70B5     		push	{r4, r5, r6, lr}
 3656              		.cfi_def_cfa_offset 16
 3657              		.cfi_offset 4, -16
 3658              		.cfi_offset 5, -12
 3659              		.cfi_offset 6, -8
 3660              		.cfi_offset 14, -4
 3661              	.LBB132:
 3662              		.loc 1 1804 3 view .LVU1193
 3663 0002 0E4D     		ldr	r5, .L241
 3664 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3665              	.LBE132:
1799:Core/Src/SEGGER_RTT.c ****   int r;
 3666              		.loc 1 1799 75 view .LVU1194
 3667 0006 0446     		mov	r4, r0
 3668 0008 0E46     		mov	r6, r1
 3669              	.LBB133:
 3670              		.loc 1 1804 3 view .LVU1195
 3671 000a 83B1     		cbz	r3, .L240
 3672              	.LVL313:
 3673              	.L236:
 3674              		.loc 1 1804 3 is_stmt 1 discriminator 3 view .LVU1196
 3675              	.LBE133:
 3676              		.loc 1 1804 9 discriminator 3 view .LVU1197
1805:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3677              		.loc 1 1805 3 discriminator 3 view .LVU1198
1806:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3678              		.loc 1 1806 3 discriminator 3 view .LVU1199
 3679              		.loc 1 1806 6 is_stmt 0 discriminator 3 view .LVU1200
 3680 000c 022C     		cmp	r4, #2
 3681 000e 11D8     		bhi	.L238
 3682              	.LBB134:
1807:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3683              		.loc 1 1807 5 is_stmt 1 view .LVU1201
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 107


 3684              		.loc 1 1807 5 view .LVU1202
 3685              		.syntax unified
 3686              	@ 1807 "Core/Src/SEGGER_RTT.c" 1
 3687 0010 EFF31183 		mrs   r3, basepri  
 3688 0014 4FF02001 		mov   r1, #32       
 3689 0018 81F31188 		msr   basepri, r1  
 3690              		
 3691              	@ 0 "" 2
 3692              	.LVL314:
 3693              		.loc 1 1807 22 view .LVU1203
1808:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3694              		.loc 1 1808 5 view .LVU1204
1809:Core/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3695              		.loc 1 1809 5 view .LVU1205
 3696              		.loc 1 1809 18 is_stmt 0 view .LVU1206
 3697              		.thumb
 3698              		.syntax unified
 3699 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3700              	.LVL315:
 3701              		.loc 1 1809 18 view .LVU1207
 3702 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3703 0024 2E66     		str	r6, [r5, #96]
1810:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3704              		.loc 1 1810 5 is_stmt 1 view .LVU1208
 3705              		.syntax unified
 3706              	@ 1810 "Core/Src/SEGGER_RTT.c" 1
 3707 0026 83F31188 		msr   basepri, r3  
 3708              		
 3709              	@ 0 "" 2
 3710              		.thumb
 3711              		.syntax unified
 3712              	.LBE134:
 3713              		.loc 1 1810 24 view .LVU1209
1811:Core/Src/SEGGER_RTT.c ****     r =  0;
 3714              		.loc 1 1811 5 view .LVU1210
 3715              	.LVL316:
 3716              		.loc 1 1811 7 is_stmt 0 view .LVU1211
 3717 002a 0020     		movs	r0, #0
1812:Core/Src/SEGGER_RTT.c ****   } else {
1813:Core/Src/SEGGER_RTT.c ****     r = -1;
1814:Core/Src/SEGGER_RTT.c ****   }
1815:Core/Src/SEGGER_RTT.c ****   return r;
1816:Core/Src/SEGGER_RTT.c **** }
 3718              		.loc 1 1816 1 view .LVU1212
 3719 002c 70BD     		pop	{r4, r5, r6, pc}
 3720              	.LVL317:
 3721              	.L240:
 3722              	.LBB135:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3723              		.loc 1 1804 3 is_stmt 1 discriminator 1 view .LVU1213
 3724 002e FFF7FEFF 		bl	_DoInit
 3725              	.LVL318:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3726              		.loc 1 1804 3 is_stmt 0 discriminator 1 view .LVU1214
 3727 0032 EBE7     		b	.L236
 3728              	.LVL319:
 3729              	.L238:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 108


1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3730              		.loc 1 1804 3 discriminator 1 view .LVU1215
 3731              	.LBE135:
1813:Core/Src/SEGGER_RTT.c ****   }
 3732              		.loc 1 1813 7 view .LVU1216
 3733 0034 4FF0FF30 		mov	r0, #-1
 3734              	.LVL320:
1815:Core/Src/SEGGER_RTT.c **** }
 3735              		.loc 1 1815 3 is_stmt 1 view .LVU1217
 3736              		.loc 1 1816 1 is_stmt 0 view .LVU1218
 3737 0038 70BD     		pop	{r4, r5, r6, pc}
 3738              	.LVL321:
 3739              	.L242:
 3740              		.loc 1 1816 1 view .LVU1219
 3741 003a 00BF     		.align	2
 3742              	.L241:
 3743 003c 00000000 		.word	.LANCHOR0
 3744              		.cfi_endproc
 3745              	.LFE28:
 3747              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3748              		.align	1
 3749              		.p2align 2,,3
 3750              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3755              	SEGGER_RTT_SetFlagsUpBuffer:
 3756              	.LVL322:
 3757              	.LFB29:
1817:Core/Src/SEGGER_RTT.c **** 
1818:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1819:Core/Src/SEGGER_RTT.c **** *
1820:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1821:Core/Src/SEGGER_RTT.c **** *
1822:Core/Src/SEGGER_RTT.c **** *  Function description
1823:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1824:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1825:Core/Src/SEGGER_RTT.c **** *
1826:Core/Src/SEGGER_RTT.c **** *  Parameters
1827:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1828:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1829:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1830:Core/Src/SEGGER_RTT.c **** *
1831:Core/Src/SEGGER_RTT.c **** *  Return value
1832:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1833:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1834:Core/Src/SEGGER_RTT.c **** */
1835:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3758              		.loc 1 1835 71 is_stmt 1 view -0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
1836:Core/Src/SEGGER_RTT.c ****   int r;
 3762              		.loc 1 1836 3 view .LVU1221
1837:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3763              		.loc 1 1837 3 view .LVU1222
1838:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 109


 3764              		.loc 1 1838 3 view .LVU1223
 3765              	.LBB136:
1839:Core/Src/SEGGER_RTT.c **** 
1840:Core/Src/SEGGER_RTT.c ****   INIT();
 3766              		.loc 1 1840 3 view .LVU1224
 3767              		.loc 1 1840 3 view .LVU1225
 3768              		.loc 1 1840 3 view .LVU1226
 3769              		.loc 1 1840 3 view .LVU1227
 3770              	.LBE136:
1835:Core/Src/SEGGER_RTT.c ****   int r;
 3771              		.loc 1 1835 71 is_stmt 0 view .LVU1228
 3772 0000 70B5     		push	{r4, r5, r6, lr}
 3773              		.cfi_def_cfa_offset 16
 3774              		.cfi_offset 4, -16
 3775              		.cfi_offset 5, -12
 3776              		.cfi_offset 6, -8
 3777              		.cfi_offset 14, -4
 3778              	.LBB137:
 3779              		.loc 1 1840 3 view .LVU1229
 3780 0002 0E4D     		ldr	r5, .L249
 3781 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3782              	.LBE137:
1835:Core/Src/SEGGER_RTT.c ****   int r;
 3783              		.loc 1 1835 71 view .LVU1230
 3784 0006 0446     		mov	r4, r0
 3785 0008 0E46     		mov	r6, r1
 3786              	.LBB138:
 3787              		.loc 1 1840 3 view .LVU1231
 3788 000a 83B1     		cbz	r3, .L248
 3789              	.LVL323:
 3790              	.L244:
 3791              		.loc 1 1840 3 is_stmt 1 discriminator 3 view .LVU1232
 3792              	.LBE138:
 3793              		.loc 1 1840 9 discriminator 3 view .LVU1233
1841:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3794              		.loc 1 1841 3 discriminator 3 view .LVU1234
1842:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3795              		.loc 1 1842 3 discriminator 3 view .LVU1235
 3796              		.loc 1 1842 6 is_stmt 0 discriminator 3 view .LVU1236
 3797 000c 022C     		cmp	r4, #2
 3798 000e 11D8     		bhi	.L246
 3799              	.LBB139:
1843:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3800              		.loc 1 1843 5 is_stmt 1 view .LVU1237
 3801              		.loc 1 1843 5 view .LVU1238
 3802              		.syntax unified
 3803              	@ 1843 "Core/Src/SEGGER_RTT.c" 1
 3804 0010 EFF31183 		mrs   r3, basepri  
 3805 0014 4FF02001 		mov   r1, #32       
 3806 0018 81F31188 		msr   basepri, r1  
 3807              		
 3808              	@ 0 "" 2
 3809              	.LVL324:
 3810              		.loc 1 1843 22 view .LVU1239
1844:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3811              		.loc 1 1844 5 view .LVU1240
1845:Core/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 110


 3812              		.loc 1 1845 5 view .LVU1241
 3813              		.loc 1 1845 16 is_stmt 0 view .LVU1242
 3814              		.thumb
 3815              		.syntax unified
 3816 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3817              	.LVL325:
 3818              		.loc 1 1845 16 view .LVU1243
 3819 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3820 0024 EE62     		str	r6, [r5, #44]
1846:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3821              		.loc 1 1846 5 is_stmt 1 view .LVU1244
 3822              		.syntax unified
 3823              	@ 1846 "Core/Src/SEGGER_RTT.c" 1
 3824 0026 83F31188 		msr   basepri, r3  
 3825              		
 3826              	@ 0 "" 2
 3827              		.thumb
 3828              		.syntax unified
 3829              	.LBE139:
 3830              		.loc 1 1846 24 view .LVU1245
1847:Core/Src/SEGGER_RTT.c ****     r =  0;
 3831              		.loc 1 1847 5 view .LVU1246
 3832              	.LVL326:
 3833              		.loc 1 1847 7 is_stmt 0 view .LVU1247
 3834 002a 0020     		movs	r0, #0
1848:Core/Src/SEGGER_RTT.c ****   } else {
1849:Core/Src/SEGGER_RTT.c ****     r = -1;
1850:Core/Src/SEGGER_RTT.c ****   }
1851:Core/Src/SEGGER_RTT.c ****   return r;
1852:Core/Src/SEGGER_RTT.c **** }
 3835              		.loc 1 1852 1 view .LVU1248
 3836 002c 70BD     		pop	{r4, r5, r6, pc}
 3837              	.LVL327:
 3838              	.L248:
 3839              	.LBB140:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3840              		.loc 1 1840 3 is_stmt 1 discriminator 1 view .LVU1249
 3841 002e FFF7FEFF 		bl	_DoInit
 3842              	.LVL328:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3843              		.loc 1 1840 3 is_stmt 0 discriminator 1 view .LVU1250
 3844 0032 EBE7     		b	.L244
 3845              	.LVL329:
 3846              	.L246:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3847              		.loc 1 1840 3 discriminator 1 view .LVU1251
 3848              	.LBE140:
1849:Core/Src/SEGGER_RTT.c ****   }
 3849              		.loc 1 1849 7 view .LVU1252
 3850 0034 4FF0FF30 		mov	r0, #-1
 3851              	.LVL330:
1851:Core/Src/SEGGER_RTT.c **** }
 3852              		.loc 1 1851 3 is_stmt 1 view .LVU1253
 3853              		.loc 1 1852 1 is_stmt 0 view .LVU1254
 3854 0038 70BD     		pop	{r4, r5, r6, pc}
 3855              	.LVL331:
 3856              	.L250:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 111


 3857              		.loc 1 1852 1 view .LVU1255
 3858 003a 00BF     		.align	2
 3859              	.L249:
 3860 003c 00000000 		.word	.LANCHOR0
 3861              		.cfi_endproc
 3862              	.LFE29:
 3864              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3865              		.align	1
 3866              		.p2align 2,,3
 3867              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3868              		.syntax unified
 3869              		.thumb
 3870              		.thumb_func
 3872              	SEGGER_RTT_SetFlagsDownBuffer:
 3873              	.LVL332:
 3874              	.LFB30:
1853:Core/Src/SEGGER_RTT.c **** 
1854:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1855:Core/Src/SEGGER_RTT.c **** *
1856:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1857:Core/Src/SEGGER_RTT.c **** *
1858:Core/Src/SEGGER_RTT.c **** *  Function description
1859:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1860:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1861:Core/Src/SEGGER_RTT.c **** *
1862:Core/Src/SEGGER_RTT.c **** *  Parameters
1863:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1864:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1865:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1866:Core/Src/SEGGER_RTT.c **** *
1867:Core/Src/SEGGER_RTT.c **** *  Return value
1868:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1869:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1870:Core/Src/SEGGER_RTT.c **** */
1871:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3875              		.loc 1 1871 73 is_stmt 1 view -0
 3876              		.cfi_startproc
 3877              		@ args = 0, pretend = 0, frame = 0
 3878              		@ frame_needed = 0, uses_anonymous_args = 0
1872:Core/Src/SEGGER_RTT.c ****   int r;
 3879              		.loc 1 1872 3 view .LVU1257
1873:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3880              		.loc 1 1873 3 view .LVU1258
1874:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3881              		.loc 1 1874 3 view .LVU1259
 3882              	.LBB141:
1875:Core/Src/SEGGER_RTT.c **** 
1876:Core/Src/SEGGER_RTT.c ****   INIT();
 3883              		.loc 1 1876 3 view .LVU1260
 3884              		.loc 1 1876 3 view .LVU1261
 3885              		.loc 1 1876 3 view .LVU1262
 3886              		.loc 1 1876 3 view .LVU1263
 3887              	.LBE141:
1871:Core/Src/SEGGER_RTT.c ****   int r;
 3888              		.loc 1 1871 73 is_stmt 0 view .LVU1264
 3889 0000 70B5     		push	{r4, r5, r6, lr}
 3890              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 112


 3891              		.cfi_offset 4, -16
 3892              		.cfi_offset 5, -12
 3893              		.cfi_offset 6, -8
 3894              		.cfi_offset 14, -4
 3895              	.LBB142:
 3896              		.loc 1 1876 3 view .LVU1265
 3897 0002 0E4D     		ldr	r5, .L257
 3898 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3899              	.LBE142:
1871:Core/Src/SEGGER_RTT.c ****   int r;
 3900              		.loc 1 1871 73 view .LVU1266
 3901 0006 0446     		mov	r4, r0
 3902 0008 0E46     		mov	r6, r1
 3903              	.LBB143:
 3904              		.loc 1 1876 3 view .LVU1267
 3905 000a 83B1     		cbz	r3, .L256
 3906              	.LVL333:
 3907              	.L252:
 3908              		.loc 1 1876 3 is_stmt 1 discriminator 3 view .LVU1268
 3909              	.LBE143:
 3910              		.loc 1 1876 9 discriminator 3 view .LVU1269
1877:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3911              		.loc 1 1877 3 discriminator 3 view .LVU1270
1878:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3912              		.loc 1 1878 3 discriminator 3 view .LVU1271
 3913              		.loc 1 1878 6 is_stmt 0 discriminator 3 view .LVU1272
 3914 000c 022C     		cmp	r4, #2
 3915 000e 11D8     		bhi	.L254
 3916              	.LBB144:
1879:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3917              		.loc 1 1879 5 is_stmt 1 view .LVU1273
 3918              		.loc 1 1879 5 view .LVU1274
 3919              		.syntax unified
 3920              	@ 1879 "Core/Src/SEGGER_RTT.c" 1
 3921 0010 EFF31183 		mrs   r3, basepri  
 3922 0014 4FF02001 		mov   r1, #32       
 3923 0018 81F31188 		msr   basepri, r1  
 3924              		
 3925              	@ 0 "" 2
 3926              	.LVL334:
 3927              		.loc 1 1879 22 view .LVU1275
1880:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3928              		.loc 1 1880 5 view .LVU1276
1881:Core/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3929              		.loc 1 1881 5 view .LVU1277
 3930              		.loc 1 1881 18 is_stmt 0 view .LVU1278
 3931              		.thumb
 3932              		.syntax unified
 3933 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3934              	.LVL335:
 3935              		.loc 1 1881 18 view .LVU1279
 3936 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3937 0024 6E67     		str	r6, [r5, #116]
1882:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3938              		.loc 1 1882 5 is_stmt 1 view .LVU1280
 3939              		.syntax unified
 3940              	@ 1882 "Core/Src/SEGGER_RTT.c" 1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 113


 3941 0026 83F31188 		msr   basepri, r3  
 3942              		
 3943              	@ 0 "" 2
 3944              		.thumb
 3945              		.syntax unified
 3946              	.LBE144:
 3947              		.loc 1 1882 24 view .LVU1281
1883:Core/Src/SEGGER_RTT.c ****     r =  0;
 3948              		.loc 1 1883 5 view .LVU1282
 3949              	.LVL336:
 3950              		.loc 1 1883 7 is_stmt 0 view .LVU1283
 3951 002a 0020     		movs	r0, #0
1884:Core/Src/SEGGER_RTT.c ****   } else {
1885:Core/Src/SEGGER_RTT.c ****     r = -1;
1886:Core/Src/SEGGER_RTT.c ****   }
1887:Core/Src/SEGGER_RTT.c ****   return r;
1888:Core/Src/SEGGER_RTT.c **** }
 3952              		.loc 1 1888 1 view .LVU1284
 3953 002c 70BD     		pop	{r4, r5, r6, pc}
 3954              	.LVL337:
 3955              	.L256:
 3956              	.LBB145:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3957              		.loc 1 1876 3 is_stmt 1 discriminator 1 view .LVU1285
 3958 002e FFF7FEFF 		bl	_DoInit
 3959              	.LVL338:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3960              		.loc 1 1876 3 is_stmt 0 discriminator 1 view .LVU1286
 3961 0032 EBE7     		b	.L252
 3962              	.LVL339:
 3963              	.L254:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3964              		.loc 1 1876 3 discriminator 1 view .LVU1287
 3965              	.LBE145:
1885:Core/Src/SEGGER_RTT.c ****   }
 3966              		.loc 1 1885 7 view .LVU1288
 3967 0034 4FF0FF30 		mov	r0, #-1
 3968              	.LVL340:
1887:Core/Src/SEGGER_RTT.c **** }
 3969              		.loc 1 1887 3 is_stmt 1 view .LVU1289
 3970              		.loc 1 1888 1 is_stmt 0 view .LVU1290
 3971 0038 70BD     		pop	{r4, r5, r6, pc}
 3972              	.LVL341:
 3973              	.L258:
 3974              		.loc 1 1888 1 view .LVU1291
 3975 003a 00BF     		.align	2
 3976              	.L257:
 3977 003c 00000000 		.word	.LANCHOR0
 3978              		.cfi_endproc
 3979              	.LFE30:
 3981              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3982              		.align	1
 3983              		.p2align 2,,3
 3984              		.global	SEGGER_RTT_Init
 3985              		.syntax unified
 3986              		.thumb
 3987              		.thumb_func
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 114


 3989              	SEGGER_RTT_Init:
 3990              	.LFB31:
1889:Core/Src/SEGGER_RTT.c **** 
1890:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1891:Core/Src/SEGGER_RTT.c **** *
1892:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1893:Core/Src/SEGGER_RTT.c **** *
1894:Core/Src/SEGGER_RTT.c **** *  Function description
1895:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1896:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1897:Core/Src/SEGGER_RTT.c **** *
1898:Core/Src/SEGGER_RTT.c **** */
1899:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3991              		.loc 1 1899 29 is_stmt 1 view -0
 3992              		.cfi_startproc
 3993              		@ args = 0, pretend = 0, frame = 0
 3994              		@ frame_needed = 0, uses_anonymous_args = 0
 3995              		@ link register save eliminated.
1900:Core/Src/SEGGER_RTT.c ****   _DoInit();
 3996              		.loc 1 1900 3 view .LVU1293
 3997 0000 FFF7FEBF 		b	_DoInit
 3998              	.LVL342:
 3999              		.cfi_endproc
 4000              	.LFE31:
 4002              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 4003              		.align	1
 4004              		.p2align 2,,3
 4005              		.global	SEGGER_RTT_SetTerminal
 4006              		.syntax unified
 4007              		.thumb
 4008              		.thumb_func
 4010              	SEGGER_RTT_SetTerminal:
 4011              	.LVL343:
 4012              	.LFB32:
1901:Core/Src/SEGGER_RTT.c **** }
1902:Core/Src/SEGGER_RTT.c **** 
1903:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1904:Core/Src/SEGGER_RTT.c **** *
1905:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1906:Core/Src/SEGGER_RTT.c **** *
1907:Core/Src/SEGGER_RTT.c **** *  Function description
1908:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1909:Core/Src/SEGGER_RTT.c **** *
1910:Core/Src/SEGGER_RTT.c **** *  Parameters
1911:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1912:Core/Src/SEGGER_RTT.c **** *
1913:Core/Src/SEGGER_RTT.c **** *  Return value
1914:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1915:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1916:Core/Src/SEGGER_RTT.c **** *
1917:Core/Src/SEGGER_RTT.c **** *  Notes
1918:Core/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1919:Core/Src/SEGGER_RTT.c **** */
1920:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 4013              		.loc 1 1920 55 view -0
 4014              		.cfi_startproc
 4015              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 115


 4016              		@ frame_needed = 0, uses_anonymous_args = 0
1921:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 4017              		.loc 1 1921 3 view .LVU1295
1922:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4018              		.loc 1 1922 3 view .LVU1296
1923:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
 4019              		.loc 1 1923 3 view .LVU1297
1924:Core/Src/SEGGER_RTT.c ****   int r;
 4020              		.loc 1 1924 3 view .LVU1298
 4021              	.LBB146:
1925:Core/Src/SEGGER_RTT.c **** 
1926:Core/Src/SEGGER_RTT.c ****   INIT();
 4022              		.loc 1 1926 3 view .LVU1299
 4023              		.loc 1 1926 3 view .LVU1300
 4024              		.loc 1 1926 3 view .LVU1301
 4025              		.loc 1 1926 3 view .LVU1302
 4026              	.LBE146:
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 4027              		.loc 1 1920 55 is_stmt 0 view .LVU1303
 4028 0000 70B5     		push	{r4, r5, r6, lr}
 4029              		.cfi_def_cfa_offset 16
 4030              		.cfi_offset 4, -16
 4031              		.cfi_offset 5, -12
 4032              		.cfi_offset 6, -8
 4033              		.cfi_offset 14, -4
 4034              	.LBB147:
 4035              		.loc 1 1926 3 view .LVU1304
 4036 0002 204D     		ldr	r5, .L273
 4037 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 4038              	.LBE147:
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 4039              		.loc 1 1920 55 view .LVU1305
 4040 0006 82B0     		sub	sp, sp, #8
 4041              		.cfi_def_cfa_offset 24
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 4042              		.loc 1 1920 55 view .LVU1306
 4043 0008 0446     		mov	r4, r0
 4044              	.LBB148:
 4045              		.loc 1 1926 3 view .LVU1307
 4046 000a 63B3     		cbz	r3, .L270
 4047              	.LVL344:
 4048              	.L261:
 4049              		.loc 1 1926 3 is_stmt 1 discriminator 3 view .LVU1308
 4050              	.LBE148:
 4051              		.loc 1 1926 9 discriminator 3 view .LVU1309
1927:Core/Src/SEGGER_RTT.c ****   r = 0;
 4052              		.loc 1 1927 3 discriminator 3 view .LVU1310
1928:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4053              		.loc 1 1928 3 discriminator 3 view .LVU1311
 4054              		.loc 1 1928 9 is_stmt 0 discriminator 3 view .LVU1312
 4055 000c FF23     		movs	r3, #255
1929:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 4056              		.loc 1 1929 6 discriminator 3 view .LVU1313
 4057 000e 0F2C     		cmp	r4, #15
1928:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4058              		.loc 1 1928 9 discriminator 3 view .LVU1314
 4059 0010 8DF80430 		strb	r3, [sp, #4]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 116


 4060              		.loc 1 1929 3 is_stmt 1 discriminator 3 view .LVU1315
 4061              		.loc 1 1929 6 is_stmt 0 discriminator 3 view .LVU1316
 4062 0014 32D8     		bhi	.L267
1930:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 4063              		.loc 1 1930 5 is_stmt 1 view .LVU1317
 4064              		.loc 1 1930 25 is_stmt 0 view .LVU1318
 4065 0016 1C4B     		ldr	r3, .L273+4
 4066              		.loc 1 1930 11 view .LVU1319
 4067 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 4068 001a 8DF80530 		strb	r3, [sp, #5]
1931:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 4069              		.loc 1 1931 5 is_stmt 1 view .LVU1320
 4070              	.LVL345:
 4071              	.LBB149:
1932:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 4072              		.loc 1 1932 5 view .LVU1321
 4073              		.loc 1 1932 5 view .LVU1322
 4074              		.syntax unified
 4075              	@ 1932 "Core/Src/SEGGER_RTT.c" 1
 4076 001e EFF31186 		mrs   r6, basepri  
 4077 0022 4FF02001 		mov   r1, #32       
 4078 0026 81F31188 		msr   basepri, r1  
 4079              		
 4080              	@ 0 "" 2
 4081              	.LVL346:
 4082              		.loc 1 1932 22 view .LVU1323
1933:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 4083              		.loc 1 1933 5 view .LVU1324
 4084              		.loc 1 1933 23 is_stmt 0 view .LVU1325
 4085              		.thumb
 4086              		.syntax unified
 4087 002a EA6A     		ldr	r2, [r5, #44]
 4088 002c 02F00302 		and	r2, r2, #3
 4089              		.loc 1 1933 8 view .LVU1326
 4090 0030 022A     		cmp	r2, #2
 4091 0032 1BD0     		beq	.L271
1934:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1935:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1936:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1937:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 4092              		.loc 1 1937 7 is_stmt 1 view .LVU1327
 4093              	.LVL347:
 4094              	.LBB150:
 4095              	.LBI150:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4096              		.loc 1 526 17 view .LVU1328
 4097              	.LBB151:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4098              		.loc 1 527 3 view .LVU1329
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4099              		.loc 1 528 3 view .LVU1330
 529:Core/Src/SEGGER_RTT.c ****   //
 4100              		.loc 1 529 3 view .LVU1331
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4101              		.loc 1 534 3 view .LVU1332
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4102              		.loc 1 534 9 is_stmt 0 view .LVU1333
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 117


 4103 0034 AB6A     		ldr	r3, [r5, #40]
 4104              	.LVL348:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4105              		.loc 1 535 3 is_stmt 1 view .LVU1334
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4106              		.loc 1 535 9 is_stmt 0 view .LVU1335
 4107 0036 6A6A     		ldr	r2, [r5, #36]
 4108              	.LVL349:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4109              		.loc 1 536 3 is_stmt 1 view .LVU1336
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4110              		.loc 1 536 6 is_stmt 0 view .LVU1337
 4111 0038 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4112              		.loc 1 537 5 is_stmt 1 view .LVU1338
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4113              		.loc 1 537 7 is_stmt 0 view .LVU1339
 4114 003a 9CBF     		itt	ls
 4115 003c 296A     		ldrls	r1, [r5, #32]
 4116 003e 5B18     		addls	r3, r3, r1
 4117              	.LVL350:
 539:Core/Src/SEGGER_RTT.c ****   }
 4118              		.loc 1 539 5 is_stmt 1 view .LVU1340
 539:Core/Src/SEGGER_RTT.c ****   }
 4119              		.loc 1 539 7 is_stmt 0 view .LVU1341
 4120 0040 013B     		subs	r3, r3, #1
 4121 0042 9A1A     		subs	r2, r3, r2
 4122              	.LVL351:
 541:Core/Src/SEGGER_RTT.c **** }
 4123              		.loc 1 541 3 is_stmt 1 view .LVU1342
 541:Core/Src/SEGGER_RTT.c **** }
 4124              		.loc 1 541 3 is_stmt 0 view .LVU1343
 4125              	.LBE151:
 4126              	.LBE150:
1938:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 4127              		.loc 1 1938 7 is_stmt 1 view .LVU1344
 4128              		.loc 1 1938 10 is_stmt 0 view .LVU1345
 4129 0044 012A     		cmp	r2, #1
 4130 0046 05D8     		bhi	.L272
1939:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1940:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1941:Core/Src/SEGGER_RTT.c ****       } else {
1942:Core/Src/SEGGER_RTT.c ****         r = -1;
 4131              		.loc 1 1942 11 view .LVU1346
 4132 0048 4FF0FF30 		mov	r0, #-1
 4133              	.LVL352:
 4134              	.L264:
1943:Core/Src/SEGGER_RTT.c ****       }
1944:Core/Src/SEGGER_RTT.c ****     }
1945:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4135              		.loc 1 1945 5 is_stmt 1 view .LVU1347
 4136              		.syntax unified
 4137              	@ 1945 "Core/Src/SEGGER_RTT.c" 1
 4138 004c 86F31188 		msr   basepri, r6  
 4139              		
 4140              	@ 0 "" 2
 4141              		.thumb
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 118


 4142              		.syntax unified
 4143              	.LBE149:
 4144              		.loc 1 1945 24 view .LVU1348
 4145              	.LVL353:
 4146              	.L260:
1946:Core/Src/SEGGER_RTT.c ****   } else {
1947:Core/Src/SEGGER_RTT.c ****     r = -1;
1948:Core/Src/SEGGER_RTT.c ****   }
1949:Core/Src/SEGGER_RTT.c ****   return r;
1950:Core/Src/SEGGER_RTT.c **** }
 4147              		.loc 1 1950 1 is_stmt 0 view .LVU1349
 4148 0050 02B0     		add	sp, sp, #8
 4149              		.cfi_remember_state
 4150              		.cfi_def_cfa_offset 16
 4151              		@ sp needed
 4152 0052 70BD     		pop	{r4, r5, r6, pc}
 4153              	.LVL354:
 4154              	.L272:
 4155              		.cfi_restore_state
 4156              	.LBB152:
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4157              		.loc 1 1939 9 is_stmt 1 view .LVU1350
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4158              		.loc 1 1939 25 is_stmt 0 view .LVU1351
 4159 0054 0D4B     		ldr	r3, .L273+8
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4160              		.loc 1 1940 9 view .LVU1352
 4161 0056 0E48     		ldr	r0, .L273+12
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4162              		.loc 1 1939 25 view .LVU1353
 4163 0058 1C70     		strb	r4, [r3]
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4164              		.loc 1 1940 9 is_stmt 1 view .LVU1354
 4165 005a 0222     		movs	r2, #2
 4166              	.LVL355:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4167              		.loc 1 1940 9 is_stmt 0 view .LVU1355
 4168 005c 01A9     		add	r1, sp, #4
 4169              	.LVL356:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4170              		.loc 1 1940 9 view .LVU1356
 4171 005e FFF7FEFF 		bl	_WriteNoCheck
 4172              	.LVL357:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4173              		.loc 1 1940 9 view .LVU1357
 4174              	.LBE152:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4175              		.loc 1 1927 5 view .LVU1358
 4176 0062 0020     		movs	r0, #0
 4177              	.LBB153:
 4178 0064 F2E7     		b	.L264
 4179              	.LVL358:
 4180              	.L270:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4181              		.loc 1 1927 5 view .LVU1359
 4182              	.LBE153:
 4183              	.LBB154:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 119


1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4184              		.loc 1 1926 3 is_stmt 1 discriminator 1 view .LVU1360
 4185 0066 FFF7FEFF 		bl	_DoInit
 4186              	.LVL359:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4187              		.loc 1 1926 3 is_stmt 0 discriminator 1 view .LVU1361
 4188 006a CFE7     		b	.L261
 4189              	.LVL360:
 4190              	.L271:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4191              		.loc 1 1926 3 discriminator 1 view .LVU1362
 4192              	.LBE154:
 4193              	.LBB155:
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4194              		.loc 1 1934 7 is_stmt 1 view .LVU1363
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4195              		.loc 1 1934 23 is_stmt 0 view .LVU1364
 4196 006c 074B     		ldr	r3, .L273+8
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4197              		.loc 1 1935 7 view .LVU1365
 4198 006e 0848     		ldr	r0, .L273+12
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4199              		.loc 1 1934 23 view .LVU1366
 4200 0070 1C70     		strb	r4, [r3]
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4201              		.loc 1 1935 7 is_stmt 1 view .LVU1367
 4202 0072 01A9     		add	r1, sp, #4
 4203 0074 FFF7FEFF 		bl	_WriteBlocking
 4204              	.LVL361:
 4205              	.LBE155:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4206              		.loc 1 1927 5 is_stmt 0 view .LVU1368
 4207 0078 0020     		movs	r0, #0
 4208              	.LBB156:
 4209 007a E7E7     		b	.L264
 4210              	.LVL362:
 4211              	.L267:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4212              		.loc 1 1927 5 view .LVU1369
 4213              	.LBE156:
1947:Core/Src/SEGGER_RTT.c ****   }
 4214              		.loc 1 1947 7 view .LVU1370
 4215 007c 4FF0FF30 		mov	r0, #-1
 4216              	.LVL363:
1949:Core/Src/SEGGER_RTT.c **** }
 4217              		.loc 1 1949 3 is_stmt 1 view .LVU1371
1949:Core/Src/SEGGER_RTT.c **** }
 4218              		.loc 1 1949 10 is_stmt 0 view .LVU1372
 4219 0080 E6E7     		b	.L260
 4220              	.L274:
 4221 0082 00BF     		.align	2
 4222              	.L273:
 4223 0084 00000000 		.word	.LANCHOR0
 4224 0088 00000000 		.word	.LANCHOR4
 4225 008c 00000000 		.word	.LANCHOR5
 4226 0090 18000000 		.word	.LANCHOR0+24
 4227              		.cfi_endproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 120


 4228              	.LFE32:
 4230              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 4231              		.align	1
 4232              		.p2align 2,,3
 4233              		.global	SEGGER_RTT_TerminalOut
 4234              		.syntax unified
 4235              		.thumb
 4236              		.thumb_func
 4238              	SEGGER_RTT_TerminalOut:
 4239              	.LVL364:
 4240              	.LFB33:
1951:Core/Src/SEGGER_RTT.c **** 
1952:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1953:Core/Src/SEGGER_RTT.c **** *
1954:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1955:Core/Src/SEGGER_RTT.c **** *
1956:Core/Src/SEGGER_RTT.c **** *  Function description
1957:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1958:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1959:Core/Src/SEGGER_RTT.c **** *
1960:Core/Src/SEGGER_RTT.c **** *  Parameters
1961:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1962:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1963:Core/Src/SEGGER_RTT.c **** *
1964:Core/Src/SEGGER_RTT.c **** *  Return value
1965:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1966:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1967:Core/Src/SEGGER_RTT.c **** *
1968:Core/Src/SEGGER_RTT.c **** */
1969:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 4241              		.loc 1 1969 70 is_stmt 1 view -0
 4242              		.cfi_startproc
 4243              		@ args = 0, pretend = 0, frame = 8
 4244              		@ frame_needed = 0, uses_anonymous_args = 0
1970:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4245              		.loc 1 1970 3 view .LVU1374
1971:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
 4246              		.loc 1 1971 3 view .LVU1375
1972:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 4247              		.loc 1 1972 3 view .LVU1376
1973:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4248              		.loc 1 1973 3 view .LVU1377
 4249              	.LBB173:
1974:Core/Src/SEGGER_RTT.c ****   //
1975:Core/Src/SEGGER_RTT.c ****   INIT();
 4250              		.loc 1 1975 3 view .LVU1378
 4251              		.loc 1 1975 3 view .LVU1379
 4252              		.loc 1 1975 3 view .LVU1380
 4253              		.loc 1 1975 3 view .LVU1381
 4254              	.LBE173:
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4255              		.loc 1 1969 70 is_stmt 0 view .LVU1382
 4256 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4257              		.cfi_def_cfa_offset 32
 4258              		.cfi_offset 4, -32
 4259              		.cfi_offset 5, -28
 4260              		.cfi_offset 6, -24
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 121


 4261              		.cfi_offset 7, -20
 4262              		.cfi_offset 8, -16
 4263              		.cfi_offset 9, -12
 4264              		.cfi_offset 10, -8
 4265              		.cfi_offset 14, -4
 4266              	.LBB174:
 4267              		.loc 1 1975 3 view .LVU1383
 4268 0004 4B4C     		ldr	r4, .L291
 4269 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 4270              	.LBE174:
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4271              		.loc 1 1969 70 view .LVU1384
 4272 0008 82B0     		sub	sp, sp, #8
 4273              		.cfi_def_cfa_offset 40
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4274              		.loc 1 1969 70 view .LVU1385
 4275 000a 0546     		mov	r5, r0
 4276 000c 0E46     		mov	r6, r1
 4277              	.LBB175:
 4278              		.loc 1 1975 3 view .LVU1386
 4279 000e 33B3     		cbz	r3, .L289
 4280              	.LVL365:
 4281              	.L276:
 4282              		.loc 1 1975 3 is_stmt 1 discriminator 3 view .LVU1387
 4283              	.LBE175:
 4284              		.loc 1 1975 9 discriminator 3 view .LVU1388
1976:Core/Src/SEGGER_RTT.c ****   //
1977:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1978:Core/Src/SEGGER_RTT.c ****   //
1979:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 4285              		.loc 1 1979 3 discriminator 3 view .LVU1389
 4286              		.loc 1 1979 6 is_stmt 0 discriminator 3 view .LVU1390
 4287 0010 0F2D     		cmp	r5, #15
 4288 0012 00F28C80 		bhi	.L283
1980:Core/Src/SEGGER_RTT.c ****     //
1981:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1982:Core/Src/SEGGER_RTT.c ****     //
1983:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 4289              		.loc 1 1983 5 is_stmt 1 view .LVU1391
 4290              	.LVL366:
1984:Core/Src/SEGGER_RTT.c ****     //
1985:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1986:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1987:Core/Src/SEGGER_RTT.c ****     //
1988:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 4291              		.loc 1 1988 5 view .LVU1392
 4292              		.loc 1 1988 15 is_stmt 0 view .LVU1393
 4293 0016 3046     		mov	r0, r6
 4294 0018 FFF7FEFF 		bl	strlen
 4295              	.LVL367:
 4296 001c 0746     		mov	r7, r0
 4297              	.LVL368:
 4298              	.LBB176:
1989:Core/Src/SEGGER_RTT.c ****     //
1990:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1991:Core/Src/SEGGER_RTT.c ****     //
1992:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 122


 4299              		.loc 1 1992 5 is_stmt 1 view .LVU1394
 4300              		.loc 1 1992 5 view .LVU1395
 4301              		.syntax unified
 4302              	@ 1992 "Core/Src/SEGGER_RTT.c" 1
 4303 001e EFF31188 		mrs   r8, basepri  
 4304 0022 4FF02001 		mov   r1, #32       
 4305 0026 81F31188 		msr   basepri, r1  
 4306              		
 4307              	@ 0 "" 2
 4308              	.LVL369:
 4309              		.loc 1 1992 22 view .LVU1396
1993:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 4310              		.loc 1 1993 5 view .LVU1397
 4311              		.thumb
 4312              		.syntax unified
 4313              	.LBB177:
 4314              	.LBI177:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4315              		.loc 1 526 17 view .LVU1398
 4316              	.LBB178:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4317              		.loc 1 527 3 view .LVU1399
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4318              		.loc 1 528 3 view .LVU1400
 529:Core/Src/SEGGER_RTT.c ****   //
 4319              		.loc 1 529 3 view .LVU1401
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4320              		.loc 1 534 3 view .LVU1402
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4321              		.loc 1 534 9 is_stmt 0 view .LVU1403
 4322 002a A36A     		ldr	r3, [r4, #40]
 4323              	.LVL370:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4324              		.loc 1 535 3 is_stmt 1 view .LVU1404
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4325              		.loc 1 535 9 is_stmt 0 view .LVU1405
 4326 002c 626A     		ldr	r2, [r4, #36]
 4327              	.LVL371:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4328              		.loc 1 536 3 is_stmt 1 view .LVU1406
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4329              		.loc 1 536 6 is_stmt 0 view .LVU1407
 4330 002e 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4331              		.loc 1 537 5 is_stmt 1 view .LVU1408
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4332              		.loc 1 537 7 is_stmt 0 view .LVU1409
 4333 0030 98BF     		it	ls
 4334 0032 216A     		ldrls	r1, [r4, #32]
 4335              	.LBE178:
 4336              	.LBE177:
1994:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 4337              		.loc 1 1994 26 view .LVU1410
 4338 0034 E46A     		ldr	r4, [r4, #44]
 4339              	.LBB182:
 4340              	.LBB179:
 537:Core/Src/SEGGER_RTT.c ****   } else {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 123


 4341              		.loc 1 537 7 view .LVU1411
 4342 0036 98BF     		it	ls
 4343 0038 5B18     		addls	r3, r3, r1
 4344              	.LVL372:
 539:Core/Src/SEGGER_RTT.c ****   }
 4345              		.loc 1 539 5 is_stmt 1 view .LVU1412
 4346              	.LBE179:
 4347              	.LBE182:
 4348              		.loc 1 1994 26 is_stmt 0 view .LVU1413
 4349 003a 04F00304 		and	r4, r4, #3
 4350              	.LBB183:
 4351              	.LBB180:
 539:Core/Src/SEGGER_RTT.c ****   }
 4352              		.loc 1 539 7 view .LVU1414
 4353 003e 013B     		subs	r3, r3, #1
 4354              	.LBE180:
 4355              	.LBE183:
 4356              		.loc 1 1994 5 view .LVU1415
 4357 0040 012C     		cmp	r4, #1
 4358              	.LBB184:
 4359              	.LBB181:
 539:Core/Src/SEGGER_RTT.c ****   }
 4360              		.loc 1 539 7 view .LVU1416
 4361 0042 A3EB0209 		sub	r9, r3, r2
 4362              	.LVL373:
 541:Core/Src/SEGGER_RTT.c **** }
 4363              		.loc 1 541 3 is_stmt 1 view .LVU1417
 541:Core/Src/SEGGER_RTT.c **** }
 4364              		.loc 1 541 3 is_stmt 0 view .LVU1418
 4365              	.LBE181:
 4366              	.LBE184:
 4367              		.loc 1 1994 5 is_stmt 1 view .LVU1419
 4368 0046 49D0     		beq	.L280
 4369 0048 022C     		cmp	r4, #2
 4370 004a 25D0     		beq	.L281
 4371 004c 54B1     		cbz	r4, .L290
 4372              	.L286:
1995:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1996:Core/Src/SEGGER_RTT.c ****       //
1997:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1998:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1999:Core/Src/SEGGER_RTT.c ****       //
2000:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
2001:Core/Src/SEGGER_RTT.c ****         Status = 0;
2002:Core/Src/SEGGER_RTT.c ****       } else {
2003:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2004:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
2005:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2006:Core/Src/SEGGER_RTT.c ****       }
2007:Core/Src/SEGGER_RTT.c ****       break;
2008:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2009:Core/Src/SEGGER_RTT.c ****       //
2010:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2011:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2012:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2013:Core/Src/SEGGER_RTT.c ****       //
2014:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 124


2015:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4373              		.loc 1 2015 16 is_stmt 0 view .LVU1420
 4374 004e 4FF0FF34 		mov	r4, #-1
 4375              	.LVL374:
 4376              	.L282:
2016:Core/Src/SEGGER_RTT.c ****       } else {
2017:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2018:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2020:Core/Src/SEGGER_RTT.c ****       }
2021:Core/Src/SEGGER_RTT.c ****       break;
2022:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2023:Core/Src/SEGGER_RTT.c ****       //
2024:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2025:Core/Src/SEGGER_RTT.c ****       //
2026:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
2027:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
2028:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2029:Core/Src/SEGGER_RTT.c ****       break;
2030:Core/Src/SEGGER_RTT.c ****     default:
2031:Core/Src/SEGGER_RTT.c ****       Status = -1;
2032:Core/Src/SEGGER_RTT.c ****       break;
2033:Core/Src/SEGGER_RTT.c ****     }
2034:Core/Src/SEGGER_RTT.c ****     //
2035:Core/Src/SEGGER_RTT.c ****     // Finish up.
2036:Core/Src/SEGGER_RTT.c ****     //
2037:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4377              		.loc 1 2037 5 is_stmt 1 view .LVU1421
 4378              		.syntax unified
 4379              	@ 2037 "Core/Src/SEGGER_RTT.c" 1
 4380 0052 88F31188 		msr   basepri, r8  
 4381              		
 4382              	@ 0 "" 2
 4383              		.thumb
 4384              		.syntax unified
 4385              	.LBE176:
 4386              		.loc 1 2037 24 view .LVU1422
 4387              	.LVL375:
 4388              	.L275:
2038:Core/Src/SEGGER_RTT.c ****   } else {
2039:Core/Src/SEGGER_RTT.c ****     Status = -1;
2040:Core/Src/SEGGER_RTT.c ****   }
2041:Core/Src/SEGGER_RTT.c ****   return Status;
2042:Core/Src/SEGGER_RTT.c **** }
 4389              		.loc 1 2042 1 is_stmt 0 view .LVU1423
 4390 0056 2046     		mov	r0, r4
 4391 0058 02B0     		add	sp, sp, #8
 4392              		.cfi_remember_state
 4393              		.cfi_def_cfa_offset 32
 4394              		@ sp needed
 4395 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4396              	.LVL376:
 4397              	.L289:
 4398              		.cfi_restore_state
 4399              	.LBB201:
1975:Core/Src/SEGGER_RTT.c ****   //
 4400              		.loc 1 1975 3 is_stmt 1 discriminator 1 view .LVU1424
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 125


 4401 005e FFF7FEFF 		bl	_DoInit
 4402              	.LVL377:
1975:Core/Src/SEGGER_RTT.c ****   //
 4403              		.loc 1 1975 3 is_stmt 0 discriminator 1 view .LVU1425
 4404 0062 D5E7     		b	.L276
 4405              	.LVL378:
 4406              	.L290:
1975:Core/Src/SEGGER_RTT.c ****   //
 4407              		.loc 1 1975 3 discriminator 1 view .LVU1426
 4408              	.LBE201:
 4409              	.LBB202:
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
 4410              		.loc 1 2000 7 is_stmt 1 view .LVU1427
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
 4411              		.loc 1 2000 28 is_stmt 0 view .LVU1428
 4412 0064 031D     		adds	r3, r0, #4
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
 4413              		.loc 1 2000 10 view .LVU1429
 4414 0066 4B45     		cmp	r3, r9
 4415 0068 F3D8     		bhi	.L282
2003:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4416              		.loc 1 2003 9 is_stmt 1 view .LVU1430
 4417              	.LVL379:
 4418              	.LBB185:
 4419              	.LBI185:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4420              		.loc 1 504 13 view .LVU1431
 4421              	.LBB186:
 505:Core/Src/SEGGER_RTT.c **** 
 4422              		.loc 1 505 3 view .LVU1432
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4423              		.loc 1 507 3 view .LVU1433
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4424              		.loc 1 508 23 is_stmt 0 view .LVU1434
 4425 006a DFF8D490 		ldr	r9, .L291+12
 4426              	.LVL380:
 509:Core/Src/SEGGER_RTT.c **** }
 4427              		.loc 1 509 3 view .LVU1435
 4428 006e 3248     		ldr	r0, .L291+4
 4429              	.LVL381:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4430              		.loc 1 508 9 view .LVU1436
 4431 0070 19F80530 		ldrb	r3, [r9, r5]	@ zero_extendqisi2
 4432 0074 8DF80530 		strb	r3, [sp, #5]
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4433              		.loc 1 507 9 view .LVU1437
 4434 0078 4FF0FF0A 		mov	r10, #255
 509:Core/Src/SEGGER_RTT.c **** }
 4435              		.loc 1 509 3 view .LVU1438
 4436 007c 01A9     		add	r1, sp, #4
 4437              	.LVL382:
 509:Core/Src/SEGGER_RTT.c **** }
 4438              		.loc 1 509 3 view .LVU1439
 4439 007e 0222     		movs	r2, #2
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4440              		.loc 1 507 9 view .LVU1440
 4441 0080 8DF804A0 		strb	r10, [sp, #4]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 126


 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4442              		.loc 1 508 3 is_stmt 1 view .LVU1441
 509:Core/Src/SEGGER_RTT.c **** }
 4443              		.loc 1 509 3 view .LVU1442
 4444 0084 FFF7FEFF 		bl	_WriteBlocking
 4445              	.LVL383:
 509:Core/Src/SEGGER_RTT.c **** }
 4446              		.loc 1 509 3 is_stmt 0 view .LVU1443
 4447              	.LBE186:
 4448              	.LBE185:
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4449              		.loc 1 2004 9 is_stmt 1 view .LVU1444
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4450              		.loc 1 2004 23 is_stmt 0 view .LVU1445
 4451 0088 2B48     		ldr	r0, .L291+4
 4452 008a 3A46     		mov	r2, r7
 4453 008c 3146     		mov	r1, r6
 4454 008e FFF7FEFF 		bl	_WriteBlocking
 4455              	.LVL384:
 4456              	.LBB187:
 4457              	.LBB188:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4458              		.loc 1 507 9 view .LVU1446
 4459 0092 8DF804A0 		strb	r10, [sp, #4]
 4460 0096 14E0     		b	.L288
 4461              	.LVL385:
 4462              	.L281:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4463              		.loc 1 507 9 view .LVU1447
 4464              	.LBE188:
 4465              	.LBE187:
2026:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4466              		.loc 1 2026 7 is_stmt 1 view .LVU1448
 4467              	.LBB190:
 4468              	.LBI190:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4469              		.loc 1 504 13 view .LVU1449
 4470              	.LBB191:
 505:Core/Src/SEGGER_RTT.c **** 
 4471              		.loc 1 505 3 view .LVU1450
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4472              		.loc 1 507 3 view .LVU1451
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4473              		.loc 1 508 23 is_stmt 0 view .LVU1452
 4474 0098 DFF8A490 		ldr	r9, .L291+12
 4475              	.LVL386:
 509:Core/Src/SEGGER_RTT.c **** }
 4476              		.loc 1 509 3 view .LVU1453
 4477 009c 2648     		ldr	r0, .L291+4
 4478              	.LVL387:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4479              		.loc 1 508 9 view .LVU1454
 4480 009e 19F80530 		ldrb	r3, [r9, r5]	@ zero_extendqisi2
 4481              	.LVL388:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4482              		.loc 1 508 9 view .LVU1455
 4483 00a2 8DF80530 		strb	r3, [sp, #5]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 127


 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4484              		.loc 1 507 9 view .LVU1456
 4485 00a6 FF25     		movs	r5, #255
 4486              	.LVL389:
 509:Core/Src/SEGGER_RTT.c **** }
 4487              		.loc 1 509 3 view .LVU1457
 4488 00a8 2246     		mov	r2, r4
 4489              	.LVL390:
 509:Core/Src/SEGGER_RTT.c **** }
 4490              		.loc 1 509 3 view .LVU1458
 4491 00aa 01A9     		add	r1, sp, #4
 4492              	.LVL391:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4493              		.loc 1 507 9 view .LVU1459
 4494 00ac 8DF80450 		strb	r5, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4495              		.loc 1 508 3 is_stmt 1 view .LVU1460
 509:Core/Src/SEGGER_RTT.c **** }
 4496              		.loc 1 509 3 view .LVU1461
 4497 00b0 FFF7FEFF 		bl	_WriteBlocking
 4498              	.LVL392:
 509:Core/Src/SEGGER_RTT.c **** }
 4499              		.loc 1 509 3 is_stmt 0 view .LVU1462
 4500              	.LBE191:
 4501              	.LBE190:
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4502              		.loc 1 2027 7 is_stmt 1 view .LVU1463
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4503              		.loc 1 2027 21 is_stmt 0 view .LVU1464
 4504 00b4 2048     		ldr	r0, .L291+4
 4505 00b6 3A46     		mov	r2, r7
 4506 00b8 3146     		mov	r1, r6
 4507 00ba FFF7FEFF 		bl	_WriteBlocking
 4508              	.LVL393:
 4509              	.LBB192:
 4510              	.LBB193:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4511              		.loc 1 507 9 view .LVU1465
 4512 00be 8DF80450 		strb	r5, [sp, #4]
 4513              	.L288:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4514              		.loc 1 507 9 view .LVU1466
 4515              	.LBE193:
 4516              	.LBE192:
2005:Core/Src/SEGGER_RTT.c ****       }
 4517              		.loc 1 2005 9 view .LVU1467
 4518 00c2 1E4B     		ldr	r3, .L291+8
 4519 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4520              		.loc 1 2004 23 view .LVU1468
 4521 00c6 0446     		mov	r4, r0
 4522              	.LVL394:
2005:Core/Src/SEGGER_RTT.c ****       }
 4523              		.loc 1 2005 9 is_stmt 1 view .LVU1469
 4524              	.LBB194:
 4525              	.LBI187:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 128


 4526              		.loc 1 504 13 view .LVU1470
 4527              	.LBB189:
 505:Core/Src/SEGGER_RTT.c **** 
 4528              		.loc 1 505 3 view .LVU1471
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4529              		.loc 1 507 3 view .LVU1472
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4530              		.loc 1 508 3 view .LVU1473
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4531              		.loc 1 508 9 is_stmt 0 view .LVU1474
 4532 00c8 19F80330 		ldrb	r3, [r9, r3]	@ zero_extendqisi2
 509:Core/Src/SEGGER_RTT.c **** }
 4533              		.loc 1 509 3 view .LVU1475
 4534 00cc 1A48     		ldr	r0, .L291+4
 4535              	.LVL395:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4536              		.loc 1 508 9 view .LVU1476
 4537 00ce 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 4538              		.loc 1 509 3 is_stmt 1 view .LVU1477
 4539 00d2 0222     		movs	r2, #2
 4540 00d4 01A9     		add	r1, sp, #4
 4541 00d6 FFF7FEFF 		bl	_WriteBlocking
 4542              	.LVL396:
 510:Core/Src/SEGGER_RTT.c **** 
 4543              		.loc 1 510 1 is_stmt 0 view .LVU1478
 4544 00da BAE7     		b	.L282
 4545              	.LVL397:
 4546              	.L280:
 510:Core/Src/SEGGER_RTT.c **** 
 4547              		.loc 1 510 1 view .LVU1479
 4548              	.LBE189:
 4549              	.LBE194:
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4550              		.loc 1 2014 7 is_stmt 1 view .LVU1480
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4551              		.loc 1 2014 10 is_stmt 0 view .LVU1481
 4552 00dc B9F1030F 		cmp	r9, #3
 4553 00e0 B5D9     		bls	.L286
2017:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4554              		.loc 1 2017 9 is_stmt 1 view .LVU1482
 4555              	.LVL398:
 4556              	.LBB195:
 4557              	.LBI195:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4558              		.loc 1 504 13 view .LVU1483
 4559              	.LBB196:
 505:Core/Src/SEGGER_RTT.c **** 
 4560              		.loc 1 505 3 view .LVU1484
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4561              		.loc 1 507 3 view .LVU1485
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4562              		.loc 1 508 23 is_stmt 0 view .LVU1486
 4563 00e2 DFF85CA0 		ldr	r10, .L291+12
 509:Core/Src/SEGGER_RTT.c **** }
 4564              		.loc 1 509 3 view .LVU1487
 4565 00e6 1448     		ldr	r0, .L291+4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 129


 4566              	.LVL399:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4567              		.loc 1 508 9 view .LVU1488
 4568 00e8 1AF80530 		ldrb	r3, [r10, r5]	@ zero_extendqisi2
 4569 00ec 8DF80530 		strb	r3, [sp, #5]
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4570              		.loc 1 507 9 view .LVU1489
 4571 00f0 FF25     		movs	r5, #255
 4572              	.LVL400:
 509:Core/Src/SEGGER_RTT.c **** }
 4573              		.loc 1 509 3 view .LVU1490
 4574 00f2 01A9     		add	r1, sp, #4
 4575 00f4 0222     		movs	r2, #2
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4576              		.loc 1 507 9 view .LVU1491
 4577 00f6 8DF80450 		strb	r5, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4578              		.loc 1 508 3 is_stmt 1 view .LVU1492
 509:Core/Src/SEGGER_RTT.c **** }
 4579              		.loc 1 509 3 view .LVU1493
 4580 00fa FFF7FEFF 		bl	_WriteBlocking
 4581              	.LVL401:
 509:Core/Src/SEGGER_RTT.c **** }
 4582              		.loc 1 509 3 is_stmt 0 view .LVU1494
 4583              	.LBE196:
 4584              	.LBE195:
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4585              		.loc 1 2018 9 is_stmt 1 view .LVU1495
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4586              		.loc 1 2018 66 is_stmt 0 view .LVU1496
 4587 00fe A9F10402 		sub	r2, r9, #4
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4588              		.loc 1 2018 23 view .LVU1497
 4589 0102 BA42     		cmp	r2, r7
 4590 0104 28BF     		it	cs
 4591 0106 3A46     		movcs	r2, r7
 4592 0108 3146     		mov	r1, r6
 4593 010a 0B48     		ldr	r0, .L291+4
 4594 010c FFF7FEFF 		bl	_WriteBlocking
 4595              	.LVL402:
2019:Core/Src/SEGGER_RTT.c ****       }
 4596              		.loc 1 2019 9 view .LVU1498
 4597 0110 0A4B     		ldr	r3, .L291+8
 4598              	.LBB197:
 4599              	.LBB198:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4600              		.loc 1 507 9 view .LVU1499
 4601 0112 8DF80450 		strb	r5, [sp, #4]
 4602              	.LBE198:
 4603              	.LBE197:
2019:Core/Src/SEGGER_RTT.c ****       }
 4604              		.loc 1 2019 9 view .LVU1500
 4605 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4606              		.loc 1 2018 23 view .LVU1501
 4607 0118 0446     		mov	r4, r0
 4608              	.LVL403:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 130


2019:Core/Src/SEGGER_RTT.c ****       }
 4609              		.loc 1 2019 9 is_stmt 1 view .LVU1502
 4610              	.LBB200:
 4611              	.LBI197:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4612              		.loc 1 504 13 view .LVU1503
 4613              	.LBB199:
 505:Core/Src/SEGGER_RTT.c **** 
 4614              		.loc 1 505 3 view .LVU1504
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4615              		.loc 1 507 3 view .LVU1505
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4616              		.loc 1 508 3 view .LVU1506
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4617              		.loc 1 508 9 is_stmt 0 view .LVU1507
 4618 011a 1AF80330 		ldrb	r3, [r10, r3]	@ zero_extendqisi2
 509:Core/Src/SEGGER_RTT.c **** }
 4619              		.loc 1 509 3 view .LVU1508
 4620 011e 0648     		ldr	r0, .L291+4
 4621              	.LVL404:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4622              		.loc 1 508 9 view .LVU1509
 4623 0120 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 4624              		.loc 1 509 3 is_stmt 1 view .LVU1510
 4625 0124 0222     		movs	r2, #2
 4626 0126 01A9     		add	r1, sp, #4
 4627 0128 FFF7FEFF 		bl	_WriteBlocking
 4628              	.LVL405:
 510:Core/Src/SEGGER_RTT.c **** 
 4629              		.loc 1 510 1 is_stmt 0 view .LVU1511
 4630 012c 91E7     		b	.L282
 4631              	.LVL406:
 4632              	.L283:
 510:Core/Src/SEGGER_RTT.c **** 
 4633              		.loc 1 510 1 view .LVU1512
 4634              	.LBE199:
 4635              	.LBE200:
 4636              	.LBE202:
2039:Core/Src/SEGGER_RTT.c ****   }
 4637              		.loc 1 2039 12 view .LVU1513
 4638 012e 4FF0FF34 		mov	r4, #-1
 4639              	.LVL407:
2041:Core/Src/SEGGER_RTT.c **** }
 4640              		.loc 1 2041 3 is_stmt 1 view .LVU1514
2041:Core/Src/SEGGER_RTT.c **** }
 4641              		.loc 1 2041 10 is_stmt 0 view .LVU1515
 4642 0132 90E7     		b	.L275
 4643              	.L292:
 4644              		.align	2
 4645              	.L291:
 4646 0134 00000000 		.word	.LANCHOR0
 4647 0138 18000000 		.word	.LANCHOR0+24
 4648 013c 00000000 		.word	.LANCHOR5
 4649 0140 00000000 		.word	.LANCHOR4
 4650              		.cfi_endproc
 4651              	.LFE33:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 131


 4653              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4654              		.align	1
 4655              		.p2align 2,,3
 4656              		.global	SEGGER_RTT_GetAvailWriteSpace
 4657              		.syntax unified
 4658              		.thumb
 4659              		.thumb_func
 4661              	SEGGER_RTT_GetAvailWriteSpace:
 4662              	.LVL408:
 4663              	.LFB34:
2043:Core/Src/SEGGER_RTT.c **** 
2044:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2045:Core/Src/SEGGER_RTT.c **** *
2046:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2047:Core/Src/SEGGER_RTT.c **** *
2048:Core/Src/SEGGER_RTT.c **** *  Function description
2049:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2050:Core/Src/SEGGER_RTT.c **** *
2051:Core/Src/SEGGER_RTT.c **** *  Parameters
2052:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2053:Core/Src/SEGGER_RTT.c **** *
2054:Core/Src/SEGGER_RTT.c **** *  Return value
2055:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2056:Core/Src/SEGGER_RTT.c **** */
2057:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4664              		.loc 1 2057 63 is_stmt 1 view -0
 4665              		.cfi_startproc
 4666              		@ args = 0, pretend = 0, frame = 0
 4667              		@ frame_needed = 0, uses_anonymous_args = 0
 4668              		@ link register save eliminated.
2058:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4669              		.loc 1 2058 3 view .LVU1517
2059:Core/Src/SEGGER_RTT.c **** 
2060:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4670              		.loc 1 2060 3 view .LVU1518
 4671              	.LBB203:
 4672              	.LBB204:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4673              		.loc 1 534 9 is_stmt 0 view .LVU1519
 4674 0000 064A     		ldr	r2, .L296
 4675              	.LVL409:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4676              		.loc 1 534 9 view .LVU1520
 4677              	.LBE204:
 4678              	.LBE203:
2061:Core/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4679              		.loc 1 2061 3 is_stmt 1 view .LVU1521
 4680              	.LBB206:
 4681              	.LBI203:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4682              		.loc 1 526 17 view .LVU1522
 4683              	.LBB205:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4684              		.loc 1 527 3 view .LVU1523
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4685              		.loc 1 528 3 view .LVU1524
 529:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 132


 4686              		.loc 1 529 3 view .LVU1525
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4687              		.loc 1 534 3 view .LVU1526
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4688              		.loc 1 534 9 is_stmt 0 view .LVU1527
 4689 0002 00EB4000 		add	r0, r0, r0, lsl #1
 4690              	.LVL410:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4691              		.loc 1 534 9 view .LVU1528
 4692 0006 02EBC002 		add	r2, r2, r0, lsl #3
 4693 000a 936A     		ldr	r3, [r2, #40]
 4694              	.LVL411:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4695              		.loc 1 535 3 is_stmt 1 view .LVU1529
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4696              		.loc 1 535 9 is_stmt 0 view .LVU1530
 4697 000c 506A     		ldr	r0, [r2, #36]
 4698              	.LVL412:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4699              		.loc 1 536 3 is_stmt 1 view .LVU1531
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4700              		.loc 1 536 6 is_stmt 0 view .LVU1532
 4701 000e 8342     		cmp	r3, r0
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4702              		.loc 1 537 5 is_stmt 1 view .LVU1533
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4703              		.loc 1 537 7 is_stmt 0 view .LVU1534
 4704 0010 9CBF     		itt	ls
 4705 0012 126A     		ldrls	r2, [r2, #32]
 4706 0014 9B18     		addls	r3, r3, r2
 4707              	.LVL413:
 539:Core/Src/SEGGER_RTT.c ****   }
 4708              		.loc 1 539 5 is_stmt 1 view .LVU1535
 539:Core/Src/SEGGER_RTT.c ****   }
 4709              		.loc 1 539 7 is_stmt 0 view .LVU1536
 4710 0016 013B     		subs	r3, r3, #1
 4711 0018 181A     		subs	r0, r3, r0
 4712              	.LVL414:
 541:Core/Src/SEGGER_RTT.c **** }
 4713              		.loc 1 541 3 is_stmt 1 view .LVU1537
 541:Core/Src/SEGGER_RTT.c **** }
 4714              		.loc 1 541 3 is_stmt 0 view .LVU1538
 4715              	.LBE205:
 4716              	.LBE206:
2062:Core/Src/SEGGER_RTT.c **** }
 4717              		.loc 1 2062 1 view .LVU1539
 4718 001a 7047     		bx	lr
 4719              	.L297:
 4720              		.align	2
 4721              	.L296:
 4722 001c 00000000 		.word	.LANCHOR0
 4723              		.cfi_endproc
 4724              	.LFE34:
 4726              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4727              		.align	1
 4728              		.p2align 2,,3
 4729              		.global	SEGGER_RTT_GetBytesInBuffer
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 133


 4730              		.syntax unified
 4731              		.thumb
 4732              		.thumb_func
 4734              	SEGGER_RTT_GetBytesInBuffer:
 4735              	.LVL415:
 4736              	.LFB35:
2063:Core/Src/SEGGER_RTT.c **** 
2064:Core/Src/SEGGER_RTT.c **** 
2065:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2066:Core/Src/SEGGER_RTT.c **** *
2067:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2068:Core/Src/SEGGER_RTT.c **** *
2069:Core/Src/SEGGER_RTT.c **** *  Function description
2070:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2071:Core/Src/SEGGER_RTT.c **** *
2072:Core/Src/SEGGER_RTT.c **** *  Parameters
2073:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2074:Core/Src/SEGGER_RTT.c **** *
2075:Core/Src/SEGGER_RTT.c **** *  Return value
2076:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2077:Core/Src/SEGGER_RTT.c **** */
2078:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4737              		.loc 1 2078 60 is_stmt 1 view -0
 4738              		.cfi_startproc
 4739              		@ args = 0, pretend = 0, frame = 0
 4740              		@ frame_needed = 0, uses_anonymous_args = 0
 4741              		@ link register save eliminated.
2079:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4742              		.loc 1 2079 3 view .LVU1541
2080:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4743              		.loc 1 2080 3 view .LVU1542
2081:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4744              		.loc 1 2081 3 view .LVU1543
2082:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4745              		.loc 1 2082 3 view .LVU1544
2083:Core/Src/SEGGER_RTT.c ****   //
2084:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2085:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2086:Core/Src/SEGGER_RTT.c ****   //
2087:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4746              		.loc 1 2087 3 view .LVU1545
2088:Core/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4747              		.loc 1 2088 3 view .LVU1546
 4748              		.loc 1 2088 9 is_stmt 0 view .LVU1547
 4749 0000 064B     		ldr	r3, .L301
 4750 0002 00EB4000 		add	r0, r0, r0, lsl #1
 4751              	.LVL416:
 4752              		.loc 1 2088 9 view .LVU1548
 4753 0006 03EBC003 		add	r3, r3, r0, lsl #3
 4754 000a 9A6A     		ldr	r2, [r3, #40]
 4755              	.LVL417:
2089:Core/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4756              		.loc 1 2089 3 is_stmt 1 view .LVU1549
 4757              		.loc 1 2089 9 is_stmt 0 view .LVU1550
 4758 000c 586A     		ldr	r0, [r3, #36]
 4759              	.LVL418:
2090:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 134


 4760              		.loc 1 2090 3 is_stmt 1 view .LVU1551
 4761              		.loc 1 2090 6 is_stmt 0 view .LVU1552
 4762 000e 8242     		cmp	r2, r0
2091:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4763              		.loc 1 2091 5 is_stmt 1 view .LVU1553
2092:Core/Src/SEGGER_RTT.c ****   } else {
2093:Core/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4764              		.loc 1 2093 33 is_stmt 0 view .LVU1554
 4765 0010 85BF     		ittet	hi
 4766 0012 1B6A     		ldrhi	r3, [r3, #32]
 4767              		.loc 1 2093 7 view .LVU1555
 4768 0014 9B18     		addhi	r3, r3, r2
2091:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4769              		.loc 1 2091 7 view .LVU1556
 4770 0016 801A     		subls	r0, r0, r2
 4771              	.LVL419:
 4772              		.loc 1 2093 5 is_stmt 1 view .LVU1557
 4773              		.loc 1 2093 7 is_stmt 0 view .LVU1558
 4774 0018 181A     		subhi	r0, r3, r0
 4775              	.LVL420:
2094:Core/Src/SEGGER_RTT.c ****   }
2095:Core/Src/SEGGER_RTT.c ****   return r;
 4776              		.loc 1 2095 3 is_stmt 1 view .LVU1559
2096:Core/Src/SEGGER_RTT.c **** }
 4777              		.loc 1 2096 1 is_stmt 0 view .LVU1560
 4778 001a 7047     		bx	lr
 4779              	.L302:
 4780              		.align	2
 4781              	.L301:
 4782 001c 00000000 		.word	.LANCHOR0
 4783              		.cfi_endproc
 4784              	.LFE35:
 4786              		.global	_SEGGER_RTT
 4787              		.section	.bss._ActiveTerminal,"aw",%nobits
 4788              		.set	.LANCHOR5,. + 0
 4791              	_ActiveTerminal:
 4792 0000 00       		.space	1
 4793              		.section	.bss._SEGGER_RTT,"aw",%nobits
 4794              		.align	2
 4795              		.set	.LANCHOR0,. + 0
 4798              	_SEGGER_RTT:
 4799 0000 00000000 		.space	168
 4799      00000000 
 4799      00000000 
 4799      00000000 
 4799      00000000 
 4800              		.section	.bss._acDownBuffer,"aw",%nobits
 4801              		.align	2
 4802              		.set	.LANCHOR2,. + 0
 4805              	_acDownBuffer:
 4806 0000 00000000 		.space	16
 4806      00000000 
 4806      00000000 
 4806      00000000 
 4807              		.section	.bss._acUpBuffer,"aw",%nobits
 4808              		.align	2
 4809              		.set	.LANCHOR1,. + 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 135


 4812              	_acUpBuffer:
 4813 0000 00000000 		.space	1024
 4813      00000000 
 4813      00000000 
 4813      00000000 
 4813      00000000 
 4814              		.section	.rodata._aInitStr.0,"a"
 4815              		.align	2
 4816              		.set	.LANCHOR3,. + 0
 4819              	_aInitStr.0:
 4820 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4820      00005454 
 4820      52205245 
 4820      47474553 
 4820      00
 4821              		.section	.rodata._aTerminalId,"a"
 4822              		.align	2
 4823              		.set	.LANCHOR4,. + 0
 4826              	_aTerminalId:
 4827 0000 30313233 		.ascii	"0123456789ABCDEF"
 4827      34353637 
 4827      38394142 
 4827      43444546 
 4828              		.text
 4829              	.Letext0:
 4830              		.file 2 "Core/Inc/SEGGER_RTT.h"
 4831              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 4832              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 4833              		.file 5 "<built-in>"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 136


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:20     .text._WriteNoCheck:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:26     .text._WriteNoCheck:0000000000000000 _WriteNoCheck
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:145    .text._WriteBlocking:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:151    .text._WriteBlocking:0000000000000000 _WriteBlocking
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:289    .rodata._DoInit.str1.4:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:293    .text._DoInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:299    .text._DoInit:0000000000000000 _DoInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:428    .text._DoInit:000000000000005c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:437    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:444    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:682    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000000000c4 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:688    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:695    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:922    .text.SEGGER_RTT_ReadNoLock:00000000000000b4 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:928    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:935    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 SEGGER_RTT_ReadUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:990    .text.SEGGER_RTT_Read:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:997    .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1052   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1059   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1287   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000000000d8 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1292   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1299   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1471   .text.SEGGER_RTT_WriteDownBufferNoLock:000000000000006c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1476   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1483   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1664   .text.SEGGER_RTT_WriteNoLock:0000000000000084 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1669   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1676   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 SEGGER_RTT_WriteDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1765   .text.SEGGER_RTT_WriteDownBuffer:0000000000000034 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1771   .text.SEGGER_RTT_Write:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1778   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1867   .text.SEGGER_RTT_Write:0000000000000034 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1873   .text.SEGGER_RTT_WriteString:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1880   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:1994   .text.SEGGER_RTT_WriteString:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2002   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2009   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2114   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000040 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2119   .text.SEGGER_RTT_PutCharSkip:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2126   .text.SEGGER_RTT_PutCharSkip:0000000000000000 SEGGER_RTT_PutCharSkip
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2279   .text.SEGGER_RTT_PutCharSkip:000000000000005c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2285   .text.SEGGER_RTT_PutChar:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2292   .text.SEGGER_RTT_PutChar:0000000000000000 SEGGER_RTT_PutChar
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2473   .text.SEGGER_RTT_PutChar:0000000000000080 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2479   .text.SEGGER_RTT_GetKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2486   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2568   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2575   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2665   .text.SEGGER_RTT_HasKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2672   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2727   .text.SEGGER_RTT_HasKey:000000000000001c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2733   .text.SEGGER_RTT_HasData:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2740   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2771   .text.SEGGER_RTT_HasData:0000000000000014 $d
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 137


/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2776   .text.SEGGER_RTT_HasDataUp:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2783   .text.SEGGER_RTT_HasDataUp:0000000000000000 SEGGER_RTT_HasDataUp
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2812   .text.SEGGER_RTT_HasDataUp:0000000000000014 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2817   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2824   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2990   .text.SEGGER_RTT_AllocDownBuffer:0000000000000074 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:2996   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3003   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3175   .text.SEGGER_RTT_AllocUpBuffer:0000000000000080 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3181   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3188   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3341   .text.SEGGER_RTT_ConfigUpBuffer:000000000000006c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3346   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3353   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3506   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000064 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3511   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3518   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3626   .text.SEGGER_RTT_SetNameUpBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3631   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3638   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3743   .text.SEGGER_RTT_SetNameDownBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3748   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3755   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3860   .text.SEGGER_RTT_SetFlagsUpBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3865   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3872   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3977   .text.SEGGER_RTT_SetFlagsDownBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3982   .text.SEGGER_RTT_Init:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:3989   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4003   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4010   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4223   .text.SEGGER_RTT_SetTerminal:0000000000000084 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4231   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4238   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4646   .text.SEGGER_RTT_TerminalOut:0000000000000134 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4654   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4661   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4722   .text.SEGGER_RTT_GetAvailWriteSpace:000000000000001c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4727   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4734   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4782   .text.SEGGER_RTT_GetBytesInBuffer:000000000000001c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4798   .bss._SEGGER_RTT:0000000000000000 _SEGGER_RTT
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4791   .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4792   .bss._ActiveTerminal:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4794   .bss._SEGGER_RTT:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4801   .bss._acDownBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4805   .bss._acDownBuffer:0000000000000000 _acDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4808   .bss._acUpBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4812   .bss._acUpBuffer:0000000000000000 _acUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4815   .rodata._aInitStr.0:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4819   .rodata._aInitStr.0:0000000000000000 _aInitStr.0
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4822   .rodata._aTerminalId:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s:4826   .rodata._aTerminalId:0000000000000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
memset
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccEBHXKK.s 			page 138


strlen
