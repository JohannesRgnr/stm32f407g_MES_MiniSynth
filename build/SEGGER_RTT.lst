ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "Core/Src/SEGGER_RTT.c"
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 2


  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 26642 $
  50:Core/Src/SEGGER_RTT.c **** 
  51:Core/Src/SEGGER_RTT.c **** Additional information:
  52:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  54:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:Core/Src/SEGGER_RTT.c **** 
  59:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:Core/Src/SEGGER_RTT.c **** 
  68:Core/Src/SEGGER_RTT.c **** 
  69:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:Core/Src/SEGGER_RTT.c **** */
  71:Core/Src/SEGGER_RTT.c **** 
  72:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:Core/Src/SEGGER_RTT.c **** 
  76:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  77:Core/Src/SEGGER_RTT.c **** *
  78:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  79:Core/Src/SEGGER_RTT.c **** *
  80:Core/Src/SEGGER_RTT.c **** **********************************************************************
  81:Core/Src/SEGGER_RTT.c **** */
  82:Core/Src/SEGGER_RTT.c **** 
  83:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  84:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  85:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  86:Core/Src/SEGGER_RTT.c ****   #endif
  87:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 3


  88:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  89:Core/Src/SEGGER_RTT.c ****   #endif
  90:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  91:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  92:Core/Src/SEGGER_RTT.c ****   #endif
  93:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  94:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  95:Core/Src/SEGGER_RTT.c ****   #endif
  96:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  97:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  98:Core/Src/SEGGER_RTT.c ****   #endif
  99:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 100:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 101:Core/Src/SEGGER_RTT.c ****   #endif
 102:Core/Src/SEGGER_RTT.c **** #endif
 103:Core/Src/SEGGER_RTT.c **** 
 104:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 105:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 106:Core/Src/SEGGER_RTT.c **** #endif
 107:Core/Src/SEGGER_RTT.c **** 
 108:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 109:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 110:Core/Src/SEGGER_RTT.c **** #endif
 111:Core/Src/SEGGER_RTT.c **** 
 112:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 113:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 114:Core/Src/SEGGER_RTT.c **** #endif
 115:Core/Src/SEGGER_RTT.c **** 
 116:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 117:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 118:Core/Src/SEGGER_RTT.c **** #endif
 119:Core/Src/SEGGER_RTT.c **** 
 120:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 121:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 122:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 123:Core/Src/SEGGER_RTT.c ****   #endif
 124:Core/Src/SEGGER_RTT.c **** #endif
 125:Core/Src/SEGGER_RTT.c **** 
 126:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 127:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 128:Core/Src/SEGGER_RTT.c **** #endif
 129:Core/Src/SEGGER_RTT.c **** 
 130:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 131:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 132:Core/Src/SEGGER_RTT.c **** #endif
 133:Core/Src/SEGGER_RTT.c **** 
 134:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 135:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 136:Core/Src/SEGGER_RTT.c **** #endif
 137:Core/Src/SEGGER_RTT.c **** 
 138:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 139:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 140:Core/Src/SEGGER_RTT.c **** #endif
 141:Core/Src/SEGGER_RTT.c **** 
 142:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 143:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 144:Core/Src/SEGGER_RTT.c **** #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 4


 145:Core/Src/SEGGER_RTT.c **** 
 146:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 147:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 148:Core/Src/SEGGER_RTT.c **** #endif
 149:Core/Src/SEGGER_RTT.c **** 
 150:Core/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 151:Core/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 152:Core/Src/SEGGER_RTT.c **** #endif
 153:Core/Src/SEGGER_RTT.c **** 
 154:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 155:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 156:Core/Src/SEGGER_RTT.c **** #endif
 157:Core/Src/SEGGER_RTT.c **** 
 158:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 159:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 160:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 161:Core/Src/SEGGER_RTT.c ****   #else
 162:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 163:Core/Src/SEGGER_RTT.c ****   #endif
 164:Core/Src/SEGGER_RTT.c **** #endif
 165:Core/Src/SEGGER_RTT.c **** 
 166:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 167:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 168:Core/Src/SEGGER_RTT.c **** #endif
 169:Core/Src/SEGGER_RTT.c **** 
 170:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 171:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 172:Core/Src/SEGGER_RTT.c **** #endif
 173:Core/Src/SEGGER_RTT.c **** //
 174:Core/Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 175:Core/Src/SEGGER_RTT.c **** //
 176:Core/Src/SEGGER_RTT.c **** #ifndef NULL
 177:Core/Src/SEGGER_RTT.c ****   #define NULL 0
 178:Core/Src/SEGGER_RTT.c **** #endif
 179:Core/Src/SEGGER_RTT.c **** 
 180:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 181:Core/Src/SEGGER_RTT.c **** *
 182:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 183:Core/Src/SEGGER_RTT.c **** *
 184:Core/Src/SEGGER_RTT.c **** **********************************************************************
 185:Core/Src/SEGGER_RTT.c **** */
 186:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 187:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 188:Core/Src/SEGGER_RTT.c **** #endif
 189:Core/Src/SEGGER_RTT.c **** 
 190:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 191:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 192:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 193:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 195:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 196:Core/Src/SEGGER_RTT.c ****                                   Var
 197:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 198:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 199:Core/Src/SEGGER_RTT.c ****   #else
 200:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 201:Core/Src/SEGGER_RTT.c ****   #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 5


 202:Core/Src/SEGGER_RTT.c **** #else
 203:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 204:Core/Src/SEGGER_RTT.c **** #endif
 205:Core/Src/SEGGER_RTT.c **** 
 206:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 207:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 208:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 209:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 210:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 211:Core/Src/SEGGER_RTT.c ****                                         Var
 212:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 213:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 214:Core/Src/SEGGER_RTT.c ****   #else
 215:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 216:Core/Src/SEGGER_RTT.c ****   #endif
 217:Core/Src/SEGGER_RTT.c **** #else
 218:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 219:Core/Src/SEGGER_RTT.c **** #endif
 220:Core/Src/SEGGER_RTT.c **** 
 221:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 222:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 223:Core/Src/SEGGER_RTT.c **** #else
 224:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 225:Core/Src/SEGGER_RTT.c **** #endif
 226:Core/Src/SEGGER_RTT.c **** 
 227:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 228:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 229:Core/Src/SEGGER_RTT.c **** #else
 230:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 231:Core/Src/SEGGER_RTT.c **** #endif
 232:Core/Src/SEGGER_RTT.c **** 
 233:Core/Src/SEGGER_RTT.c **** 
 234:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 235:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 236:Core/Src/SEGGER_RTT.c **** #else
 237:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 238:Core/Src/SEGGER_RTT.c **** #endif
 239:Core/Src/SEGGER_RTT.c **** 
 240:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 241:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 242:Core/Src/SEGGER_RTT.c **** #else
 243:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 244:Core/Src/SEGGER_RTT.c **** #endif
 245:Core/Src/SEGGER_RTT.c **** 
 246:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 247:Core/Src/SEGGER_RTT.c **** *
 248:Core/Src/SEGGER_RTT.c **** *       Static const data
 249:Core/Src/SEGGER_RTT.c **** *
 250:Core/Src/SEGGER_RTT.c **** **********************************************************************
 251:Core/Src/SEGGER_RTT.c **** */
 252:Core/Src/SEGGER_RTT.c **** 
 253:Core/Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 254:Core/Src/SEGGER_RTT.c **** 
 255:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 256:Core/Src/SEGGER_RTT.c **** *
 257:Core/Src/SEGGER_RTT.c **** *       Static data
 258:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 6


 259:Core/Src/SEGGER_RTT.c **** **********************************************************************
 260:Core/Src/SEGGER_RTT.c **** */
 261:Core/Src/SEGGER_RTT.c **** 
 262:Core/Src/SEGGER_RTT.c **** //
 263:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 264:Core/Src/SEGGER_RTT.c **** //
 265:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 266:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 267:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 268:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 269:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 270:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 271:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 272:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 273:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 274:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 275:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 276:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 277:Core/Src/SEGGER_RTT.c ****   #else
 278:Core/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 279:Core/Src/SEGGER_RTT.c ****   #endif
 280:Core/Src/SEGGER_RTT.c **** #else
 281:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 282:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 283:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 284:Core/Src/SEGGER_RTT.c **** #endif
 285:Core/Src/SEGGER_RTT.c **** 
 286:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 287:Core/Src/SEGGER_RTT.c **** 
 288:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 289:Core/Src/SEGGER_RTT.c **** *
 290:Core/Src/SEGGER_RTT.c **** *       Static functions
 291:Core/Src/SEGGER_RTT.c **** *
 292:Core/Src/SEGGER_RTT.c **** **********************************************************************
 293:Core/Src/SEGGER_RTT.c **** */
 294:Core/Src/SEGGER_RTT.c **** 
 295:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 296:Core/Src/SEGGER_RTT.c **** *
 297:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 298:Core/Src/SEGGER_RTT.c **** *
 299:Core/Src/SEGGER_RTT.c **** *  Function description
 300:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 301:Core/Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 302:Core/Src/SEGGER_RTT.c **** *
 303:Core/Src/SEGGER_RTT.c **** */
 304:Core/Src/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 305:Core/Src/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 306:Core/Src/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 307:Core/Src/SEGGER_RTT.c ****                   do {                                                                             
 308:Core/Src/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 309:Core/Src/SEGGER_RTT.c ****                       _DoInit();                                                                   
 310:Core/Src/SEGGER_RTT.c ****                     }                                                                              
 311:Core/Src/SEGGER_RTT.c ****                   } while (0);                                                                     
 312:Core/Src/SEGGER_RTT.c ****                 }
 313:Core/Src/SEGGER_RTT.c **** 
 314:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
 315:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 7


 316:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:Core/Src/SEGGER_RTT.c ****   unsigned i;
 318:Core/Src/SEGGER_RTT.c ****   //
 319:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 320:Core/Src/SEGGER_RTT.c ****   //
 321:Core/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 322:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 324:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 325:Core/Src/SEGGER_RTT.c ****   //
 326:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:Core/Src/SEGGER_RTT.c ****   //
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 333:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 334:Core/Src/SEGGER_RTT.c ****   //
 335:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 336:Core/Src/SEGGER_RTT.c ****   //
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 342:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 343:Core/Src/SEGGER_RTT.c ****   //
 344:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:Core/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:Core/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:Core/Src/SEGGER_RTT.c ****   //
 348:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 350:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 351:Core/Src/SEGGER_RTT.c ****   }
 352:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 353:Core/Src/SEGGER_RTT.c **** }
 354:Core/Src/SEGGER_RTT.c **** 
 355:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 356:Core/Src/SEGGER_RTT.c **** *
 357:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:Core/Src/SEGGER_RTT.c **** *
 359:Core/Src/SEGGER_RTT.c **** *  Function description
 360:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:Core/Src/SEGGER_RTT.c **** *    read by the host.
 363:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:Core/Src/SEGGER_RTT.c **** *
 366:Core/Src/SEGGER_RTT.c **** *  Parameters
 367:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:Core/Src/SEGGER_RTT.c **** *
 371:Core/Src/SEGGER_RTT.c **** *  Return value
 372:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 8


 373:Core/Src/SEGGER_RTT.c **** */
 374:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 378:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 379:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 380:Core/Src/SEGGER_RTT.c ****   //
 381:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:Core/Src/SEGGER_RTT.c ****   //
 383:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 384:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 385:Core/Src/SEGGER_RTT.c ****   do {
 386:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 387:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 388:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 389:Core/Src/SEGGER_RTT.c ****     } else {
 390:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 391:Core/Src/SEGGER_RTT.c ****     }
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 393:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 394:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 395:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:Core/Src/SEGGER_RTT.c ****     };
 402:Core/Src/SEGGER_RTT.c **** #else
 403:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 404:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 405:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 406:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 407:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 408:Core/Src/SEGGER_RTT.c **** #endif
 409:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 410:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 411:Core/Src/SEGGER_RTT.c ****     }
 412:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 413:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 414:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 415:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 416:Core/Src/SEGGER_RTT.c **** }
 417:Core/Src/SEGGER_RTT.c **** 
 418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 419:Core/Src/SEGGER_RTT.c **** *
 420:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:Core/Src/SEGGER_RTT.c **** *
 422:Core/Src/SEGGER_RTT.c **** *  Function description
 423:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:Core/Src/SEGGER_RTT.c **** *    read by the host.
 426:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 427:Core/Src/SEGGER_RTT.c **** *
 428:Core/Src/SEGGER_RTT.c **** *  Parameters
 429:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 9


 430:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:Core/Src/SEGGER_RTT.c **** *
 433:Core/Src/SEGGER_RTT.c **** *  Notes
 434:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:Core/Src/SEGGER_RTT.c **** */
 436:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 437:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 438:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 439:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 440:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 441:Core/Src/SEGGER_RTT.c **** 
 442:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 443:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 444:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 445:Core/Src/SEGGER_RTT.c ****     //
 446:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 447:Core/Src/SEGGER_RTT.c ****     //
 448:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 449:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 450:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:Core/Src/SEGGER_RTT.c ****     };
 454:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:Core/Src/SEGGER_RTT.c **** #else
 457:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 458:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 459:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 460:Core/Src/SEGGER_RTT.c **** #endif
 461:Core/Src/SEGGER_RTT.c ****   } else {
 462:Core/Src/SEGGER_RTT.c ****     //
 463:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:Core/Src/SEGGER_RTT.c ****     //
 465:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:Core/Src/SEGGER_RTT.c ****     };
 471:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:Core/Src/SEGGER_RTT.c ****     };
 476:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:Core/Src/SEGGER_RTT.c **** #else
 479:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 480:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 482:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 483:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 484:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 485:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 486:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 10


 487:Core/Src/SEGGER_RTT.c **** #endif
 488:Core/Src/SEGGER_RTT.c ****   }
 489:Core/Src/SEGGER_RTT.c **** }
 490:Core/Src/SEGGER_RTT.c **** 
 491:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 492:Core/Src/SEGGER_RTT.c **** *
 493:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:Core/Src/SEGGER_RTT.c **** *
 495:Core/Src/SEGGER_RTT.c **** *  Function description
 496:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:Core/Src/SEGGER_RTT.c **** *
 500:Core/Src/SEGGER_RTT.c **** *  Parameters
 501:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:Core/Src/SEGGER_RTT.c **** */
 504:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 505:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:Core/Src/SEGGER_RTT.c **** 
 507:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 508:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 509:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 510:Core/Src/SEGGER_RTT.c **** }
 511:Core/Src/SEGGER_RTT.c **** 
 512:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 513:Core/Src/SEGGER_RTT.c **** *
 514:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:Core/Src/SEGGER_RTT.c **** *
 516:Core/Src/SEGGER_RTT.c **** *  Function description
 517:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
 519:Core/Src/SEGGER_RTT.c **** *
 520:Core/Src/SEGGER_RTT.c **** *  Parameters
 521:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:Core/Src/SEGGER_RTT.c **** *
 523:Core/Src/SEGGER_RTT.c **** *  Return value
 524:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:Core/Src/SEGGER_RTT.c **** */
 526:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 526 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 527:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 527 3 view .LVU1
 528:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 528 3 view .LVU2
 529:Core/Src/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 529 3 view .LVU3
 530:Core/Src/SEGGER_RTT.c ****   //
 531:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:Core/Src/SEGGER_RTT.c ****   //
 534:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 534 3 view .LVU4
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 11


  38              		.loc 1 534 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 535:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 535 3 is_stmt 1 view .LVU6
  42              		.loc 1 535 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 536:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 536 3 is_stmt 1 view .LVU8
  46              		.loc 1 536 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 537:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 537 5 is_stmt 1 view .LVU10
  50              		.loc 1 537 14 is_stmt 0 view .LVU11
  51 0008 8168     		ldr	r1, [r0, #8]
  52              		.loc 1 537 34 view .LVU12
  53 000a 8A1A     		subs	r2, r1, r2
  54              	.LVL3:
  55              		.loc 1 537 42 view .LVU13
  56 000c 1344     		add	r3, r3, r2
  57              	.LVL4:
  58              		.loc 1 537 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 537 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 538:Core/Src/SEGGER_RTT.c ****   } else {
 539:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 539 5 is_stmt 1 view .LVU16
  66              		.loc 1 539 15 is_stmt 0 view .LVU17
  67 0012 981A     		subs	r0, r3, r2
  68              	.LVL7:
  69              		.loc 1 539 7 view .LVU18
  70 0014 0138     		subs	r0, r0, #1
  71              	.LVL8:
 540:Core/Src/SEGGER_RTT.c ****   }
 541:Core/Src/SEGGER_RTT.c ****   return r;
  72              		.loc 1 541 3 is_stmt 1 view .LVU19
 542:Core/Src/SEGGER_RTT.c **** }
  73              		.loc 1 542 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	_WriteNoCheck:
  85              	.LVL9:
  86              	.LFB2:
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  87              		.loc 1 436 94 is_stmt 1 view -0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 12


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  91              		.loc 1 436 94 is_stmt 0 view .LVU22
  92 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  93              		.cfi_def_cfa_offset 32
  94              		.cfi_offset 3, -32
  95              		.cfi_offset 4, -28
  96              		.cfi_offset 5, -24
  97              		.cfi_offset 6, -20
  98              		.cfi_offset 7, -16
  99              		.cfi_offset 8, -12
 100              		.cfi_offset 9, -8
 101              		.cfi_offset 14, -4
 102 0004 0446     		mov	r4, r0
 103 0006 8846     		mov	r8, r1
 104 0008 1646     		mov	r6, r2
 437:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 105              		.loc 1 437 3 is_stmt 1 view .LVU23
 438:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 106              		.loc 1 438 3 view .LVU24
 439:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 107              		.loc 1 439 3 view .LVU25
 440:Core/Src/SEGGER_RTT.c **** 
 108              		.loc 1 440 3 view .LVU26
 442:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 442 3 view .LVU27
 442:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 442 9 is_stmt 0 view .LVU28
 111 000a C568     		ldr	r5, [r0, #12]
 112              	.LVL10:
 443:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 443 3 is_stmt 1 view .LVU29
 443:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 443 14 is_stmt 0 view .LVU30
 115 000c 8768     		ldr	r7, [r0, #8]
 443:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 116              		.loc 1 443 7 view .LVU31
 117 000e A7EB0509 		sub	r9, r7, r5
 118              	.LVL11:
 444:Core/Src/SEGGER_RTT.c ****     //
 119              		.loc 1 444 3 is_stmt 1 view .LVU32
 444:Core/Src/SEGGER_RTT.c ****     //
 120              		.loc 1 444 6 is_stmt 0 view .LVU33
 121 0012 9145     		cmp	r9, r2
 122 0014 09D9     		bls	.L5
 448:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 123              		.loc 1 448 5 is_stmt 1 view .LVU34
 448:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 124              		.loc 1 448 18 is_stmt 0 view .LVU35
 125 0016 4068     		ldr	r0, [r0, #4]
 126              	.LVL12:
 457:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 127              		.loc 1 457 5 is_stmt 1 view .LVU36
 128 0018 2844     		add	r0, r0, r5
 129              	.LVL13:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 13


 457:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 130              		.loc 1 457 5 is_stmt 0 view .LVU37
 131 001a FFF7FEFF 		bl	memcpy
 132              	.LVL14:
 458:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 133              		.loc 1 458 5 is_stmt 1 view .LVU38
 134              		.syntax unified
 135              	@ 458 "Core/Src/SEGGER_RTT.c" 1
 136 001e BFF35F8F 		dmb
 137              	
 138              	@ 0 "" 2
 458:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 139              		.loc 1 458 15 view .LVU39
 459:Core/Src/SEGGER_RTT.c **** #endif
 140              		.loc 1 459 5 view .LVU40
 459:Core/Src/SEGGER_RTT.c **** #endif
 141              		.loc 1 459 26 is_stmt 0 view .LVU41
 142              		.thumb
 143              		.syntax unified
 144 0022 3544     		add	r5, r5, r6
 145              	.LVL15:
 459:Core/Src/SEGGER_RTT.c **** #endif
 146              		.loc 1 459 18 view .LVU42
 147 0024 E560     		str	r5, [r4, #12]
 148              	.L4:
 489:Core/Src/SEGGER_RTT.c **** 
 149              		.loc 1 489 1 view .LVU43
 150 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 151              	.LVL16:
 152              	.L5:
 479:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 153              		.loc 1 479 5 is_stmt 1 view .LVU44
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 154              		.loc 1 480 5 view .LVU45
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 155              		.loc 1 480 18 is_stmt 0 view .LVU46
 156 002a 4068     		ldr	r0, [r0, #4]
 157              	.LVL17:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 158              		.loc 1 481 5 is_stmt 1 view .LVU47
 159 002c 4A46     		mov	r2, r9
 160              	.LVL18:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 161              		.loc 1 481 5 is_stmt 0 view .LVU48
 162 002e 2844     		add	r0, r0, r5
 163              	.LVL19:
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 164              		.loc 1 481 5 view .LVU49
 165 0030 FFF7FEFF 		bl	memcpy
 166              	.LVL20:
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 167              		.loc 1 482 5 is_stmt 1 view .LVU50
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 168              		.loc 1 482 20 is_stmt 0 view .LVU51
 169 0034 ED1B     		subs	r5, r5, r7
 170              	.LVL21:
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 14


 171              		.loc 1 482 20 view .LVU52
 172 0036 3544     		add	r5, r5, r6
 173              	.LVL22:
 483:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 174              		.loc 1 483 5 is_stmt 1 view .LVU53
 484:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 175              		.loc 1 484 5 view .LVU54
 176 0038 2A46     		mov	r2, r5
 177 003a 08EB0901 		add	r1, r8, r9
 178 003e 6068     		ldr	r0, [r4, #4]
 179 0040 FFF7FEFF 		bl	memcpy
 180              	.LVL23:
 485:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 181              		.loc 1 485 5 view .LVU55
 182              		.syntax unified
 183              	@ 485 "Core/Src/SEGGER_RTT.c" 1
 184 0044 BFF35F8F 		dmb
 185              	
 186              	@ 0 "" 2
 485:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 187              		.loc 1 485 15 view .LVU56
 486:Core/Src/SEGGER_RTT.c **** #endif
 188              		.loc 1 486 5 view .LVU57
 486:Core/Src/SEGGER_RTT.c **** #endif
 189              		.loc 1 486 18 is_stmt 0 view .LVU58
 190              		.thumb
 191              		.syntax unified
 192 0048 E560     		str	r5, [r4, #12]
 489:Core/Src/SEGGER_RTT.c **** 
 193              		.loc 1 489 1 view .LVU59
 194 004a ECE7     		b	.L4
 195              		.cfi_endproc
 196              	.LFE2:
 198              		.section	.text._WriteBlocking,"ax",%progbits
 199              		.align	1
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 204              	_WriteBlocking:
 205              	.LVL24:
 206              	.LFB1:
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 207              		.loc 1 374 101 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 211              		.loc 1 374 101 is_stmt 0 view .LVU61
 212 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 213              		.cfi_def_cfa_offset 32
 214              		.cfi_offset 3, -32
 215              		.cfi_offset 4, -28
 216              		.cfi_offset 5, -24
 217              		.cfi_offset 6, -20
 218              		.cfi_offset 7, -16
 219              		.cfi_offset 8, -12
 220              		.cfi_offset 9, -8
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 15


 221              		.cfi_offset 14, -4
 222 0004 0646     		mov	r6, r0
 223 0006 8846     		mov	r8, r1
 224 0008 1746     		mov	r7, r2
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 225              		.loc 1 375 3 is_stmt 1 view .LVU62
 376:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 226              		.loc 1 376 3 view .LVU63
 377:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 227              		.loc 1 377 3 view .LVU64
 378:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 228              		.loc 1 378 3 view .LVU65
 379:Core/Src/SEGGER_RTT.c ****   //
 229              		.loc 1 379 3 view .LVU66
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 230              		.loc 1 383 3 view .LVU67
 231              	.LVL25:
 384:Core/Src/SEGGER_RTT.c ****   do {
 232              		.loc 1 384 3 view .LVU68
 384:Core/Src/SEGGER_RTT.c ****   do {
 233              		.loc 1 384 9 is_stmt 0 view .LVU69
 234 000a C568     		ldr	r5, [r0, #12]
 235              	.LVL26:
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 236              		.loc 1 383 19 view .LVU70
 237 000c 4FF00009 		mov	r9, #0
 238 0010 1AE0     		b	.L12
 239              	.LVL27:
 240              	.L17:
 388:Core/Src/SEGGER_RTT.c ****     } else {
 241              		.loc 1 388 7 is_stmt 1 view .LVU71
 388:Core/Src/SEGGER_RTT.c ****     } else {
 242              		.loc 1 388 31 is_stmt 0 view .LVU72
 243 0012 5B1B     		subs	r3, r3, r5
 244              	.LVL28:
 388:Core/Src/SEGGER_RTT.c ****     } else {
 245              		.loc 1 388 23 view .LVU73
 246 0014 5A1E     		subs	r2, r3, #1
 247              	.LVL29:
 248              	.L10:
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 249              		.loc 1 392 5 is_stmt 1 view .LVU74
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 250              		.loc 1 392 23 is_stmt 0 view .LVU75
 251 0016 B368     		ldr	r3, [r6, #8]
 252 0018 5C1B     		subs	r4, r3, r5
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 253              		.loc 1 392 21 view .LVU76
 254 001a 9442     		cmp	r4, r2
 255 001c 28BF     		it	cs
 256 001e 1446     		movcs	r4, r2
 257              	.LVL30:
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 258              		.loc 1 393 5 is_stmt 1 view .LVU77
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 259              		.loc 1 393 21 is_stmt 0 view .LVU78
 260 0020 BC42     		cmp	r4, r7
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 16


 261 0022 28BF     		it	cs
 262 0024 3C46     		movcs	r4, r7
 263              	.LVL31:
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 264              		.loc 1 394 5 is_stmt 1 view .LVU79
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 265              		.loc 1 394 18 is_stmt 0 view .LVU80
 266 0026 7068     		ldr	r0, [r6, #4]
 267              	.LVL32:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 268              		.loc 1 403 5 is_stmt 1 view .LVU81
 269 0028 2246     		mov	r2, r4
 270 002a 4146     		mov	r1, r8
 271 002c 2844     		add	r0, r0, r5
 272              	.LVL33:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 273              		.loc 1 403 5 is_stmt 0 view .LVU82
 274 002e FFF7FEFF 		bl	memcpy
 275              	.LVL34:
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 276              		.loc 1 404 5 is_stmt 1 view .LVU83
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 277              		.loc 1 404 21 is_stmt 0 view .LVU84
 278 0032 A144     		add	r9, r9, r4
 279              	.LVL35:
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 280              		.loc 1 405 5 is_stmt 1 view .LVU85
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 281              		.loc 1 405 21 is_stmt 0 view .LVU86
 282 0034 A044     		add	r8, r8, r4
 283              	.LVL36:
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 284              		.loc 1 406 5 is_stmt 1 view .LVU87
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 285              		.loc 1 406 21 is_stmt 0 view .LVU88
 286 0036 3F1B     		subs	r7, r7, r4
 287              	.LVL37:
 407:Core/Src/SEGGER_RTT.c **** #endif
 288              		.loc 1 407 5 is_stmt 1 view .LVU89
 407:Core/Src/SEGGER_RTT.c **** #endif
 289              		.loc 1 407 21 is_stmt 0 view .LVU90
 290 0038 2544     		add	r5, r5, r4
 291              	.LVL38:
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 292              		.loc 1 409 5 is_stmt 1 view .LVU91
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 293              		.loc 1 409 23 is_stmt 0 view .LVU92
 294 003a B368     		ldr	r3, [r6, #8]
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 295              		.loc 1 409 8 view .LVU93
 296 003c AB42     		cmp	r3, r5
 297 003e 0BD0     		beq	.L15
 298              	.LVL39:
 299              	.L11:
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 300              		.loc 1 412 5 is_stmt 1 view .LVU94
 301              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 17


 302              	@ 412 "Core/Src/SEGGER_RTT.c" 1
 303 0040 BFF35F8F 		dmb
 304              	
 305              	@ 0 "" 2
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 306              		.loc 1 412 15 view .LVU95
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 307              		.loc 1 413 5 view .LVU96
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 308              		.loc 1 413 18 is_stmt 0 view .LVU97
 309              		.thumb
 310              		.syntax unified
 311 0044 F560     		str	r5, [r6, #12]
 414:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 312              		.loc 1 414 12 is_stmt 1 view .LVU98
 313 0046 4FB1     		cbz	r7, .L16
 314              	.LVL40:
 315              	.L12:
 385:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 316              		.loc 1 385 3 view .LVU99
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 317              		.loc 1 386 5 view .LVU100
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 318              		.loc 1 386 11 is_stmt 0 view .LVU101
 319 0048 3369     		ldr	r3, [r6, #16]
 320              	.LVL41:
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 321              		.loc 1 387 5 is_stmt 1 view .LVU102
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 322              		.loc 1 387 8 is_stmt 0 view .LVU103
 323 004a 9D42     		cmp	r5, r3
 324 004c E1D3     		bcc	.L17
 390:Core/Src/SEGGER_RTT.c ****     }
 325              		.loc 1 390 7 is_stmt 1 view .LVU104
 390:Core/Src/SEGGER_RTT.c ****     }
 326              		.loc 1 390 30 is_stmt 0 view .LVU105
 327 004e B268     		ldr	r2, [r6, #8]
 390:Core/Src/SEGGER_RTT.c ****     }
 328              		.loc 1 390 62 view .LVU106
 329 0050 5B1B     		subs	r3, r3, r5
 330              	.LVL42:
 390:Core/Src/SEGGER_RTT.c ****     }
 331              		.loc 1 390 45 view .LVU107
 332 0052 1A44     		add	r2, r2, r3
 390:Core/Src/SEGGER_RTT.c ****     }
 333              		.loc 1 390 23 view .LVU108
 334 0054 013A     		subs	r2, r2, #1
 335              	.LVL43:
 390:Core/Src/SEGGER_RTT.c ****     }
 336              		.loc 1 390 23 view .LVU109
 337 0056 DEE7     		b	.L10
 338              	.LVL44:
 339              	.L15:
 410:Core/Src/SEGGER_RTT.c ****     }
 340              		.loc 1 410 13 view .LVU110
 341 0058 0025     		movs	r5, #0
 342              	.LVL45:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 18


 410:Core/Src/SEGGER_RTT.c ****     }
 343              		.loc 1 410 13 view .LVU111
 344 005a F1E7     		b	.L11
 345              	.LVL46:
 346              	.L16:
 415:Core/Src/SEGGER_RTT.c **** }
 347              		.loc 1 415 3 is_stmt 1 view .LVU112
 416:Core/Src/SEGGER_RTT.c **** 
 348              		.loc 1 416 1 is_stmt 0 view .LVU113
 349 005c 4846     		mov	r0, r9
 350 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 416:Core/Src/SEGGER_RTT.c **** 
 351              		.loc 1 416 1 view .LVU114
 352              		.cfi_endproc
 353              	.LFE1:
 355              		.section	.text._PostTerminalSwitch,"ax",%progbits
 356              		.align	1
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	_PostTerminalSwitch:
 362              	.LVL47:
 363              	.LFB3:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 364              		.loc 1 504 88 is_stmt 1 view -0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 368              		.loc 1 504 88 is_stmt 0 view .LVU116
 369 0000 00B5     		push	{lr}
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 14, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              		.cfi_def_cfa_offset 16
 505:Core/Src/SEGGER_RTT.c **** 
 374              		.loc 1 505 3 is_stmt 1 view .LVU117
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 375              		.loc 1 507 3 view .LVU118
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 376              		.loc 1 507 9 is_stmt 0 view .LVU119
 377 0004 FF23     		movs	r3, #255
 378 0006 8DF80430 		strb	r3, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 379              		.loc 1 508 3 is_stmt 1 view .LVU120
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 380              		.loc 1 508 23 is_stmt 0 view .LVU121
 381 000a 054B     		ldr	r3, .L20
 382 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 383              		.loc 1 508 9 view .LVU122
 384 000e 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 385              		.loc 1 509 3 is_stmt 1 view .LVU123
 386 0012 0222     		movs	r2, #2
 387 0014 01A9     		add	r1, sp, #4
 388              	.LVL48:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 19


 509:Core/Src/SEGGER_RTT.c **** }
 389              		.loc 1 509 3 is_stmt 0 view .LVU124
 390 0016 FFF7FEFF 		bl	_WriteBlocking
 391              	.LVL49:
 510:Core/Src/SEGGER_RTT.c **** 
 392              		.loc 1 510 1 view .LVU125
 393 001a 03B0     		add	sp, sp, #12
 394              		.cfi_def_cfa_offset 4
 395              		@ sp needed
 396 001c 5DF804FB 		ldr	pc, [sp], #4
 397              	.L21:
 398              		.align	2
 399              	.L20:
 400 0020 00000000 		.word	.LANCHOR0
 401              		.cfi_endproc
 402              	.LFE3:
 404              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 405              		.align	2
 406              	.LC0:
 407 0000 5465726D 		.ascii	"Terminal\000"
 407      696E616C 
 407      00
 408              		.section	.text._DoInit,"ax",%progbits
 409              		.align	1
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	_DoInit:
 415              	.LFB0:
 314:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 416              		.loc 1 314 27 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 10B5     		push	{r4, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 4, -8
 423              		.cfi_offset 14, -4
 315:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 424              		.loc 1 315 3 view .LVU127
 316:Core/Src/SEGGER_RTT.c ****   unsigned i;
 425              		.loc 1 316 3 view .LVU128
 317:Core/Src/SEGGER_RTT.c ****   //
 426              		.loc 1 317 3 view .LVU129
 321:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 427              		.loc 1 321 3 view .LVU130
 428              	.LVL50:
 322:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 429              		.loc 1 322 3 view .LVU131
 430 0002 154C     		ldr	r4, .L26
 431 0004 A822     		movs	r2, #168
 432 0006 0021     		movs	r1, #0
 433 0008 2046     		mov	r0, r4
 434 000a FFF7FEFF 		bl	memset
 435              	.LVL51:
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 436              		.loc 1 323 3 view .LVU132
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 20


 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 437              		.loc 1 323 25 is_stmt 0 view .LVU133
 438 000e 0323     		movs	r3, #3
 439 0010 2361     		str	r3, [r4, #16]
 324:Core/Src/SEGGER_RTT.c ****   //
 440              		.loc 1 324 3 is_stmt 1 view .LVU134
 324:Core/Src/SEGGER_RTT.c ****   //
 441              		.loc 1 324 25 is_stmt 0 view .LVU135
 442 0012 6361     		str	r3, [r4, #20]
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 443              		.loc 1 328 3 is_stmt 1 view .LVU136
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 444              		.loc 1 328 27 is_stmt 0 view .LVU137
 445 0014 114A     		ldr	r2, .L26+4
 446 0016 A261     		str	r2, [r4, #24]
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 447              		.loc 1 329 3 is_stmt 1 view .LVU138
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 448              		.loc 1 329 27 is_stmt 0 view .LVU139
 449 0018 114B     		ldr	r3, .L26+8
 450 001a E361     		str	r3, [r4, #28]
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 451              		.loc 1 330 3 is_stmt 1 view .LVU140
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 452              		.loc 1 330 27 is_stmt 0 view .LVU141
 453 001c 4FF48063 		mov	r3, #1024
 454 0020 2362     		str	r3, [r4, #32]
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 455              		.loc 1 331 3 is_stmt 1 view .LVU142
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 456              		.loc 1 331 27 is_stmt 0 view .LVU143
 457 0022 0023     		movs	r3, #0
 458 0024 A362     		str	r3, [r4, #40]
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 459              		.loc 1 332 3 is_stmt 1 view .LVU144
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 460              		.loc 1 332 27 is_stmt 0 view .LVU145
 461 0026 6362     		str	r3, [r4, #36]
 333:Core/Src/SEGGER_RTT.c ****   //
 462              		.loc 1 333 3 is_stmt 1 view .LVU146
 333:Core/Src/SEGGER_RTT.c ****   //
 463              		.loc 1 333 27 is_stmt 0 view .LVU147
 464 0028 E362     		str	r3, [r4, #44]
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 465              		.loc 1 337 3 is_stmt 1 view .LVU148
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 466              		.loc 1 337 29 is_stmt 0 view .LVU149
 467 002a 2266     		str	r2, [r4, #96]
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 468              		.loc 1 338 3 is_stmt 1 view .LVU150
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 469              		.loc 1 338 29 is_stmt 0 view .LVU151
 470 002c 0D4A     		ldr	r2, .L26+12
 471 002e 6266     		str	r2, [r4, #100]
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 472              		.loc 1 339 3 is_stmt 1 view .LVU152
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 21


 473              		.loc 1 339 29 is_stmt 0 view .LVU153
 474 0030 1022     		movs	r2, #16
 475 0032 A266     		str	r2, [r4, #104]
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 476              		.loc 1 340 3 is_stmt 1 view .LVU154
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 477              		.loc 1 340 29 is_stmt 0 view .LVU155
 478 0034 2367     		str	r3, [r4, #112]
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 479              		.loc 1 341 3 is_stmt 1 view .LVU156
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 480              		.loc 1 341 29 is_stmt 0 view .LVU157
 481 0036 E366     		str	r3, [r4, #108]
 342:Core/Src/SEGGER_RTT.c ****   //
 482              		.loc 1 342 3 is_stmt 1 view .LVU158
 342:Core/Src/SEGGER_RTT.c ****   //
 483              		.loc 1 342 29 is_stmt 0 view .LVU159
 484 0038 6367     		str	r3, [r4, #116]
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 485              		.loc 1 348 3 is_stmt 1 view .LVU160
 486              		.syntax unified
 487              	@ 348 "Core/Src/SEGGER_RTT.c" 1
 488 003a BFF35F8F 		dmb
 489              	
 490              	@ 0 "" 2
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 491              		.loc 1 348 13 view .LVU161
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 492              		.loc 1 349 3 view .LVU162
 493              	.LVL52:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 494              		.loc 1 349 3 is_stmt 0 view .LVU163
 495              		.thumb
 496              		.syntax unified
 497 003e 06E0     		b	.L23
 498              	.LVL53:
 499              	.L24:
 350:Core/Src/SEGGER_RTT.c ****   }
 500              		.loc 1 350 5 is_stmt 1 discriminator 3 view .LVU164
 350:Core/Src/SEGGER_RTT.c ****   }
 501              		.loc 1 350 50 is_stmt 0 discriminator 3 view .LVU165
 502 0040 C3F10F02 		rsb	r2, r3, #15
 350:Core/Src/SEGGER_RTT.c ****   }
 503              		.loc 1 350 27 discriminator 3 view .LVU166
 504 0044 0849     		ldr	r1, .L26+16
 505 0046 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 350:Core/Src/SEGGER_RTT.c ****   }
 506              		.loc 1 350 16 discriminator 3 view .LVU167
 507 0048 034A     		ldr	r2, .L26
 508 004a D154     		strb	r1, [r2, r3]
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 509              		.loc 1 349 42 is_stmt 1 discriminator 3 view .LVU168
 510 004c 0133     		adds	r3, r3, #1
 511              	.LVL54:
 512              	.L23:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 513              		.loc 1 349 17 discriminator 1 view .LVU169
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 22


 514 004e 0F2B     		cmp	r3, #15
 515 0050 F6D9     		bls	.L24
 352:Core/Src/SEGGER_RTT.c **** }
 516              		.loc 1 352 3 view .LVU170
 517              		.syntax unified
 518              	@ 352 "Core/Src/SEGGER_RTT.c" 1
 519 0052 BFF35F8F 		dmb
 520              	
 521              	@ 0 "" 2
 352:Core/Src/SEGGER_RTT.c **** }
 522              		.loc 1 352 13 view .LVU171
 353:Core/Src/SEGGER_RTT.c **** 
 523              		.loc 1 353 1 is_stmt 0 view .LVU172
 524              		.thumb
 525              		.syntax unified
 526 0056 10BD     		pop	{r4, pc}
 527              	.L27:
 528              		.align	2
 529              	.L26:
 530 0058 00000000 		.word	.LANCHOR1
 531 005c 00000000 		.word	.LC0
 532 0060 00000000 		.word	.LANCHOR2
 533 0064 00000000 		.word	.LANCHOR3
 534 0068 00000000 		.word	.LANCHOR4
 535              		.cfi_endproc
 536              	.LFE0:
 538              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 539              		.align	1
 540              		.global	SEGGER_RTT_ReadUpBufferNoLock
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 545              	SEGGER_RTT_ReadUpBufferNoLock:
 546              	.LVL55:
 547              	.LFB5:
 543:Core/Src/SEGGER_RTT.c **** 
 544:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 545:Core/Src/SEGGER_RTT.c **** *
 546:Core/Src/SEGGER_RTT.c **** *       Public code
 547:Core/Src/SEGGER_RTT.c **** *
 548:Core/Src/SEGGER_RTT.c **** **********************************************************************
 549:Core/Src/SEGGER_RTT.c **** */
 550:Core/Src/SEGGER_RTT.c **** 
 551:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 552:Core/Src/SEGGER_RTT.c **** *
 553:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:Core/Src/SEGGER_RTT.c **** *
 555:Core/Src/SEGGER_RTT.c **** *  Function description
 556:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 558:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 560:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:Core/Src/SEGGER_RTT.c **** *
 562:Core/Src/SEGGER_RTT.c **** *  Parameters
 563:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 23


 565:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:Core/Src/SEGGER_RTT.c **** *
 567:Core/Src/SEGGER_RTT.c **** *  Return value
 568:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:Core/Src/SEGGER_RTT.c **** *
 570:Core/Src/SEGGER_RTT.c **** *  Additional information
 571:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:Core/Src/SEGGER_RTT.c **** */
 573:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 548              		.loc 1 573 96 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		.loc 1 573 96 is_stmt 0 view .LVU174
 553 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 554              		.cfi_def_cfa_offset 32
 555              		.cfi_offset 4, -32
 556              		.cfi_offset 5, -28
 557              		.cfi_offset 6, -24
 558              		.cfi_offset 7, -20
 559              		.cfi_offset 8, -16
 560              		.cfi_offset 9, -12
 561              		.cfi_offset 10, -8
 562              		.cfi_offset 14, -4
 563 0004 0446     		mov	r4, r0
 564 0006 8846     		mov	r8, r1
 565 0008 9146     		mov	r9, r2
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 566              		.loc 1 574 3 is_stmt 1 view .LVU175
 575:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 567              		.loc 1 575 3 view .LVU176
 576:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 568              		.loc 1 576 3 view .LVU177
 577:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 569              		.loc 1 577 3 view .LVU178
 578:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 570              		.loc 1 578 3 view .LVU179
 579:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 571              		.loc 1 579 3 view .LVU180
 580:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 572              		.loc 1 580 3 view .LVU181
 573              	.LBB2:
 581:Core/Src/SEGGER_RTT.c **** 
 582:Core/Src/SEGGER_RTT.c ****   INIT();
 574              		.loc 1 582 3 view .LVU182
 575              		.loc 1 582 3 view .LVU183
 576              	.LVL56:
 577              		.loc 1 582 3 view .LVU184
 578              		.loc 1 582 3 view .LVU185
 579 000a 264B     		ldr	r3, .L39
 580 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 581 000e C3B1     		cbz	r3, .L36
 582              	.LVL57:
 583              	.L29:
 584              		.loc 1 582 3 discriminator 3 view .LVU186
 585              	.LBE2:
 586              		.loc 1 582 9 discriminator 3 view .LVU187
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 24


 583:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 587              		.loc 1 583 3 discriminator 3 view .LVU188
 584:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 588              		.loc 1 584 3 discriminator 3 view .LVU189
 585:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 589              		.loc 1 585 3 discriminator 3 view .LVU190
 590              		.loc 1 585 9 is_stmt 0 discriminator 3 view .LVU191
 591 0010 04EB4402 		add	r2, r4, r4, lsl #1
 592 0014 234B     		ldr	r3, .L39
 593 0016 03EBC203 		add	r3, r3, r2, lsl #3
 594 001a 9F6A     		ldr	r7, [r3, #40]
 595              	.LVL58:
 586:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 596              		.loc 1 586 3 is_stmt 1 discriminator 3 view .LVU192
 597              		.loc 1 586 9 is_stmt 0 discriminator 3 view .LVU193
 598 001c 5D6A     		ldr	r5, [r3, #36]
 599              	.LVL59:
 587:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 600              		.loc 1 587 3 is_stmt 1 discriminator 3 view .LVU194
 588:Core/Src/SEGGER_RTT.c ****   //
 589:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:Core/Src/SEGGER_RTT.c ****   //
 591:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 601              		.loc 1 591 3 discriminator 3 view .LVU195
 602              		.loc 1 591 6 is_stmt 0 discriminator 3 view .LVU196
 603 001e AF42     		cmp	r7, r5
 604 0020 12D8     		bhi	.L37
 587:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 605              		.loc 1 587 16 view .LVU197
 606 0022 0026     		movs	r6, #0
 607              	.LVL60:
 608              	.L30:
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 593:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 594:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 595:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 599:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:Core/Src/SEGGER_RTT.c ****     };
 602:Core/Src/SEGGER_RTT.c **** #else
 603:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 604:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 605:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 606:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:Core/Src/SEGGER_RTT.c **** #endif
 609:Core/Src/SEGGER_RTT.c ****     //
 610:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:Core/Src/SEGGER_RTT.c ****     //
 612:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 613:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 614:Core/Src/SEGGER_RTT.c ****     }
 615:Core/Src/SEGGER_RTT.c ****   }
 616:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 25


 617:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:Core/Src/SEGGER_RTT.c ****   //
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 609              		.loc 1 619 3 is_stmt 1 view .LVU198
 610              		.loc 1 619 15 is_stmt 0 view .LVU199
 611 0024 ED1B     		subs	r5, r5, r7
 612              	.LVL61:
 620:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 613              		.loc 1 620 3 is_stmt 1 view .LVU200
 614              		.loc 1 620 15 is_stmt 0 view .LVU201
 615 0026 4D45     		cmp	r5, r9
 616 0028 28BF     		it	cs
 617 002a 4D46     		movcs	r5, r9
 618              	.LVL62:
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 619              		.loc 1 621 3 is_stmt 1 view .LVU202
 620              		.loc 1 621 6 is_stmt 0 view .LVU203
 621 002c 55BB     		cbnz	r5, .L38
 622              	.LVL63:
 623              	.L31:
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 623:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:Core/Src/SEGGER_RTT.c ****     };
 630:Core/Src/SEGGER_RTT.c **** #else
 631:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 632:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 634:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 635:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 636:Core/Src/SEGGER_RTT.c **** #endif
 637:Core/Src/SEGGER_RTT.c ****   }
 638:Core/Src/SEGGER_RTT.c ****   //
 639:Core/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:Core/Src/SEGGER_RTT.c ****   //
 641:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 624              		.loc 1 641 3 is_stmt 1 view .LVU204
 625              		.loc 1 641 6 is_stmt 0 view .LVU205
 626 002e 2EB1     		cbz	r6, .L28
 642:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 627              		.loc 1 642 5 is_stmt 1 view .LVU206
 628              		.loc 1 642 18 is_stmt 0 view .LVU207
 629 0030 04EB4404 		add	r4, r4, r4, lsl #1
 630              	.LVL64:
 631              		.loc 1 642 18 view .LVU208
 632 0034 1B4B     		ldr	r3, .L39
 633 0036 03EBC403 		add	r3, r3, r4, lsl #3
 634 003a 9F62     		str	r7, [r3, #40]
 643:Core/Src/SEGGER_RTT.c ****   }
 644:Core/Src/SEGGER_RTT.c ****   //
 645:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 635              		.loc 1 645 3 is_stmt 1 view .LVU209
 636              	.L28:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 26


 646:Core/Src/SEGGER_RTT.c **** }
 637              		.loc 1 646 1 is_stmt 0 view .LVU210
 638 003c 3046     		mov	r0, r6
 639 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 640              	.LVL65:
 641              	.L36:
 642              	.LBB3:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 643              		.loc 1 582 3 is_stmt 1 discriminator 1 view .LVU211
 644 0042 FFF7FEFF 		bl	_DoInit
 645              	.LVL66:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 646              		.loc 1 582 3 is_stmt 0 discriminator 1 view .LVU212
 647 0046 E3E7     		b	.L29
 648              	.LVL67:
 649              	.L37:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 650              		.loc 1 582 3 discriminator 1 view .LVU213
 651              	.LBE3:
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 652              		.loc 1 592 5 is_stmt 1 view .LVU214
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 653              		.loc 1 592 24 is_stmt 0 view .LVU215
 654 0048 164B     		ldr	r3, .L39
 655 004a 03EBC20A 		add	r10, r3, r2, lsl #3
 656 004e DAF82060 		ldr	r6, [r10, #32]
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 657              		.loc 1 592 17 view .LVU216
 658 0052 F61B     		subs	r6, r6, r7
 659              	.LVL68:
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 660              		.loc 1 593 5 is_stmt 1 view .LVU217
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 661              		.loc 1 593 17 is_stmt 0 view .LVU218
 662 0054 4E45     		cmp	r6, r9
 663 0056 28BF     		it	cs
 664 0058 4E46     		movcs	r6, r9
 665              	.LVL69:
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 666              		.loc 1 594 5 is_stmt 1 view .LVU219
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 667              		.loc 1 594 18 is_stmt 0 view .LVU220
 668 005a 621C     		adds	r2, r4, #1
 669 005c 02EB4202 		add	r2, r2, r2, lsl #1
 670 0060 03EBC203 		add	r3, r3, r2, lsl #3
 671 0064 5968     		ldr	r1, [r3, #4]
 672              	.LVL70:
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 673              		.loc 1 603 5 is_stmt 1 view .LVU221
 674 0066 3246     		mov	r2, r6
 675 0068 3944     		add	r1, r1, r7
 676              	.LVL71:
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 677              		.loc 1 603 5 is_stmt 0 view .LVU222
 678 006a 4046     		mov	r0, r8
 679 006c FFF7FEFF 		bl	memcpy
 680              	.LVL72:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 27


 604:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 681              		.loc 1 604 5 is_stmt 1 view .LVU223
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 682              		.loc 1 605 5 view .LVU224
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 683              		.loc 1 605 18 is_stmt 0 view .LVU225
 684 0070 B044     		add	r8, r8, r6
 685              	.LVL73:
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 686              		.loc 1 606 5 is_stmt 1 view .LVU226
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 687              		.loc 1 606 18 is_stmt 0 view .LVU227
 688 0072 A9EB0609 		sub	r9, r9, r6
 689              	.LVL74:
 607:Core/Src/SEGGER_RTT.c **** #endif
 690              		.loc 1 607 5 is_stmt 1 view .LVU228
 607:Core/Src/SEGGER_RTT.c **** #endif
 691              		.loc 1 607 18 is_stmt 0 view .LVU229
 692 0076 3744     		add	r7, r7, r6
 693              	.LVL75:
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 694              		.loc 1 612 5 is_stmt 1 view .LVU230
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 695              		.loc 1 612 23 is_stmt 0 view .LVU231
 696 0078 DAF82030 		ldr	r3, [r10, #32]
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 697              		.loc 1 612 8 view .LVU232
 698 007c BB42     		cmp	r3, r7
 699 007e D1D1     		bne	.L30
 613:Core/Src/SEGGER_RTT.c ****     }
 700              		.loc 1 613 13 view .LVU233
 701 0080 0027     		movs	r7, #0
 702              	.LVL76:
 613:Core/Src/SEGGER_RTT.c ****     }
 703              		.loc 1 613 13 view .LVU234
 704 0082 CFE7     		b	.L30
 705              	.LVL77:
 706              	.L38:
 622:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 707              		.loc 1 622 5 is_stmt 1 view .LVU235
 622:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 708              		.loc 1 622 18 is_stmt 0 view .LVU236
 709 0084 631C     		adds	r3, r4, #1
 710 0086 03EB4303 		add	r3, r3, r3, lsl #1
 711 008a 064A     		ldr	r2, .L39
 712 008c 02EBC303 		add	r3, r2, r3, lsl #3
 713 0090 5968     		ldr	r1, [r3, #4]
 714              	.LVL78:
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 715              		.loc 1 631 5 is_stmt 1 view .LVU237
 716 0092 2A46     		mov	r2, r5
 717 0094 3944     		add	r1, r1, r7
 718              	.LVL79:
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 719              		.loc 1 631 5 is_stmt 0 view .LVU238
 720 0096 4046     		mov	r0, r8
 721 0098 FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 28


 722              	.LVL80:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 723              		.loc 1 632 5 is_stmt 1 view .LVU239
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 724              		.loc 1 632 18 is_stmt 0 view .LVU240
 725 009c 2E44     		add	r6, r6, r5
 726              	.LVL81:
 633:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 727              		.loc 1 633 5 is_stmt 1 view .LVU241
 634:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 728              		.loc 1 634 5 view .LVU242
 635:Core/Src/SEGGER_RTT.c **** #endif
 729              		.loc 1 635 5 view .LVU243
 635:Core/Src/SEGGER_RTT.c **** #endif
 730              		.loc 1 635 18 is_stmt 0 view .LVU244
 731 009e 2F44     		add	r7, r7, r5
 732              	.LVL82:
 635:Core/Src/SEGGER_RTT.c **** #endif
 733              		.loc 1 635 18 view .LVU245
 734 00a0 C5E7     		b	.L31
 735              	.L40:
 736 00a2 00BF     		.align	2
 737              	.L39:
 738 00a4 00000000 		.word	.LANCHOR1
 739              		.cfi_endproc
 740              	.LFE5:
 742              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 743              		.align	1
 744              		.global	SEGGER_RTT_ReadNoLock
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 749              	SEGGER_RTT_ReadNoLock:
 750              	.LVL83:
 751              	.LFB6:
 647:Core/Src/SEGGER_RTT.c **** 
 648:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 649:Core/Src/SEGGER_RTT.c **** *
 650:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:Core/Src/SEGGER_RTT.c **** *
 652:Core/Src/SEGGER_RTT.c **** *  Function description
 653:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 656:Core/Src/SEGGER_RTT.c **** *
 657:Core/Src/SEGGER_RTT.c **** *  Parameters
 658:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 659:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:Core/Src/SEGGER_RTT.c **** *
 662:Core/Src/SEGGER_RTT.c **** *  Return value
 663:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:Core/Src/SEGGER_RTT.c **** */
 665:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 752              		.loc 1 665 88 is_stmt 1 view -0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 29


 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              		.loc 1 665 88 is_stmt 0 view .LVU247
 757 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 758              		.cfi_def_cfa_offset 32
 759              		.cfi_offset 4, -32
 760              		.cfi_offset 5, -28
 761              		.cfi_offset 6, -24
 762              		.cfi_offset 7, -20
 763              		.cfi_offset 8, -16
 764              		.cfi_offset 9, -12
 765              		.cfi_offset 10, -8
 766              		.cfi_offset 14, -4
 767 0004 0446     		mov	r4, r0
 768 0006 8846     		mov	r8, r1
 769 0008 9146     		mov	r9, r2
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 770              		.loc 1 666 3 is_stmt 1 view .LVU248
 667:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 771              		.loc 1 667 3 view .LVU249
 668:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 772              		.loc 1 668 3 view .LVU250
 669:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 773              		.loc 1 669 3 view .LVU251
 670:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 774              		.loc 1 670 3 view .LVU252
 671:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 775              		.loc 1 671 3 view .LVU253
 672:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 776              		.loc 1 672 3 view .LVU254
 777              	.LBB4:
 673:Core/Src/SEGGER_RTT.c ****   //
 674:Core/Src/SEGGER_RTT.c ****   INIT();
 778              		.loc 1 674 3 view .LVU255
 779              		.loc 1 674 3 view .LVU256
 780              	.LVL84:
 781              		.loc 1 674 3 view .LVU257
 782              		.loc 1 674 3 view .LVU258
 783 000a 244B     		ldr	r3, .L52
 784 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 785 000e C3B1     		cbz	r3, .L49
 786              	.LVL85:
 787              	.L42:
 788              		.loc 1 674 3 discriminator 3 view .LVU259
 789              	.LBE4:
 790              		.loc 1 674 9 discriminator 3 view .LVU260
 675:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 791              		.loc 1 675 3 discriminator 3 view .LVU261
 676:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 792              		.loc 1 676 3 discriminator 3 view .LVU262
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 793              		.loc 1 677 3 discriminator 3 view .LVU263
 794              		.loc 1 677 9 is_stmt 0 discriminator 3 view .LVU264
 795 0010 04EB4402 		add	r2, r4, r4, lsl #1
 796 0014 214B     		ldr	r3, .L52
 797 0016 03EBC203 		add	r3, r3, r2, lsl #3
 798 001a 1F6F     		ldr	r7, [r3, #112]
 799              	.LVL86:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 30


 678:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 800              		.loc 1 678 3 is_stmt 1 discriminator 3 view .LVU265
 801              		.loc 1 678 9 is_stmt 0 discriminator 3 view .LVU266
 802 001c DD6E     		ldr	r5, [r3, #108]
 803              	.LVL87:
 679:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 804              		.loc 1 679 3 is_stmt 1 discriminator 3 view .LVU267
 680:Core/Src/SEGGER_RTT.c ****   //
 681:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:Core/Src/SEGGER_RTT.c ****   //
 683:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 805              		.loc 1 683 3 discriminator 3 view .LVU268
 806              		.loc 1 683 6 is_stmt 0 discriminator 3 view .LVU269
 807 001e AF42     		cmp	r7, r5
 808 0020 12D8     		bhi	.L50
 679:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 809              		.loc 1 679 16 view .LVU270
 810 0022 0026     		movs	r6, #0
 811              	.LVL88:
 812              	.L43:
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 685:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 686:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 687:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 689:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:Core/Src/SEGGER_RTT.c ****     };
 694:Core/Src/SEGGER_RTT.c **** #else
 695:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 696:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 697:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 698:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:Core/Src/SEGGER_RTT.c **** #endif
 701:Core/Src/SEGGER_RTT.c ****     //
 702:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:Core/Src/SEGGER_RTT.c ****     //
 704:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 705:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 706:Core/Src/SEGGER_RTT.c ****     }
 707:Core/Src/SEGGER_RTT.c ****   }
 708:Core/Src/SEGGER_RTT.c ****   //
 709:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:Core/Src/SEGGER_RTT.c ****   //
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 813              		.loc 1 711 3 is_stmt 1 view .LVU271
 814              		.loc 1 711 15 is_stmt 0 view .LVU272
 815 0024 ED1B     		subs	r5, r5, r7
 816              	.LVL89:
 712:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 817              		.loc 1 712 3 is_stmt 1 view .LVU273
 818              		.loc 1 712 15 is_stmt 0 view .LVU274
 819 0026 4D45     		cmp	r5, r9
 820 0028 28BF     		it	cs
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 31


 821 002a 4D46     		movcs	r5, r9
 822              	.LVL90:
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 823              		.loc 1 713 3 is_stmt 1 view .LVU275
 824              		.loc 1 713 6 is_stmt 0 view .LVU276
 825 002c 3DBB     		cbnz	r5, .L51
 826              	.LVL91:
 827              	.L44:
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 715:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:Core/Src/SEGGER_RTT.c ****     };
 722:Core/Src/SEGGER_RTT.c **** #else
 723:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 724:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 725:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 726:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 727:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 728:Core/Src/SEGGER_RTT.c **** #endif
 729:Core/Src/SEGGER_RTT.c ****   }
 730:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 828              		.loc 1 730 3 is_stmt 1 view .LVU277
 829              		.loc 1 730 6 is_stmt 0 view .LVU278
 830 002e 2EB1     		cbz	r6, .L41
 731:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 831              		.loc 1 731 5 is_stmt 1 view .LVU279
 832              		.loc 1 731 18 is_stmt 0 view .LVU280
 833 0030 04EB4404 		add	r4, r4, r4, lsl #1
 834              	.LVL92:
 835              		.loc 1 731 18 view .LVU281
 836 0034 194B     		ldr	r3, .L52
 837 0036 03EBC403 		add	r3, r3, r4, lsl #3
 838 003a 1F67     		str	r7, [r3, #112]
 732:Core/Src/SEGGER_RTT.c ****   }
 733:Core/Src/SEGGER_RTT.c ****   //
 734:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 839              		.loc 1 734 3 is_stmt 1 view .LVU282
 840              	.L41:
 735:Core/Src/SEGGER_RTT.c **** }
 841              		.loc 1 735 1 is_stmt 0 view .LVU283
 842 003c 3046     		mov	r0, r6
 843 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 844              	.LVL93:
 845              	.L49:
 846              	.LBB5:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 847              		.loc 1 674 3 is_stmt 1 discriminator 1 view .LVU284
 848 0042 FFF7FEFF 		bl	_DoInit
 849              	.LVL94:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 850              		.loc 1 674 3 is_stmt 0 discriminator 1 view .LVU285
 851 0046 E3E7     		b	.L42
 852              	.LVL95:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 32


 853              	.L50:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 854              		.loc 1 674 3 discriminator 1 view .LVU286
 855              	.LBE5:
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 856              		.loc 1 684 5 is_stmt 1 view .LVU287
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 857              		.loc 1 684 24 is_stmt 0 view .LVU288
 858 0048 1346     		mov	r3, r2
 859 004a 144A     		ldr	r2, .L52
 860 004c 02EBC30A 		add	r10, r2, r3, lsl #3
 861 0050 DAF86860 		ldr	r6, [r10, #104]
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 862              		.loc 1 684 17 view .LVU289
 863 0054 F61B     		subs	r6, r6, r7
 864              	.LVL96:
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 865              		.loc 1 685 5 is_stmt 1 view .LVU290
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 866              		.loc 1 685 17 is_stmt 0 view .LVU291
 867 0056 4E45     		cmp	r6, r9
 868 0058 28BF     		it	cs
 869 005a 4E46     		movcs	r6, r9
 870              	.LVL97:
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 871              		.loc 1 686 5 is_stmt 1 view .LVU292
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 872              		.loc 1 686 18 is_stmt 0 view .LVU293
 873 005c DAF86410 		ldr	r1, [r10, #100]
 874              	.LVL98:
 695:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 875              		.loc 1 695 5 is_stmt 1 view .LVU294
 876 0060 3246     		mov	r2, r6
 877 0062 3944     		add	r1, r1, r7
 878              	.LVL99:
 695:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 879              		.loc 1 695 5 is_stmt 0 view .LVU295
 880 0064 4046     		mov	r0, r8
 881 0066 FFF7FEFF 		bl	memcpy
 882              	.LVL100:
 696:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 883              		.loc 1 696 5 is_stmt 1 view .LVU296
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 884              		.loc 1 697 5 view .LVU297
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 885              		.loc 1 697 18 is_stmt 0 view .LVU298
 886 006a B044     		add	r8, r8, r6
 887              	.LVL101:
 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 888              		.loc 1 698 5 is_stmt 1 view .LVU299
 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 889              		.loc 1 698 18 is_stmt 0 view .LVU300
 890 006c A9EB0609 		sub	r9, r9, r6
 891              	.LVL102:
 699:Core/Src/SEGGER_RTT.c **** #endif
 892              		.loc 1 699 5 is_stmt 1 view .LVU301
 699:Core/Src/SEGGER_RTT.c **** #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 33


 893              		.loc 1 699 18 is_stmt 0 view .LVU302
 894 0070 3744     		add	r7, r7, r6
 895              	.LVL103:
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 896              		.loc 1 704 5 is_stmt 1 view .LVU303
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 897              		.loc 1 704 23 is_stmt 0 view .LVU304
 898 0072 DAF86830 		ldr	r3, [r10, #104]
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 899              		.loc 1 704 8 view .LVU305
 900 0076 BB42     		cmp	r3, r7
 901 0078 D4D1     		bne	.L43
 705:Core/Src/SEGGER_RTT.c ****     }
 902              		.loc 1 705 13 view .LVU306
 903 007a 0027     		movs	r7, #0
 904              	.LVL104:
 705:Core/Src/SEGGER_RTT.c ****     }
 905              		.loc 1 705 13 view .LVU307
 906 007c D2E7     		b	.L43
 907              	.LVL105:
 908              	.L51:
 714:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 909              		.loc 1 714 5 is_stmt 1 view .LVU308
 714:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 910              		.loc 1 714 18 is_stmt 0 view .LVU309
 911 007e 04EB4402 		add	r2, r4, r4, lsl #1
 912 0082 064B     		ldr	r3, .L52
 913 0084 03EBC203 		add	r3, r3, r2, lsl #3
 914 0088 596E     		ldr	r1, [r3, #100]
 915              	.LVL106:
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 916              		.loc 1 723 5 is_stmt 1 view .LVU310
 917 008a 2A46     		mov	r2, r5
 918 008c 3944     		add	r1, r1, r7
 919              	.LVL107:
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 920              		.loc 1 723 5 is_stmt 0 view .LVU311
 921 008e 4046     		mov	r0, r8
 922 0090 FFF7FEFF 		bl	memcpy
 923              	.LVL108:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 924              		.loc 1 724 5 is_stmt 1 view .LVU312
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 925              		.loc 1 724 18 is_stmt 0 view .LVU313
 926 0094 2E44     		add	r6, r6, r5
 927              	.LVL109:
 725:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 928              		.loc 1 725 5 is_stmt 1 view .LVU314
 726:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 929              		.loc 1 726 5 view .LVU315
 727:Core/Src/SEGGER_RTT.c **** #endif
 930              		.loc 1 727 5 view .LVU316
 727:Core/Src/SEGGER_RTT.c **** #endif
 931              		.loc 1 727 18 is_stmt 0 view .LVU317
 932 0096 2F44     		add	r7, r7, r5
 933              	.LVL110:
 727:Core/Src/SEGGER_RTT.c **** #endif
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 34


 934              		.loc 1 727 18 view .LVU318
 935 0098 C9E7     		b	.L44
 936              	.L53:
 937 009a 00BF     		.align	2
 938              	.L52:
 939 009c 00000000 		.word	.LANCHOR1
 940              		.cfi_endproc
 941              	.LFE6:
 943              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 944              		.align	1
 945              		.global	SEGGER_RTT_ReadUpBuffer
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 950              	SEGGER_RTT_ReadUpBuffer:
 951              	.LVL111:
 952              	.LFB7:
 736:Core/Src/SEGGER_RTT.c **** 
 737:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 738:Core/Src/SEGGER_RTT.c **** *
 739:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:Core/Src/SEGGER_RTT.c **** *
 741:Core/Src/SEGGER_RTT.c **** *  Function description
 742:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 745:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:Core/Src/SEGGER_RTT.c **** *
 747:Core/Src/SEGGER_RTT.c **** *  Parameters
 748:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:Core/Src/SEGGER_RTT.c **** *
 752:Core/Src/SEGGER_RTT.c **** *  Return value
 753:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:Core/Src/SEGGER_RTT.c **** *
 755:Core/Src/SEGGER_RTT.c **** *  Additional information
 756:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 758:Core/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:Core/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 760:Core/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 761:Core/Src/SEGGER_RTT.c **** */
 762:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 953              		.loc 1 762 92 is_stmt 1 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 957              		.loc 1 762 92 is_stmt 0 view .LVU320
 958 0000 10B5     		push	{r4, lr}
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 4, -8
 961              		.cfi_offset 14, -4
 962 0002 0B46     		mov	r3, r1
 763:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 963              		.loc 1 763 3 is_stmt 1 view .LVU321
 964              	.LBB6:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 35


 764:Core/Src/SEGGER_RTT.c **** 
 765:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 965              		.loc 1 765 3 view .LVU322
 966              		.loc 1 765 3 view .LVU323
 967              		.syntax unified
 968              	@ 765 "Core/Src/SEGGER_RTT.c" 1
 969 0004 EFF31184 		mrs   r4, basepri  
 970 0008 4FF02001 		mov   r1, #32       
 971 000c 81F31188 		msr   basepri, r1  
 972              		
 973              	@ 0 "" 2
 974              	.LVL112:
 975              		.loc 1 765 20 view .LVU324
 766:Core/Src/SEGGER_RTT.c ****   //
 767:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:Core/Src/SEGGER_RTT.c ****   //
 769:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 976              		.loc 1 769 3 view .LVU325
 977              		.loc 1 769 18 is_stmt 0 view .LVU326
 978              		.thumb
 979              		.syntax unified
 980 0010 1946     		mov	r1, r3
 981 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 982              	.LVL113:
 770:Core/Src/SEGGER_RTT.c ****   //
 771:Core/Src/SEGGER_RTT.c ****   // Finish up.
 772:Core/Src/SEGGER_RTT.c ****   //
 773:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 983              		.loc 1 773 3 is_stmt 1 view .LVU327
 984              		.syntax unified
 985              	@ 773 "Core/Src/SEGGER_RTT.c" 1
 986 0016 84F31188 		msr   basepri, r4  
 987              		
 988              	@ 0 "" 2
 989              		.thumb
 990              		.syntax unified
 991              	.LBE6:
 992              		.loc 1 773 22 view .LVU328
 774:Core/Src/SEGGER_RTT.c ****   //
 775:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 993              		.loc 1 775 3 view .LVU329
 776:Core/Src/SEGGER_RTT.c **** }
 994              		.loc 1 776 1 is_stmt 0 view .LVU330
 995 001a 10BD     		pop	{r4, pc}
 996              		.loc 1 776 1 view .LVU331
 997              		.cfi_endproc
 998              	.LFE7:
 1000              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 1001              		.align	1
 1002              		.global	SEGGER_RTT_Read
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1007              	SEGGER_RTT_Read:
 1008              	.LVL114:
 1009              	.LFB8:
 777:Core/Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 36


 778:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 779:Core/Src/SEGGER_RTT.c **** *
 780:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:Core/Src/SEGGER_RTT.c **** *
 782:Core/Src/SEGGER_RTT.c **** *  Function description
 783:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:Core/Src/SEGGER_RTT.c **** *
 786:Core/Src/SEGGER_RTT.c **** *  Parameters
 787:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:Core/Src/SEGGER_RTT.c **** *
 791:Core/Src/SEGGER_RTT.c **** *  Return value
 792:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:Core/Src/SEGGER_RTT.c **** */
 794:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1010              		.loc 1 794 84 is_stmt 1 view -0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              		.loc 1 794 84 is_stmt 0 view .LVU333
 1015 0000 10B5     		push	{r4, lr}
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 4, -8
 1018              		.cfi_offset 14, -4
 1019 0002 0B46     		mov	r3, r1
 795:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1020              		.loc 1 795 3 is_stmt 1 view .LVU334
 1021              	.LBB7:
 796:Core/Src/SEGGER_RTT.c **** 
 797:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1022              		.loc 1 797 3 view .LVU335
 1023              		.loc 1 797 3 view .LVU336
 1024              		.syntax unified
 1025              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 1026 0004 EFF31184 		mrs   r4, basepri  
 1027 0008 4FF02001 		mov   r1, #32       
 1028 000c 81F31188 		msr   basepri, r1  
 1029              		
 1030              	@ 0 "" 2
 1031              	.LVL115:
 1032              		.loc 1 797 20 view .LVU337
 798:Core/Src/SEGGER_RTT.c ****   //
 799:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:Core/Src/SEGGER_RTT.c ****   //
 801:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1033              		.loc 1 801 3 view .LVU338
 1034              		.loc 1 801 18 is_stmt 0 view .LVU339
 1035              		.thumb
 1036              		.syntax unified
 1037 0010 1946     		mov	r1, r3
 1038 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1039              	.LVL116:
 802:Core/Src/SEGGER_RTT.c ****   //
 803:Core/Src/SEGGER_RTT.c ****   // Finish up.
 804:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 37


 805:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1040              		.loc 1 805 3 is_stmt 1 view .LVU340
 1041              		.syntax unified
 1042              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 1043 0016 84F31188 		msr   basepri, r4  
 1044              		
 1045              	@ 0 "" 2
 1046              		.thumb
 1047              		.syntax unified
 1048              	.LBE7:
 1049              		.loc 1 805 22 view .LVU341
 806:Core/Src/SEGGER_RTT.c ****   //
 807:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1050              		.loc 1 807 3 view .LVU342
 808:Core/Src/SEGGER_RTT.c **** }
 1051              		.loc 1 808 1 is_stmt 0 view .LVU343
 1052 001a 10BD     		pop	{r4, pc}
 1053              		.loc 1 808 1 view .LVU344
 1054              		.cfi_endproc
 1055              	.LFE8:
 1057              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1058              		.align	1
 1059              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1060              		.syntax unified
 1061              		.thumb
 1062              		.thumb_func
 1064              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1065              	.LVL117:
 1066              	.LFB9:
 809:Core/Src/SEGGER_RTT.c **** 
 810:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 811:Core/Src/SEGGER_RTT.c **** *
 812:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:Core/Src/SEGGER_RTT.c **** *
 814:Core/Src/SEGGER_RTT.c **** *  Function description
 815:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 816:Core/Src/SEGGER_RTT.c **** *    control block.
 817:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 818:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:Core/Src/SEGGER_RTT.c **** *
 820:Core/Src/SEGGER_RTT.c **** *  Parameters
 821:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 822:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:Core/Src/SEGGER_RTT.c **** *
 825:Core/Src/SEGGER_RTT.c **** *  Notes
 826:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 831:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:Core/Src/SEGGER_RTT.c **** */
 833:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1067              		.loc 1 833 104 is_stmt 1 view -0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 38


 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              		.loc 1 833 104 is_stmt 0 view .LVU346
 1072 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1073              		.cfi_def_cfa_offset 32
 1074              		.cfi_offset 3, -32
 1075              		.cfi_offset 4, -28
 1076              		.cfi_offset 5, -24
 1077              		.cfi_offset 6, -20
 1078              		.cfi_offset 7, -16
 1079              		.cfi_offset 8, -12
 1080              		.cfi_offset 9, -8
 1081              		.cfi_offset 14, -4
 1082 0004 0646     		mov	r6, r0
 1083 0006 8846     		mov	r8, r1
 1084 0008 1746     		mov	r7, r2
 834:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1085              		.loc 1 834 3 is_stmt 1 view .LVU347
 835:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1086              		.loc 1 835 3 view .LVU348
 836:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1087              		.loc 1 836 3 view .LVU349
 837:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1088              		.loc 1 837 3 view .LVU350
 838:Core/Src/SEGGER_RTT.c ****   //
 839:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:Core/Src/SEGGER_RTT.c ****   //
 841:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1089              		.loc 1 841 3 view .LVU351
 1090              	.LVL118:
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1091              		.loc 1 842 3 view .LVU352
 843:Core/Src/SEGGER_RTT.c ****   //
 844:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:Core/Src/SEGGER_RTT.c ****   //
 846:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1092              		.loc 1 846 3 view .LVU353
 1093              		.loc 1 846 12 is_stmt 0 view .LVU354
 1094 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1095              	.LVL119:
 1096              		.loc 1 846 12 view .LVU355
 1097 000e 404B     		ldr	r3, .L71
 1098 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1099 0014 596A     		ldr	r1, [r3, #36]
 1100              	.LVL120:
 1101              		.loc 1 846 28 view .LVU356
 1102 0016 9B6A     		ldr	r3, [r3, #40]
 1103              		.loc 1 846 6 view .LVU357
 1104 0018 9942     		cmp	r1, r3
 1105 001a 0ED0     		beq	.L69
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 848:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1106              		.loc 1 848 10 is_stmt 1 view .LVU358
 1107              		.loc 1 848 35 is_stmt 0 view .LVU359
 1108 001c 00EB4002 		add	r2, r0, r0, lsl #1
 1109 0020 3B4B     		ldr	r3, .L71
 1110 0022 03EBC203 		add	r3, r3, r2, lsl #3
 1111 0026 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 39


 1112              		.loc 1 848 13 view .LVU360
 1113 0028 9942     		cmp	r1, r3
 1114 002a 17D2     		bcs	.L61
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1115              		.loc 1 849 5 is_stmt 1 view .LVU361
 1116              		.loc 1 849 18 is_stmt 0 view .LVU362
 1117 002c 384B     		ldr	r3, .L71
 1118 002e 03EBC203 		add	r3, r3, r2, lsl #3
 1119 0032 9B6A     		ldr	r3, [r3, #40]
 1120              		.loc 1 849 26 view .LVU363
 1121 0034 5B1A     		subs	r3, r3, r1
 1122              		.loc 1 849 11 view .LVU364
 1123 0036 013B     		subs	r3, r3, #1
 1124              	.LVL121:
 1125              		.loc 1 849 11 view .LVU365
 1126 0038 04E0     		b	.L60
 1127              	.LVL122:
 1128              	.L69:
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1129              		.loc 1 847 5 is_stmt 1 view .LVU366
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1130              		.loc 1 847 18 is_stmt 0 view .LVU367
 1131 003a 354B     		ldr	r3, .L71
 1132 003c 03EBC203 		add	r3, r3, r2, lsl #3
 1133 0040 1B6A     		ldr	r3, [r3, #32]
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1134              		.loc 1 847 11 view .LVU368
 1135 0042 013B     		subs	r3, r3, #1
 1136              	.LVL123:
 1137              	.L60:
 850:Core/Src/SEGGER_RTT.c ****   } else {
 851:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 852:Core/Src/SEGGER_RTT.c ****   }
 853:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1138              		.loc 1 853 3 is_stmt 1 view .LVU369
 1139              		.loc 1 853 6 is_stmt 0 view .LVU370
 1140 0044 BB42     		cmp	r3, r7
 1141 0046 25D2     		bcs	.L62
 854:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1142              		.loc 1 854 5 is_stmt 1 view .LVU371
 1143              		.loc 1 854 18 is_stmt 0 view .LVU372
 1144 0048 06EB4600 		add	r0, r6, r6, lsl #1
 1145              	.LVL124:
 1146              		.loc 1 854 18 view .LVU373
 1147 004c 304A     		ldr	r2, .L71
 1148 004e 02EBC002 		add	r2, r2, r0, lsl #3
 1149 0052 906A     		ldr	r0, [r2, #40]
 1150              		.loc 1 854 31 view .LVU374
 1151 0054 FB1A     		subs	r3, r7, r3
 1152              	.LVL125:
 1153              		.loc 1 854 18 view .LVU375
 1154 0056 0344     		add	r3, r3, r0
 1155 0058 9362     		str	r3, [r2, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1156              		.loc 1 855 5 is_stmt 1 view .LVU376
 1157              		.loc 1 855 11 is_stmt 0 view .LVU377
 1158 005a 12E0     		b	.L63
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 40


 1159              	.LVL126:
 1160              	.L61:
 851:Core/Src/SEGGER_RTT.c ****   }
 1161              		.loc 1 851 5 is_stmt 1 view .LVU378
 851:Core/Src/SEGGER_RTT.c ****   }
 1162              		.loc 1 851 18 is_stmt 0 view .LVU379
 1163 005c 00EB4003 		add	r3, r0, r0, lsl #1
 1164 0060 2B4A     		ldr	r2, .L71
 1165 0062 02EBC302 		add	r2, r2, r3, lsl #3
 1166 0066 936A     		ldr	r3, [r2, #40]
 851:Core/Src/SEGGER_RTT.c ****   }
 1167              		.loc 1 851 26 view .LVU380
 1168 0068 5B1A     		subs	r3, r3, r1
 851:Core/Src/SEGGER_RTT.c ****   }
 1169              		.loc 1 851 53 view .LVU381
 1170 006a 126A     		ldr	r2, [r2, #32]
 851:Core/Src/SEGGER_RTT.c ****   }
 1171              		.loc 1 851 46 view .LVU382
 1172 006c 1344     		add	r3, r3, r2
 851:Core/Src/SEGGER_RTT.c ****   }
 1173              		.loc 1 851 11 view .LVU383
 1174 006e 013B     		subs	r3, r3, #1
 1175              	.LVL127:
 851:Core/Src/SEGGER_RTT.c ****   }
 1176              		.loc 1 851 11 view .LVU384
 1177 0070 E8E7     		b	.L60
 1178              	.LVL128:
 1179              	.L64:
 856:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1180              		.loc 1 856 7 is_stmt 1 view .LVU385
 1181              		.loc 1 856 20 is_stmt 0 view .LVU386
 1182 0072 06EB4602 		add	r2, r6, r6, lsl #1
 1183 0076 264B     		ldr	r3, .L71
 1184 0078 03EBC203 		add	r3, r3, r2, lsl #3
 1185 007c 9A6A     		ldr	r2, [r3, #40]
 1186 007e 121A     		subs	r2, r2, r0
 1187 0080 9A62     		str	r2, [r3, #40]
 1188              	.L63:
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1189              		.loc 1 855 25 is_stmt 1 view .LVU387
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1190              		.loc 1 855 17 is_stmt 0 view .LVU388
 1191 0082 06EB4602 		add	r2, r6, r6, lsl #1
 1192 0086 224B     		ldr	r3, .L71
 1193 0088 03EBC203 		add	r3, r3, r2, lsl #3
 1194 008c 9A6A     		ldr	r2, [r3, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1195              		.loc 1 855 33 view .LVU389
 1196 008e 186A     		ldr	r0, [r3, #32]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1197              		.loc 1 855 25 view .LVU390
 1198 0090 8242     		cmp	r2, r0
 1199 0092 EED2     		bcs	.L64
 1200              	.L62:
 857:Core/Src/SEGGER_RTT.c ****     }
 858:Core/Src/SEGGER_RTT.c ****   }
 859:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 41


 860:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:Core/Src/SEGGER_RTT.c ****   //
 862:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1201              		.loc 1 862 3 is_stmt 1 view .LVU391
 1202              		.loc 1 862 16 is_stmt 0 view .LVU392
 1203 0094 06EB4602 		add	r2, r6, r6, lsl #1
 1204 0098 1D4B     		ldr	r3, .L71
 1205 009a 03EBC203 		add	r3, r3, r2, lsl #3
 1206 009e 1C6A     		ldr	r4, [r3, #32]
 1207              		.loc 1 862 9 view .LVU393
 1208 00a0 641A     		subs	r4, r4, r1
 1209              	.LVL129:
 1210              	.L67:
 863:Core/Src/SEGGER_RTT.c ****   do {
 1211              		.loc 1 863 3 is_stmt 1 view .LVU394
 864:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1212              		.loc 1 864 5 view .LVU395
 1213              		.loc 1 864 8 is_stmt 0 view .LVU396
 1214 00a2 A742     		cmp	r7, r4
 1215 00a4 1BD3     		bcc	.L70
 865:Core/Src/SEGGER_RTT.c ****       //
 866:Core/Src/SEGGER_RTT.c ****       // Last round
 867:Core/Src/SEGGER_RTT.c ****       //
 868:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 869:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:Core/Src/SEGGER_RTT.c ****       };
 874:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:Core/Src/SEGGER_RTT.c **** #else
 877:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 878:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 880:Core/Src/SEGGER_RTT.c **** #endif
 881:Core/Src/SEGGER_RTT.c ****       break;
 882:Core/Src/SEGGER_RTT.c ****     } else {
 883:Core/Src/SEGGER_RTT.c ****       //
 884:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 885:Core/Src/SEGGER_RTT.c ****       //
 886:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1216              		.loc 1 886 7 is_stmt 1 view .LVU397
 1217              		.loc 1 886 20 is_stmt 0 view .LVU398
 1218 00a6 1A4D     		ldr	r5, .L71
 1219 00a8 731C     		adds	r3, r6, #1
 1220 00aa 03EB4303 		add	r3, r3, r3, lsl #1
 1221 00ae 05EBC303 		add	r3, r5, r3, lsl #3
 1222 00b2 5868     		ldr	r0, [r3, #4]
 1223              		.loc 1 886 37 view .LVU399
 1224 00b4 06EB4603 		add	r3, r6, r6, lsl #1
 1225 00b8 05EBC305 		add	r5, r5, r3, lsl #3
 1226 00bc 6B6A     		ldr	r3, [r5, #36]
 1227              	.LVL130:
 887:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 42


 890:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:Core/Src/SEGGER_RTT.c ****       };
 892:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:Core/Src/SEGGER_RTT.c **** #else
 895:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1228              		.loc 1 895 7 is_stmt 1 view .LVU400
 1229 00be 2246     		mov	r2, r4
 1230 00c0 4146     		mov	r1, r8
 1231 00c2 1844     		add	r0, r0, r3
 1232              	.LVL131:
 1233              		.loc 1 895 7 is_stmt 0 view .LVU401
 1234 00c4 FFF7FEFF 		bl	memcpy
 1235              	.LVL132:
 896:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1236              		.loc 1 896 7 is_stmt 1 view .LVU402
 1237              		.loc 1 896 13 is_stmt 0 view .LVU403
 1238 00c8 A044     		add	r8, r8, r4
 1239              	.LVL133:
 897:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1240              		.loc 1 897 7 is_stmt 1 view .LVU404
 1241              		.syntax unified
 1242              	@ 897 "Core/Src/SEGGER_RTT.c" 1
 1243 00ca BFF35F8F 		dmb
 1244              	
 1245              	@ 0 "" 2
 1246              		.loc 1 897 17 view .LVU405
 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1247              		.loc 1 898 7 view .LVU406
 1248              		.loc 1 898 20 is_stmt 0 view .LVU407
 1249              		.thumb
 1250              		.syntax unified
 1251 00ce 0023     		movs	r3, #0
 1252 00d0 6B62     		str	r3, [r5, #36]
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1253              		.loc 1 899 7 is_stmt 1 view .LVU408
 1254              		.loc 1 899 16 is_stmt 0 view .LVU409
 1255 00d2 3F1B     		subs	r7, r7, r4
 1256              	.LVL134:
 900:Core/Src/SEGGER_RTT.c **** #endif
 901:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1257              		.loc 1 901 7 is_stmt 1 view .LVU410
 1258              		.loc 1 901 21 is_stmt 0 view .LVU411
 1259 00d4 2C6A     		ldr	r4, [r5, #32]
 1260              	.LVL135:
 1261              		.loc 1 901 13 view .LVU412
 1262 00d6 013C     		subs	r4, r4, #1
 1263              	.LVL136:
 902:Core/Src/SEGGER_RTT.c ****     }
 903:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 1264              		.loc 1 903 12 is_stmt 1 view .LVU413
 1265 00d8 002F     		cmp	r7, #0
 1266 00da E2D1     		bne	.L67
 1267 00dc 15E0     		b	.L58
 1268              	.L70:
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1269              		.loc 1 868 7 view .LVU414
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 43


 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1270              		.loc 1 868 20 is_stmt 0 view .LVU415
 1271 00de 0C4C     		ldr	r4, .L71
 1272              	.LVL137:
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1273              		.loc 1 868 20 view .LVU416
 1274 00e0 731C     		adds	r3, r6, #1
 1275 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 1276 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 1277 00ea 5868     		ldr	r0, [r3, #4]
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1278              		.loc 1 868 37 view .LVU417
 1279 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 1280 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 1281 00f4 6B6A     		ldr	r3, [r5, #36]
 1282              	.LVL138:
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1283              		.loc 1 877 7 is_stmt 1 view .LVU418
 1284 00f6 3A46     		mov	r2, r7
 1285 00f8 4146     		mov	r1, r8
 1286 00fa 1844     		add	r0, r0, r3
 1287              	.LVL139:
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1288              		.loc 1 877 7 is_stmt 0 view .LVU419
 1289 00fc FFF7FEFF 		bl	memcpy
 1290              	.LVL140:
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1291              		.loc 1 878 7 is_stmt 1 view .LVU420
 1292              		.syntax unified
 1293              	@ 878 "Core/Src/SEGGER_RTT.c" 1
 1294 0100 BFF35F8F 		dmb
 1295              	
 1296              	@ 0 "" 2
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1297              		.loc 1 878 17 view .LVU421
 879:Core/Src/SEGGER_RTT.c **** #endif
 1298              		.loc 1 879 7 view .LVU422
 879:Core/Src/SEGGER_RTT.c **** #endif
 1299              		.loc 1 879 20 is_stmt 0 view .LVU423
 1300              		.thumb
 1301              		.syntax unified
 1302 0104 6B6A     		ldr	r3, [r5, #36]
 1303 0106 3B44     		add	r3, r3, r7
 1304 0108 6B62     		str	r3, [r5, #36]
 881:Core/Src/SEGGER_RTT.c ****     } else {
 1305              		.loc 1 881 7 is_stmt 1 view .LVU424
 1306              	.L58:
 904:Core/Src/SEGGER_RTT.c **** }
 1307              		.loc 1 904 1 is_stmt 0 view .LVU425
 1308 010a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1309              	.LVL141:
 1310              	.L72:
 1311              		.loc 1 904 1 view .LVU426
 1312 010e 00BF     		.align	2
 1313              	.L71:
 1314 0110 00000000 		.word	.LANCHOR1
 1315              		.cfi_endproc
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 44


 1316              	.LFE9:
 1318              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1319              		.align	1
 1320              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1325              	SEGGER_RTT_WriteDownBufferNoLock:
 1326              	.LVL142:
 1327              	.LFB10:
 905:Core/Src/SEGGER_RTT.c **** 
 906:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 907:Core/Src/SEGGER_RTT.c **** *
 908:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:Core/Src/SEGGER_RTT.c **** *
 910:Core/Src/SEGGER_RTT.c **** *  Function description
 911:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:Core/Src/SEGGER_RTT.c **** *
 916:Core/Src/SEGGER_RTT.c **** *  Parameters
 917:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:Core/Src/SEGGER_RTT.c **** *
 923:Core/Src/SEGGER_RTT.c **** *  Return value
 924:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 925:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:Core/Src/SEGGER_RTT.c **** *
 927:Core/Src/SEGGER_RTT.c **** *  Notes
 928:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 931:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:Core/Src/SEGGER_RTT.c **** */
 933:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 936:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 938:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 941:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:Core/Src/SEGGER_RTT.c ****   //
 943:Core/Src/SEGGER_RTT.c ****   // Cases:
 944:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:Core/Src/SEGGER_RTT.c ****   //
 950:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 45


 952:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 954:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 957:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 958:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 959:Core/Src/SEGGER_RTT.c **** CopyStraight:
 960:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 961:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 962:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 963:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 964:Core/Src/SEGGER_RTT.c ****       return 1;
 965:Core/Src/SEGGER_RTT.c ****     }
 966:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 967:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 968:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 969:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 970:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 971:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 972:Core/Src/SEGGER_RTT.c ****       //
 973:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 974:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 975:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 976:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 977:Core/Src/SEGGER_RTT.c ****       //
 978:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 979:Core/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 980:Core/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 981:Core/Src/SEGGER_RTT.c ****       }
 982:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 983:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 984:Core/Src/SEGGER_RTT.c ****       return 1;
 985:Core/Src/SEGGER_RTT.c ****     }
 986:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 987:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 988:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 989:Core/Src/SEGGER_RTT.c ****       goto CopyStraight;
 990:Core/Src/SEGGER_RTT.c ****     }
 991:Core/Src/SEGGER_RTT.c ****   }
 992:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 993:Core/Src/SEGGER_RTT.c **** }
 994:Core/Src/SEGGER_RTT.c **** #endif
 995:Core/Src/SEGGER_RTT.c **** 
 996:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 997:Core/Src/SEGGER_RTT.c **** *
 998:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 999:Core/Src/SEGGER_RTT.c **** *
1000:Core/Src/SEGGER_RTT.c **** *  Function description
1001:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1002:Core/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1003:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1004:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1005:Core/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1006:Core/Src/SEGGER_RTT.c **** *
1007:Core/Src/SEGGER_RTT.c **** *  Parameters
1008:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 46


1009:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1010:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1011:Core/Src/SEGGER_RTT.c **** *
1012:Core/Src/SEGGER_RTT.c **** *  Return value
1013:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1014:Core/Src/SEGGER_RTT.c **** *
1015:Core/Src/SEGGER_RTT.c **** *  Notes
1016:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1017:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1018:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1019:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1020:Core/Src/SEGGER_RTT.c **** *
1021:Core/Src/SEGGER_RTT.c **** *  Additional information
1022:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1023:Core/Src/SEGGER_RTT.c **** */
1024:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1328              		.loc 1 1024 105 is_stmt 1 view -0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332              		.loc 1 1024 105 is_stmt 0 view .LVU428
 1333 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1334              		.cfi_def_cfa_offset 24
 1335              		.cfi_offset 3, -24
 1336              		.cfi_offset 4, -20
 1337              		.cfi_offset 5, -16
 1338              		.cfi_offset 6, -12
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
 1341 0002 0E46     		mov	r6, r1
 1342 0004 1546     		mov	r5, r2
1025:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1343              		.loc 1 1025 3 is_stmt 1 view .LVU429
1026:Core/Src/SEGGER_RTT.c ****   unsigned                Avail;
 1344              		.loc 1 1026 3 view .LVU430
1027:Core/Src/SEGGER_RTT.c ****   const char*             pData;
 1345              		.loc 1 1027 3 view .LVU431
1028:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1346              		.loc 1 1028 3 view .LVU432
1029:Core/Src/SEGGER_RTT.c ****   //
1030:Core/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1031:Core/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1032:Core/Src/SEGGER_RTT.c ****   //
1033:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1347              		.loc 1 1033 3 view .LVU433
 1348              	.LVL143:
1034:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1349              		.loc 1 1034 3 view .LVU434
 1350              		.loc 1 1034 9 is_stmt 0 view .LVU435
 1351 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1352              	.LVL144:
 1353              		.loc 1 1034 9 view .LVU436
 1354 000a C000     		lsls	r0, r0, #3
 1355 000c 6030     		adds	r0, r0, #96
 1356 000e 144F     		ldr	r7, .L80
 1357 0010 0744     		add	r7, r7, r0
 1358              	.LVL145:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 47


1035:Core/Src/SEGGER_RTT.c ****   //
1036:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1037:Core/Src/SEGGER_RTT.c ****   //
1038:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1359              		.loc 1 1038 3 is_stmt 1 view .LVU437
 1360              		.loc 1 1038 16 is_stmt 0 view .LVU438
 1361 0012 7C69     		ldr	r4, [r7, #20]
 1362              		.loc 1 1038 3 view .LVU439
 1363 0014 012C     		cmp	r4, #1
 1364 0016 11D0     		beq	.L74
 1365 0018 022C     		cmp	r4, #2
 1366 001a 1CD0     		beq	.L75
 1367 001c 14B1     		cbz	r4, .L79
 1368 001e 0024     		movs	r4, #0
 1369              	.LVL146:
1039:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1040:Core/Src/SEGGER_RTT.c ****     //
1041:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1042:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1043:Core/Src/SEGGER_RTT.c ****     //
1044:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1045:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1046:Core/Src/SEGGER_RTT.c ****       Status = 0u;
1047:Core/Src/SEGGER_RTT.c ****     } else {
1048:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1049:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1050:Core/Src/SEGGER_RTT.c ****     }
1051:Core/Src/SEGGER_RTT.c ****     break;
1052:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1053:Core/Src/SEGGER_RTT.c ****     //
1054:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1055:Core/Src/SEGGER_RTT.c ****     //
1056:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1057:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1058:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1059:Core/Src/SEGGER_RTT.c ****     break;
1060:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1061:Core/Src/SEGGER_RTT.c ****     //
1062:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1063:Core/Src/SEGGER_RTT.c ****     //
1064:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1065:Core/Src/SEGGER_RTT.c ****     break;
1066:Core/Src/SEGGER_RTT.c ****   default:
1067:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1068:Core/Src/SEGGER_RTT.c ****     break;
1069:Core/Src/SEGGER_RTT.c ****   }
1070:Core/Src/SEGGER_RTT.c ****   //
1071:Core/Src/SEGGER_RTT.c ****   // Finish up.
1072:Core/Src/SEGGER_RTT.c ****   //
1073:Core/Src/SEGGER_RTT.c ****   return Status;
 1370              		.loc 1 1073 3 is_stmt 1 view .LVU440
 1371              	.L73:
1074:Core/Src/SEGGER_RTT.c **** }
 1372              		.loc 1 1074 1 is_stmt 0 view .LVU441
 1373 0020 2046     		mov	r0, r4
 1374 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1375              	.LVL147:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 48


 1376              	.L79:
1044:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1377              		.loc 1 1044 5 is_stmt 1 view .LVU442
1044:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1378              		.loc 1 1044 13 is_stmt 0 view .LVU443
 1379 0024 3846     		mov	r0, r7
 1380 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1381              	.LVL148:
1045:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1382              		.loc 1 1045 5 is_stmt 1 view .LVU444
1045:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1383              		.loc 1 1045 8 is_stmt 0 view .LVU445
 1384 002a 8542     		cmp	r5, r0
 1385 002c F8D8     		bhi	.L73
1048:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1386              		.loc 1 1048 7 is_stmt 1 view .LVU446
 1387              	.LVL149:
1049:Core/Src/SEGGER_RTT.c ****     }
 1388              		.loc 1 1049 7 view .LVU447
 1389 002e 2A46     		mov	r2, r5
 1390 0030 3146     		mov	r1, r6
 1391 0032 3846     		mov	r0, r7
 1392              	.LVL150:
1049:Core/Src/SEGGER_RTT.c ****     }
 1393              		.loc 1 1049 7 is_stmt 0 view .LVU448
 1394 0034 FFF7FEFF 		bl	_WriteNoCheck
 1395              	.LVL151:
1048:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1396              		.loc 1 1048 14 view .LVU449
 1397 0038 2C46     		mov	r4, r5
 1398 003a F1E7     		b	.L73
 1399              	.LVL152:
 1400              	.L74:
1056:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1401              		.loc 1 1056 5 is_stmt 1 view .LVU450
1056:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1402              		.loc 1 1056 13 is_stmt 0 view .LVU451
 1403 003c 3846     		mov	r0, r7
 1404 003e FFF7FEFF 		bl	_GetAvailWriteSpace
 1405              	.LVL153:
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1406              		.loc 1 1057 5 is_stmt 1 view .LVU452
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1407              		.loc 1 1057 12 is_stmt 0 view .LVU453
 1408 0042 2C46     		mov	r4, r5
 1409 0044 8542     		cmp	r5, r0
 1410 0046 28BF     		it	cs
 1411 0048 0446     		movcs	r4, r0
 1412              	.LVL154:
1058:Core/Src/SEGGER_RTT.c ****     break;
 1413              		.loc 1 1058 5 is_stmt 1 view .LVU454
 1414 004a 2246     		mov	r2, r4
 1415 004c 3146     		mov	r1, r6
 1416 004e 3846     		mov	r0, r7
 1417              	.LVL155:
1058:Core/Src/SEGGER_RTT.c ****     break;
 1418              		.loc 1 1058 5 is_stmt 0 view .LVU455
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 49


 1419 0050 FFF7FEFF 		bl	_WriteNoCheck
 1420              	.LVL156:
1059:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1421              		.loc 1 1059 5 is_stmt 1 view .LVU456
 1422 0054 E4E7     		b	.L73
 1423              	.LVL157:
 1424              	.L75:
1064:Core/Src/SEGGER_RTT.c ****     break;
 1425              		.loc 1 1064 5 view .LVU457
1064:Core/Src/SEGGER_RTT.c ****     break;
 1426              		.loc 1 1064 14 is_stmt 0 view .LVU458
 1427 0056 3846     		mov	r0, r7
 1428 0058 FFF7FEFF 		bl	_WriteBlocking
 1429              	.LVL158:
1064:Core/Src/SEGGER_RTT.c ****     break;
 1430              		.loc 1 1064 14 view .LVU459
 1431 005c 0446     		mov	r4, r0
 1432              	.LVL159:
1065:Core/Src/SEGGER_RTT.c ****   default:
 1433              		.loc 1 1065 5 is_stmt 1 view .LVU460
 1434 005e DFE7     		b	.L73
 1435              	.L81:
 1436              		.align	2
 1437              	.L80:
 1438 0060 00000000 		.word	.LANCHOR1
 1439              		.cfi_endproc
 1440              	.LFE10:
 1442              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1443              		.align	1
 1444              		.global	SEGGER_RTT_WriteNoLock
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1449              	SEGGER_RTT_WriteNoLock:
 1450              	.LVL160:
 1451              	.LFB11:
1075:Core/Src/SEGGER_RTT.c **** 
1076:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1077:Core/Src/SEGGER_RTT.c **** *
1078:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1079:Core/Src/SEGGER_RTT.c **** *
1080:Core/Src/SEGGER_RTT.c **** *  Function description
1081:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1082:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1083:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1084:Core/Src/SEGGER_RTT.c **** *
1085:Core/Src/SEGGER_RTT.c **** *  Parameters
1086:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1087:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1088:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1089:Core/Src/SEGGER_RTT.c **** *
1090:Core/Src/SEGGER_RTT.c **** *  Return value
1091:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1092:Core/Src/SEGGER_RTT.c **** *
1093:Core/Src/SEGGER_RTT.c **** *  Notes
1094:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1095:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 50


1096:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1097:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1098:Core/Src/SEGGER_RTT.c **** */
1099:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1452              		.loc 1 1099 95 view -0
 1453              		.cfi_startproc
 1454              		@ args = 0, pretend = 0, frame = 0
 1455              		@ frame_needed = 0, uses_anonymous_args = 0
 1456              		.loc 1 1099 95 is_stmt 0 view .LVU462
 1457 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1458              		.cfi_def_cfa_offset 24
 1459              		.cfi_offset 3, -24
 1460              		.cfi_offset 4, -20
 1461              		.cfi_offset 5, -16
 1462              		.cfi_offset 6, -12
 1463              		.cfi_offset 7, -8
 1464              		.cfi_offset 14, -4
 1465 0002 0F46     		mov	r7, r1
 1466 0004 1646     		mov	r6, r2
1100:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1467              		.loc 1 1100 3 is_stmt 1 view .LVU463
1101:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1468              		.loc 1 1101 3 view .LVU464
1102:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1469              		.loc 1 1102 3 view .LVU465
1103:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1470              		.loc 1 1103 3 view .LVU466
1104:Core/Src/SEGGER_RTT.c ****   //
1105:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1106:Core/Src/SEGGER_RTT.c ****   //
1107:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1471              		.loc 1 1107 3 view .LVU467
 1472              	.LVL161:
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1473              		.loc 1 1108 3 view .LVU468
 1474              		.loc 1 1108 9 is_stmt 0 view .LVU469
 1475 0006 184B     		ldr	r3, .L89
 1476 0008 451C     		adds	r5, r0, #1
 1477 000a 05EB4505 		add	r5, r5, r5, lsl #1
 1478 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1479              	.LVL162:
1109:Core/Src/SEGGER_RTT.c ****   //
1110:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1111:Core/Src/SEGGER_RTT.c ****   //
1112:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1480              		.loc 1 1112 3 is_stmt 1 view .LVU470
 1481              		.loc 1 1112 16 is_stmt 0 view .LVU471
 1482 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1483              	.LVL163:
 1484              		.loc 1 1112 16 view .LVU472
 1485 0016 03EBC003 		add	r3, r3, r0, lsl #3
 1486 001a DC6A     		ldr	r4, [r3, #44]
 1487              		.loc 1 1112 3 view .LVU473
 1488 001c 012C     		cmp	r4, #1
 1489 001e 11D0     		beq	.L83
 1490 0020 022C     		cmp	r4, #2
 1491 0022 1CD0     		beq	.L84
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 51


 1492 0024 14B1     		cbz	r4, .L88
 1493 0026 0024     		movs	r4, #0
 1494              	.LVL164:
1113:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1114:Core/Src/SEGGER_RTT.c ****     //
1115:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1116:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1117:Core/Src/SEGGER_RTT.c ****     //
1118:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1119:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1120:Core/Src/SEGGER_RTT.c ****       Status = 0u;
1121:Core/Src/SEGGER_RTT.c ****     } else {
1122:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1123:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1124:Core/Src/SEGGER_RTT.c ****     }
1125:Core/Src/SEGGER_RTT.c ****     break;
1126:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1127:Core/Src/SEGGER_RTT.c ****     //
1128:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1129:Core/Src/SEGGER_RTT.c ****     //
1130:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1131:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1132:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1133:Core/Src/SEGGER_RTT.c ****     break;
1134:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1135:Core/Src/SEGGER_RTT.c ****     //
1136:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1137:Core/Src/SEGGER_RTT.c ****     //
1138:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1139:Core/Src/SEGGER_RTT.c ****     break;
1140:Core/Src/SEGGER_RTT.c ****   default:
1141:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1142:Core/Src/SEGGER_RTT.c ****     break;
1143:Core/Src/SEGGER_RTT.c ****   }
1144:Core/Src/SEGGER_RTT.c ****   //
1145:Core/Src/SEGGER_RTT.c ****   // Finish up.
1146:Core/Src/SEGGER_RTT.c ****   //
1147:Core/Src/SEGGER_RTT.c ****   return Status;
 1495              		.loc 1 1147 3 is_stmt 1 view .LVU474
 1496              	.L82:
1148:Core/Src/SEGGER_RTT.c **** }
 1497              		.loc 1 1148 1 is_stmt 0 view .LVU475
 1498 0028 2046     		mov	r0, r4
 1499 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1500              	.LVL165:
 1501              	.L88:
1118:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1502              		.loc 1 1118 5 is_stmt 1 view .LVU476
1118:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1503              		.loc 1 1118 13 is_stmt 0 view .LVU477
 1504 002c 2846     		mov	r0, r5
 1505 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1506              	.LVL166:
1119:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1507              		.loc 1 1119 5 is_stmt 1 view .LVU478
1119:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1508              		.loc 1 1119 8 is_stmt 0 view .LVU479
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 52


 1509 0032 8642     		cmp	r6, r0
 1510 0034 F8D8     		bhi	.L82
1122:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1511              		.loc 1 1122 7 is_stmt 1 view .LVU480
 1512              	.LVL167:
1123:Core/Src/SEGGER_RTT.c ****     }
 1513              		.loc 1 1123 7 view .LVU481
 1514 0036 3246     		mov	r2, r6
 1515 0038 3946     		mov	r1, r7
 1516 003a 2846     		mov	r0, r5
 1517              	.LVL168:
1123:Core/Src/SEGGER_RTT.c ****     }
 1518              		.loc 1 1123 7 is_stmt 0 view .LVU482
 1519 003c FFF7FEFF 		bl	_WriteNoCheck
 1520              	.LVL169:
1122:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1521              		.loc 1 1122 14 view .LVU483
 1522 0040 3446     		mov	r4, r6
 1523 0042 F1E7     		b	.L82
 1524              	.LVL170:
 1525              	.L83:
1130:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1526              		.loc 1 1130 5 is_stmt 1 view .LVU484
1130:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1527              		.loc 1 1130 13 is_stmt 0 view .LVU485
 1528 0044 2846     		mov	r0, r5
 1529 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1530              	.LVL171:
1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1531              		.loc 1 1131 5 is_stmt 1 view .LVU486
1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1532              		.loc 1 1131 12 is_stmt 0 view .LVU487
 1533 004a 3446     		mov	r4, r6
 1534 004c 8642     		cmp	r6, r0
 1535 004e 28BF     		it	cs
 1536 0050 0446     		movcs	r4, r0
 1537              	.LVL172:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1538              		.loc 1 1132 5 is_stmt 1 view .LVU488
 1539 0052 2246     		mov	r2, r4
 1540 0054 3946     		mov	r1, r7
 1541 0056 2846     		mov	r0, r5
 1542              	.LVL173:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1543              		.loc 1 1132 5 is_stmt 0 view .LVU489
 1544 0058 FFF7FEFF 		bl	_WriteNoCheck
 1545              	.LVL174:
1133:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1546              		.loc 1 1133 5 is_stmt 1 view .LVU490
 1547 005c E4E7     		b	.L82
 1548              	.LVL175:
 1549              	.L84:
1138:Core/Src/SEGGER_RTT.c ****     break;
 1550              		.loc 1 1138 5 view .LVU491
1138:Core/Src/SEGGER_RTT.c ****     break;
 1551              		.loc 1 1138 14 is_stmt 0 view .LVU492
 1552 005e 2846     		mov	r0, r5
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 53


 1553 0060 FFF7FEFF 		bl	_WriteBlocking
 1554              	.LVL176:
1138:Core/Src/SEGGER_RTT.c ****     break;
 1555              		.loc 1 1138 14 view .LVU493
 1556 0064 0446     		mov	r4, r0
 1557              	.LVL177:
1139:Core/Src/SEGGER_RTT.c ****   default:
 1558              		.loc 1 1139 5 is_stmt 1 view .LVU494
 1559 0066 DFE7     		b	.L82
 1560              	.L90:
 1561              		.align	2
 1562              	.L89:
 1563 0068 00000000 		.word	.LANCHOR1
 1564              		.cfi_endproc
 1565              	.LFE11:
 1567              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1568              		.align	1
 1569              		.global	SEGGER_RTT_WriteDownBuffer
 1570              		.syntax unified
 1571              		.thumb
 1572              		.thumb_func
 1574              	SEGGER_RTT_WriteDownBuffer:
 1575              	.LVL178:
 1576              	.LFB12:
1149:Core/Src/SEGGER_RTT.c **** 
1150:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1151:Core/Src/SEGGER_RTT.c **** *
1152:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1153:Core/Src/SEGGER_RTT.c **** *
1154:Core/Src/SEGGER_RTT.c **** *  Function description
1155:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1156:Core/Src/SEGGER_RTT.c **** *
1157:Core/Src/SEGGER_RTT.c **** *  Parameters
1158:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1159:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1160:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1161:Core/Src/SEGGER_RTT.c **** *
1162:Core/Src/SEGGER_RTT.c **** *  Return value
1163:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1164:Core/Src/SEGGER_RTT.c **** *
1165:Core/Src/SEGGER_RTT.c **** *  Notes
1166:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1167:Core/Src/SEGGER_RTT.c **** *
1168:Core/Src/SEGGER_RTT.c **** *  Additional information
1169:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1170:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1171:Core/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1172:Core/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1173:Core/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1174:Core/Src/SEGGER_RTT.c **** */
1175:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1577              		.loc 1 1175 99 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		.loc 1 1175 99 is_stmt 0 view .LVU496
 1582 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 54


 1583              		.cfi_def_cfa_offset 24
 1584              		.cfi_offset 3, -24
 1585              		.cfi_offset 4, -20
 1586              		.cfi_offset 5, -16
 1587              		.cfi_offset 6, -12
 1588              		.cfi_offset 7, -8
 1589              		.cfi_offset 14, -4
 1590 0002 0446     		mov	r4, r0
 1591 0004 0D46     		mov	r5, r1
 1592 0006 1646     		mov	r6, r2
1176:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1593              		.loc 1 1176 3 is_stmt 1 view .LVU497
 1594              	.LBB8:
1177:Core/Src/SEGGER_RTT.c **** 
1178:Core/Src/SEGGER_RTT.c ****   INIT();
 1595              		.loc 1 1178 3 view .LVU498
 1596              		.loc 1 1178 3 view .LVU499
 1597              	.LVL179:
 1598              		.loc 1 1178 3 view .LVU500
 1599              		.loc 1 1178 3 view .LVU501
 1600 0008 094B     		ldr	r3, .L95
 1601 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1602 000c 6BB1     		cbz	r3, .L94
 1603              	.LVL180:
 1604              	.L92:
 1605              		.loc 1 1178 3 discriminator 3 view .LVU502
 1606              	.LBE8:
 1607              		.loc 1 1178 9 discriminator 3 view .LVU503
 1608              	.LBB9:
1179:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1609              		.loc 1 1179 3 discriminator 3 view .LVU504
 1610              		.loc 1 1179 3 discriminator 3 view .LVU505
 1611              		.syntax unified
 1612              	@ 1179 "Core/Src/SEGGER_RTT.c" 1
 1613 000e EFF31187 		mrs   r7, basepri  
 1614 0012 4FF02001 		mov   r1, #32       
 1615 0016 81F31188 		msr   basepri, r1  
 1616              		
 1617              	@ 0 "" 2
 1618              	.LVL181:
 1619              		.loc 1 1179 20 discriminator 3 view .LVU506
1180:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1620              		.loc 1 1180 3 discriminator 3 view .LVU507
 1621              		.loc 1 1180 12 is_stmt 0 discriminator 3 view .LVU508
 1622              		.thumb
 1623              		.syntax unified
 1624 001a 3246     		mov	r2, r6
 1625 001c 2946     		mov	r1, r5
 1626 001e 2046     		mov	r0, r4
 1627 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1628              	.LVL182:
1181:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1629              		.loc 1 1181 3 is_stmt 1 discriminator 3 view .LVU509
 1630              		.syntax unified
 1631              	@ 1181 "Core/Src/SEGGER_RTT.c" 1
 1632 0024 87F31188 		msr   basepri, r7  
 1633              		
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 55


 1634              	@ 0 "" 2
 1635              		.thumb
 1636              		.syntax unified
 1637              	.LBE9:
 1638              		.loc 1 1181 22 discriminator 3 view .LVU510
1182:Core/Src/SEGGER_RTT.c ****   return Status;
 1639              		.loc 1 1182 3 discriminator 3 view .LVU511
1183:Core/Src/SEGGER_RTT.c **** }
 1640              		.loc 1 1183 1 is_stmt 0 discriminator 3 view .LVU512
 1641 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1642              	.LVL183:
 1643              	.L94:
 1644              	.LBB10:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1645              		.loc 1 1178 3 is_stmt 1 discriminator 1 view .LVU513
 1646 002a FFF7FEFF 		bl	_DoInit
 1647              	.LVL184:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1648              		.loc 1 1178 3 is_stmt 0 discriminator 1 view .LVU514
 1649 002e EEE7     		b	.L92
 1650              	.L96:
 1651              		.align	2
 1652              	.L95:
 1653 0030 00000000 		.word	.LANCHOR1
 1654              	.LBE10:
 1655              		.cfi_endproc
 1656              	.LFE12:
 1658              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1659              		.align	1
 1660              		.global	SEGGER_RTT_Write
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1665              	SEGGER_RTT_Write:
 1666              	.LVL185:
 1667              	.LFB13:
1184:Core/Src/SEGGER_RTT.c **** 
1185:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1186:Core/Src/SEGGER_RTT.c **** *
1187:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1188:Core/Src/SEGGER_RTT.c **** *
1189:Core/Src/SEGGER_RTT.c **** *  Function description
1190:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1191:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1192:Core/Src/SEGGER_RTT.c **** *
1193:Core/Src/SEGGER_RTT.c **** *  Parameters
1194:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1195:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1196:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1197:Core/Src/SEGGER_RTT.c **** *
1198:Core/Src/SEGGER_RTT.c **** *  Return value
1199:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1200:Core/Src/SEGGER_RTT.c **** *
1201:Core/Src/SEGGER_RTT.c **** *  Notes
1202:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1203:Core/Src/SEGGER_RTT.c **** */
1204:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 56


 1668              		.loc 1 1204 89 is_stmt 1 view -0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              		.loc 1 1204 89 is_stmt 0 view .LVU516
 1673 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1674              		.cfi_def_cfa_offset 24
 1675              		.cfi_offset 3, -24
 1676              		.cfi_offset 4, -20
 1677              		.cfi_offset 5, -16
 1678              		.cfi_offset 6, -12
 1679              		.cfi_offset 7, -8
 1680              		.cfi_offset 14, -4
 1681 0002 0446     		mov	r4, r0
 1682 0004 0D46     		mov	r5, r1
 1683 0006 1646     		mov	r6, r2
1205:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1684              		.loc 1 1205 3 is_stmt 1 view .LVU517
 1685              	.LBB11:
1206:Core/Src/SEGGER_RTT.c **** 
1207:Core/Src/SEGGER_RTT.c ****   INIT();
 1686              		.loc 1 1207 3 view .LVU518
 1687              		.loc 1 1207 3 view .LVU519
 1688              	.LVL186:
 1689              		.loc 1 1207 3 view .LVU520
 1690              		.loc 1 1207 3 view .LVU521
 1691 0008 094B     		ldr	r3, .L101
 1692 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1693 000c 6BB1     		cbz	r3, .L100
 1694              	.LVL187:
 1695              	.L98:
 1696              		.loc 1 1207 3 discriminator 3 view .LVU522
 1697              	.LBE11:
 1698              		.loc 1 1207 9 discriminator 3 view .LVU523
 1699              	.LBB12:
1208:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1700              		.loc 1 1208 3 discriminator 3 view .LVU524
 1701              		.loc 1 1208 3 discriminator 3 view .LVU525
 1702              		.syntax unified
 1703              	@ 1208 "Core/Src/SEGGER_RTT.c" 1
 1704 000e EFF31187 		mrs   r7, basepri  
 1705 0012 4FF02001 		mov   r1, #32       
 1706 0016 81F31188 		msr   basepri, r1  
 1707              		
 1708              	@ 0 "" 2
 1709              	.LVL188:
 1710              		.loc 1 1208 20 discriminator 3 view .LVU526
1209:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1711              		.loc 1 1209 3 discriminator 3 view .LVU527
 1712              		.loc 1 1209 12 is_stmt 0 discriminator 3 view .LVU528
 1713              		.thumb
 1714              		.syntax unified
 1715 001a 3246     		mov	r2, r6
 1716 001c 2946     		mov	r1, r5
 1717 001e 2046     		mov	r0, r4
 1718 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1719              	.LVL189:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 57


1210:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1720              		.loc 1 1210 3 is_stmt 1 discriminator 3 view .LVU529
 1721              		.syntax unified
 1722              	@ 1210 "Core/Src/SEGGER_RTT.c" 1
 1723 0024 87F31188 		msr   basepri, r7  
 1724              		
 1725              	@ 0 "" 2
 1726              		.thumb
 1727              		.syntax unified
 1728              	.LBE12:
 1729              		.loc 1 1210 22 discriminator 3 view .LVU530
1211:Core/Src/SEGGER_RTT.c ****   return Status;
 1730              		.loc 1 1211 3 discriminator 3 view .LVU531
1212:Core/Src/SEGGER_RTT.c **** }
 1731              		.loc 1 1212 1 is_stmt 0 discriminator 3 view .LVU532
 1732 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1733              	.LVL190:
 1734              	.L100:
 1735              	.LBB13:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1736              		.loc 1 1207 3 is_stmt 1 discriminator 1 view .LVU533
 1737 002a FFF7FEFF 		bl	_DoInit
 1738              	.LVL191:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1739              		.loc 1 1207 3 is_stmt 0 discriminator 1 view .LVU534
 1740 002e EEE7     		b	.L98
 1741              	.L102:
 1742              		.align	2
 1743              	.L101:
 1744 0030 00000000 		.word	.LANCHOR1
 1745              	.LBE13:
 1746              		.cfi_endproc
 1747              	.LFE13:
 1749              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1750              		.align	1
 1751              		.global	SEGGER_RTT_WriteString
 1752              		.syntax unified
 1753              		.thumb
 1754              		.thumb_func
 1756              	SEGGER_RTT_WriteString:
 1757              	.LVL192:
 1758              	.LFB14:
1213:Core/Src/SEGGER_RTT.c **** 
1214:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1215:Core/Src/SEGGER_RTT.c **** *
1216:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1217:Core/Src/SEGGER_RTT.c **** *
1218:Core/Src/SEGGER_RTT.c **** *  Function description
1219:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1220:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
1221:Core/Src/SEGGER_RTT.c **** *
1222:Core/Src/SEGGER_RTT.c **** *  Parameters
1223:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1224:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1225:Core/Src/SEGGER_RTT.c **** *
1226:Core/Src/SEGGER_RTT.c **** *  Return value
1227:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 58


1228:Core/Src/SEGGER_RTT.c **** *
1229:Core/Src/SEGGER_RTT.c **** *  Notes
1230:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1231:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1232:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1233:Core/Src/SEGGER_RTT.c **** */
1234:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1759              		.loc 1 1234 70 is_stmt 1 view -0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763              		.loc 1 1234 70 is_stmt 0 view .LVU536
 1764 0000 38B5     		push	{r3, r4, r5, lr}
 1765              		.cfi_def_cfa_offset 16
 1766              		.cfi_offset 3, -16
 1767              		.cfi_offset 4, -12
 1768              		.cfi_offset 5, -8
 1769              		.cfi_offset 14, -4
 1770 0002 0546     		mov	r5, r0
 1771 0004 0C46     		mov	r4, r1
1235:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1772              		.loc 1 1235 3 is_stmt 1 view .LVU537
1236:Core/Src/SEGGER_RTT.c **** 
1237:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1773              		.loc 1 1237 3 view .LVU538
 1774              		.loc 1 1237 9 is_stmt 0 view .LVU539
 1775 0006 0846     		mov	r0, r1
 1776              	.LVL193:
 1777              		.loc 1 1237 9 view .LVU540
 1778 0008 FFF7FEFF 		bl	strlen
 1779              	.LVL194:
 1780              		.loc 1 1237 9 view .LVU541
 1781 000c 0246     		mov	r2, r0
 1782              	.LVL195:
1238:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1783              		.loc 1 1238 3 is_stmt 1 view .LVU542
 1784              		.loc 1 1238 10 is_stmt 0 view .LVU543
 1785 000e 2146     		mov	r1, r4
 1786 0010 2846     		mov	r0, r5
 1787              	.LVL196:
 1788              		.loc 1 1238 10 view .LVU544
 1789 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1790              	.LVL197:
1239:Core/Src/SEGGER_RTT.c **** }
 1791              		.loc 1 1239 1 view .LVU545
 1792 0016 38BD     		pop	{r3, r4, r5, pc}
 1793              		.loc 1 1239 1 view .LVU546
 1794              		.cfi_endproc
 1795              	.LFE14:
 1797              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1798              		.align	1
 1799              		.global	SEGGER_RTT_PutCharSkipNoLock
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1804              	SEGGER_RTT_PutCharSkipNoLock:
 1805              	.LVL198:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 59


 1806              	.LFB15:
1240:Core/Src/SEGGER_RTT.c **** 
1241:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1242:Core/Src/SEGGER_RTT.c **** *
1243:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1244:Core/Src/SEGGER_RTT.c **** *
1245:Core/Src/SEGGER_RTT.c **** *  Function description
1246:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1247:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1248:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1249:Core/Src/SEGGER_RTT.c **** *
1250:Core/Src/SEGGER_RTT.c **** *  Parameters
1251:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1252:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1253:Core/Src/SEGGER_RTT.c **** *
1254:Core/Src/SEGGER_RTT.c **** *  Return value
1255:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1256:Core/Src/SEGGER_RTT.c **** *
1257:Core/Src/SEGGER_RTT.c **** *  Notes
1258:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1259:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1260:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1261:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1262:Core/Src/SEGGER_RTT.c **** */
1263:Core/Src/SEGGER_RTT.c **** 
1264:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1807              		.loc 1 1264 69 is_stmt 1 view -0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812              		.loc 1 1264 69 is_stmt 0 view .LVU548
 1813 0000 30B4     		push	{r4, r5}
 1814              		.cfi_def_cfa_offset 8
 1815              		.cfi_offset 4, -8
 1816              		.cfi_offset 5, -4
1265:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1817              		.loc 1 1265 3 is_stmt 1 view .LVU549
1266:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1818              		.loc 1 1266 3 view .LVU550
1267:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1819              		.loc 1 1267 3 view .LVU551
1268:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1820              		.loc 1 1268 3 view .LVU552
1269:Core/Src/SEGGER_RTT.c ****   //
1270:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1271:Core/Src/SEGGER_RTT.c ****   //
1272:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1821              		.loc 1 1272 3 view .LVU553
 1822              	.LVL199:
1273:Core/Src/SEGGER_RTT.c ****   //
1274:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1275:Core/Src/SEGGER_RTT.c ****   //
1276:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1823              		.loc 1 1276 3 view .LVU554
 1824              		.loc 1 1276 16 is_stmt 0 view .LVU555
 1825 0002 00EB4002 		add	r2, r0, r0, lsl #1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 60


 1826 0006 124B     		ldr	r3, .L112
 1827 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1828 000c 5D6A     		ldr	r5, [r3, #36]
 1829              		.loc 1 1276 9 view .LVU556
 1830 000e 6A1C     		adds	r2, r5, #1
 1831              	.LVL200:
1277:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1832              		.loc 1 1277 3 is_stmt 1 view .LVU557
 1833              		.loc 1 1277 21 is_stmt 0 view .LVU558
 1834 0010 1B6A     		ldr	r3, [r3, #32]
 1835              		.loc 1 1277 6 view .LVU559
 1836 0012 9342     		cmp	r3, r2
 1837 0014 17D0     		beq	.L111
 1838              	.LVL201:
 1839              	.L106:
1278:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1279:Core/Src/SEGGER_RTT.c ****   }
1280:Core/Src/SEGGER_RTT.c ****   //
1281:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1282:Core/Src/SEGGER_RTT.c ****   //
1283:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1840              		.loc 1 1283 3 is_stmt 1 view .LVU560
 1841              		.loc 1 1283 21 is_stmt 0 view .LVU561
 1842 0016 00EB400C 		add	ip, r0, r0, lsl #1
 1843 001a 0D4B     		ldr	r3, .L112
 1844 001c 03EBCC03 		add	r3, r3, ip, lsl #3
 1845 0020 9B6A     		ldr	r3, [r3, #40]
 1846              		.loc 1 1283 6 view .LVU562
 1847 0022 9342     		cmp	r3, r2
 1848 0024 11D0     		beq	.L109
1284:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1849              		.loc 1 1284 5 is_stmt 1 view .LVU563
 1850              		.loc 1 1284 18 is_stmt 0 view .LVU564
 1851 0026 0A4C     		ldr	r4, .L112
 1852 0028 431C     		adds	r3, r0, #1
 1853 002a 03EB4303 		add	r3, r3, r3, lsl #1
 1854 002e 04EBC303 		add	r3, r4, r3, lsl #3
 1855 0032 5B68     		ldr	r3, [r3, #4]
 1856              	.LVL202:
1285:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 1857              		.loc 1 1285 5 is_stmt 1 view .LVU565
 1858              		.loc 1 1285 11 is_stmt 0 view .LVU566
 1859 0034 5955     		strb	r1, [r3, r5]
1286:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1860              		.loc 1 1286 5 is_stmt 1 view .LVU567
 1861              		.syntax unified
 1862              	@ 1286 "Core/Src/SEGGER_RTT.c" 1
 1863 0036 BFF35F8F 		dmb
 1864              	
 1865              	@ 0 "" 2
 1866              		.loc 1 1286 15 view .LVU568
1287:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1867              		.loc 1 1287 5 view .LVU569
 1868              		.loc 1 1287 18 is_stmt 0 view .LVU570
 1869              		.thumb
 1870              		.syntax unified
 1871 003a 04EBCC04 		add	r4, r4, ip, lsl #3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 61


 1872 003e 6262     		str	r2, [r4, #36]
1288:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1873              		.loc 1 1288 5 is_stmt 1 view .LVU571
 1874              	.LVL203:
 1875              		.loc 1 1288 12 is_stmt 0 view .LVU572
 1876 0040 0120     		movs	r0, #1
 1877              	.LVL204:
 1878              	.L105:
1289:Core/Src/SEGGER_RTT.c ****   } else {
1290:Core/Src/SEGGER_RTT.c ****     Status = 0;
1291:Core/Src/SEGGER_RTT.c ****   }
1292:Core/Src/SEGGER_RTT.c ****   //
1293:Core/Src/SEGGER_RTT.c ****   return Status;
1294:Core/Src/SEGGER_RTT.c **** }
 1879              		.loc 1 1294 1 view .LVU573
 1880 0042 30BC     		pop	{r4, r5}
 1881              		.cfi_remember_state
 1882              		.cfi_restore 5
 1883              		.cfi_restore 4
 1884              		.cfi_def_cfa_offset 0
 1885 0044 7047     		bx	lr
 1886              	.LVL205:
 1887              	.L111:
 1888              		.cfi_restore_state
1278:Core/Src/SEGGER_RTT.c ****   }
 1889              		.loc 1 1278 11 view .LVU574
 1890 0046 0022     		movs	r2, #0
 1891              	.LVL206:
1278:Core/Src/SEGGER_RTT.c ****   }
 1892              		.loc 1 1278 11 view .LVU575
 1893 0048 E5E7     		b	.L106
 1894              	.LVL207:
 1895              	.L109:
1290:Core/Src/SEGGER_RTT.c ****   }
 1896              		.loc 1 1290 12 view .LVU576
 1897 004a 0020     		movs	r0, #0
 1898              	.LVL208:
1293:Core/Src/SEGGER_RTT.c **** }
 1899              		.loc 1 1293 3 is_stmt 1 view .LVU577
1293:Core/Src/SEGGER_RTT.c **** }
 1900              		.loc 1 1293 10 is_stmt 0 view .LVU578
 1901 004c F9E7     		b	.L105
 1902              	.L113:
 1903 004e 00BF     		.align	2
 1904              	.L112:
 1905 0050 00000000 		.word	.LANCHOR1
 1906              		.cfi_endproc
 1907              	.LFE15:
 1909              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1910              		.align	1
 1911              		.global	SEGGER_RTT_PutCharSkip
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1916              	SEGGER_RTT_PutCharSkip:
 1917              	.LVL209:
 1918              	.LFB16:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 62


1295:Core/Src/SEGGER_RTT.c **** 
1296:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1297:Core/Src/SEGGER_RTT.c **** *
1298:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1299:Core/Src/SEGGER_RTT.c **** *
1300:Core/Src/SEGGER_RTT.c **** *  Function description
1301:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1302:Core/Src/SEGGER_RTT.c **** *
1303:Core/Src/SEGGER_RTT.c **** *  Parameters
1304:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1305:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1306:Core/Src/SEGGER_RTT.c **** *
1307:Core/Src/SEGGER_RTT.c **** *  Return value
1308:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1309:Core/Src/SEGGER_RTT.c **** *
1310:Core/Src/SEGGER_RTT.c **** *  Notes
1311:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1312:Core/Src/SEGGER_RTT.c **** */
1313:Core/Src/SEGGER_RTT.c **** 
1314:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1919              		.loc 1 1314 63 is_stmt 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		.loc 1 1314 63 is_stmt 0 view .LVU580
 1924 0000 70B5     		push	{r4, r5, r6, lr}
 1925              		.cfi_def_cfa_offset 16
 1926              		.cfi_offset 4, -16
 1927              		.cfi_offset 5, -12
 1928              		.cfi_offset 6, -8
 1929              		.cfi_offset 14, -4
 1930 0002 0446     		mov	r4, r0
 1931 0004 0D46     		mov	r5, r1
1315:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1932              		.loc 1 1315 3 is_stmt 1 view .LVU581
1316:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1933              		.loc 1 1316 3 view .LVU582
1317:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1934              		.loc 1 1317 3 view .LVU583
1318:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1935              		.loc 1 1318 3 view .LVU584
 1936              	.LBB14:
1319:Core/Src/SEGGER_RTT.c ****   //
1320:Core/Src/SEGGER_RTT.c ****   // Prepare
1321:Core/Src/SEGGER_RTT.c ****   //
1322:Core/Src/SEGGER_RTT.c ****   INIT();
 1937              		.loc 1 1322 3 view .LVU585
 1938              		.loc 1 1322 3 view .LVU586
 1939              	.LVL210:
 1940              		.loc 1 1322 3 view .LVU587
 1941              		.loc 1 1322 3 view .LVU588
 1942 0006 1A4B     		ldr	r3, .L123
 1943 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1944 000a 53B3     		cbz	r3, .L121
 1945              	.LVL211:
 1946              	.L115:
 1947              		.loc 1 1322 3 discriminator 3 view .LVU589
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 63


 1948              	.LBE14:
 1949              		.loc 1 1322 9 discriminator 3 view .LVU590
 1950              	.LBB15:
1323:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1951              		.loc 1 1323 3 discriminator 3 view .LVU591
 1952              		.loc 1 1323 3 discriminator 3 view .LVU592
 1953              		.syntax unified
 1954              	@ 1323 "Core/Src/SEGGER_RTT.c" 1
 1955 000c EFF31182 		mrs   r2, basepri  
 1956 0010 4FF02001 		mov   r1, #32       
 1957 0014 81F31188 		msr   basepri, r1  
 1958              		
 1959              	@ 0 "" 2
 1960              	.LVL212:
 1961              		.loc 1 1323 20 discriminator 3 view .LVU593
1324:Core/Src/SEGGER_RTT.c ****   //
1325:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1326:Core/Src/SEGGER_RTT.c ****   //
1327:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1962              		.loc 1 1327 3 discriminator 3 view .LVU594
1328:Core/Src/SEGGER_RTT.c ****   //
1329:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1330:Core/Src/SEGGER_RTT.c ****   //
1331:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1963              		.loc 1 1331 3 discriminator 3 view .LVU595
 1964              		.loc 1 1331 16 is_stmt 0 discriminator 3 view .LVU596
 1965              		.thumb
 1966              		.syntax unified
 1967 0018 04EB4401 		add	r1, r4, r4, lsl #1
 1968 001c 144B     		ldr	r3, .L123
 1969 001e 03EBC103 		add	r3, r3, r1, lsl #3
 1970 0022 5E6A     		ldr	r6, [r3, #36]
 1971              		.loc 1 1331 9 discriminator 3 view .LVU597
 1972 0024 711C     		adds	r1, r6, #1
 1973              	.LVL213:
1332:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1974              		.loc 1 1332 3 is_stmt 1 discriminator 3 view .LVU598
 1975              		.loc 1 1332 21 is_stmt 0 discriminator 3 view .LVU599
 1976 0026 1B6A     		ldr	r3, [r3, #32]
 1977              		.loc 1 1332 6 discriminator 3 view .LVU600
 1978 0028 8B42     		cmp	r3, r1
 1979 002a 1DD0     		beq	.L122
 1980              	.LVL214:
 1981              	.L116:
1333:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1334:Core/Src/SEGGER_RTT.c ****   }
1335:Core/Src/SEGGER_RTT.c ****   //
1336:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1337:Core/Src/SEGGER_RTT.c ****   //
1338:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1982              		.loc 1 1338 3 is_stmt 1 view .LVU601
 1983              		.loc 1 1338 21 is_stmt 0 view .LVU602
 1984 002c 04EB4400 		add	r0, r4, r4, lsl #1
 1985 0030 0F4B     		ldr	r3, .L123
 1986 0032 03EBC003 		add	r3, r3, r0, lsl #3
 1987 0036 9B6A     		ldr	r3, [r3, #40]
 1988              		.loc 1 1338 6 view .LVU603
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 64


 1989 0038 8B42     		cmp	r3, r1
 1990 003a 17D0     		beq	.L119
1339:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1991              		.loc 1 1339 5 is_stmt 1 view .LVU604
 1992              		.loc 1 1339 19 is_stmt 0 view .LVU605
 1993 003c 0C48     		ldr	r0, .L123
 1994 003e 631C     		adds	r3, r4, #1
 1995 0040 03EB4303 		add	r3, r3, r3, lsl #1
 1996 0044 00EBC303 		add	r3, r0, r3, lsl #3
 1997 0048 5B68     		ldr	r3, [r3, #4]
 1998              	.LVL215:
1340:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 1999              		.loc 1 1340 5 is_stmt 1 view .LVU606
 2000              		.loc 1 1340 11 is_stmt 0 view .LVU607
 2001 004a 9D55     		strb	r5, [r3, r6]
1341:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2002              		.loc 1 1341 5 is_stmt 1 view .LVU608
 2003              		.syntax unified
 2004              	@ 1341 "Core/Src/SEGGER_RTT.c" 1
 2005 004c BFF35F8F 		dmb
 2006              	
 2007              	@ 0 "" 2
 2008              		.loc 1 1341 15 view .LVU609
1342:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2009              		.loc 1 1342 5 view .LVU610
 2010              		.loc 1 1342 18 is_stmt 0 view .LVU611
 2011              		.thumb
 2012              		.syntax unified
 2013 0050 04EB4404 		add	r4, r4, r4, lsl #1
 2014              	.LVL216:
 2015              		.loc 1 1342 18 view .LVU612
 2016 0054 00EBC400 		add	r0, r0, r4, lsl #3
 2017 0058 4162     		str	r1, [r0, #36]
1343:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2018              		.loc 1 1343 5 is_stmt 1 view .LVU613
 2019              	.LVL217:
 2020              		.loc 1 1343 12 is_stmt 0 view .LVU614
 2021 005a 0120     		movs	r0, #1
 2022              	.LVL218:
 2023              	.L117:
1344:Core/Src/SEGGER_RTT.c ****   } else {
1345:Core/Src/SEGGER_RTT.c ****     Status = 0;
1346:Core/Src/SEGGER_RTT.c ****   }
1347:Core/Src/SEGGER_RTT.c ****   //
1348:Core/Src/SEGGER_RTT.c ****   // Finish up.
1349:Core/Src/SEGGER_RTT.c ****   //
1350:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2024              		.loc 1 1350 3 is_stmt 1 view .LVU615
 2025              		.syntax unified
 2026              	@ 1350 "Core/Src/SEGGER_RTT.c" 1
 2027 005c 82F31188 		msr   basepri, r2  
 2028              		
 2029              	@ 0 "" 2
 2030              		.thumb
 2031              		.syntax unified
 2032              	.LBE15:
 2033              		.loc 1 1350 22 view .LVU616
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 65


1351:Core/Src/SEGGER_RTT.c ****   //
1352:Core/Src/SEGGER_RTT.c ****   return Status;
 2034              		.loc 1 1352 3 view .LVU617
1353:Core/Src/SEGGER_RTT.c **** }
 2035              		.loc 1 1353 1 is_stmt 0 view .LVU618
 2036 0060 70BD     		pop	{r4, r5, r6, pc}
 2037              	.LVL219:
 2038              	.L121:
 2039              	.LBB16:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2040              		.loc 1 1322 3 is_stmt 1 discriminator 1 view .LVU619
 2041 0062 FFF7FEFF 		bl	_DoInit
 2042              	.LVL220:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2043              		.loc 1 1322 3 is_stmt 0 discriminator 1 view .LVU620
 2044 0066 D1E7     		b	.L115
 2045              	.LVL221:
 2046              	.L122:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2047              		.loc 1 1322 3 discriminator 1 view .LVU621
 2048              	.LBE16:
 2049              	.LBB17:
1333:Core/Src/SEGGER_RTT.c ****   }
 2050              		.loc 1 1333 11 view .LVU622
 2051 0068 0021     		movs	r1, #0
 2052              	.LVL222:
1333:Core/Src/SEGGER_RTT.c ****   }
 2053              		.loc 1 1333 11 view .LVU623
 2054 006a DFE7     		b	.L116
 2055              	.LVL223:
 2056              	.L119:
1345:Core/Src/SEGGER_RTT.c ****   }
 2057              		.loc 1 1345 12 view .LVU624
 2058 006c 0020     		movs	r0, #0
 2059 006e F5E7     		b	.L117
 2060              	.L124:
 2061              		.align	2
 2062              	.L123:
 2063 0070 00000000 		.word	.LANCHOR1
 2064              	.LBE17:
 2065              		.cfi_endproc
 2066              	.LFE16:
 2068              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2069              		.align	1
 2070              		.global	SEGGER_RTT_PutChar
 2071              		.syntax unified
 2072              		.thumb
 2073              		.thumb_func
 2075              	SEGGER_RTT_PutChar:
 2076              	.LVL224:
 2077              	.LFB17:
1354:Core/Src/SEGGER_RTT.c **** 
1355:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1356:Core/Src/SEGGER_RTT.c **** *
1357:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1358:Core/Src/SEGGER_RTT.c **** *
1359:Core/Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 66


1360:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1361:Core/Src/SEGGER_RTT.c **** *
1362:Core/Src/SEGGER_RTT.c **** *  Parameters
1363:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1364:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1365:Core/Src/SEGGER_RTT.c **** *
1366:Core/Src/SEGGER_RTT.c **** *  Return value
1367:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1368:Core/Src/SEGGER_RTT.c **** *
1369:Core/Src/SEGGER_RTT.c **** *  Notes
1370:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1371:Core/Src/SEGGER_RTT.c **** */
1372:Core/Src/SEGGER_RTT.c **** 
1373:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2078              		.loc 1 1373 59 is_stmt 1 view -0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 2082              		.loc 1 1373 59 is_stmt 0 view .LVU626
 2083 0000 70B5     		push	{r4, r5, r6, lr}
 2084              		.cfi_def_cfa_offset 16
 2085              		.cfi_offset 4, -16
 2086              		.cfi_offset 5, -12
 2087              		.cfi_offset 6, -8
 2088              		.cfi_offset 14, -4
 2089 0002 0446     		mov	r4, r0
 2090 0004 0D46     		mov	r5, r1
1374:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2091              		.loc 1 1374 3 is_stmt 1 view .LVU627
1375:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2092              		.loc 1 1375 3 view .LVU628
1376:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2093              		.loc 1 1376 3 view .LVU629
1377:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2094              		.loc 1 1377 3 view .LVU630
 2095              	.LBB18:
1378:Core/Src/SEGGER_RTT.c ****   //
1379:Core/Src/SEGGER_RTT.c ****   // Prepare
1380:Core/Src/SEGGER_RTT.c ****   //
1381:Core/Src/SEGGER_RTT.c ****   INIT();
 2096              		.loc 1 1381 3 view .LVU631
 2097              		.loc 1 1381 3 view .LVU632
 2098              	.LVL225:
 2099              		.loc 1 1381 3 view .LVU633
 2100              		.loc 1 1381 3 view .LVU634
 2101 0006 244B     		ldr	r3, .L136
 2102 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2103 000a 002B     		cmp	r3, #0
 2104 000c 33D0     		beq	.L134
 2105              	.LVL226:
 2106              	.L126:
 2107              		.loc 1 1381 3 discriminator 3 view .LVU635
 2108              	.LBE18:
 2109              		.loc 1 1381 9 discriminator 3 view .LVU636
 2110              	.LBB19:
1382:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2111              		.loc 1 1382 3 discriminator 3 view .LVU637
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 67


 2112              		.loc 1 1382 3 discriminator 3 view .LVU638
 2113              		.syntax unified
 2114              	@ 1382 "Core/Src/SEGGER_RTT.c" 1
 2115 000e EFF31183 		mrs   r3, basepri  
 2116 0012 4FF02001 		mov   r1, #32       
 2117 0016 81F31188 		msr   basepri, r1  
 2118              		
 2119              	@ 0 "" 2
 2120              		.thumb
 2121              		.syntax unified
 2122 001a 1946     		mov	r1, r3
 2123              	.LVL227:
 2124              		.loc 1 1382 20 discriminator 3 view .LVU639
1383:Core/Src/SEGGER_RTT.c ****   //
1384:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1385:Core/Src/SEGGER_RTT.c ****   //
1386:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2125              		.loc 1 1386 3 discriminator 3 view .LVU640
1387:Core/Src/SEGGER_RTT.c ****   //
1388:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1389:Core/Src/SEGGER_RTT.c ****   //
1390:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2126              		.loc 1 1390 3 discriminator 3 view .LVU641
 2127              		.loc 1 1390 16 is_stmt 0 discriminator 3 view .LVU642
 2128 001c 04EB4402 		add	r2, r4, r4, lsl #1
 2129 0020 1D4B     		ldr	r3, .L136
 2130 0022 03EBC203 		add	r3, r3, r2, lsl #3
 2131 0026 5E6A     		ldr	r6, [r3, #36]
 2132              		.loc 1 1390 9 discriminator 3 view .LVU643
 2133 0028 701C     		adds	r0, r6, #1
 2134              	.LVL228:
1391:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2135              		.loc 1 1391 3 is_stmt 1 discriminator 3 view .LVU644
 2136              		.loc 1 1391 21 is_stmt 0 discriminator 3 view .LVU645
 2137 002a 1B6A     		ldr	r3, [r3, #32]
 2138              		.loc 1 1391 6 discriminator 3 view .LVU646
 2139 002c 8342     		cmp	r3, r0
 2140 002e 25D0     		beq	.L135
 2141              	.LVL229:
 2142              	.L127:
1392:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1393:Core/Src/SEGGER_RTT.c ****   }
1394:Core/Src/SEGGER_RTT.c ****   //
1395:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1396:Core/Src/SEGGER_RTT.c ****   //
1397:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2143              		.loc 1 1397 3 is_stmt 1 view .LVU647
 2144              		.loc 1 1397 12 is_stmt 0 view .LVU648
 2145 0030 04EB4402 		add	r2, r4, r4, lsl #1
 2146 0034 184B     		ldr	r3, .L136
 2147 0036 03EBC203 		add	r3, r3, r2, lsl #3
 2148 003a DB6A     		ldr	r3, [r3, #44]
 2149              		.loc 1 1397 6 view .LVU649
 2150 003c 022B     		cmp	r3, #2
 2151 003e 1FD0     		beq	.L129
 2152              	.L128:
1398:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 68


1399:Core/Src/SEGGER_RTT.c ****       ;
1400:Core/Src/SEGGER_RTT.c ****     }
1401:Core/Src/SEGGER_RTT.c ****   }
1402:Core/Src/SEGGER_RTT.c ****   //
1403:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1404:Core/Src/SEGGER_RTT.c ****   //
1405:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2153              		.loc 1 1405 3 is_stmt 1 view .LVU650
 2154              		.loc 1 1405 21 is_stmt 0 view .LVU651
 2155 0040 04EB4402 		add	r2, r4, r4, lsl #1
 2156 0044 144B     		ldr	r3, .L136
 2157 0046 03EBC203 		add	r3, r3, r2, lsl #3
 2158 004a 9B6A     		ldr	r3, [r3, #40]
 2159              		.loc 1 1405 6 view .LVU652
 2160 004c 8342     		cmp	r3, r0
 2161 004e 20D0     		beq	.L132
1406:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2162              		.loc 1 1406 5 is_stmt 1 view .LVU653
 2163              		.loc 1 1406 19 is_stmt 0 view .LVU654
 2164 0050 114A     		ldr	r2, .L136
 2165 0052 631C     		adds	r3, r4, #1
 2166 0054 03EB4303 		add	r3, r3, r3, lsl #1
 2167 0058 02EBC303 		add	r3, r2, r3, lsl #3
 2168 005c 5B68     		ldr	r3, [r3, #4]
 2169              	.LVL230:
1407:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2170              		.loc 1 1407 5 is_stmt 1 view .LVU655
 2171              		.loc 1 1407 11 is_stmt 0 view .LVU656
 2172 005e 9D55     		strb	r5, [r3, r6]
1408:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2173              		.loc 1 1408 5 is_stmt 1 view .LVU657
 2174              		.syntax unified
 2175              	@ 1408 "Core/Src/SEGGER_RTT.c" 1
 2176 0060 BFF35F8F 		dmb
 2177              	
 2178              	@ 0 "" 2
 2179              		.loc 1 1408 15 view .LVU658
1409:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2180              		.loc 1 1409 5 view .LVU659
 2181              		.loc 1 1409 18 is_stmt 0 view .LVU660
 2182              		.thumb
 2183              		.syntax unified
 2184 0064 04EB4404 		add	r4, r4, r4, lsl #1
 2185              	.LVL231:
 2186              		.loc 1 1409 18 view .LVU661
 2187 0068 02EBC402 		add	r2, r2, r4, lsl #3
 2188 006c 5062     		str	r0, [r2, #36]
1410:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2189              		.loc 1 1410 5 is_stmt 1 view .LVU662
 2190              	.LVL232:
 2191              		.loc 1 1410 12 is_stmt 0 view .LVU663
 2192 006e 0120     		movs	r0, #1
 2193              	.LVL233:
 2194              	.L130:
1411:Core/Src/SEGGER_RTT.c ****   } else {
1412:Core/Src/SEGGER_RTT.c ****     Status = 0;
1413:Core/Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 69


1414:Core/Src/SEGGER_RTT.c ****   //
1415:Core/Src/SEGGER_RTT.c ****   // Finish up.
1416:Core/Src/SEGGER_RTT.c ****   //
1417:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2195              		.loc 1 1417 3 is_stmt 1 view .LVU664
 2196              		.syntax unified
 2197              	@ 1417 "Core/Src/SEGGER_RTT.c" 1
 2198 0070 81F31188 		msr   basepri, r1  
 2199              		
 2200              	@ 0 "" 2
 2201              		.thumb
 2202              		.syntax unified
 2203              	.LBE19:
 2204              		.loc 1 1417 22 view .LVU665
1418:Core/Src/SEGGER_RTT.c ****   return Status;
 2205              		.loc 1 1418 3 view .LVU666
1419:Core/Src/SEGGER_RTT.c **** }
 2206              		.loc 1 1419 1 is_stmt 0 view .LVU667
 2207 0074 70BD     		pop	{r4, r5, r6, pc}
 2208              	.LVL234:
 2209              	.L134:
 2210              	.LBB20:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2211              		.loc 1 1381 3 is_stmt 1 discriminator 1 view .LVU668
 2212 0076 FFF7FEFF 		bl	_DoInit
 2213              	.LVL235:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2214              		.loc 1 1381 3 is_stmt 0 discriminator 1 view .LVU669
 2215 007a C8E7     		b	.L126
 2216              	.LVL236:
 2217              	.L135:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2218              		.loc 1 1381 3 discriminator 1 view .LVU670
 2219              	.LBE20:
 2220              	.LBB21:
1392:Core/Src/SEGGER_RTT.c ****   }
 2221              		.loc 1 1392 11 view .LVU671
 2222 007c 0020     		movs	r0, #0
 2223              	.LVL237:
1392:Core/Src/SEGGER_RTT.c ****   }
 2224              		.loc 1 1392 11 view .LVU672
 2225 007e D7E7     		b	.L127
 2226              	.LVL238:
 2227              	.L129:
1399:Core/Src/SEGGER_RTT.c ****     }
 2228              		.loc 1 1399 7 is_stmt 1 discriminator 1 view .LVU673
1398:Core/Src/SEGGER_RTT.c ****       ;
 2229              		.loc 1 1398 18 discriminator 1 view .LVU674
1398:Core/Src/SEGGER_RTT.c ****       ;
 2230              		.loc 1 1398 26 is_stmt 0 discriminator 1 view .LVU675
 2231 0080 04EB4402 		add	r2, r4, r4, lsl #1
 2232 0084 044B     		ldr	r3, .L136
 2233 0086 03EBC203 		add	r3, r3, r2, lsl #3
 2234 008a 9B6A     		ldr	r3, [r3, #40]
1398:Core/Src/SEGGER_RTT.c ****       ;
 2235              		.loc 1 1398 18 discriminator 1 view .LVU676
 2236 008c 8342     		cmp	r3, r0
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 70


 2237 008e F7D0     		beq	.L129
 2238 0090 D6E7     		b	.L128
 2239              	.L132:
1412:Core/Src/SEGGER_RTT.c ****   }
 2240              		.loc 1 1412 12 view .LVU677
 2241 0092 0020     		movs	r0, #0
 2242              	.LVL239:
1412:Core/Src/SEGGER_RTT.c ****   }
 2243              		.loc 1 1412 12 view .LVU678
 2244 0094 ECE7     		b	.L130
 2245              	.L137:
 2246 0096 00BF     		.align	2
 2247              	.L136:
 2248 0098 00000000 		.word	.LANCHOR1
 2249              	.LBE21:
 2250              		.cfi_endproc
 2251              	.LFE17:
 2253              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2254              		.align	1
 2255              		.global	SEGGER_RTT_GetKey
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2260              	SEGGER_RTT_GetKey:
 2261              	.LFB18:
1420:Core/Src/SEGGER_RTT.c **** 
1421:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1422:Core/Src/SEGGER_RTT.c **** *
1423:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1424:Core/Src/SEGGER_RTT.c **** *
1425:Core/Src/SEGGER_RTT.c **** *  Function description
1426:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1427:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1428:Core/Src/SEGGER_RTT.c **** *
1429:Core/Src/SEGGER_RTT.c **** *  Return value
1430:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1431:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1432:Core/Src/SEGGER_RTT.c **** *
1433:Core/Src/SEGGER_RTT.c **** *  Notes
1434:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1435:Core/Src/SEGGER_RTT.c **** */
1436:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2262              		.loc 1 1436 29 is_stmt 1 view -0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 8
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266 0000 00B5     		push	{lr}
 2267              		.cfi_def_cfa_offset 4
 2268              		.cfi_offset 14, -4
 2269 0002 83B0     		sub	sp, sp, #12
 2270              		.cfi_def_cfa_offset 16
1437:Core/Src/SEGGER_RTT.c ****   char c;
 2271              		.loc 1 1437 3 view .LVU680
1438:Core/Src/SEGGER_RTT.c ****   int r;
 2272              		.loc 1 1438 3 view .LVU681
1439:Core/Src/SEGGER_RTT.c **** 
1440:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 71


 2273              		.loc 1 1440 3 view .LVU682
 2274              		.loc 1 1440 12 is_stmt 0 view .LVU683
 2275 0004 0122     		movs	r2, #1
 2276 0006 0DF10701 		add	r1, sp, #7
 2277 000a 0020     		movs	r0, #0
 2278 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2279              	.LVL240:
1441:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2280              		.loc 1 1441 3 is_stmt 1 view .LVU684
 2281              		.loc 1 1441 6 is_stmt 0 view .LVU685
 2282 0010 0128     		cmp	r0, #1
 2283 0012 04D1     		bne	.L140
1442:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2284              		.loc 1 1442 5 is_stmt 1 view .LVU686
 2285              		.loc 1 1442 9 is_stmt 0 view .LVU687
 2286 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2287              	.LVL241:
 2288              	.L138:
1443:Core/Src/SEGGER_RTT.c ****   } else {
1444:Core/Src/SEGGER_RTT.c ****     r = -1;
1445:Core/Src/SEGGER_RTT.c ****   }
1446:Core/Src/SEGGER_RTT.c ****   return r;
1447:Core/Src/SEGGER_RTT.c **** }
 2289              		.loc 1 1447 1 view .LVU688
 2290 0018 03B0     		add	sp, sp, #12
 2291              		.cfi_remember_state
 2292              		.cfi_def_cfa_offset 4
 2293              		@ sp needed
 2294 001a 5DF804FB 		ldr	pc, [sp], #4
 2295              	.LVL242:
 2296              	.L140:
 2297              		.cfi_restore_state
1444:Core/Src/SEGGER_RTT.c ****   }
 2298              		.loc 1 1444 7 view .LVU689
 2299 001e 4FF0FF30 		mov	r0, #-1
 2300              	.LVL243:
1446:Core/Src/SEGGER_RTT.c **** }
 2301              		.loc 1 1446 3 is_stmt 1 view .LVU690
1446:Core/Src/SEGGER_RTT.c **** }
 2302              		.loc 1 1446 10 is_stmt 0 view .LVU691
 2303 0022 F9E7     		b	.L138
 2304              		.cfi_endproc
 2305              	.LFE18:
 2307              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2308              		.align	1
 2309              		.global	SEGGER_RTT_WaitKey
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2314              	SEGGER_RTT_WaitKey:
 2315              	.LFB19:
1448:Core/Src/SEGGER_RTT.c **** 
1449:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1450:Core/Src/SEGGER_RTT.c **** *
1451:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1452:Core/Src/SEGGER_RTT.c **** *
1453:Core/Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 72


1454:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1455:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1456:Core/Src/SEGGER_RTT.c **** *
1457:Core/Src/SEGGER_RTT.c **** *  Return value
1458:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1459:Core/Src/SEGGER_RTT.c **** *
1460:Core/Src/SEGGER_RTT.c **** *  Notes
1461:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1462:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1463:Core/Src/SEGGER_RTT.c **** */
1464:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2316              		.loc 1 1464 30 is_stmt 1 view -0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320 0000 08B5     		push	{r3, lr}
 2321              		.cfi_def_cfa_offset 8
 2322              		.cfi_offset 3, -8
 2323              		.cfi_offset 14, -4
 2324              	.L143:
1465:Core/Src/SEGGER_RTT.c ****   int r;
 2325              		.loc 1 1465 3 discriminator 1 view .LVU693
1466:Core/Src/SEGGER_RTT.c **** 
1467:Core/Src/SEGGER_RTT.c ****   do {
 2326              		.loc 1 1467 3 discriminator 1 view .LVU694
1468:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2327              		.loc 1 1468 5 discriminator 1 view .LVU695
 2328              		.loc 1 1468 9 is_stmt 0 discriminator 1 view .LVU696
 2329 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2330              	.LVL244:
1469:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 2331              		.loc 1 1469 14 is_stmt 1 discriminator 1 view .LVU697
 2332 0006 0028     		cmp	r0, #0
 2333              		.loc 1 1469 14 is_stmt 0 discriminator 1 view .LVU698
 2334 0008 FBDB     		blt	.L143
1470:Core/Src/SEGGER_RTT.c ****   return r;
 2335              		.loc 1 1470 3 is_stmt 1 view .LVU699
1471:Core/Src/SEGGER_RTT.c **** }
 2336              		.loc 1 1471 1 is_stmt 0 view .LVU700
 2337 000a 08BD     		pop	{r3, pc}
 2338              		.cfi_endproc
 2339              	.LFE19:
 2341              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2342              		.align	1
 2343              		.global	SEGGER_RTT_HasKey
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2348              	SEGGER_RTT_HasKey:
 2349              	.LFB20:
1472:Core/Src/SEGGER_RTT.c **** 
1473:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1474:Core/Src/SEGGER_RTT.c **** *
1475:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1476:Core/Src/SEGGER_RTT.c **** *
1477:Core/Src/SEGGER_RTT.c **** *  Function description
1478:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 73


1479:Core/Src/SEGGER_RTT.c **** *
1480:Core/Src/SEGGER_RTT.c **** *  Return value
1481:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1482:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1483:Core/Src/SEGGER_RTT.c **** *
1484:Core/Src/SEGGER_RTT.c **** *  Notes
1485:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1486:Core/Src/SEGGER_RTT.c **** */
1487:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2350              		.loc 1 1487 29 is_stmt 1 view -0
 2351              		.cfi_startproc
 2352              		@ args = 0, pretend = 0, frame = 0
 2353              		@ frame_needed = 0, uses_anonymous_args = 0
 2354 0000 08B5     		push	{r3, lr}
 2355              		.cfi_def_cfa_offset 8
 2356              		.cfi_offset 3, -8
 2357              		.cfi_offset 14, -4
1488:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2358              		.loc 1 1488 3 view .LVU702
1489:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 2359              		.loc 1 1489 3 view .LVU703
1490:Core/Src/SEGGER_RTT.c ****   int r;
 2360              		.loc 1 1490 3 view .LVU704
 2361              	.LBB22:
1491:Core/Src/SEGGER_RTT.c **** 
1492:Core/Src/SEGGER_RTT.c ****   INIT();
 2362              		.loc 1 1492 3 view .LVU705
 2363              		.loc 1 1492 3 view .LVU706
 2364              	.LVL245:
 2365              		.loc 1 1492 3 view .LVU707
 2366              		.loc 1 1492 3 view .LVU708
 2367 0002 074B     		ldr	r3, .L151
 2368 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2369 0006 33B1     		cbz	r3, .L150
 2370              	.L146:
 2371              		.loc 1 1492 3 discriminator 3 view .LVU709
 2372              	.LBE22:
 2373              		.loc 1 1492 9 discriminator 3 view .LVU710
1493:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2374              		.loc 1 1493 3 discriminator 3 view .LVU711
 2375              	.LVL246:
1494:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2376              		.loc 1 1494 3 discriminator 3 view .LVU712
 2377              		.loc 1 1494 9 is_stmt 0 discriminator 3 view .LVU713
 2378 0008 054B     		ldr	r3, .L151
 2379 000a 1A6F     		ldr	r2, [r3, #112]
 2380              	.LVL247:
1495:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2381              		.loc 1 1495 3 is_stmt 1 discriminator 3 view .LVU714
 2382              		.loc 1 1495 21 is_stmt 0 discriminator 3 view .LVU715
 2383 000c DB6E     		ldr	r3, [r3, #108]
 2384              		.loc 1 1495 6 discriminator 3 view .LVU716
 2385 000e 9342     		cmp	r3, r2
 2386 0010 04D0     		beq	.L148
1496:Core/Src/SEGGER_RTT.c ****     r = 1;
 2387              		.loc 1 1496 7 view .LVU717
 2388 0012 0120     		movs	r0, #1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 74


 2389              	.L145:
1497:Core/Src/SEGGER_RTT.c ****   } else {
1498:Core/Src/SEGGER_RTT.c ****     r = 0;
1499:Core/Src/SEGGER_RTT.c ****   }
1500:Core/Src/SEGGER_RTT.c ****   return r;
1501:Core/Src/SEGGER_RTT.c **** }
 2390              		.loc 1 1501 1 view .LVU718
 2391 0014 08BD     		pop	{r3, pc}
 2392              	.LVL248:
 2393              	.L150:
 2394              	.LBB23:
1492:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2395              		.loc 1 1492 3 is_stmt 1 discriminator 1 view .LVU719
 2396 0016 FFF7FEFF 		bl	_DoInit
 2397              	.LVL249:
 2398 001a F5E7     		b	.L146
 2399              	.LVL250:
 2400              	.L148:
1492:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2401              		.loc 1 1492 3 is_stmt 0 discriminator 1 view .LVU720
 2402              	.LBE23:
1498:Core/Src/SEGGER_RTT.c ****   }
 2403              		.loc 1 1498 7 view .LVU721
 2404 001c 0020     		movs	r0, #0
 2405              	.LVL251:
1500:Core/Src/SEGGER_RTT.c **** }
 2406              		.loc 1 1500 3 is_stmt 1 view .LVU722
1500:Core/Src/SEGGER_RTT.c **** }
 2407              		.loc 1 1500 10 is_stmt 0 view .LVU723
 2408 001e F9E7     		b	.L145
 2409              	.L152:
 2410              		.align	2
 2411              	.L151:
 2412 0020 00000000 		.word	.LANCHOR1
 2413              		.cfi_endproc
 2414              	.LFE20:
 2416              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2417              		.align	1
 2418              		.global	SEGGER_RTT_HasData
 2419              		.syntax unified
 2420              		.thumb
 2421              		.thumb_func
 2423              	SEGGER_RTT_HasData:
 2424              	.LVL252:
 2425              	.LFB21:
1502:Core/Src/SEGGER_RTT.c **** 
1503:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1504:Core/Src/SEGGER_RTT.c **** *
1505:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1506:Core/Src/SEGGER_RTT.c **** *
1507:Core/Src/SEGGER_RTT.c **** *  Function description
1508:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1509:Core/Src/SEGGER_RTT.c **** *
1510:Core/Src/SEGGER_RTT.c **** *  Return value:
1511:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1512:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1513:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 75


1514:Core/Src/SEGGER_RTT.c **** */
1515:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2426              		.loc 1 1515 51 is_stmt 1 view -0
 2427              		.cfi_startproc
 2428              		@ args = 0, pretend = 0, frame = 0
 2429              		@ frame_needed = 0, uses_anonymous_args = 0
 2430              		@ link register save eliminated.
1516:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2431              		.loc 1 1516 3 view .LVU725
1517:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2432              		.loc 1 1517 3 view .LVU726
1518:Core/Src/SEGGER_RTT.c **** 
1519:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2433              		.loc 1 1519 3 view .LVU727
1520:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2434              		.loc 1 1520 3 view .LVU728
 2435              		.loc 1 1520 5 is_stmt 0 view .LVU729
 2436 0000 064B     		ldr	r3, .L154
 2437 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2438 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2439 000a D26E     		ldr	r2, [r2, #108]
 2440              	.LVL253:
1521:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2441              		.loc 1 1521 3 is_stmt 1 view .LVU730
 2442              		.loc 1 1521 19 is_stmt 0 view .LVU731
 2443 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2444              	.LVL254:
 2445              		.loc 1 1521 19 view .LVU732
 2446 0010 03EBC003 		add	r3, r3, r0, lsl #3
 2447 0014 186F     		ldr	r0, [r3, #112]
1522:Core/Src/SEGGER_RTT.c **** }
 2448              		.loc 1 1522 1 view .LVU733
 2449 0016 101A     		subs	r0, r2, r0
 2450 0018 7047     		bx	lr
 2451              	.L155:
 2452 001a 00BF     		.align	2
 2453              	.L154:
 2454 001c 00000000 		.word	.LANCHOR1
 2455              		.cfi_endproc
 2456              	.LFE21:
 2458              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2459              		.align	1
 2460              		.global	SEGGER_RTT_HasDataUp
 2461              		.syntax unified
 2462              		.thumb
 2463              		.thumb_func
 2465              	SEGGER_RTT_HasDataUp:
 2466              	.LVL255:
 2467              	.LFB22:
1523:Core/Src/SEGGER_RTT.c **** 
1524:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1525:Core/Src/SEGGER_RTT.c **** *
1526:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1527:Core/Src/SEGGER_RTT.c **** *
1528:Core/Src/SEGGER_RTT.c **** *  Function description
1529:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1530:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 76


1531:Core/Src/SEGGER_RTT.c **** *  Return value:
1532:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1533:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1534:Core/Src/SEGGER_RTT.c **** *
1535:Core/Src/SEGGER_RTT.c **** */
1536:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2468              		.loc 1 1536 53 is_stmt 1 view -0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 0
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
1537:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2473              		.loc 1 1537 3 view .LVU735
1538:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2474              		.loc 1 1538 3 view .LVU736
1539:Core/Src/SEGGER_RTT.c **** 
1540:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2475              		.loc 1 1540 3 view .LVU737
1541:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2476              		.loc 1 1541 3 view .LVU738
 2477              		.loc 1 1541 5 is_stmt 0 view .LVU739
 2478 0000 064B     		ldr	r3, .L157
 2479 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2480 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2481 000a 926A     		ldr	r2, [r2, #40]
 2482              	.LVL256:
1542:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2483              		.loc 1 1542 3 is_stmt 1 view .LVU740
 2484              		.loc 1 1542 15 is_stmt 0 view .LVU741
 2485 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2486              	.LVL257:
 2487              		.loc 1 1542 15 view .LVU742
 2488 0010 03EBC003 		add	r3, r3, r0, lsl #3
 2489 0014 586A     		ldr	r0, [r3, #36]
1543:Core/Src/SEGGER_RTT.c **** }
 2490              		.loc 1 1543 1 view .LVU743
 2491 0016 801A     		subs	r0, r0, r2
 2492 0018 7047     		bx	lr
 2493              	.L158:
 2494 001a 00BF     		.align	2
 2495              	.L157:
 2496 001c 00000000 		.word	.LANCHOR1
 2497              		.cfi_endproc
 2498              	.LFE22:
 2500              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2501              		.align	1
 2502              		.global	SEGGER_RTT_AllocDownBuffer
 2503              		.syntax unified
 2504              		.thumb
 2505              		.thumb_func
 2507              	SEGGER_RTT_AllocDownBuffer:
 2508              	.LVL258:
 2509              	.LFB23:
1544:Core/Src/SEGGER_RTT.c **** 
1545:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1546:Core/Src/SEGGER_RTT.c **** *
1547:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 77


1548:Core/Src/SEGGER_RTT.c **** *
1549:Core/Src/SEGGER_RTT.c **** *  Function description
1550:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1551:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1552:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1553:Core/Src/SEGGER_RTT.c **** *
1554:Core/Src/SEGGER_RTT.c **** *  Parameters
1555:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1556:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1557:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1558:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1559:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1560:Core/Src/SEGGER_RTT.c **** *
1561:Core/Src/SEGGER_RTT.c **** *  Return value
1562:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1563:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1564:Core/Src/SEGGER_RTT.c **** */
1565:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2510              		.loc 1 1565 103 is_stmt 1 view -0
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 0
 2513              		@ frame_needed = 0, uses_anonymous_args = 0
 2514              		.loc 1 1565 103 is_stmt 0 view .LVU745
 2515 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2516              		.cfi_def_cfa_offset 24
 2517              		.cfi_offset 4, -24
 2518              		.cfi_offset 5, -20
 2519              		.cfi_offset 6, -16
 2520              		.cfi_offset 7, -12
 2521              		.cfi_offset 8, -8
 2522              		.cfi_offset 14, -4
 2523 0004 8046     		mov	r8, r0
 2524 0006 0F46     		mov	r7, r1
 2525 0008 1646     		mov	r6, r2
 2526 000a 1D46     		mov	r5, r3
1566:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2527              		.loc 1 1566 3 is_stmt 1 view .LVU746
1567:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2528              		.loc 1 1567 3 view .LVU747
 2529              	.LBB24:
1568:Core/Src/SEGGER_RTT.c **** 
1569:Core/Src/SEGGER_RTT.c ****   INIT();
 2530              		.loc 1 1569 3 view .LVU748
 2531              		.loc 1 1569 3 view .LVU749
 2532              	.LVL259:
 2533              		.loc 1 1569 3 view .LVU750
 2534              		.loc 1 1569 3 view .LVU751
 2535 000c 194B     		ldr	r3, .L167
 2536              	.LVL260:
 2537              		.loc 1 1569 3 is_stmt 0 view .LVU752
 2538 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2539 0010 4BB3     		cbz	r3, .L166
 2540              	.LVL261:
 2541              	.L160:
 2542              		.loc 1 1569 3 is_stmt 1 discriminator 3 view .LVU753
 2543              	.LBE24:
 2544              		.loc 1 1569 9 discriminator 3 view .LVU754
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 78


 2545              	.LBB25:
1570:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2546              		.loc 1 1570 3 discriminator 3 view .LVU755
 2547              		.loc 1 1570 3 discriminator 3 view .LVU756
 2548              		.syntax unified
 2549              	@ 1570 "Core/Src/SEGGER_RTT.c" 1
 2550 0012 EFF31182 		mrs   r2, basepri  
 2551 0016 4FF02001 		mov   r1, #32       
 2552 001a 81F31188 		msr   basepri, r1  
 2553              		
 2554              	@ 0 "" 2
 2555              	.LVL262:
 2556              		.loc 1 1570 20 discriminator 3 view .LVU757
1571:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2557              		.loc 1 1571 3 discriminator 3 view .LVU758
1572:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2558              		.loc 1 1572 3 discriminator 3 view .LVU759
 2559              		.loc 1 1572 15 is_stmt 0 discriminator 3 view .LVU760
 2560              		.thumb
 2561              		.syntax unified
 2562 001e 0020     		movs	r0, #0
 2563              	.LVL263:
 2564              	.L162:
1573:Core/Src/SEGGER_RTT.c ****   do {
 2565              		.loc 1 1573 3 is_stmt 1 view .LVU761
1574:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2566              		.loc 1 1574 5 view .LVU762
 2567              		.loc 1 1574 35 is_stmt 0 view .LVU763
 2568 0020 00EB400C 		add	ip, r0, r0, lsl #1
 2569 0024 134C     		ldr	r4, .L167
 2570 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
 2571 002a DCF86430 		ldr	r3, [ip, #100]
 2572              		.loc 1 1574 8 view .LVU764
 2573 002e 1BB1     		cbz	r3, .L161
1575:Core/Src/SEGGER_RTT.c ****       break;
1576:Core/Src/SEGGER_RTT.c ****     }
1577:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2574              		.loc 1 1577 5 is_stmt 1 view .LVU765
 2575              		.loc 1 1577 16 is_stmt 0 view .LVU766
 2576 0030 0130     		adds	r0, r0, #1
 2577              	.LVL264:
1578:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2578              		.loc 1 1578 24 is_stmt 1 view .LVU767
 2579              		.loc 1 1578 32 is_stmt 0 view .LVU768
 2580 0032 6369     		ldr	r3, [r4, #20]
 2581              		.loc 1 1578 24 view .LVU769
 2582 0034 8342     		cmp	r3, r0
 2583 0036 F3DC     		bgt	.L162
 2584              	.L161:
1579:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2585              		.loc 1 1579 3 is_stmt 1 view .LVU770
 2586              		.loc 1 1579 27 is_stmt 0 view .LVU771
 2587 0038 0E4B     		ldr	r3, .L167
 2588 003a 5B69     		ldr	r3, [r3, #20]
 2589              		.loc 1 1579 6 view .LVU772
 2590 003c 8342     		cmp	r3, r0
 2591 003e 15DD     		ble	.L164
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 79


1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2592              		.loc 1 1580 5 is_stmt 1 view .LVU773
 2593              		.loc 1 1580 45 is_stmt 0 view .LVU774
 2594 0040 00EB4001 		add	r1, r0, r0, lsl #1
 2595 0044 0B4B     		ldr	r3, .L167
 2596 0046 03EBC103 		add	r3, r3, r1, lsl #3
 2597 004a C3F86080 		str	r8, [r3, #96]
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2598              		.loc 1 1581 5 is_stmt 1 view .LVU775
 2599              		.loc 1 1581 45 is_stmt 0 view .LVU776
 2600 004e 5F66     		str	r7, [r3, #100]
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2601              		.loc 1 1582 5 is_stmt 1 view .LVU777
 2602              		.loc 1 1582 45 is_stmt 0 view .LVU778
 2603 0050 9E66     		str	r6, [r3, #104]
1583:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2604              		.loc 1 1583 5 is_stmt 1 view .LVU779
 2605              		.loc 1 1583 45 is_stmt 0 view .LVU780
 2606 0052 0021     		movs	r1, #0
 2607 0054 1967     		str	r1, [r3, #112]
1584:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2608              		.loc 1 1584 5 is_stmt 1 view .LVU781
 2609              		.loc 1 1584 45 is_stmt 0 view .LVU782
 2610 0056 D966     		str	r1, [r3, #108]
1585:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2611              		.loc 1 1585 5 is_stmt 1 view .LVU783
 2612              		.loc 1 1585 45 is_stmt 0 view .LVU784
 2613 0058 5D67     		str	r5, [r3, #116]
1586:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2614              		.loc 1 1586 5 is_stmt 1 view .LVU785
 2615              		.syntax unified
 2616              	@ 1586 "Core/Src/SEGGER_RTT.c" 1
 2617 005a BFF35F8F 		dmb
 2618              	
 2619              	@ 0 "" 2
 2620              		.loc 1 1586 15 view .LVU786
 2621              	.LVL265:
 2622              		.thumb
 2623              		.syntax unified
 2624              	.L163:
1587:Core/Src/SEGGER_RTT.c ****   } else {
1588:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1589:Core/Src/SEGGER_RTT.c ****   }
1590:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2625              		.loc 1 1590 3 view .LVU787
 2626              		.syntax unified
 2627              	@ 1590 "Core/Src/SEGGER_RTT.c" 1
 2628 005e 82F31188 		msr   basepri, r2  
 2629              		
 2630              	@ 0 "" 2
 2631              		.thumb
 2632              		.syntax unified
 2633              	.LBE25:
 2634              		.loc 1 1590 22 view .LVU788
1591:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2635              		.loc 1 1591 3 view .LVU789
1592:Core/Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 80


 2636              		.loc 1 1592 1 is_stmt 0 view .LVU790
 2637 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2638              	.LVL266:
 2639              	.L166:
 2640              	.LBB26:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2641              		.loc 1 1569 3 is_stmt 1 discriminator 1 view .LVU791
 2642 0066 FFF7FEFF 		bl	_DoInit
 2643              	.LVL267:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2644              		.loc 1 1569 3 is_stmt 0 discriminator 1 view .LVU792
 2645 006a D2E7     		b	.L160
 2646              	.LVL268:
 2647              	.L164:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2648              		.loc 1 1569 3 discriminator 1 view .LVU793
 2649              	.LBE26:
 2650              	.LBB27:
1588:Core/Src/SEGGER_RTT.c ****   }
 2651              		.loc 1 1588 17 view .LVU794
 2652 006c 4FF0FF30 		mov	r0, #-1
 2653              	.LVL269:
1588:Core/Src/SEGGER_RTT.c ****   }
 2654              		.loc 1 1588 17 view .LVU795
 2655 0070 F5E7     		b	.L163
 2656              	.L168:
 2657 0072 00BF     		.align	2
 2658              	.L167:
 2659 0074 00000000 		.word	.LANCHOR1
 2660              	.LBE27:
 2661              		.cfi_endproc
 2662              	.LFE23:
 2664              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2665              		.align	1
 2666              		.global	SEGGER_RTT_AllocUpBuffer
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2671              	SEGGER_RTT_AllocUpBuffer:
 2672              	.LVL270:
 2673              	.LFB24:
1593:Core/Src/SEGGER_RTT.c **** 
1594:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1595:Core/Src/SEGGER_RTT.c **** *
1596:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1597:Core/Src/SEGGER_RTT.c **** *
1598:Core/Src/SEGGER_RTT.c **** *  Function description
1599:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1600:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1601:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1602:Core/Src/SEGGER_RTT.c **** *
1603:Core/Src/SEGGER_RTT.c **** *  Parameters
1604:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1605:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1606:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1607:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1608:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 81


1609:Core/Src/SEGGER_RTT.c **** *
1610:Core/Src/SEGGER_RTT.c **** *  Return value
1611:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1612:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1613:Core/Src/SEGGER_RTT.c **** */
1614:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2674              		.loc 1 1614 101 is_stmt 1 view -0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              		.loc 1 1614 101 is_stmt 0 view .LVU797
 2679 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2680              		.cfi_def_cfa_offset 24
 2681              		.cfi_offset 3, -24
 2682              		.cfi_offset 4, -20
 2683              		.cfi_offset 5, -16
 2684              		.cfi_offset 6, -12
 2685              		.cfi_offset 7, -8
 2686              		.cfi_offset 14, -4
 2687 0002 0746     		mov	r7, r0
 2688 0004 0E46     		mov	r6, r1
 2689 0006 1546     		mov	r5, r2
 2690 0008 1C46     		mov	r4, r3
1615:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2691              		.loc 1 1615 3 is_stmt 1 view .LVU798
1616:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2692              		.loc 1 1616 3 view .LVU799
 2693              	.LBB28:
1617:Core/Src/SEGGER_RTT.c **** 
1618:Core/Src/SEGGER_RTT.c ****   INIT();
 2694              		.loc 1 1618 3 view .LVU800
 2695              		.loc 1 1618 3 view .LVU801
 2696              	.LVL271:
 2697              		.loc 1 1618 3 view .LVU802
 2698              		.loc 1 1618 3 view .LVU803
 2699 000a 1F4B     		ldr	r3, .L177
 2700              	.LVL272:
 2701              		.loc 1 1618 3 is_stmt 0 view .LVU804
 2702 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2703 000e 002B     		cmp	r3, #0
 2704 0010 34D0     		beq	.L176
 2705              	.LVL273:
 2706              	.L170:
 2707              		.loc 1 1618 3 is_stmt 1 discriminator 3 view .LVU805
 2708              	.LBE28:
 2709              		.loc 1 1618 9 discriminator 3 view .LVU806
 2710              	.LBB29:
1619:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2711              		.loc 1 1619 3 discriminator 3 view .LVU807
 2712              		.loc 1 1619 3 discriminator 3 view .LVU808
 2713              		.syntax unified
 2714              	@ 1619 "Core/Src/SEGGER_RTT.c" 1
 2715 0012 EFF31182 		mrs   r2, basepri  
 2716 0016 4FF02001 		mov   r1, #32       
 2717 001a 81F31188 		msr   basepri, r1  
 2718              		
 2719              	@ 0 "" 2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 82


 2720              	.LVL274:
 2721              		.loc 1 1619 20 discriminator 3 view .LVU809
1620:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2722              		.loc 1 1620 3 discriminator 3 view .LVU810
1621:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2723              		.loc 1 1621 3 discriminator 3 view .LVU811
 2724              		.loc 1 1621 15 is_stmt 0 discriminator 3 view .LVU812
 2725              		.thumb
 2726              		.syntax unified
 2727 001e 0020     		movs	r0, #0
 2728              	.LVL275:
 2729              	.L172:
1622:Core/Src/SEGGER_RTT.c ****   do {
 2730              		.loc 1 1622 3 is_stmt 1 view .LVU813
1623:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2731              		.loc 1 1623 5 view .LVU814
 2732              		.loc 1 1623 33 is_stmt 0 view .LVU815
 2733 0020 00F1010C 		add	ip, r0, #1
 2734 0024 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2735 0028 174B     		ldr	r3, .L177
 2736 002a 03EBCC0C 		add	ip, r3, ip, lsl #3
 2737 002e DCF80430 		ldr	r3, [ip, #4]
 2738              		.loc 1 1623 8 view .LVU816
 2739 0032 23B1     		cbz	r3, .L171
1624:Core/Src/SEGGER_RTT.c ****       break;
1625:Core/Src/SEGGER_RTT.c ****     }
1626:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2740              		.loc 1 1626 5 is_stmt 1 view .LVU817
 2741              		.loc 1 1626 16 is_stmt 0 view .LVU818
 2742 0034 0130     		adds	r0, r0, #1
 2743              	.LVL276:
1627:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2744              		.loc 1 1627 24 is_stmt 1 view .LVU819
 2745              		.loc 1 1627 32 is_stmt 0 view .LVU820
 2746 0036 144B     		ldr	r3, .L177
 2747 0038 1B69     		ldr	r3, [r3, #16]
 2748              		.loc 1 1627 24 view .LVU821
 2749 003a 8342     		cmp	r3, r0
 2750 003c F0DC     		bgt	.L172
 2751              	.L171:
1628:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2752              		.loc 1 1628 3 is_stmt 1 view .LVU822
 2753              		.loc 1 1628 27 is_stmt 0 view .LVU823
 2754 003e 124B     		ldr	r3, .L177
 2755 0040 1B69     		ldr	r3, [r3, #16]
 2756              		.loc 1 1628 6 view .LVU824
 2757 0042 8342     		cmp	r3, r0
 2758 0044 1DDD     		ble	.L174
1629:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2759              		.loc 1 1629 5 is_stmt 1 view .LVU825
 2760              		.loc 1 1629 43 is_stmt 0 view .LVU826
 2761 0046 104B     		ldr	r3, .L177
 2762 0048 411C     		adds	r1, r0, #1
 2763 004a 01EB410C 		add	ip, r1, r1, lsl #1
 2764 004e 4FEACC0C 		lsl	ip, ip, #3
 2765 0052 43F80C70 		str	r7, [r3, ip]
1630:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 83


 2766              		.loc 1 1630 5 is_stmt 1 view .LVU827
 2767              		.loc 1 1630 43 is_stmt 0 view .LVU828
 2768 0056 01EB4101 		add	r1, r1, r1, lsl #1
 2769 005a 03EBC101 		add	r1, r3, r1, lsl #3
 2770 005e 4E60     		str	r6, [r1, #4]
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2771              		.loc 1 1631 5 is_stmt 1 view .LVU829
 2772              		.loc 1 1631 43 is_stmt 0 view .LVU830
 2773 0060 00EB4001 		add	r1, r0, r0, lsl #1
 2774 0064 03EBC103 		add	r3, r3, r1, lsl #3
 2775 0068 1D62     		str	r5, [r3, #32]
1632:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2776              		.loc 1 1632 5 is_stmt 1 view .LVU831
 2777              		.loc 1 1632 43 is_stmt 0 view .LVU832
 2778 006a 0021     		movs	r1, #0
 2779 006c 9962     		str	r1, [r3, #40]
1633:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2780              		.loc 1 1633 5 is_stmt 1 view .LVU833
 2781              		.loc 1 1633 43 is_stmt 0 view .LVU834
 2782 006e 5962     		str	r1, [r3, #36]
1634:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2783              		.loc 1 1634 5 is_stmt 1 view .LVU835
 2784              		.loc 1 1634 43 is_stmt 0 view .LVU836
 2785 0070 DC62     		str	r4, [r3, #44]
1635:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2786              		.loc 1 1635 5 is_stmt 1 view .LVU837
 2787              		.syntax unified
 2788              	@ 1635 "Core/Src/SEGGER_RTT.c" 1
 2789 0072 BFF35F8F 		dmb
 2790              	
 2791              	@ 0 "" 2
 2792              		.loc 1 1635 15 view .LVU838
 2793              	.LVL277:
 2794              		.thumb
 2795              		.syntax unified
 2796              	.L173:
1636:Core/Src/SEGGER_RTT.c ****   } else {
1637:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1638:Core/Src/SEGGER_RTT.c ****   }
1639:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2797              		.loc 1 1639 3 view .LVU839
 2798              		.syntax unified
 2799              	@ 1639 "Core/Src/SEGGER_RTT.c" 1
 2800 0076 82F31188 		msr   basepri, r2  
 2801              		
 2802              	@ 0 "" 2
 2803              		.thumb
 2804              		.syntax unified
 2805              	.LBE29:
 2806              		.loc 1 1639 22 view .LVU840
1640:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2807              		.loc 1 1640 3 view .LVU841
1641:Core/Src/SEGGER_RTT.c **** }
 2808              		.loc 1 1641 1 is_stmt 0 view .LVU842
 2809 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2810              	.LVL278:
 2811              	.L176:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 84


 2812              	.LBB30:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2813              		.loc 1 1618 3 is_stmt 1 discriminator 1 view .LVU843
 2814 007c FFF7FEFF 		bl	_DoInit
 2815              	.LVL279:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2816              		.loc 1 1618 3 is_stmt 0 discriminator 1 view .LVU844
 2817 0080 C7E7     		b	.L170
 2818              	.LVL280:
 2819              	.L174:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2820              		.loc 1 1618 3 discriminator 1 view .LVU845
 2821              	.LBE30:
 2822              	.LBB31:
1637:Core/Src/SEGGER_RTT.c ****   }
 2823              		.loc 1 1637 17 view .LVU846
 2824 0082 4FF0FF30 		mov	r0, #-1
 2825              	.LVL281:
1637:Core/Src/SEGGER_RTT.c ****   }
 2826              		.loc 1 1637 17 view .LVU847
 2827 0086 F6E7     		b	.L173
 2828              	.L178:
 2829              		.align	2
 2830              	.L177:
 2831 0088 00000000 		.word	.LANCHOR1
 2832              	.LBE31:
 2833              		.cfi_endproc
 2834              	.LFE24:
 2836              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2837              		.align	1
 2838              		.global	SEGGER_RTT_ConfigUpBuffer
 2839              		.syntax unified
 2840              		.thumb
 2841              		.thumb_func
 2843              	SEGGER_RTT_ConfigUpBuffer:
 2844              	.LVL282:
 2845              	.LFB25:
1642:Core/Src/SEGGER_RTT.c **** 
1643:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1644:Core/Src/SEGGER_RTT.c **** *
1645:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1646:Core/Src/SEGGER_RTT.c **** *
1647:Core/Src/SEGGER_RTT.c **** *  Function description
1648:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1649:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1650:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1651:Core/Src/SEGGER_RTT.c **** *
1652:Core/Src/SEGGER_RTT.c **** *  Parameters
1653:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1654:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1655:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1656:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1657:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1658:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1659:Core/Src/SEGGER_RTT.c **** *
1660:Core/Src/SEGGER_RTT.c **** *  Return value
1661:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 85


1662:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1663:Core/Src/SEGGER_RTT.c **** *
1664:Core/Src/SEGGER_RTT.c **** *  Additional information
1665:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1666:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1667:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1668:Core/Src/SEGGER_RTT.c **** */
1669:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2846              		.loc 1 1669 124 is_stmt 1 view -0
 2847              		.cfi_startproc
 2848              		@ args = 4, pretend = 0, frame = 0
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850              		.loc 1 1669 124 is_stmt 0 view .LVU849
 2851 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2852              		.cfi_def_cfa_offset 24
 2853              		.cfi_offset 3, -24
 2854              		.cfi_offset 4, -20
 2855              		.cfi_offset 5, -16
 2856              		.cfi_offset 6, -12
 2857              		.cfi_offset 7, -8
 2858              		.cfi_offset 14, -4
 2859 0002 0446     		mov	r4, r0
 2860 0004 0D46     		mov	r5, r1
 2861 0006 1746     		mov	r7, r2
 2862 0008 1E46     		mov	r6, r3
1670:Core/Src/SEGGER_RTT.c ****   int r;
 2863              		.loc 1 1670 3 is_stmt 1 view .LVU850
1671:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2864              		.loc 1 1671 3 view .LVU851
1672:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2865              		.loc 1 1672 3 view .LVU852
 2866              	.LBB32:
1673:Core/Src/SEGGER_RTT.c **** 
1674:Core/Src/SEGGER_RTT.c ****   INIT();
 2867              		.loc 1 1674 3 view .LVU853
 2868              		.loc 1 1674 3 view .LVU854
 2869              	.LVL283:
 2870              		.loc 1 1674 3 view .LVU855
 2871              		.loc 1 1674 3 view .LVU856
 2872 000a 184B     		ldr	r3, .L186
 2873              	.LVL284:
 2874              		.loc 1 1674 3 is_stmt 0 view .LVU857
 2875 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2876 000e 33B3     		cbz	r3, .L185
 2877              	.LVL285:
 2878              	.L180:
 2879              		.loc 1 1674 3 is_stmt 1 discriminator 3 view .LVU858
 2880              	.LBE32:
 2881              		.loc 1 1674 9 discriminator 3 view .LVU859
1675:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2882              		.loc 1 1675 3 discriminator 3 view .LVU860
1676:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2883              		.loc 1 1676 3 discriminator 3 view .LVU861
 2884              		.loc 1 1676 6 is_stmt 0 discriminator 3 view .LVU862
 2885 0010 022C     		cmp	r4, #2
 2886 0012 27D8     		bhi	.L183
 2887              	.LBB33:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 86


1677:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2888              		.loc 1 1677 5 is_stmt 1 view .LVU863
 2889              		.loc 1 1677 5 view .LVU864
 2890              		.syntax unified
 2891              	@ 1677 "Core/Src/SEGGER_RTT.c" 1
 2892 0014 EFF3118C 		mrs   ip, basepri  
 2893 0018 4FF02001 		mov   r1, #32       
 2894 001c 81F31188 		msr   basepri, r1  
 2895              		
 2896              	@ 0 "" 2
 2897              	.LVL286:
 2898              		.loc 1 1677 22 view .LVU865
1678:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2899              		.loc 1 1678 5 view .LVU866
1679:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 2900              		.loc 1 1679 5 view .LVU867
 2901              		.loc 1 1679 8 is_stmt 0 view .LVU868
 2902              		.thumb
 2903              		.syntax unified
 2904 0020 94B1     		cbz	r4, .L182
1680:Core/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
 2905              		.loc 1 1680 7 is_stmt 1 view .LVU869
 2906              		.loc 1 1680 25 is_stmt 0 view .LVU870
 2907 0022 124A     		ldr	r2, .L186
 2908 0024 601C     		adds	r0, r4, #1
 2909 0026 00EB4003 		add	r3, r0, r0, lsl #1
 2910 002a DB00     		lsls	r3, r3, #3
 2911 002c D550     		str	r5, [r2, r3]
1681:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2912              		.loc 1 1681 7 is_stmt 1 view .LVU871
 2913              		.loc 1 1681 25 is_stmt 0 view .LVU872
 2914 002e 00EB4000 		add	r0, r0, r0, lsl #1
 2915 0032 02EBC000 		add	r0, r2, r0, lsl #3
 2916 0036 4760     		str	r7, [r0, #4]
1682:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2917              		.loc 1 1682 7 is_stmt 1 view .LVU873
 2918              		.loc 1 1682 25 is_stmt 0 view .LVU874
 2919 0038 04EB4403 		add	r3, r4, r4, lsl #1
 2920 003c 02EBC302 		add	r2, r2, r3, lsl #3
 2921 0040 1662     		str	r6, [r2, #32]
1683:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2922              		.loc 1 1683 7 is_stmt 1 view .LVU875
 2923              		.loc 1 1683 25 is_stmt 0 view .LVU876
 2924 0042 0023     		movs	r3, #0
 2925 0044 9362     		str	r3, [r2, #40]
1684:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2926              		.loc 1 1684 7 is_stmt 1 view .LVU877
 2927              		.loc 1 1684 25 is_stmt 0 view .LVU878
 2928 0046 5362     		str	r3, [r2, #36]
 2929              	.L182:
1685:Core/Src/SEGGER_RTT.c ****     }
1686:Core/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2930              		.loc 1 1686 5 is_stmt 1 view .LVU879
 2931              		.loc 1 1686 25 is_stmt 0 view .LVU880
 2932 0048 04EB4404 		add	r4, r4, r4, lsl #1
 2933              	.LVL287:
 2934              		.loc 1 1686 25 view .LVU881
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 87


 2935 004c 074B     		ldr	r3, .L186
 2936 004e 03EBC403 		add	r3, r3, r4, lsl #3
 2937 0052 069A     		ldr	r2, [sp, #24]
 2938 0054 DA62     		str	r2, [r3, #44]
1687:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2939              		.loc 1 1687 5 is_stmt 1 view .LVU882
 2940              		.syntax unified
 2941              	@ 1687 "Core/Src/SEGGER_RTT.c" 1
 2942 0056 8CF31188 		msr   basepri, ip  
 2943              		
 2944              	@ 0 "" 2
 2945              		.thumb
 2946              		.syntax unified
 2947              	.LBE33:
 2948              		.loc 1 1687 24 view .LVU883
1688:Core/Src/SEGGER_RTT.c ****     r =  0;
 2949              		.loc 1 1688 5 view .LVU884
 2950              	.LVL288:
 2951              		.loc 1 1688 7 is_stmt 0 view .LVU885
 2952 005a 0020     		movs	r0, #0
 2953              	.LVL289:
 2954              	.L179:
1689:Core/Src/SEGGER_RTT.c ****   } else {
1690:Core/Src/SEGGER_RTT.c ****     r = -1;
1691:Core/Src/SEGGER_RTT.c ****   }
1692:Core/Src/SEGGER_RTT.c ****   return r;
1693:Core/Src/SEGGER_RTT.c **** }
 2955              		.loc 1 1693 1 view .LVU886
 2956 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2957              	.LVL290:
 2958              	.L185:
 2959              	.LBB34:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2960              		.loc 1 1674 3 is_stmt 1 discriminator 1 view .LVU887
 2961 005e FFF7FEFF 		bl	_DoInit
 2962              	.LVL291:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2963              		.loc 1 1674 3 is_stmt 0 discriminator 1 view .LVU888
 2964 0062 D5E7     		b	.L180
 2965              	.LVL292:
 2966              	.L183:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2967              		.loc 1 1674 3 discriminator 1 view .LVU889
 2968              	.LBE34:
1690:Core/Src/SEGGER_RTT.c ****   }
 2969              		.loc 1 1690 7 view .LVU890
 2970 0064 4FF0FF30 		mov	r0, #-1
 2971              	.LVL293:
1692:Core/Src/SEGGER_RTT.c **** }
 2972              		.loc 1 1692 3 is_stmt 1 view .LVU891
1692:Core/Src/SEGGER_RTT.c **** }
 2973              		.loc 1 1692 10 is_stmt 0 view .LVU892
 2974 0068 F8E7     		b	.L179
 2975              	.L187:
 2976 006a 00BF     		.align	2
 2977              	.L186:
 2978 006c 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 88


 2979              		.cfi_endproc
 2980              	.LFE25:
 2982              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2983              		.align	1
 2984              		.global	SEGGER_RTT_ConfigDownBuffer
 2985              		.syntax unified
 2986              		.thumb
 2987              		.thumb_func
 2989              	SEGGER_RTT_ConfigDownBuffer:
 2990              	.LVL294:
 2991              	.LFB26:
1694:Core/Src/SEGGER_RTT.c **** 
1695:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1696:Core/Src/SEGGER_RTT.c **** *
1697:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1698:Core/Src/SEGGER_RTT.c **** *
1699:Core/Src/SEGGER_RTT.c **** *  Function description
1700:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1701:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1702:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1703:Core/Src/SEGGER_RTT.c **** *
1704:Core/Src/SEGGER_RTT.c **** *  Parameters
1705:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1706:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1707:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1708:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1709:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1710:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1711:Core/Src/SEGGER_RTT.c **** *
1712:Core/Src/SEGGER_RTT.c **** *  Return value
1713:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1714:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1715:Core/Src/SEGGER_RTT.c **** *
1716:Core/Src/SEGGER_RTT.c **** *  Additional information
1717:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1718:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1719:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1720:Core/Src/SEGGER_RTT.c **** */
1721:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2992              		.loc 1 1721 126 is_stmt 1 view -0
 2993              		.cfi_startproc
 2994              		@ args = 4, pretend = 0, frame = 0
 2995              		@ frame_needed = 0, uses_anonymous_args = 0
 2996              		.loc 1 1721 126 is_stmt 0 view .LVU894
 2997 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2998              		.cfi_def_cfa_offset 24
 2999              		.cfi_offset 4, -24
 3000              		.cfi_offset 5, -20
 3001              		.cfi_offset 6, -16
 3002              		.cfi_offset 7, -12
 3003              		.cfi_offset 8, -8
 3004              		.cfi_offset 14, -4
 3005 0004 0446     		mov	r4, r0
 3006 0006 8846     		mov	r8, r1
 3007 0008 1746     		mov	r7, r2
 3008 000a 1E46     		mov	r6, r3
1722:Core/Src/SEGGER_RTT.c ****   int r;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 89


 3009              		.loc 1 1722 3 is_stmt 1 view .LVU895
1723:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3010              		.loc 1 1723 3 view .LVU896
1724:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3011              		.loc 1 1724 3 view .LVU897
 3012              	.LBB35:
1725:Core/Src/SEGGER_RTT.c **** 
1726:Core/Src/SEGGER_RTT.c ****   INIT();
 3013              		.loc 1 1726 3 view .LVU898
 3014              		.loc 1 1726 3 view .LVU899
 3015              	.LVL295:
 3016              		.loc 1 1726 3 view .LVU900
 3017              		.loc 1 1726 3 view .LVU901
 3018 000c 174B     		ldr	r3, .L195
 3019              	.LVL296:
 3020              		.loc 1 1726 3 is_stmt 0 view .LVU902
 3021 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3022 0010 33B3     		cbz	r3, .L194
 3023              	.LVL297:
 3024              	.L189:
 3025              		.loc 1 1726 3 is_stmt 1 discriminator 3 view .LVU903
 3026              	.LBE35:
 3027              		.loc 1 1726 9 discriminator 3 view .LVU904
1727:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3028              		.loc 1 1727 3 discriminator 3 view .LVU905
1728:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3029              		.loc 1 1728 3 discriminator 3 view .LVU906
 3030              		.loc 1 1728 6 is_stmt 0 discriminator 3 view .LVU907
 3031 0012 022C     		cmp	r4, #2
 3032 0014 27D8     		bhi	.L192
 3033              	.LBB36:
1729:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3034              		.loc 1 1729 5 is_stmt 1 view .LVU908
 3035              		.loc 1 1729 5 view .LVU909
 3036              		.syntax unified
 3037              	@ 1729 "Core/Src/SEGGER_RTT.c" 1
 3038 0016 EFF31180 		mrs   r0, basepri  
 3039 001a 4FF02001 		mov   r1, #32       
 3040 001e 81F31188 		msr   basepri, r1  
 3041              		
 3042              	@ 0 "" 2
 3043              	.LVL298:
 3044              		.loc 1 1729 22 view .LVU910
1730:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3045              		.loc 1 1730 5 view .LVU911
1731:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3046              		.loc 1 1731 5 view .LVU912
 3047              		.loc 1 1731 8 is_stmt 0 view .LVU913
 3048              		.thumb
 3049              		.syntax unified
 3050 0022 7CB1     		cbz	r4, .L191
1732:Core/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 3051              		.loc 1 1732 7 is_stmt 1 view .LVU914
 3052              		.loc 1 1732 27 is_stmt 0 view .LVU915
 3053 0024 04EB4403 		add	r3, r4, r4, lsl #1
 3054 0028 104D     		ldr	r5, .L195
 3055 002a 05EBC30C 		add	ip, r5, r3, lsl #3
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 90


 3056 002e CCF86080 		str	r8, [ip, #96]
1733:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3057              		.loc 1 1733 7 is_stmt 1 view .LVU916
 3058              		.loc 1 1733 27 is_stmt 0 view .LVU917
 3059 0032 CCF86470 		str	r7, [ip, #100]
1734:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3060              		.loc 1 1734 7 is_stmt 1 view .LVU918
 3061              		.loc 1 1734 27 is_stmt 0 view .LVU919
 3062 0036 CCF86860 		str	r6, [ip, #104]
1735:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3063              		.loc 1 1735 7 is_stmt 1 view .LVU920
 3064              		.loc 1 1735 27 is_stmt 0 view .LVU921
 3065 003a 0023     		movs	r3, #0
 3066 003c CCF87030 		str	r3, [ip, #112]
1736:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3067              		.loc 1 1736 7 is_stmt 1 view .LVU922
 3068              		.loc 1 1736 27 is_stmt 0 view .LVU923
 3069 0040 CCF86C30 		str	r3, [ip, #108]
 3070              	.L191:
1737:Core/Src/SEGGER_RTT.c ****     }
1738:Core/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3071              		.loc 1 1738 5 is_stmt 1 view .LVU924
 3072              		.loc 1 1738 27 is_stmt 0 view .LVU925
 3073 0044 04EB4404 		add	r4, r4, r4, lsl #1
 3074              	.LVL299:
 3075              		.loc 1 1738 27 view .LVU926
 3076 0048 084B     		ldr	r3, .L195
 3077 004a 03EBC403 		add	r3, r3, r4, lsl #3
 3078 004e 069A     		ldr	r2, [sp, #24]
 3079 0050 5A67     		str	r2, [r3, #116]
1739:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3080              		.loc 1 1739 5 is_stmt 1 view .LVU927
 3081              		.syntax unified
 3082              	@ 1739 "Core/Src/SEGGER_RTT.c" 1
 3083 0052 BFF35F8F 		dmb
 3084              	
 3085              	@ 0 "" 2
 3086              		.loc 1 1739 15 view .LVU928
1740:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3087              		.loc 1 1740 5 view .LVU929
 3088              	@ 1740 "Core/Src/SEGGER_RTT.c" 1
 3089 0056 80F31188 		msr   basepri, r0  
 3090              		
 3091              	@ 0 "" 2
 3092              		.thumb
 3093              		.syntax unified
 3094              	.LBE36:
 3095              		.loc 1 1740 24 view .LVU930
1741:Core/Src/SEGGER_RTT.c ****     r =  0;
 3096              		.loc 1 1741 5 view .LVU931
 3097              	.LVL300:
 3098              		.loc 1 1741 7 is_stmt 0 view .LVU932
 3099 005a 0020     		movs	r0, #0
 3100              	.LVL301:
 3101              	.L188:
1742:Core/Src/SEGGER_RTT.c ****   } else {
1743:Core/Src/SEGGER_RTT.c ****     r = -1;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 91


1744:Core/Src/SEGGER_RTT.c ****   }
1745:Core/Src/SEGGER_RTT.c ****   return r;
1746:Core/Src/SEGGER_RTT.c **** }
 3102              		.loc 1 1746 1 view .LVU933
 3103 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3104              	.LVL302:
 3105              	.L194:
 3106              	.LBB37:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3107              		.loc 1 1726 3 is_stmt 1 discriminator 1 view .LVU934
 3108 0060 FFF7FEFF 		bl	_DoInit
 3109              	.LVL303:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3110              		.loc 1 1726 3 is_stmt 0 discriminator 1 view .LVU935
 3111 0064 D5E7     		b	.L189
 3112              	.LVL304:
 3113              	.L192:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3114              		.loc 1 1726 3 discriminator 1 view .LVU936
 3115              	.LBE37:
1743:Core/Src/SEGGER_RTT.c ****   }
 3116              		.loc 1 1743 7 view .LVU937
 3117 0066 4FF0FF30 		mov	r0, #-1
 3118              	.LVL305:
1745:Core/Src/SEGGER_RTT.c **** }
 3119              		.loc 1 1745 3 is_stmt 1 view .LVU938
1745:Core/Src/SEGGER_RTT.c **** }
 3120              		.loc 1 1745 10 is_stmt 0 view .LVU939
 3121 006a F7E7     		b	.L188
 3122              	.L196:
 3123              		.align	2
 3124              	.L195:
 3125 006c 00000000 		.word	.LANCHOR1
 3126              		.cfi_endproc
 3127              	.LFE26:
 3129              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3130              		.align	1
 3131              		.global	SEGGER_RTT_SetNameUpBuffer
 3132              		.syntax unified
 3133              		.thumb
 3134              		.thumb_func
 3136              	SEGGER_RTT_SetNameUpBuffer:
 3137              	.LVL306:
 3138              	.LFB27:
1747:Core/Src/SEGGER_RTT.c **** 
1748:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1749:Core/Src/SEGGER_RTT.c **** *
1750:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1751:Core/Src/SEGGER_RTT.c **** *
1752:Core/Src/SEGGER_RTT.c **** *  Function description
1753:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1754:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1755:Core/Src/SEGGER_RTT.c **** *
1756:Core/Src/SEGGER_RTT.c **** *  Parameters
1757:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1758:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1759:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 92


1760:Core/Src/SEGGER_RTT.c **** *  Return value
1761:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1762:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1763:Core/Src/SEGGER_RTT.c **** */
1764:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3139              		.loc 1 1764 73 is_stmt 1 view -0
 3140              		.cfi_startproc
 3141              		@ args = 0, pretend = 0, frame = 0
 3142              		@ frame_needed = 0, uses_anonymous_args = 0
 3143              		.loc 1 1764 73 is_stmt 0 view .LVU941
 3144 0000 38B5     		push	{r3, r4, r5, lr}
 3145              		.cfi_def_cfa_offset 16
 3146              		.cfi_offset 3, -16
 3147              		.cfi_offset 4, -12
 3148              		.cfi_offset 5, -8
 3149              		.cfi_offset 14, -4
 3150 0002 0446     		mov	r4, r0
 3151 0004 0D46     		mov	r5, r1
1765:Core/Src/SEGGER_RTT.c ****   int r;
 3152              		.loc 1 1765 3 is_stmt 1 view .LVU942
1766:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3153              		.loc 1 1766 3 view .LVU943
1767:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3154              		.loc 1 1767 3 view .LVU944
 3155              	.LBB38:
1768:Core/Src/SEGGER_RTT.c **** 
1769:Core/Src/SEGGER_RTT.c ****   INIT();
 3156              		.loc 1 1769 3 view .LVU945
 3157              		.loc 1 1769 3 view .LVU946
 3158              	.LVL307:
 3159              		.loc 1 1769 3 view .LVU947
 3160              		.loc 1 1769 3 view .LVU948
 3161 0006 0D4B     		ldr	r3, .L203
 3162 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3163 000a 8BB1     		cbz	r3, .L202
 3164              	.LVL308:
 3165              	.L198:
 3166              		.loc 1 1769 3 discriminator 3 view .LVU949
 3167              	.LBE38:
 3168              		.loc 1 1769 9 discriminator 3 view .LVU950
1770:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3169              		.loc 1 1770 3 discriminator 3 view .LVU951
1771:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3170              		.loc 1 1771 3 discriminator 3 view .LVU952
 3171              		.loc 1 1771 6 is_stmt 0 discriminator 3 view .LVU953
 3172 000c 022C     		cmp	r4, #2
 3173 000e 12D8     		bhi	.L200
 3174              	.LBB39:
1772:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3175              		.loc 1 1772 5 is_stmt 1 view .LVU954
 3176              		.loc 1 1772 5 view .LVU955
 3177              		.syntax unified
 3178              	@ 1772 "Core/Src/SEGGER_RTT.c" 1
 3179 0010 EFF31183 		mrs   r3, basepri  
 3180 0014 4FF02001 		mov   r1, #32       
 3181 0018 81F31188 		msr   basepri, r1  
 3182              		
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 93


 3183              	@ 0 "" 2
 3184              	.LVL309:
 3185              		.loc 1 1772 22 view .LVU956
1773:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3186              		.loc 1 1773 5 view .LVU957
1774:Core/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3187              		.loc 1 1774 5 view .LVU958
 3188              		.loc 1 1774 16 is_stmt 0 view .LVU959
 3189              		.thumb
 3190              		.syntax unified
 3191 001c 0134     		adds	r4, r4, #1
 3192              	.LVL310:
 3193              		.loc 1 1774 16 view .LVU960
 3194 001e 04EB4404 		add	r4, r4, r4, lsl #1
 3195              	.LVL311:
 3196              		.loc 1 1774 16 view .LVU961
 3197 0022 E400     		lsls	r4, r4, #3
 3198 0024 054A     		ldr	r2, .L203
 3199 0026 1551     		str	r5, [r2, r4]
1775:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3200              		.loc 1 1775 5 is_stmt 1 view .LVU962
 3201              		.syntax unified
 3202              	@ 1775 "Core/Src/SEGGER_RTT.c" 1
 3203 0028 83F31188 		msr   basepri, r3  
 3204              		
 3205              	@ 0 "" 2
 3206              		.thumb
 3207              		.syntax unified
 3208              	.LBE39:
 3209              		.loc 1 1775 24 view .LVU963
1776:Core/Src/SEGGER_RTT.c ****     r =  0;
 3210              		.loc 1 1776 5 view .LVU964
 3211              	.LVL312:
 3212              		.loc 1 1776 7 is_stmt 0 view .LVU965
 3213 002c 0020     		movs	r0, #0
 3214              	.LVL313:
 3215              	.L197:
1777:Core/Src/SEGGER_RTT.c ****   } else {
1778:Core/Src/SEGGER_RTT.c ****     r = -1;
1779:Core/Src/SEGGER_RTT.c ****   }
1780:Core/Src/SEGGER_RTT.c ****   return r;
1781:Core/Src/SEGGER_RTT.c **** }
 3216              		.loc 1 1781 1 view .LVU966
 3217 002e 38BD     		pop	{r3, r4, r5, pc}
 3218              	.LVL314:
 3219              	.L202:
 3220              	.LBB40:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3221              		.loc 1 1769 3 is_stmt 1 discriminator 1 view .LVU967
 3222 0030 FFF7FEFF 		bl	_DoInit
 3223              	.LVL315:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3224              		.loc 1 1769 3 is_stmt 0 discriminator 1 view .LVU968
 3225 0034 EAE7     		b	.L198
 3226              	.LVL316:
 3227              	.L200:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 94


 3228              		.loc 1 1769 3 discriminator 1 view .LVU969
 3229              	.LBE40:
1778:Core/Src/SEGGER_RTT.c ****   }
 3230              		.loc 1 1778 7 view .LVU970
 3231 0036 4FF0FF30 		mov	r0, #-1
 3232              	.LVL317:
1780:Core/Src/SEGGER_RTT.c **** }
 3233              		.loc 1 1780 3 is_stmt 1 view .LVU971
1780:Core/Src/SEGGER_RTT.c **** }
 3234              		.loc 1 1780 10 is_stmt 0 view .LVU972
 3235 003a F8E7     		b	.L197
 3236              	.L204:
 3237              		.align	2
 3238              	.L203:
 3239 003c 00000000 		.word	.LANCHOR1
 3240              		.cfi_endproc
 3241              	.LFE27:
 3243              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3244              		.align	1
 3245              		.global	SEGGER_RTT_SetNameDownBuffer
 3246              		.syntax unified
 3247              		.thumb
 3248              		.thumb_func
 3250              	SEGGER_RTT_SetNameDownBuffer:
 3251              	.LVL318:
 3252              	.LFB28:
1782:Core/Src/SEGGER_RTT.c **** 
1783:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1784:Core/Src/SEGGER_RTT.c **** *
1785:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1786:Core/Src/SEGGER_RTT.c **** *
1787:Core/Src/SEGGER_RTT.c **** *  Function description
1788:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1789:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1790:Core/Src/SEGGER_RTT.c **** *
1791:Core/Src/SEGGER_RTT.c **** *  Parameters
1792:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1793:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1794:Core/Src/SEGGER_RTT.c **** *
1795:Core/Src/SEGGER_RTT.c **** *  Return value
1796:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1797:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1798:Core/Src/SEGGER_RTT.c **** */
1799:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3253              		.loc 1 1799 75 is_stmt 1 view -0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 0
 3256              		@ frame_needed = 0, uses_anonymous_args = 0
 3257              		.loc 1 1799 75 is_stmt 0 view .LVU974
 3258 0000 38B5     		push	{r3, r4, r5, lr}
 3259              		.cfi_def_cfa_offset 16
 3260              		.cfi_offset 3, -16
 3261              		.cfi_offset 4, -12
 3262              		.cfi_offset 5, -8
 3263              		.cfi_offset 14, -4
 3264 0002 0446     		mov	r4, r0
 3265 0004 0D46     		mov	r5, r1
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 95


1800:Core/Src/SEGGER_RTT.c ****   int r;
 3266              		.loc 1 1800 3 is_stmt 1 view .LVU975
1801:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3267              		.loc 1 1801 3 view .LVU976
1802:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3268              		.loc 1 1802 3 view .LVU977
 3269              	.LBB41:
1803:Core/Src/SEGGER_RTT.c **** 
1804:Core/Src/SEGGER_RTT.c ****   INIT();
 3270              		.loc 1 1804 3 view .LVU978
 3271              		.loc 1 1804 3 view .LVU979
 3272              	.LVL319:
 3273              		.loc 1 1804 3 view .LVU980
 3274              		.loc 1 1804 3 view .LVU981
 3275 0006 0D4B     		ldr	r3, .L211
 3276 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3277 000a 8BB1     		cbz	r3, .L210
 3278              	.LVL320:
 3279              	.L206:
 3280              		.loc 1 1804 3 discriminator 3 view .LVU982
 3281              	.LBE41:
 3282              		.loc 1 1804 9 discriminator 3 view .LVU983
1805:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3283              		.loc 1 1805 3 discriminator 3 view .LVU984
1806:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3284              		.loc 1 1806 3 discriminator 3 view .LVU985
 3285              		.loc 1 1806 6 is_stmt 0 discriminator 3 view .LVU986
 3286 000c 022C     		cmp	r4, #2
 3287 000e 12D8     		bhi	.L208
 3288              	.LBB42:
1807:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3289              		.loc 1 1807 5 is_stmt 1 view .LVU987
 3290              		.loc 1 1807 5 view .LVU988
 3291              		.syntax unified
 3292              	@ 1807 "Core/Src/SEGGER_RTT.c" 1
 3293 0010 EFF31182 		mrs   r2, basepri  
 3294 0014 4FF02001 		mov   r1, #32       
 3295 0018 81F31188 		msr   basepri, r1  
 3296              		
 3297              	@ 0 "" 2
 3298              	.LVL321:
 3299              		.loc 1 1807 22 view .LVU989
1808:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3300              		.loc 1 1808 5 view .LVU990
1809:Core/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3301              		.loc 1 1809 5 view .LVU991
 3302              		.loc 1 1809 18 is_stmt 0 view .LVU992
 3303              		.thumb
 3304              		.syntax unified
 3305 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3306              	.LVL322:
 3307              		.loc 1 1809 18 view .LVU993
 3308 0020 064B     		ldr	r3, .L211
 3309 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3310 0026 1D66     		str	r5, [r3, #96]
1810:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3311              		.loc 1 1810 5 is_stmt 1 view .LVU994
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 96


 3312              		.syntax unified
 3313              	@ 1810 "Core/Src/SEGGER_RTT.c" 1
 3314 0028 82F31188 		msr   basepri, r2  
 3315              		
 3316              	@ 0 "" 2
 3317              		.thumb
 3318              		.syntax unified
 3319              	.LBE42:
 3320              		.loc 1 1810 24 view .LVU995
1811:Core/Src/SEGGER_RTT.c ****     r =  0;
 3321              		.loc 1 1811 5 view .LVU996
 3322              	.LVL323:
 3323              		.loc 1 1811 7 is_stmt 0 view .LVU997
 3324 002c 0020     		movs	r0, #0
 3325              	.LVL324:
 3326              	.L205:
1812:Core/Src/SEGGER_RTT.c ****   } else {
1813:Core/Src/SEGGER_RTT.c ****     r = -1;
1814:Core/Src/SEGGER_RTT.c ****   }
1815:Core/Src/SEGGER_RTT.c ****   return r;
1816:Core/Src/SEGGER_RTT.c **** }
 3327              		.loc 1 1816 1 view .LVU998
 3328 002e 38BD     		pop	{r3, r4, r5, pc}
 3329              	.LVL325:
 3330              	.L210:
 3331              	.LBB43:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3332              		.loc 1 1804 3 is_stmt 1 discriminator 1 view .LVU999
 3333 0030 FFF7FEFF 		bl	_DoInit
 3334              	.LVL326:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3335              		.loc 1 1804 3 is_stmt 0 discriminator 1 view .LVU1000
 3336 0034 EAE7     		b	.L206
 3337              	.LVL327:
 3338              	.L208:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3339              		.loc 1 1804 3 discriminator 1 view .LVU1001
 3340              	.LBE43:
1813:Core/Src/SEGGER_RTT.c ****   }
 3341              		.loc 1 1813 7 view .LVU1002
 3342 0036 4FF0FF30 		mov	r0, #-1
 3343              	.LVL328:
1815:Core/Src/SEGGER_RTT.c **** }
 3344              		.loc 1 1815 3 is_stmt 1 view .LVU1003
1815:Core/Src/SEGGER_RTT.c **** }
 3345              		.loc 1 1815 10 is_stmt 0 view .LVU1004
 3346 003a F8E7     		b	.L205
 3347              	.L212:
 3348              		.align	2
 3349              	.L211:
 3350 003c 00000000 		.word	.LANCHOR1
 3351              		.cfi_endproc
 3352              	.LFE28:
 3354              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3355              		.align	1
 3356              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3357              		.syntax unified
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 97


 3358              		.thumb
 3359              		.thumb_func
 3361              	SEGGER_RTT_SetFlagsUpBuffer:
 3362              	.LVL329:
 3363              	.LFB29:
1817:Core/Src/SEGGER_RTT.c **** 
1818:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1819:Core/Src/SEGGER_RTT.c **** *
1820:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1821:Core/Src/SEGGER_RTT.c **** *
1822:Core/Src/SEGGER_RTT.c **** *  Function description
1823:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1824:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1825:Core/Src/SEGGER_RTT.c **** *
1826:Core/Src/SEGGER_RTT.c **** *  Parameters
1827:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1828:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1829:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1830:Core/Src/SEGGER_RTT.c **** *
1831:Core/Src/SEGGER_RTT.c **** *  Return value
1832:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1833:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1834:Core/Src/SEGGER_RTT.c **** */
1835:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3364              		.loc 1 1835 71 is_stmt 1 view -0
 3365              		.cfi_startproc
 3366              		@ args = 0, pretend = 0, frame = 0
 3367              		@ frame_needed = 0, uses_anonymous_args = 0
 3368              		.loc 1 1835 71 is_stmt 0 view .LVU1006
 3369 0000 38B5     		push	{r3, r4, r5, lr}
 3370              		.cfi_def_cfa_offset 16
 3371              		.cfi_offset 3, -16
 3372              		.cfi_offset 4, -12
 3373              		.cfi_offset 5, -8
 3374              		.cfi_offset 14, -4
 3375 0002 0446     		mov	r4, r0
 3376 0004 0D46     		mov	r5, r1
1836:Core/Src/SEGGER_RTT.c ****   int r;
 3377              		.loc 1 1836 3 is_stmt 1 view .LVU1007
1837:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3378              		.loc 1 1837 3 view .LVU1008
1838:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3379              		.loc 1 1838 3 view .LVU1009
 3380              	.LBB44:
1839:Core/Src/SEGGER_RTT.c **** 
1840:Core/Src/SEGGER_RTT.c ****   INIT();
 3381              		.loc 1 1840 3 view .LVU1010
 3382              		.loc 1 1840 3 view .LVU1011
 3383              	.LVL330:
 3384              		.loc 1 1840 3 view .LVU1012
 3385              		.loc 1 1840 3 view .LVU1013
 3386 0006 0D4B     		ldr	r3, .L219
 3387 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3388 000a 8BB1     		cbz	r3, .L218
 3389              	.LVL331:
 3390              	.L214:
 3391              		.loc 1 1840 3 discriminator 3 view .LVU1014
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 98


 3392              	.LBE44:
 3393              		.loc 1 1840 9 discriminator 3 view .LVU1015
1841:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3394              		.loc 1 1841 3 discriminator 3 view .LVU1016
1842:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3395              		.loc 1 1842 3 discriminator 3 view .LVU1017
 3396              		.loc 1 1842 6 is_stmt 0 discriminator 3 view .LVU1018
 3397 000c 022C     		cmp	r4, #2
 3398 000e 12D8     		bhi	.L216
 3399              	.LBB45:
1843:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3400              		.loc 1 1843 5 is_stmt 1 view .LVU1019
 3401              		.loc 1 1843 5 view .LVU1020
 3402              		.syntax unified
 3403              	@ 1843 "Core/Src/SEGGER_RTT.c" 1
 3404 0010 EFF31182 		mrs   r2, basepri  
 3405 0014 4FF02001 		mov   r1, #32       
 3406 0018 81F31188 		msr   basepri, r1  
 3407              		
 3408              	@ 0 "" 2
 3409              	.LVL332:
 3410              		.loc 1 1843 22 view .LVU1021
1844:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3411              		.loc 1 1844 5 view .LVU1022
1845:Core/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3412              		.loc 1 1845 5 view .LVU1023
 3413              		.loc 1 1845 16 is_stmt 0 view .LVU1024
 3414              		.thumb
 3415              		.syntax unified
 3416 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3417              	.LVL333:
 3418              		.loc 1 1845 16 view .LVU1025
 3419 0020 064B     		ldr	r3, .L219
 3420 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3421 0026 DD62     		str	r5, [r3, #44]
1846:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3422              		.loc 1 1846 5 is_stmt 1 view .LVU1026
 3423              		.syntax unified
 3424              	@ 1846 "Core/Src/SEGGER_RTT.c" 1
 3425 0028 82F31188 		msr   basepri, r2  
 3426              		
 3427              	@ 0 "" 2
 3428              		.thumb
 3429              		.syntax unified
 3430              	.LBE45:
 3431              		.loc 1 1846 24 view .LVU1027
1847:Core/Src/SEGGER_RTT.c ****     r =  0;
 3432              		.loc 1 1847 5 view .LVU1028
 3433              	.LVL334:
 3434              		.loc 1 1847 7 is_stmt 0 view .LVU1029
 3435 002c 0020     		movs	r0, #0
 3436              	.LVL335:
 3437              	.L213:
1848:Core/Src/SEGGER_RTT.c ****   } else {
1849:Core/Src/SEGGER_RTT.c ****     r = -1;
1850:Core/Src/SEGGER_RTT.c ****   }
1851:Core/Src/SEGGER_RTT.c ****   return r;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 99


1852:Core/Src/SEGGER_RTT.c **** }
 3438              		.loc 1 1852 1 view .LVU1030
 3439 002e 38BD     		pop	{r3, r4, r5, pc}
 3440              	.LVL336:
 3441              	.L218:
 3442              	.LBB46:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3443              		.loc 1 1840 3 is_stmt 1 discriminator 1 view .LVU1031
 3444 0030 FFF7FEFF 		bl	_DoInit
 3445              	.LVL337:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3446              		.loc 1 1840 3 is_stmt 0 discriminator 1 view .LVU1032
 3447 0034 EAE7     		b	.L214
 3448              	.LVL338:
 3449              	.L216:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3450              		.loc 1 1840 3 discriminator 1 view .LVU1033
 3451              	.LBE46:
1849:Core/Src/SEGGER_RTT.c ****   }
 3452              		.loc 1 1849 7 view .LVU1034
 3453 0036 4FF0FF30 		mov	r0, #-1
 3454              	.LVL339:
1851:Core/Src/SEGGER_RTT.c **** }
 3455              		.loc 1 1851 3 is_stmt 1 view .LVU1035
1851:Core/Src/SEGGER_RTT.c **** }
 3456              		.loc 1 1851 10 is_stmt 0 view .LVU1036
 3457 003a F8E7     		b	.L213
 3458              	.L220:
 3459              		.align	2
 3460              	.L219:
 3461 003c 00000000 		.word	.LANCHOR1
 3462              		.cfi_endproc
 3463              	.LFE29:
 3465              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3466              		.align	1
 3467              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3468              		.syntax unified
 3469              		.thumb
 3470              		.thumb_func
 3472              	SEGGER_RTT_SetFlagsDownBuffer:
 3473              	.LVL340:
 3474              	.LFB30:
1853:Core/Src/SEGGER_RTT.c **** 
1854:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1855:Core/Src/SEGGER_RTT.c **** *
1856:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1857:Core/Src/SEGGER_RTT.c **** *
1858:Core/Src/SEGGER_RTT.c **** *  Function description
1859:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1860:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1861:Core/Src/SEGGER_RTT.c **** *
1862:Core/Src/SEGGER_RTT.c **** *  Parameters
1863:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1864:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1865:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1866:Core/Src/SEGGER_RTT.c **** *
1867:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 100


1868:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1869:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1870:Core/Src/SEGGER_RTT.c **** */
1871:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3475              		.loc 1 1871 73 is_stmt 1 view -0
 3476              		.cfi_startproc
 3477              		@ args = 0, pretend = 0, frame = 0
 3478              		@ frame_needed = 0, uses_anonymous_args = 0
 3479              		.loc 1 1871 73 is_stmt 0 view .LVU1038
 3480 0000 38B5     		push	{r3, r4, r5, lr}
 3481              		.cfi_def_cfa_offset 16
 3482              		.cfi_offset 3, -16
 3483              		.cfi_offset 4, -12
 3484              		.cfi_offset 5, -8
 3485              		.cfi_offset 14, -4
 3486 0002 0446     		mov	r4, r0
 3487 0004 0D46     		mov	r5, r1
1872:Core/Src/SEGGER_RTT.c ****   int r;
 3488              		.loc 1 1872 3 is_stmt 1 view .LVU1039
1873:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3489              		.loc 1 1873 3 view .LVU1040
1874:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3490              		.loc 1 1874 3 view .LVU1041
 3491              	.LBB47:
1875:Core/Src/SEGGER_RTT.c **** 
1876:Core/Src/SEGGER_RTT.c ****   INIT();
 3492              		.loc 1 1876 3 view .LVU1042
 3493              		.loc 1 1876 3 view .LVU1043
 3494              	.LVL341:
 3495              		.loc 1 1876 3 view .LVU1044
 3496              		.loc 1 1876 3 view .LVU1045
 3497 0006 0D4B     		ldr	r3, .L227
 3498 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3499 000a 8BB1     		cbz	r3, .L226
 3500              	.LVL342:
 3501              	.L222:
 3502              		.loc 1 1876 3 discriminator 3 view .LVU1046
 3503              	.LBE47:
 3504              		.loc 1 1876 9 discriminator 3 view .LVU1047
1877:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3505              		.loc 1 1877 3 discriminator 3 view .LVU1048
1878:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3506              		.loc 1 1878 3 discriminator 3 view .LVU1049
 3507              		.loc 1 1878 6 is_stmt 0 discriminator 3 view .LVU1050
 3508 000c 022C     		cmp	r4, #2
 3509 000e 12D8     		bhi	.L224
 3510              	.LBB48:
1879:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3511              		.loc 1 1879 5 is_stmt 1 view .LVU1051
 3512              		.loc 1 1879 5 view .LVU1052
 3513              		.syntax unified
 3514              	@ 1879 "Core/Src/SEGGER_RTT.c" 1
 3515 0010 EFF31182 		mrs   r2, basepri  
 3516 0014 4FF02001 		mov   r1, #32       
 3517 0018 81F31188 		msr   basepri, r1  
 3518              		
 3519              	@ 0 "" 2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 101


 3520              	.LVL343:
 3521              		.loc 1 1879 22 view .LVU1053
1880:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3522              		.loc 1 1880 5 view .LVU1054
1881:Core/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3523              		.loc 1 1881 5 view .LVU1055
 3524              		.loc 1 1881 18 is_stmt 0 view .LVU1056
 3525              		.thumb
 3526              		.syntax unified
 3527 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3528              	.LVL344:
 3529              		.loc 1 1881 18 view .LVU1057
 3530 0020 064B     		ldr	r3, .L227
 3531 0022 03EBC403 		add	r3, r3, r4, lsl #3
 3532 0026 5D67     		str	r5, [r3, #116]
1882:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3533              		.loc 1 1882 5 is_stmt 1 view .LVU1058
 3534              		.syntax unified
 3535              	@ 1882 "Core/Src/SEGGER_RTT.c" 1
 3536 0028 82F31188 		msr   basepri, r2  
 3537              		
 3538              	@ 0 "" 2
 3539              		.thumb
 3540              		.syntax unified
 3541              	.LBE48:
 3542              		.loc 1 1882 24 view .LVU1059
1883:Core/Src/SEGGER_RTT.c ****     r =  0;
 3543              		.loc 1 1883 5 view .LVU1060
 3544              	.LVL345:
 3545              		.loc 1 1883 7 is_stmt 0 view .LVU1061
 3546 002c 0020     		movs	r0, #0
 3547              	.LVL346:
 3548              	.L221:
1884:Core/Src/SEGGER_RTT.c ****   } else {
1885:Core/Src/SEGGER_RTT.c ****     r = -1;
1886:Core/Src/SEGGER_RTT.c ****   }
1887:Core/Src/SEGGER_RTT.c ****   return r;
1888:Core/Src/SEGGER_RTT.c **** }
 3549              		.loc 1 1888 1 view .LVU1062
 3550 002e 38BD     		pop	{r3, r4, r5, pc}
 3551              	.LVL347:
 3552              	.L226:
 3553              	.LBB49:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3554              		.loc 1 1876 3 is_stmt 1 discriminator 1 view .LVU1063
 3555 0030 FFF7FEFF 		bl	_DoInit
 3556              	.LVL348:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3557              		.loc 1 1876 3 is_stmt 0 discriminator 1 view .LVU1064
 3558 0034 EAE7     		b	.L222
 3559              	.LVL349:
 3560              	.L224:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3561              		.loc 1 1876 3 discriminator 1 view .LVU1065
 3562              	.LBE49:
1885:Core/Src/SEGGER_RTT.c ****   }
 3563              		.loc 1 1885 7 view .LVU1066
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 102


 3564 0036 4FF0FF30 		mov	r0, #-1
 3565              	.LVL350:
1887:Core/Src/SEGGER_RTT.c **** }
 3566              		.loc 1 1887 3 is_stmt 1 view .LVU1067
1887:Core/Src/SEGGER_RTT.c **** }
 3567              		.loc 1 1887 10 is_stmt 0 view .LVU1068
 3568 003a F8E7     		b	.L221
 3569              	.L228:
 3570              		.align	2
 3571              	.L227:
 3572 003c 00000000 		.word	.LANCHOR1
 3573              		.cfi_endproc
 3574              	.LFE30:
 3576              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3577              		.align	1
 3578              		.global	SEGGER_RTT_Init
 3579              		.syntax unified
 3580              		.thumb
 3581              		.thumb_func
 3583              	SEGGER_RTT_Init:
 3584              	.LFB31:
1889:Core/Src/SEGGER_RTT.c **** 
1890:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1891:Core/Src/SEGGER_RTT.c **** *
1892:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1893:Core/Src/SEGGER_RTT.c **** *
1894:Core/Src/SEGGER_RTT.c **** *  Function description
1895:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1896:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1897:Core/Src/SEGGER_RTT.c **** *
1898:Core/Src/SEGGER_RTT.c **** */
1899:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3585              		.loc 1 1899 29 is_stmt 1 view -0
 3586              		.cfi_startproc
 3587              		@ args = 0, pretend = 0, frame = 0
 3588              		@ frame_needed = 0, uses_anonymous_args = 0
 3589 0000 08B5     		push	{r3, lr}
 3590              		.cfi_def_cfa_offset 8
 3591              		.cfi_offset 3, -8
 3592              		.cfi_offset 14, -4
1900:Core/Src/SEGGER_RTT.c ****   _DoInit();
 3593              		.loc 1 1900 3 view .LVU1070
 3594 0002 FFF7FEFF 		bl	_DoInit
 3595              	.LVL351:
1901:Core/Src/SEGGER_RTT.c **** }
 3596              		.loc 1 1901 1 is_stmt 0 view .LVU1071
 3597 0006 08BD     		pop	{r3, pc}
 3598              		.cfi_endproc
 3599              	.LFE31:
 3601              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3602              		.align	1
 3603              		.global	SEGGER_RTT_SetTerminal
 3604              		.syntax unified
 3605              		.thumb
 3606              		.thumb_func
 3608              	SEGGER_RTT_SetTerminal:
 3609              	.LVL352:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 103


 3610              	.LFB32:
1902:Core/Src/SEGGER_RTT.c **** 
1903:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1904:Core/Src/SEGGER_RTT.c **** *
1905:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1906:Core/Src/SEGGER_RTT.c **** *
1907:Core/Src/SEGGER_RTT.c **** *  Function description
1908:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1909:Core/Src/SEGGER_RTT.c **** *
1910:Core/Src/SEGGER_RTT.c **** *  Parameters
1911:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1912:Core/Src/SEGGER_RTT.c **** *
1913:Core/Src/SEGGER_RTT.c **** *  Return value
1914:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1915:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1916:Core/Src/SEGGER_RTT.c **** *
1917:Core/Src/SEGGER_RTT.c **** *  Notes
1918:Core/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1919:Core/Src/SEGGER_RTT.c **** */
1920:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3611              		.loc 1 1920 55 is_stmt 1 view -0
 3612              		.cfi_startproc
 3613              		@ args = 0, pretend = 0, frame = 8
 3614              		@ frame_needed = 0, uses_anonymous_args = 0
 3615              		.loc 1 1920 55 is_stmt 0 view .LVU1073
 3616 0000 30B5     		push	{r4, r5, lr}
 3617              		.cfi_def_cfa_offset 12
 3618              		.cfi_offset 4, -12
 3619              		.cfi_offset 5, -8
 3620              		.cfi_offset 14, -4
 3621 0002 83B0     		sub	sp, sp, #12
 3622              		.cfi_def_cfa_offset 24
 3623 0004 0446     		mov	r4, r0
1921:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3624              		.loc 1 1921 3 is_stmt 1 view .LVU1074
1922:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3625              		.loc 1 1922 3 view .LVU1075
1923:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
 3626              		.loc 1 1923 3 view .LVU1076
1924:Core/Src/SEGGER_RTT.c ****   int r;
 3627              		.loc 1 1924 3 view .LVU1077
 3628              	.LBB50:
1925:Core/Src/SEGGER_RTT.c **** 
1926:Core/Src/SEGGER_RTT.c ****   INIT();
 3629              		.loc 1 1926 3 view .LVU1078
 3630              		.loc 1 1926 3 view .LVU1079
 3631              	.LVL353:
 3632              		.loc 1 1926 3 view .LVU1080
 3633              		.loc 1 1926 3 view .LVU1081
 3634 0006 1D4B     		ldr	r3, .L242
 3635 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3636 000a FBB1     		cbz	r3, .L239
 3637              	.LVL354:
 3638              	.L232:
 3639              		.loc 1 1926 3 discriminator 3 view .LVU1082
 3640              	.LBE50:
 3641              		.loc 1 1926 9 discriminator 3 view .LVU1083
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 104


1927:Core/Src/SEGGER_RTT.c ****   r = 0;
 3642              		.loc 1 1927 3 discriminator 3 view .LVU1084
1928:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3643              		.loc 1 1928 3 discriminator 3 view .LVU1085
 3644              		.loc 1 1928 9 is_stmt 0 discriminator 3 view .LVU1086
 3645 000c FF23     		movs	r3, #255
 3646 000e 8DF80430 		strb	r3, [sp, #4]
1929:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3647              		.loc 1 1929 3 is_stmt 1 discriminator 3 view .LVU1087
 3648              		.loc 1 1929 6 is_stmt 0 discriminator 3 view .LVU1088
 3649 0012 0F2C     		cmp	r4, #15
 3650 0014 2FD8     		bhi	.L236
1930:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3651              		.loc 1 1930 5 is_stmt 1 view .LVU1089
 3652              		.loc 1 1930 25 is_stmt 0 view .LVU1090
 3653 0016 1A4B     		ldr	r3, .L242+4
 3654 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3655              		.loc 1 1930 11 view .LVU1091
 3656 001a 8DF80530 		strb	r3, [sp, #5]
1931:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3657              		.loc 1 1931 5 is_stmt 1 view .LVU1092
 3658              	.LVL355:
 3659              	.LBB51:
1932:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3660              		.loc 1 1932 5 view .LVU1093
 3661              		.loc 1 1932 5 view .LVU1094
 3662              		.syntax unified
 3663              	@ 1932 "Core/Src/SEGGER_RTT.c" 1
 3664 001e EFF31185 		mrs   r5, basepri  
 3665 0022 4FF02001 		mov   r1, #32       
 3666 0026 81F31188 		msr   basepri, r1  
 3667              		
 3668              	@ 0 "" 2
 3669              	.LVL356:
 3670              		.loc 1 1932 22 view .LVU1095
1933:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3671              		.loc 1 1933 5 view .LVU1096
 3672              		.loc 1 1933 15 is_stmt 0 view .LVU1097
 3673              		.thumb
 3674              		.syntax unified
 3675 002a 144B     		ldr	r3, .L242
 3676 002c DB6A     		ldr	r3, [r3, #44]
 3677              		.loc 1 1933 23 view .LVU1098
 3678 002e 03F00303 		and	r3, r3, #3
 3679              		.loc 1 1933 8 view .LVU1099
 3680 0032 022B     		cmp	r3, #2
 3681 0034 0DD0     		beq	.L240
1934:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1935:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1936:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1937:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3682              		.loc 1 1937 7 is_stmt 1 view .LVU1100
 3683              		.loc 1 1937 15 is_stmt 0 view .LVU1101
 3684 0036 1348     		ldr	r0, .L242+8
 3685 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3686              	.LVL357:
1938:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 105


 3687              		.loc 1 1938 7 is_stmt 1 view .LVU1102
 3688              		.loc 1 1938 10 is_stmt 0 view .LVU1103
 3689 003c 0128     		cmp	r0, #1
 3690 003e 11D8     		bhi	.L241
1939:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1940:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1941:Core/Src/SEGGER_RTT.c ****       } else {
1942:Core/Src/SEGGER_RTT.c ****         r = -1;
 3691              		.loc 1 1942 11 view .LVU1104
 3692 0040 4FF0FF30 		mov	r0, #-1
 3693              	.LVL358:
 3694              	.L235:
1943:Core/Src/SEGGER_RTT.c ****       }
1944:Core/Src/SEGGER_RTT.c ****     }
1945:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3695              		.loc 1 1945 5 is_stmt 1 view .LVU1105
 3696              		.syntax unified
 3697              	@ 1945 "Core/Src/SEGGER_RTT.c" 1
 3698 0044 85F31188 		msr   basepri, r5  
 3699              		
 3700              	@ 0 "" 2
 3701              		.thumb
 3702              		.syntax unified
 3703              	.LBE51:
 3704              		.loc 1 1945 24 view .LVU1106
 3705              	.LVL359:
 3706              	.L231:
1946:Core/Src/SEGGER_RTT.c ****   } else {
1947:Core/Src/SEGGER_RTT.c ****     r = -1;
1948:Core/Src/SEGGER_RTT.c ****   }
1949:Core/Src/SEGGER_RTT.c ****   return r;
1950:Core/Src/SEGGER_RTT.c **** }
 3707              		.loc 1 1950 1 is_stmt 0 view .LVU1107
 3708 0048 03B0     		add	sp, sp, #12
 3709              		.cfi_remember_state
 3710              		.cfi_def_cfa_offset 12
 3711              		@ sp needed
 3712 004a 30BD     		pop	{r4, r5, pc}
 3713              	.LVL360:
 3714              	.L239:
 3715              		.cfi_restore_state
 3716              	.LBB52:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 3717              		.loc 1 1926 3 is_stmt 1 discriminator 1 view .LVU1108
 3718 004c FFF7FEFF 		bl	_DoInit
 3719              	.LVL361:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 3720              		.loc 1 1926 3 is_stmt 0 discriminator 1 view .LVU1109
 3721 0050 DCE7     		b	.L232
 3722              	.LVL362:
 3723              	.L240:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 3724              		.loc 1 1926 3 discriminator 1 view .LVU1110
 3725              	.LBE52:
 3726              	.LBB53:
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3727              		.loc 1 1934 7 is_stmt 1 view .LVU1111
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 106


1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3728              		.loc 1 1934 23 is_stmt 0 view .LVU1112
 3729 0052 0D4B     		ldr	r3, .L242+12
 3730 0054 1C70     		strb	r4, [r3]
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3731              		.loc 1 1935 7 is_stmt 1 view .LVU1113
 3732 0056 0222     		movs	r2, #2
 3733 0058 01A9     		add	r1, sp, #4
 3734 005a 0A48     		ldr	r0, .L242+8
 3735 005c FFF7FEFF 		bl	_WriteBlocking
 3736              	.LVL363:
 3737              	.LBE53:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3738              		.loc 1 1927 5 is_stmt 0 view .LVU1114
 3739 0060 0020     		movs	r0, #0
 3740              	.LBB54:
 3741 0062 EFE7     		b	.L235
 3742              	.LVL364:
 3743              	.L241:
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3744              		.loc 1 1939 9 is_stmt 1 view .LVU1115
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3745              		.loc 1 1939 25 is_stmt 0 view .LVU1116
 3746 0064 084B     		ldr	r3, .L242+12
 3747 0066 1C70     		strb	r4, [r3]
1940:Core/Src/SEGGER_RTT.c ****       } else {
 3748              		.loc 1 1940 9 is_stmt 1 view .LVU1117
 3749 0068 0222     		movs	r2, #2
 3750 006a 01A9     		add	r1, sp, #4
 3751 006c 0548     		ldr	r0, .L242+8
 3752              	.LVL365:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 3753              		.loc 1 1940 9 is_stmt 0 view .LVU1118
 3754 006e FFF7FEFF 		bl	_WriteNoCheck
 3755              	.LVL366:
 3756              	.LBE54:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3757              		.loc 1 1927 5 view .LVU1119
 3758 0072 0020     		movs	r0, #0
 3759              	.LBB55:
 3760 0074 E6E7     		b	.L235
 3761              	.LVL367:
 3762              	.L236:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3763              		.loc 1 1927 5 view .LVU1120
 3764              	.LBE55:
1947:Core/Src/SEGGER_RTT.c ****   }
 3765              		.loc 1 1947 7 view .LVU1121
 3766 0076 4FF0FF30 		mov	r0, #-1
 3767              	.LVL368:
1949:Core/Src/SEGGER_RTT.c **** }
 3768              		.loc 1 1949 3 is_stmt 1 view .LVU1122
1949:Core/Src/SEGGER_RTT.c **** }
 3769              		.loc 1 1949 10 is_stmt 0 view .LVU1123
 3770 007a E5E7     		b	.L231
 3771              	.L243:
 3772              		.align	2
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 107


 3773              	.L242:
 3774 007c 00000000 		.word	.LANCHOR1
 3775 0080 00000000 		.word	.LANCHOR0
 3776 0084 18000000 		.word	.LANCHOR1+24
 3777 0088 00000000 		.word	.LANCHOR5
 3778              		.cfi_endproc
 3779              	.LFE32:
 3781              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3782              		.align	1
 3783              		.global	SEGGER_RTT_TerminalOut
 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3788              	SEGGER_RTT_TerminalOut:
 3789              	.LVL369:
 3790              	.LFB33:
1951:Core/Src/SEGGER_RTT.c **** 
1952:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1953:Core/Src/SEGGER_RTT.c **** *
1954:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1955:Core/Src/SEGGER_RTT.c **** *
1956:Core/Src/SEGGER_RTT.c **** *  Function description
1957:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1958:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1959:Core/Src/SEGGER_RTT.c **** *
1960:Core/Src/SEGGER_RTT.c **** *  Parameters
1961:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1962:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1963:Core/Src/SEGGER_RTT.c **** *
1964:Core/Src/SEGGER_RTT.c **** *  Return value
1965:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1966:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1967:Core/Src/SEGGER_RTT.c **** *
1968:Core/Src/SEGGER_RTT.c **** */
1969:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3791              		.loc 1 1969 70 is_stmt 1 view -0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 0
 3794              		@ frame_needed = 0, uses_anonymous_args = 0
 3795              		.loc 1 1969 70 is_stmt 0 view .LVU1125
 3796 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3797              		.cfi_def_cfa_offset 32
 3798              		.cfi_offset 3, -32
 3799              		.cfi_offset 4, -28
 3800              		.cfi_offset 5, -24
 3801              		.cfi_offset 6, -20
 3802              		.cfi_offset 7, -16
 3803              		.cfi_offset 8, -12
 3804              		.cfi_offset 9, -8
 3805              		.cfi_offset 14, -4
 3806 0004 0446     		mov	r4, r0
 3807 0006 0D46     		mov	r5, r1
1970:Core/Src/SEGGER_RTT.c ****   int                   Status;
 3808              		.loc 1 1970 3 is_stmt 1 view .LVU1126
1971:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
 3809              		.loc 1 1971 3 view .LVU1127
1972:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 108


 3810              		.loc 1 1972 3 view .LVU1128
1973:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3811              		.loc 1 1973 3 view .LVU1129
 3812              	.LBB56:
1974:Core/Src/SEGGER_RTT.c ****   //
1975:Core/Src/SEGGER_RTT.c ****   INIT();
 3813              		.loc 1 1975 3 view .LVU1130
 3814              		.loc 1 1975 3 view .LVU1131
 3815              	.LVL370:
 3816              		.loc 1 1975 3 view .LVU1132
 3817              		.loc 1 1975 3 view .LVU1133
 3818 0008 354B     		ldr	r3, .L259
 3819 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3820 000c 03B3     		cbz	r3, .L255
 3821              	.LVL371:
 3822              	.L245:
 3823              		.loc 1 1975 3 discriminator 3 view .LVU1134
 3824              	.LBE56:
 3825              		.loc 1 1975 9 discriminator 3 view .LVU1135
1976:Core/Src/SEGGER_RTT.c ****   //
1977:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1978:Core/Src/SEGGER_RTT.c ****   //
1979:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3826              		.loc 1 1979 3 discriminator 3 view .LVU1136
 3827              		.loc 1 1979 6 is_stmt 0 discriminator 3 view .LVU1137
 3828 000e 0F2C     		cmp	r4, #15
 3829 0010 63D8     		bhi	.L250
1980:Core/Src/SEGGER_RTT.c ****     //
1981:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1982:Core/Src/SEGGER_RTT.c ****     //
1983:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3830              		.loc 1 1983 5 is_stmt 1 view .LVU1138
 3831              	.LVL372:
1984:Core/Src/SEGGER_RTT.c ****     //
1985:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1986:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1987:Core/Src/SEGGER_RTT.c ****     //
1988:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3832              		.loc 1 1988 5 view .LVU1139
 3833              		.loc 1 1988 15 is_stmt 0 view .LVU1140
 3834 0012 2846     		mov	r0, r5
 3835 0014 FFF7FEFF 		bl	strlen
 3836              	.LVL373:
 3837 0018 8046     		mov	r8, r0
 3838              	.LVL374:
 3839              	.LBB57:
1989:Core/Src/SEGGER_RTT.c ****     //
1990:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1991:Core/Src/SEGGER_RTT.c ****     //
1992:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3840              		.loc 1 1992 5 is_stmt 1 view .LVU1141
 3841              		.loc 1 1992 5 view .LVU1142
 3842              		.syntax unified
 3843              	@ 1992 "Core/Src/SEGGER_RTT.c" 1
 3844 001a EFF31186 		mrs   r6, basepri  
 3845 001e 4FF02001 		mov   r1, #32       
 3846 0022 81F31188 		msr   basepri, r1  
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 109


 3847              		
 3848              	@ 0 "" 2
 3849              	.LVL375:
 3850              		.loc 1 1992 22 view .LVU1143
1993:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3851              		.loc 1 1993 5 view .LVU1144
 3852              		.loc 1 1993 13 is_stmt 0 view .LVU1145
 3853              		.thumb
 3854              		.syntax unified
 3855 0026 2E4F     		ldr	r7, .L259
 3856 0028 07F11800 		add	r0, r7, #24
 3857              	.LVL376:
 3858              		.loc 1 1993 13 view .LVU1146
 3859 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3860              	.LVL377:
 3861 0030 8146     		mov	r9, r0
 3862              	.LVL378:
1994:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3863              		.loc 1 1994 5 is_stmt 1 view .LVU1147
 3864              		.loc 1 1994 18 is_stmt 0 view .LVU1148
 3865 0032 FB6A     		ldr	r3, [r7, #44]
 3866              		.loc 1 1994 26 view .LVU1149
 3867 0034 03F00303 		and	r3, r3, #3
 3868              		.loc 1 1994 5 view .LVU1150
 3869 0038 012B     		cmp	r3, #1
 3870 003a 23D0     		beq	.L247
 3871 003c 022B     		cmp	r3, #2
 3872 003e 3BD0     		beq	.L248
 3873 0040 4BB1     		cbz	r3, .L256
 3874 0042 4FF0FF34 		mov	r4, #-1
 3875              	.LVL379:
 3876              	.L249:
1995:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1996:Core/Src/SEGGER_RTT.c ****       //
1997:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1998:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1999:Core/Src/SEGGER_RTT.c ****       //
2000:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
2001:Core/Src/SEGGER_RTT.c ****         Status = 0;
2002:Core/Src/SEGGER_RTT.c ****       } else {
2003:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2004:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
2005:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2006:Core/Src/SEGGER_RTT.c ****       }
2007:Core/Src/SEGGER_RTT.c ****       break;
2008:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2009:Core/Src/SEGGER_RTT.c ****       //
2010:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2011:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2012:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2013:Core/Src/SEGGER_RTT.c ****       //
2014:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
2015:Core/Src/SEGGER_RTT.c ****         Status = -1;
2016:Core/Src/SEGGER_RTT.c ****       } else {
2017:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2018:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 110


2020:Core/Src/SEGGER_RTT.c ****       }
2021:Core/Src/SEGGER_RTT.c ****       break;
2022:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2023:Core/Src/SEGGER_RTT.c ****       //
2024:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2025:Core/Src/SEGGER_RTT.c ****       //
2026:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
2027:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
2028:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2029:Core/Src/SEGGER_RTT.c ****       break;
2030:Core/Src/SEGGER_RTT.c ****     default:
2031:Core/Src/SEGGER_RTT.c ****       Status = -1;
2032:Core/Src/SEGGER_RTT.c ****       break;
2033:Core/Src/SEGGER_RTT.c ****     }
2034:Core/Src/SEGGER_RTT.c ****     //
2035:Core/Src/SEGGER_RTT.c ****     // Finish up.
2036:Core/Src/SEGGER_RTT.c ****     //
2037:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3877              		.loc 1 2037 5 is_stmt 1 view .LVU1151
 3878              		.syntax unified
 3879              	@ 2037 "Core/Src/SEGGER_RTT.c" 1
 3880 0046 86F31188 		msr   basepri, r6  
 3881              		
 3882              	@ 0 "" 2
 3883              		.thumb
 3884              		.syntax unified
 3885              	.LBE57:
 3886              		.loc 1 2037 24 view .LVU1152
 3887              	.LVL380:
 3888              	.L244:
2038:Core/Src/SEGGER_RTT.c ****   } else {
2039:Core/Src/SEGGER_RTT.c ****     Status = -1;
2040:Core/Src/SEGGER_RTT.c ****   }
2041:Core/Src/SEGGER_RTT.c ****   return Status;
2042:Core/Src/SEGGER_RTT.c **** }
 3889              		.loc 1 2042 1 is_stmt 0 view .LVU1153
 3890 004a 2046     		mov	r0, r4
 3891 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3892              	.LVL381:
 3893              	.L255:
 3894              	.LBB58:
1975:Core/Src/SEGGER_RTT.c ****   //
 3895              		.loc 1 1975 3 is_stmt 1 discriminator 1 view .LVU1154
 3896 0050 FFF7FEFF 		bl	_DoInit
 3897              	.LVL382:
1975:Core/Src/SEGGER_RTT.c ****   //
 3898              		.loc 1 1975 3 is_stmt 0 discriminator 1 view .LVU1155
 3899 0054 DBE7     		b	.L245
 3900              	.LVL383:
 3901              	.L256:
1975:Core/Src/SEGGER_RTT.c ****   //
 3902              		.loc 1 1975 3 discriminator 1 view .LVU1156
 3903              	.LBE58:
 3904              	.LBB59:
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
 3905              		.loc 1 2000 7 is_stmt 1 view .LVU1157
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 111


 3906              		.loc 1 2000 28 is_stmt 0 view .LVU1158
 3907 0056 08F10403 		add	r3, r8, #4
2000:Core/Src/SEGGER_RTT.c ****         Status = 0;
 3908              		.loc 1 2000 10 view .LVU1159
 3909 005a 8342     		cmp	r3, r0
 3910 005c 01D9     		bls	.L257
2001:Core/Src/SEGGER_RTT.c ****       } else {
 3911              		.loc 1 2001 16 view .LVU1160
 3912 005e 0024     		movs	r4, #0
 3913 0060 F1E7     		b	.L249
 3914              	.L257:
2003:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3915              		.loc 1 2003 9 is_stmt 1 view .LVU1161
 3916 0062 1837     		adds	r7, r7, #24
 3917 0064 2146     		mov	r1, r4
 3918 0066 3846     		mov	r0, r7
 3919              	.LVL384:
2003:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3920              		.loc 1 2003 9 is_stmt 0 view .LVU1162
 3921 0068 FFF7FEFF 		bl	_PostTerminalSwitch
 3922              	.LVL385:
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3923              		.loc 1 2004 9 is_stmt 1 view .LVU1163
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3924              		.loc 1 2004 23 is_stmt 0 view .LVU1164
 3925 006c 4246     		mov	r2, r8
 3926 006e 2946     		mov	r1, r5
 3927 0070 3846     		mov	r0, r7
 3928 0072 FFF7FEFF 		bl	_WriteBlocking
 3929              	.LVL386:
 3930 0076 0446     		mov	r4, r0
 3931              	.LVL387:
2005:Core/Src/SEGGER_RTT.c ****       }
 3932              		.loc 1 2005 9 is_stmt 1 view .LVU1165
 3933 0078 1A4B     		ldr	r3, .L259+4
 3934 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3935 007c 3846     		mov	r0, r7
 3936              	.LVL388:
2005:Core/Src/SEGGER_RTT.c ****       }
 3937              		.loc 1 2005 9 is_stmt 0 view .LVU1166
 3938 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3939              	.LVL389:
 3940 0082 E0E7     		b	.L249
 3941              	.LVL390:
 3942              	.L247:
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 3943              		.loc 1 2014 7 is_stmt 1 view .LVU1167
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 3944              		.loc 1 2014 10 is_stmt 0 view .LVU1168
 3945 0084 0328     		cmp	r0, #3
 3946 0086 02D8     		bhi	.L258
2015:Core/Src/SEGGER_RTT.c ****       } else {
 3947              		.loc 1 2015 16 view .LVU1169
 3948 0088 4FF0FF34 		mov	r4, #-1
 3949 008c DBE7     		b	.L249
 3950              	.L258:
2017:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 112


 3951              		.loc 1 2017 9 is_stmt 1 view .LVU1170
 3952 008e 164F     		ldr	r7, .L259+8
 3953 0090 2146     		mov	r1, r4
 3954 0092 3846     		mov	r0, r7
 3955              	.LVL391:
2017:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3956              		.loc 1 2017 9 is_stmt 0 view .LVU1171
 3957 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3958              	.LVL392:
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3959              		.loc 1 2018 9 is_stmt 1 view .LVU1172
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3960              		.loc 1 2018 66 is_stmt 0 view .LVU1173
 3961 0098 A9F10402 		sub	r2, r9, #4
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3962              		.loc 1 2018 23 view .LVU1174
 3963 009c 4245     		cmp	r2, r8
 3964 009e 28BF     		it	cs
 3965 00a0 4246     		movcs	r2, r8
 3966 00a2 2946     		mov	r1, r5
 3967 00a4 3846     		mov	r0, r7
 3968 00a6 FFF7FEFF 		bl	_WriteBlocking
 3969              	.LVL393:
 3970 00aa 0446     		mov	r4, r0
 3971              	.LVL394:
2019:Core/Src/SEGGER_RTT.c ****       }
 3972              		.loc 1 2019 9 is_stmt 1 view .LVU1175
 3973 00ac 0D4B     		ldr	r3, .L259+4
 3974 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3975 00b0 3846     		mov	r0, r7
 3976              	.LVL395:
2019:Core/Src/SEGGER_RTT.c ****       }
 3977              		.loc 1 2019 9 is_stmt 0 view .LVU1176
 3978 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3979              	.LVL396:
 3980 00b6 C6E7     		b	.L249
 3981              	.LVL397:
 3982              	.L248:
2026:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3983              		.loc 1 2026 7 is_stmt 1 view .LVU1177
 3984 00b8 0B4F     		ldr	r7, .L259+8
 3985 00ba 2146     		mov	r1, r4
 3986 00bc 3846     		mov	r0, r7
 3987              	.LVL398:
2026:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3988              		.loc 1 2026 7 is_stmt 0 view .LVU1178
 3989 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3990              	.LVL399:
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3991              		.loc 1 2027 7 is_stmt 1 view .LVU1179
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3992              		.loc 1 2027 21 is_stmt 0 view .LVU1180
 3993 00c2 4246     		mov	r2, r8
 3994 00c4 2946     		mov	r1, r5
 3995 00c6 3846     		mov	r0, r7
 3996 00c8 FFF7FEFF 		bl	_WriteBlocking
 3997              	.LVL400:
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 113


 3998 00cc 0446     		mov	r4, r0
 3999              	.LVL401:
2028:Core/Src/SEGGER_RTT.c ****       break;
 4000              		.loc 1 2028 7 is_stmt 1 view .LVU1181
 4001 00ce 054B     		ldr	r3, .L259+4
 4002 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4003 00d2 3846     		mov	r0, r7
 4004              	.LVL402:
2028:Core/Src/SEGGER_RTT.c ****       break;
 4005              		.loc 1 2028 7 is_stmt 0 view .LVU1182
 4006 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
 4007              	.LVL403:
2029:Core/Src/SEGGER_RTT.c ****     default:
 4008              		.loc 1 2029 7 is_stmt 1 view .LVU1183
 4009 00d8 B5E7     		b	.L249
 4010              	.LVL404:
 4011              	.L250:
2029:Core/Src/SEGGER_RTT.c ****     default:
 4012              		.loc 1 2029 7 is_stmt 0 view .LVU1184
 4013              	.LBE59:
2039:Core/Src/SEGGER_RTT.c ****   }
 4014              		.loc 1 2039 12 view .LVU1185
 4015 00da 4FF0FF34 		mov	r4, #-1
 4016              	.LVL405:
2041:Core/Src/SEGGER_RTT.c **** }
 4017              		.loc 1 2041 3 is_stmt 1 view .LVU1186
2041:Core/Src/SEGGER_RTT.c **** }
 4018              		.loc 1 2041 10 is_stmt 0 view .LVU1187
 4019 00de B4E7     		b	.L244
 4020              	.L260:
 4021              		.align	2
 4022              	.L259:
 4023 00e0 00000000 		.word	.LANCHOR1
 4024 00e4 00000000 		.word	.LANCHOR5
 4025 00e8 18000000 		.word	.LANCHOR1+24
 4026              		.cfi_endproc
 4027              	.LFE33:
 4029              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4030              		.align	1
 4031              		.global	SEGGER_RTT_GetAvailWriteSpace
 4032              		.syntax unified
 4033              		.thumb
 4034              		.thumb_func
 4036              	SEGGER_RTT_GetAvailWriteSpace:
 4037              	.LVL406:
 4038              	.LFB34:
2043:Core/Src/SEGGER_RTT.c **** 
2044:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2045:Core/Src/SEGGER_RTT.c **** *
2046:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2047:Core/Src/SEGGER_RTT.c **** *
2048:Core/Src/SEGGER_RTT.c **** *  Function description
2049:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2050:Core/Src/SEGGER_RTT.c **** *
2051:Core/Src/SEGGER_RTT.c **** *  Parameters
2052:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2053:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 114


2054:Core/Src/SEGGER_RTT.c **** *  Return value
2055:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2056:Core/Src/SEGGER_RTT.c **** */
2057:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4039              		.loc 1 2057 63 is_stmt 1 view -0
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 0
 4042              		@ frame_needed = 0, uses_anonymous_args = 0
 4043              		.loc 1 2057 63 is_stmt 0 view .LVU1189
 4044 0000 08B5     		push	{r3, lr}
 4045              		.cfi_def_cfa_offset 8
 4046              		.cfi_offset 3, -8
 4047              		.cfi_offset 14, -4
2058:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4048              		.loc 1 2058 3 is_stmt 1 view .LVU1190
2059:Core/Src/SEGGER_RTT.c **** 
2060:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4049              		.loc 1 2060 3 view .LVU1191
 4050              		.loc 1 2060 9 is_stmt 0 view .LVU1192
 4051 0002 0130     		adds	r0, r0, #1
 4052              	.LVL407:
 4053              		.loc 1 2060 9 view .LVU1193
 4054 0004 00EB4000 		add	r0, r0, r0, lsl #1
 4055              	.LVL408:
2061:Core/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4056              		.loc 1 2061 3 is_stmt 1 view .LVU1194
 4057              		.loc 1 2061 10 is_stmt 0 view .LVU1195
 4058 0008 024B     		ldr	r3, .L263
 4059 000a 03EBC000 		add	r0, r3, r0, lsl #3
 4060              	.LVL409:
 4061              		.loc 1 2061 10 view .LVU1196
 4062 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 4063              	.LVL410:
2062:Core/Src/SEGGER_RTT.c **** }
 4064              		.loc 1 2062 1 view .LVU1197
 4065 0012 08BD     		pop	{r3, pc}
 4066              	.L264:
 4067              		.align	2
 4068              	.L263:
 4069 0014 00000000 		.word	.LANCHOR1
 4070              		.cfi_endproc
 4071              	.LFE34:
 4073              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4074              		.align	1
 4075              		.global	SEGGER_RTT_GetBytesInBuffer
 4076              		.syntax unified
 4077              		.thumb
 4078              		.thumb_func
 4080              	SEGGER_RTT_GetBytesInBuffer:
 4081              	.LVL411:
 4082              	.LFB35:
2063:Core/Src/SEGGER_RTT.c **** 
2064:Core/Src/SEGGER_RTT.c **** 
2065:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2066:Core/Src/SEGGER_RTT.c **** *
2067:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2068:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 115


2069:Core/Src/SEGGER_RTT.c **** *  Function description
2070:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2071:Core/Src/SEGGER_RTT.c **** *
2072:Core/Src/SEGGER_RTT.c **** *  Parameters
2073:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2074:Core/Src/SEGGER_RTT.c **** *
2075:Core/Src/SEGGER_RTT.c **** *  Return value
2076:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2077:Core/Src/SEGGER_RTT.c **** */
2078:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4083              		.loc 1 2078 60 is_stmt 1 view -0
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 0
 4086              		@ frame_needed = 0, uses_anonymous_args = 0
 4087              		@ link register save eliminated.
2079:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4088              		.loc 1 2079 3 view .LVU1199
2080:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4089              		.loc 1 2080 3 view .LVU1200
2081:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4090              		.loc 1 2081 3 view .LVU1201
2082:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4091              		.loc 1 2082 3 view .LVU1202
2083:Core/Src/SEGGER_RTT.c ****   //
2084:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2085:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2086:Core/Src/SEGGER_RTT.c ****   //
2087:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4092              		.loc 1 2087 3 view .LVU1203
2088:Core/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4093              		.loc 1 2088 3 view .LVU1204
 4094              		.loc 1 2088 9 is_stmt 0 view .LVU1205
 4095 0000 00EB4002 		add	r2, r0, r0, lsl #1
 4096 0004 084B     		ldr	r3, .L268
 4097 0006 03EBC203 		add	r3, r3, r2, lsl #3
 4098 000a 9A6A     		ldr	r2, [r3, #40]
 4099              	.LVL412:
2089:Core/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4100              		.loc 1 2089 3 is_stmt 1 view .LVU1206
 4101              		.loc 1 2089 9 is_stmt 0 view .LVU1207
 4102 000c 5B6A     		ldr	r3, [r3, #36]
 4103              	.LVL413:
2090:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4104              		.loc 1 2090 3 is_stmt 1 view .LVU1208
 4105              		.loc 1 2090 6 is_stmt 0 view .LVU1209
 4106 000e 9A42     		cmp	r2, r3
 4107 0010 01D8     		bhi	.L266
2091:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4108              		.loc 1 2091 5 is_stmt 1 view .LVU1210
 4109              		.loc 1 2091 7 is_stmt 0 view .LVU1211
 4110 0012 981A     		subs	r0, r3, r2
 4111              	.LVL414:
 4112              		.loc 1 2091 7 view .LVU1212
 4113 0014 7047     		bx	lr
 4114              	.LVL415:
 4115              	.L266:
2092:Core/Src/SEGGER_RTT.c ****   } else {
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 116


2093:Core/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4116              		.loc 1 2093 5 is_stmt 1 view .LVU1213
 4117              		.loc 1 2093 33 is_stmt 0 view .LVU1214
 4118 0016 00EB4000 		add	r0, r0, r0, lsl #1
 4119              	.LVL416:
 4120              		.loc 1 2093 33 view .LVU1215
 4121 001a 0349     		ldr	r1, .L268
 4122 001c 01EBC001 		add	r1, r1, r0, lsl #3
 4123 0020 086A     		ldr	r0, [r1, #32]
 4124              		.loc 1 2093 47 view .LVU1216
 4125 0022 D21A     		subs	r2, r2, r3
 4126              	.LVL417:
 4127              		.loc 1 2093 7 view .LVU1217
 4128 0024 1044     		add	r0, r0, r2
 4129              	.LVL418:
2094:Core/Src/SEGGER_RTT.c ****   }
2095:Core/Src/SEGGER_RTT.c ****   return r;
 4130              		.loc 1 2095 3 is_stmt 1 view .LVU1218
2096:Core/Src/SEGGER_RTT.c **** }
 4131              		.loc 1 2096 1 is_stmt 0 view .LVU1219
 4132 0026 7047     		bx	lr
 4133              	.L269:
 4134              		.align	2
 4135              	.L268:
 4136 0028 00000000 		.word	.LANCHOR1
 4137              		.cfi_endproc
 4138              	.LFE35:
 4140              		.global	_SEGGER_RTT
 4141              		.section	.bss._ActiveTerminal,"aw",%nobits
 4142              		.set	.LANCHOR5,. + 0
 4145              	_ActiveTerminal:
 4146 0000 00       		.space	1
 4147              		.section	.bss._SEGGER_RTT,"aw",%nobits
 4148              		.align	2
 4149              		.set	.LANCHOR1,. + 0
 4152              	_SEGGER_RTT:
 4153 0000 00000000 		.space	168
 4153      00000000 
 4153      00000000 
 4153      00000000 
 4153      00000000 
 4154              		.section	.bss._acDownBuffer,"aw",%nobits
 4155              		.align	2
 4156              		.set	.LANCHOR3,. + 0
 4159              	_acDownBuffer:
 4160 0000 00000000 		.space	16
 4160      00000000 
 4160      00000000 
 4160      00000000 
 4161              		.section	.bss._acUpBuffer,"aw",%nobits
 4162              		.align	2
 4163              		.set	.LANCHOR2,. + 0
 4166              	_acUpBuffer:
 4167 0000 00000000 		.space	1024
 4167      00000000 
 4167      00000000 
 4167      00000000 
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 117


 4167      00000000 
 4168              		.section	.rodata._aInitStr.0,"a"
 4169              		.align	2
 4170              		.set	.LANCHOR4,. + 0
 4173              	_aInitStr.0:
 4174 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4174      00005454 
 4174      52205245 
 4174      47474553 
 4174      00
 4175              		.section	.rodata._aTerminalId,"a"
 4176              		.align	2
 4177              		.set	.LANCHOR0,. + 0
 4180              	_aTerminalId:
 4181 0000 30313233 		.ascii	"0123456789ABCDEF"
 4181      34353637 
 4181      38394142 
 4181      43444546 
 4182              		.text
 4183              	.Letext0:
 4184              		.file 2 "Core/Inc/SEGGER_RTT.h"
 4185              		.file 3 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 4186              		.file 4 "/Users/johannes/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 4187              		.file 5 "<built-in>"
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 118


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:20     .text._GetAvailWriteSpace:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:25     .text._GetAvailWriteSpace:0000000000000000 _GetAvailWriteSpace
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:79     .text._WriteNoCheck:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:84     .text._WriteNoCheck:0000000000000000 _WriteNoCheck
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:199    .text._WriteBlocking:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:204    .text._WriteBlocking:0000000000000000 _WriteBlocking
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:356    .text._PostTerminalSwitch:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:361    .text._PostTerminalSwitch:0000000000000000 _PostTerminalSwitch
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:400    .text._PostTerminalSwitch:0000000000000020 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:405    .rodata._DoInit.str1.4:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:409    .text._DoInit:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:414    .text._DoInit:0000000000000000 _DoInit
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:530    .text._DoInit:0000000000000058 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:539    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:545    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:738    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000000000a4 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:743    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:749    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:939    .text.SEGGER_RTT_ReadNoLock:000000000000009c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:944    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:950    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 SEGGER_RTT_ReadUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1001   .text.SEGGER_RTT_Read:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1007   .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1058   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1064   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1314   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000110 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1319   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1325   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1438   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000060 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1443   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1449   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1563   .text.SEGGER_RTT_WriteNoLock:0000000000000068 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1568   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1574   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 SEGGER_RTT_WriteDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1653   .text.SEGGER_RTT_WriteDownBuffer:0000000000000030 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1659   .text.SEGGER_RTT_Write:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1665   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1744   .text.SEGGER_RTT_Write:0000000000000030 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1750   .text.SEGGER_RTT_WriteString:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1756   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1798   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1804   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1905   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000050 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1910   .text.SEGGER_RTT_PutCharSkip:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:1916   .text.SEGGER_RTT_PutCharSkip:0000000000000000 SEGGER_RTT_PutCharSkip
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2063   .text.SEGGER_RTT_PutCharSkip:0000000000000070 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2069   .text.SEGGER_RTT_PutChar:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2075   .text.SEGGER_RTT_PutChar:0000000000000000 SEGGER_RTT_PutChar
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2248   .text.SEGGER_RTT_PutChar:0000000000000098 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2254   .text.SEGGER_RTT_GetKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2260   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2308   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2314   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2342   .text.SEGGER_RTT_HasKey:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2348   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 119


/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2412   .text.SEGGER_RTT_HasKey:0000000000000020 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2417   .text.SEGGER_RTT_HasData:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2423   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2454   .text.SEGGER_RTT_HasData:000000000000001c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2459   .text.SEGGER_RTT_HasDataUp:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2465   .text.SEGGER_RTT_HasDataUp:0000000000000000 SEGGER_RTT_HasDataUp
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2496   .text.SEGGER_RTT_HasDataUp:000000000000001c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2501   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2507   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2659   .text.SEGGER_RTT_AllocDownBuffer:0000000000000074 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2665   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2671   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2831   .text.SEGGER_RTT_AllocUpBuffer:0000000000000088 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2837   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2843   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2978   .text.SEGGER_RTT_ConfigUpBuffer:000000000000006c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2983   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:2989   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3125   .text.SEGGER_RTT_ConfigDownBuffer:000000000000006c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3130   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3136   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3239   .text.SEGGER_RTT_SetNameUpBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3244   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3250   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3350   .text.SEGGER_RTT_SetNameDownBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3355   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3361   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3461   .text.SEGGER_RTT_SetFlagsUpBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3466   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3472   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3572   .text.SEGGER_RTT_SetFlagsDownBuffer:000000000000003c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3577   .text.SEGGER_RTT_Init:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3583   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3602   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3608   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3774   .text.SEGGER_RTT_SetTerminal:000000000000007c $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3782   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:3788   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4023   .text.SEGGER_RTT_TerminalOut:00000000000000e0 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4030   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4036   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4069   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000014 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4074   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 $t
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4080   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4136   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000028 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4152   .bss._SEGGER_RTT:0000000000000000 _SEGGER_RTT
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4145   .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4146   .bss._ActiveTerminal:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4148   .bss._SEGGER_RTT:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4155   .bss._acDownBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4159   .bss._acDownBuffer:0000000000000000 _acDownBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4162   .bss._acUpBuffer:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4166   .bss._acUpBuffer:0000000000000000 _acUpBuffer
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4169   .rodata._aInitStr.0:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4173   .rodata._aInitStr.0:0000000000000000 _aInitStr.0
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4176   .rodata._aTerminalId:0000000000000000 $d
/var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s:4180   .rodata._aTerminalId:0000000000000000 _aTerminalId
ARM GAS  /var/folders/0z/tsy30v1j4xl4_7kw94k978ww0000gn/T//ccdHqWzA.s 			page 120



UNDEFINED SYMBOLS
memcpy
memset
strlen
