ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/SEGGER_RTT.c"
  20              		.section	.text._WriteNoCheck,"ax",%progbits
  21              		.align	1
  22              		.p2align 2,,3
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_WriteNoCheck:
  28              	.LVL0:
  29              	.LFB2:
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 2


  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 26642 $
  50:Core/Src/SEGGER_RTT.c **** 
  51:Core/Src/SEGGER_RTT.c **** Additional information:
  52:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  54:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:Core/Src/SEGGER_RTT.c **** 
  59:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:Core/Src/SEGGER_RTT.c **** 
  68:Core/Src/SEGGER_RTT.c **** 
  69:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:Core/Src/SEGGER_RTT.c **** */
  71:Core/Src/SEGGER_RTT.c **** 
  72:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:Core/Src/SEGGER_RTT.c **** 
  76:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  77:Core/Src/SEGGER_RTT.c **** *
  78:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  79:Core/Src/SEGGER_RTT.c **** *
  80:Core/Src/SEGGER_RTT.c **** **********************************************************************
  81:Core/Src/SEGGER_RTT.c **** */
  82:Core/Src/SEGGER_RTT.c **** 
  83:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  84:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  85:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  86:Core/Src/SEGGER_RTT.c ****   #endif
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 3


  87:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  88:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  89:Core/Src/SEGGER_RTT.c ****   #endif
  90:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  91:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  92:Core/Src/SEGGER_RTT.c ****   #endif
  93:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  94:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
  95:Core/Src/SEGGER_RTT.c ****   #endif
  96:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
  97:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  98:Core/Src/SEGGER_RTT.c ****   #endif
  99:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 100:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 101:Core/Src/SEGGER_RTT.c ****   #endif
 102:Core/Src/SEGGER_RTT.c **** #endif
 103:Core/Src/SEGGER_RTT.c **** 
 104:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 105:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 106:Core/Src/SEGGER_RTT.c **** #endif
 107:Core/Src/SEGGER_RTT.c **** 
 108:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 109:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 110:Core/Src/SEGGER_RTT.c **** #endif
 111:Core/Src/SEGGER_RTT.c **** 
 112:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 113:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 114:Core/Src/SEGGER_RTT.c **** #endif
 115:Core/Src/SEGGER_RTT.c **** 
 116:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 117:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 118:Core/Src/SEGGER_RTT.c **** #endif
 119:Core/Src/SEGGER_RTT.c **** 
 120:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 121:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 122:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 123:Core/Src/SEGGER_RTT.c ****   #endif
 124:Core/Src/SEGGER_RTT.c **** #endif
 125:Core/Src/SEGGER_RTT.c **** 
 126:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 127:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 128:Core/Src/SEGGER_RTT.c **** #endif
 129:Core/Src/SEGGER_RTT.c **** 
 130:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 131:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 132:Core/Src/SEGGER_RTT.c **** #endif
 133:Core/Src/SEGGER_RTT.c **** 
 134:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 135:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 136:Core/Src/SEGGER_RTT.c **** #endif
 137:Core/Src/SEGGER_RTT.c **** 
 138:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 139:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 140:Core/Src/SEGGER_RTT.c **** #endif
 141:Core/Src/SEGGER_RTT.c **** 
 142:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 143:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 4


 144:Core/Src/SEGGER_RTT.c **** #endif
 145:Core/Src/SEGGER_RTT.c **** 
 146:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 147:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 148:Core/Src/SEGGER_RTT.c **** #endif
 149:Core/Src/SEGGER_RTT.c **** 
 150:Core/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 151:Core/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 152:Core/Src/SEGGER_RTT.c **** #endif
 153:Core/Src/SEGGER_RTT.c **** 
 154:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 155:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 156:Core/Src/SEGGER_RTT.c **** #endif
 157:Core/Src/SEGGER_RTT.c **** 
 158:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 159:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 160:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 161:Core/Src/SEGGER_RTT.c ****   #else
 162:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 163:Core/Src/SEGGER_RTT.c ****   #endif
 164:Core/Src/SEGGER_RTT.c **** #endif
 165:Core/Src/SEGGER_RTT.c **** 
 166:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 167:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 168:Core/Src/SEGGER_RTT.c **** #endif
 169:Core/Src/SEGGER_RTT.c **** 
 170:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 171:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 172:Core/Src/SEGGER_RTT.c **** #endif
 173:Core/Src/SEGGER_RTT.c **** //
 174:Core/Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 175:Core/Src/SEGGER_RTT.c **** //
 176:Core/Src/SEGGER_RTT.c **** #ifndef NULL
 177:Core/Src/SEGGER_RTT.c ****   #define NULL 0
 178:Core/Src/SEGGER_RTT.c **** #endif
 179:Core/Src/SEGGER_RTT.c **** 
 180:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 181:Core/Src/SEGGER_RTT.c **** *
 182:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 183:Core/Src/SEGGER_RTT.c **** *
 184:Core/Src/SEGGER_RTT.c **** **********************************************************************
 185:Core/Src/SEGGER_RTT.c **** */
 186:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 187:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 188:Core/Src/SEGGER_RTT.c **** #endif
 189:Core/Src/SEGGER_RTT.c **** 
 190:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 191:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 192:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 193:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 195:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 196:Core/Src/SEGGER_RTT.c ****                                   Var
 197:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 198:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 199:Core/Src/SEGGER_RTT.c ****   #else
 200:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 5


 201:Core/Src/SEGGER_RTT.c ****   #endif
 202:Core/Src/SEGGER_RTT.c **** #else
 203:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 204:Core/Src/SEGGER_RTT.c **** #endif
 205:Core/Src/SEGGER_RTT.c **** 
 206:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 207:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 208:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 209:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 210:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 211:Core/Src/SEGGER_RTT.c ****                                         Var
 212:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 213:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 214:Core/Src/SEGGER_RTT.c ****   #else
 215:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 216:Core/Src/SEGGER_RTT.c ****   #endif
 217:Core/Src/SEGGER_RTT.c **** #else
 218:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 219:Core/Src/SEGGER_RTT.c **** #endif
 220:Core/Src/SEGGER_RTT.c **** 
 221:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 222:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 223:Core/Src/SEGGER_RTT.c **** #else
 224:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 225:Core/Src/SEGGER_RTT.c **** #endif
 226:Core/Src/SEGGER_RTT.c **** 
 227:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 228:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 229:Core/Src/SEGGER_RTT.c **** #else
 230:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 231:Core/Src/SEGGER_RTT.c **** #endif
 232:Core/Src/SEGGER_RTT.c **** 
 233:Core/Src/SEGGER_RTT.c **** 
 234:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 235:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 236:Core/Src/SEGGER_RTT.c **** #else
 237:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 238:Core/Src/SEGGER_RTT.c **** #endif
 239:Core/Src/SEGGER_RTT.c **** 
 240:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 241:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 242:Core/Src/SEGGER_RTT.c **** #else
 243:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 244:Core/Src/SEGGER_RTT.c **** #endif
 245:Core/Src/SEGGER_RTT.c **** 
 246:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 247:Core/Src/SEGGER_RTT.c **** *
 248:Core/Src/SEGGER_RTT.c **** *       Static const data
 249:Core/Src/SEGGER_RTT.c **** *
 250:Core/Src/SEGGER_RTT.c **** **********************************************************************
 251:Core/Src/SEGGER_RTT.c **** */
 252:Core/Src/SEGGER_RTT.c **** 
 253:Core/Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 254:Core/Src/SEGGER_RTT.c **** 
 255:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 256:Core/Src/SEGGER_RTT.c **** *
 257:Core/Src/SEGGER_RTT.c **** *       Static data
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 6


 258:Core/Src/SEGGER_RTT.c **** *
 259:Core/Src/SEGGER_RTT.c **** **********************************************************************
 260:Core/Src/SEGGER_RTT.c **** */
 261:Core/Src/SEGGER_RTT.c **** 
 262:Core/Src/SEGGER_RTT.c **** //
 263:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 264:Core/Src/SEGGER_RTT.c **** //
 265:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 266:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 267:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 268:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 269:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 270:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 271:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 272:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 273:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 274:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 275:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 276:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 277:Core/Src/SEGGER_RTT.c ****   #else
 278:Core/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 279:Core/Src/SEGGER_RTT.c ****   #endif
 280:Core/Src/SEGGER_RTT.c **** #else
 281:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 282:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 283:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 284:Core/Src/SEGGER_RTT.c **** #endif
 285:Core/Src/SEGGER_RTT.c **** 
 286:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 287:Core/Src/SEGGER_RTT.c **** 
 288:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 289:Core/Src/SEGGER_RTT.c **** *
 290:Core/Src/SEGGER_RTT.c **** *       Static functions
 291:Core/Src/SEGGER_RTT.c **** *
 292:Core/Src/SEGGER_RTT.c **** **********************************************************************
 293:Core/Src/SEGGER_RTT.c **** */
 294:Core/Src/SEGGER_RTT.c **** 
 295:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 296:Core/Src/SEGGER_RTT.c **** *
 297:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 298:Core/Src/SEGGER_RTT.c **** *
 299:Core/Src/SEGGER_RTT.c **** *  Function description
 300:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 301:Core/Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 302:Core/Src/SEGGER_RTT.c **** *
 303:Core/Src/SEGGER_RTT.c **** */
 304:Core/Src/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 305:Core/Src/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 306:Core/Src/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 307:Core/Src/SEGGER_RTT.c ****                   do {                                                                             
 308:Core/Src/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 309:Core/Src/SEGGER_RTT.c ****                       _DoInit();                                                                   
 310:Core/Src/SEGGER_RTT.c ****                     }                                                                              
 311:Core/Src/SEGGER_RTT.c ****                   } while (0);                                                                     
 312:Core/Src/SEGGER_RTT.c ****                 }
 313:Core/Src/SEGGER_RTT.c **** 
 314:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 7


 315:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 316:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:Core/Src/SEGGER_RTT.c ****   unsigned i;
 318:Core/Src/SEGGER_RTT.c ****   //
 319:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 320:Core/Src/SEGGER_RTT.c ****   //
 321:Core/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 322:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 324:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 325:Core/Src/SEGGER_RTT.c ****   //
 326:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:Core/Src/SEGGER_RTT.c ****   //
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 333:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 334:Core/Src/SEGGER_RTT.c ****   //
 335:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 336:Core/Src/SEGGER_RTT.c ****   //
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 342:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 343:Core/Src/SEGGER_RTT.c ****   //
 344:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:Core/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:Core/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:Core/Src/SEGGER_RTT.c ****   //
 348:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 350:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 351:Core/Src/SEGGER_RTT.c ****   }
 352:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 353:Core/Src/SEGGER_RTT.c **** }
 354:Core/Src/SEGGER_RTT.c **** 
 355:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 356:Core/Src/SEGGER_RTT.c **** *
 357:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:Core/Src/SEGGER_RTT.c **** *
 359:Core/Src/SEGGER_RTT.c **** *  Function description
 360:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:Core/Src/SEGGER_RTT.c **** *    read by the host.
 363:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:Core/Src/SEGGER_RTT.c **** *
 366:Core/Src/SEGGER_RTT.c **** *  Parameters
 367:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:Core/Src/SEGGER_RTT.c **** *
 371:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 8


 372:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 373:Core/Src/SEGGER_RTT.c **** */
 374:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 378:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 379:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 380:Core/Src/SEGGER_RTT.c ****   //
 381:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:Core/Src/SEGGER_RTT.c ****   //
 383:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 384:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 385:Core/Src/SEGGER_RTT.c ****   do {
 386:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 387:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 388:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 389:Core/Src/SEGGER_RTT.c ****     } else {
 390:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 391:Core/Src/SEGGER_RTT.c ****     }
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 393:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 394:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 395:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:Core/Src/SEGGER_RTT.c ****     };
 402:Core/Src/SEGGER_RTT.c **** #else
 403:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 404:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 405:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 406:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 407:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 408:Core/Src/SEGGER_RTT.c **** #endif
 409:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 410:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 411:Core/Src/SEGGER_RTT.c ****     }
 412:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 413:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 414:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 415:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 416:Core/Src/SEGGER_RTT.c **** }
 417:Core/Src/SEGGER_RTT.c **** 
 418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 419:Core/Src/SEGGER_RTT.c **** *
 420:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:Core/Src/SEGGER_RTT.c **** *
 422:Core/Src/SEGGER_RTT.c **** *  Function description
 423:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:Core/Src/SEGGER_RTT.c **** *    read by the host.
 426:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 427:Core/Src/SEGGER_RTT.c **** *
 428:Core/Src/SEGGER_RTT.c **** *  Parameters
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 9


 429:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 430:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:Core/Src/SEGGER_RTT.c **** *
 433:Core/Src/SEGGER_RTT.c **** *  Notes
 434:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:Core/Src/SEGGER_RTT.c **** */
 436:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
  30              		.loc 1 436 94 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 437:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  34              		.loc 1 437 3 view .LVU1
 438:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 438 3 view .LVU2
 439:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
  36              		.loc 1 439 3 view .LVU3
 440:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
  37              		.loc 1 440 3 view .LVU4
 441:Core/Src/SEGGER_RTT.c **** 
 442:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  38              		.loc 1 442 3 view .LVU5
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  39              		.loc 1 436 94 is_stmt 0 view .LVU6
  40 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  41              		.cfi_def_cfa_offset 24
  42              		.cfi_offset 4, -24
  43              		.cfi_offset 5, -20
  44              		.cfi_offset 6, -16
  45              		.cfi_offset 7, -12
  46              		.cfi_offset 8, -8
  47              		.cfi_offset 14, -4
 443:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
  48              		.loc 1 443 14 view .LVU7
  49 0004 D0E90285 		ldrd	r8, r5, [r0, #8]
 436:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  50              		.loc 1 436 94 view .LVU8
  51 0008 0446     		mov	r4, r0
  52              		.loc 1 443 7 view .LVU9
  53 000a A8EB0507 		sub	r7, r8, r5
  54              	.LVL1:
 444:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
  55              		.loc 1 444 3 is_stmt 1 view .LVU10
 445:Core/Src/SEGGER_RTT.c ****     //
 446:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 447:Core/Src/SEGGER_RTT.c ****     //
 448:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
  56              		.loc 1 448 10 is_stmt 0 view .LVU11
  57 000e 4068     		ldr	r0, [r0, #4]
  58              	.LVL2:
 444:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
  59              		.loc 1 444 6 view .LVU12
  60 0010 9742     		cmp	r7, r2
  61              		.loc 1 448 10 view .LVU13
  62 0012 2844     		add	r0, r0, r5
 449:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 10


 450:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:Core/Src/SEGGER_RTT.c ****     };
 454:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:Core/Src/SEGGER_RTT.c **** #else
 457:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 458:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 459:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
  63              		.loc 1 459 26 view .LVU14
  64 0014 1544     		add	r5, r5, r2
 444:Core/Src/SEGGER_RTT.c ****     //
  65              		.loc 1 444 6 view .LVU15
  66 0016 08D8     		bhi	.L5
 460:Core/Src/SEGGER_RTT.c **** #endif
 461:Core/Src/SEGGER_RTT.c ****   } else {
 462:Core/Src/SEGGER_RTT.c ****     //
 463:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:Core/Src/SEGGER_RTT.c ****     //
 465:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:Core/Src/SEGGER_RTT.c ****     };
 471:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:Core/Src/SEGGER_RTT.c ****     };
 476:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:Core/Src/SEGGER_RTT.c **** #else
 479:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
  67              		.loc 1 479 5 is_stmt 1 view .LVU16
  68              	.LVL3:
 480:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
  69              		.loc 1 480 5 view .LVU17
 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
  70              		.loc 1 481 5 view .LVU18
  71 0018 3A46     		mov	r2, r7
  72              	.LVL4:
  73              		.loc 1 481 5 is_stmt 0 view .LVU19
  74 001a 0E46     		mov	r6, r1
 482:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
  75              		.loc 1 482 20 view .LVU20
  76 001c A5EB0805 		sub	r5, r5, r8
 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
  77              		.loc 1 481 5 view .LVU21
  78 0020 FFF7FEFF 		bl	memcpy
  79              	.LVL5:
  80              		.loc 1 482 5 is_stmt 1 view .LVU22
 483:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
  81              		.loc 1 483 5 view .LVU23
 484:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
  82              		.loc 1 484 5 view .LVU24
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 11


  83 0024 6068     		ldr	r0, [r4, #4]
  84 0026 2A46     		mov	r2, r5
  85 0028 F119     		adds	r1, r6, r7
  86              	.LVL6:
  87              	.L5:
  88              		.loc 1 484 5 is_stmt 0 view .LVU25
  89 002a FFF7FEFF 		bl	memcpy
  90              	.LVL7:
 485:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
  91              		.loc 1 485 5 is_stmt 1 view .LVU26
  92              		.syntax unified
  93              	@ 485 "Core/Src/SEGGER_RTT.c" 1
  94 002e BFF35F8F 		dmb
  95              	
  96              	@ 0 "" 2
  97              		.loc 1 485 15 view .LVU27
 486:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
  98              		.loc 1 486 5 view .LVU28
 459:Core/Src/SEGGER_RTT.c **** #endif
  99              		.loc 1 459 18 is_stmt 0 view .LVU29
 100              		.thumb
 101              		.syntax unified
 102 0032 E560     		str	r5, [r4, #12]
 487:Core/Src/SEGGER_RTT.c **** #endif
 488:Core/Src/SEGGER_RTT.c ****   }
 489:Core/Src/SEGGER_RTT.c **** }
 103              		.loc 1 489 1 view .LVU30
 104 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 105              		.loc 1 489 1 view .LVU31
 106              		.cfi_endproc
 107              	.LFE2:
 109              		.section	.text._WriteBlocking,"ax",%progbits
 110              		.align	1
 111              		.p2align 2,,3
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	_WriteBlocking:
 117              	.LVL8:
 118              	.LFB1:
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 119              		.loc 1 374 101 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 123              		.loc 1 375 3 view .LVU33
 376:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 124              		.loc 1 376 3 view .LVU34
 377:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 125              		.loc 1 377 3 view .LVU35
 378:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 126              		.loc 1 378 3 view .LVU36
 379:Core/Src/SEGGER_RTT.c ****   //
 127              		.loc 1 379 3 view .LVU37
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 128              		.loc 1 383 3 view .LVU38
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 12


 384:Core/Src/SEGGER_RTT.c ****   do {
 129              		.loc 1 384 3 view .LVU39
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 130              		.loc 1 374 101 is_stmt 0 view .LVU40
 131 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 132              		.cfi_def_cfa_offset 32
 133              		.cfi_offset 3, -32
 134              		.cfi_offset 4, -28
 135              		.cfi_offset 5, -24
 136              		.cfi_offset 6, -20
 137              		.cfi_offset 7, -16
 138              		.cfi_offset 8, -12
 139              		.cfi_offset 9, -8
 140              		.cfi_offset 14, -4
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 141              		.loc 1 374 101 view .LVU41
 142 0004 0646     		mov	r6, r0
 390:Core/Src/SEGGER_RTT.c ****     }
 143              		.loc 1 390 30 view .LVU42
 144 0006 D0E90204 		ldrd	r0, r4, [r0, #8]
 145              	.LVL9:
 374:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 146              		.loc 1 374 101 view .LVU43
 147 000a 8946     		mov	r9, r1
 148 000c 1746     		mov	r7, r2
 383:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 149              		.loc 1 383 19 view .LVU44
 150 000e 4FF00008 		mov	r8, #0
 151              	.LVL10:
 152              	.L11:
 385:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 153              		.loc 1 385 3 is_stmt 1 view .LVU45
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 154              		.loc 1 386 5 view .LVU46
 388:Core/Src/SEGGER_RTT.c ****     } else {
 155              		.loc 1 388 7 view .LVU47
 390:Core/Src/SEGGER_RTT.c ****     }
 156              		.loc 1 390 7 view .LVU48
 386:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 157              		.loc 1 386 11 is_stmt 0 view .LVU49
 158 0012 3369     		ldr	r3, [r6, #16]
 159              	.LVL11:
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 160              		.loc 1 387 5 is_stmt 1 view .LVU50
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 161              		.loc 1 387 8 is_stmt 0 view .LVU51
 162 0014 9C42     		cmp	r4, r3
 388:Core/Src/SEGGER_RTT.c ****     } else {
 163              		.loc 1 388 23 view .LVU52
 164 0016 03F1FF32 		add	r2, r3, #-1
 390:Core/Src/SEGGER_RTT.c ****     }
 165              		.loc 1 390 23 view .LVU53
 166 001a 28BF     		it	cs
 167 001c 03F1FF33 		addcs	r3, r3, #-1
 168              	.LVL12:
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 169              		.loc 1 392 23 view .LVU54
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 13


 170 0020 A0EB0405 		sub	r5, r0, r4
 390:Core/Src/SEGGER_RTT.c ****     }
 171              		.loc 1 390 23 view .LVU55
 172 0024 2ABF     		itet	cs
 173 0026 1B18     		addcs	r3, r3, r0
 388:Core/Src/SEGGER_RTT.c ****     } else {
 174              		.loc 1 388 23 view .LVU56
 175 0028 131B     		subcc	r3, r2, r4
 390:Core/Src/SEGGER_RTT.c ****     }
 176              		.loc 1 390 23 view .LVU57
 177 002a 1B1B     		subcs	r3, r3, r4
 178              	.LVL13:
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 179              		.loc 1 392 5 is_stmt 1 view .LVU58
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 180              		.loc 1 393 5 view .LVU59
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 181              		.loc 1 393 21 is_stmt 0 view .LVU60
 182 002c BD42     		cmp	r5, r7
 183 002e 28BF     		it	cs
 184 0030 3D46     		movcs	r5, r7
 185              	.LVL14:
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 186              		.loc 1 393 21 view .LVU61
 187 0032 9D42     		cmp	r5, r3
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 188              		.loc 1 394 10 view .LVU62
 189 0034 7068     		ldr	r0, [r6, #4]
 190              	.LVL15:
 393:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 191              		.loc 1 393 21 view .LVU63
 192 0036 28BF     		it	cs
 193 0038 1D46     		movcs	r5, r3
 194              	.LVL16:
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 195              		.loc 1 394 5 is_stmt 1 view .LVU64
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 196              		.loc 1 403 5 view .LVU65
 197 003a 4946     		mov	r1, r9
 198 003c 2A46     		mov	r2, r5
 199              	.LVL17:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 200              		.loc 1 403 5 is_stmt 0 view .LVU66
 201 003e 2044     		add	r0, r0, r4
 202              	.LVL18:
 403:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 203              		.loc 1 403 5 view .LVU67
 204 0040 FFF7FEFF 		bl	memcpy
 205              	.LVL19:
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 206              		.loc 1 404 5 is_stmt 1 view .LVU68
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 207              		.loc 1 409 23 is_stmt 0 view .LVU69
 208 0044 B068     		ldr	r0, [r6, #8]
 407:Core/Src/SEGGER_RTT.c **** #endif
 209              		.loc 1 407 21 view .LVU70
 210 0046 2C44     		add	r4, r4, r5
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 14


 211              	.LVL20:
 404:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 212              		.loc 1 404 21 view .LVU71
 213 0048 A844     		add	r8, r8, r5
 214              	.LVL21:
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 215              		.loc 1 405 5 is_stmt 1 view .LVU72
 405:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 216              		.loc 1 405 21 is_stmt 0 view .LVU73
 217 004a A944     		add	r9, r9, r5
 218              	.LVL22:
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 219              		.loc 1 406 5 is_stmt 1 view .LVU74
 406:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 220              		.loc 1 406 21 is_stmt 0 view .LVU75
 221 004c 7F1B     		subs	r7, r7, r5
 222              	.LVL23:
 407:Core/Src/SEGGER_RTT.c **** #endif
 223              		.loc 1 407 5 is_stmt 1 view .LVU76
 409:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 224              		.loc 1 409 5 view .LVU77
 410:Core/Src/SEGGER_RTT.c ****     }
 225              		.loc 1 410 13 is_stmt 0 view .LVU78
 226 004e A042     		cmp	r0, r4
 227 0050 08BF     		it	eq
 228 0052 0024     		moveq	r4, #0
 229              	.LVL24:
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 230              		.loc 1 412 5 is_stmt 1 view .LVU79
 231              		.syntax unified
 232              	@ 412 "Core/Src/SEGGER_RTT.c" 1
 233 0054 BFF35F8F 		dmb
 234              	
 235              	@ 0 "" 2
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 236              		.loc 1 412 15 view .LVU80
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 237              		.loc 1 413 5 view .LVU81
 413:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 238              		.loc 1 413 18 is_stmt 0 view .LVU82
 239              		.thumb
 240              		.syntax unified
 241 0058 F460     		str	r4, [r6, #12]
 414:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 242              		.loc 1 414 12 is_stmt 1 view .LVU83
 243 005a 002F     		cmp	r7, #0
 244 005c D9D1     		bne	.L11
 415:Core/Src/SEGGER_RTT.c **** }
 245              		.loc 1 415 3 view .LVU84
 416:Core/Src/SEGGER_RTT.c **** 
 246              		.loc 1 416 1 is_stmt 0 view .LVU85
 247 005e 4046     		mov	r0, r8
 248 0060 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 416:Core/Src/SEGGER_RTT.c **** 
 249              		.loc 1 416 1 view .LVU86
 250              		.cfi_endproc
 251              	.LFE1:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 15


 253              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 254              		.align	2
 255              	.LC0:
 256 0000 5465726D 		.ascii	"Terminal\000"
 256      696E616C 
 256      00
 257              		.section	.text._DoInit,"ax",%progbits
 258              		.align	1
 259              		.p2align 2,,3
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 264              	_DoInit:
 265              	.LFB0:
 314:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 266              		.loc 1 314 27 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 315:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 270              		.loc 1 315 3 view .LVU88
 316:Core/Src/SEGGER_RTT.c ****   unsigned i;
 271              		.loc 1 316 3 view .LVU89
 317:Core/Src/SEGGER_RTT.c ****   //
 272              		.loc 1 317 3 view .LVU90
 321:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 273              		.loc 1 321 3 view .LVU91
 274              	.LVL25:
 322:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 275              		.loc 1 322 3 view .LVU92
 314:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 276              		.loc 1 314 27 is_stmt 0 view .LVU93
 277 0000 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
 322:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 281              		.loc 1 322 3 view .LVU94
 282 0002 154C     		ldr	r4, .L19
 283 0004 A822     		movs	r2, #168
 284 0006 0021     		movs	r1, #0
 285 0008 2046     		mov	r0, r4
 286 000a FFF7FEFF 		bl	memset
 287              	.LVL26:
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 288              		.loc 1 323 3 is_stmt 1 view .LVU95
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 289              		.loc 1 323 25 is_stmt 0 view .LVU96
 290 000e 0321     		movs	r1, #3
 291 0010 2161     		str	r1, [r4, #16]
 324:Core/Src/SEGGER_RTT.c ****   //
 292              		.loc 1 324 3 is_stmt 1 view .LVU97
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 293              		.loc 1 328 27 is_stmt 0 view .LVU98
 294 0012 124A     		ldr	r2, .L19+4
 324:Core/Src/SEGGER_RTT.c ****   //
 295              		.loc 1 324 25 view .LVU99
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 16


 296 0014 6161     		str	r1, [r4, #20]
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 297              		.loc 1 328 3 is_stmt 1 view .LVU100
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 298              		.loc 1 329 27 is_stmt 0 view .LVU101
 299 0016 1248     		ldr	r0, .L19+8
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 300              		.loc 1 328 27 view .LVU102
 301 0018 A261     		str	r2, [r4, #24]
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 302              		.loc 1 329 3 is_stmt 1 view .LVU103
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 303              		.loc 1 330 27 is_stmt 0 view .LVU104
 304 001a 4FF48061 		mov	r1, #1024
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 305              		.loc 1 329 27 view .LVU105
 306 001e E061     		str	r0, [r4, #28]
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 307              		.loc 1 330 3 is_stmt 1 view .LVU106
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 308              		.loc 1 331 27 is_stmt 0 view .LVU107
 309 0020 0023     		movs	r3, #0
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 310              		.loc 1 330 27 view .LVU108
 311 0022 2162     		str	r1, [r4, #32]
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 312              		.loc 1 331 3 is_stmt 1 view .LVU109
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 313              		.loc 1 338 29 is_stmt 0 view .LVU110
 314 0024 0F48     		ldr	r0, .L19+12
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 315              		.loc 1 331 27 view .LVU111
 316 0026 A362     		str	r3, [r4, #40]
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 317              		.loc 1 332 3 is_stmt 1 view .LVU112
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 318              		.loc 1 339 29 is_stmt 0 view .LVU113
 319 0028 1021     		movs	r1, #16
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 320              		.loc 1 332 27 view .LVU114
 321 002a 6362     		str	r3, [r4, #36]
 333:Core/Src/SEGGER_RTT.c ****   //
 322              		.loc 1 333 3 is_stmt 1 view .LVU115
 333:Core/Src/SEGGER_RTT.c ****   //
 323              		.loc 1 333 27 is_stmt 0 view .LVU116
 324 002c E362     		str	r3, [r4, #44]
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 325              		.loc 1 337 3 is_stmt 1 view .LVU117
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 326              		.loc 1 337 29 is_stmt 0 view .LVU118
 327 002e 2266     		str	r2, [r4, #96]
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 328              		.loc 1 338 3 is_stmt 1 view .LVU119
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 329              		.loc 1 338 29 is_stmt 0 view .LVU120
 330 0030 6066     		str	r0, [r4, #100]
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 17


 331              		.loc 1 339 3 is_stmt 1 view .LVU121
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 332              		.loc 1 339 29 is_stmt 0 view .LVU122
 333 0032 A166     		str	r1, [r4, #104]
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 334              		.loc 1 340 3 is_stmt 1 view .LVU123
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 335              		.loc 1 340 29 is_stmt 0 view .LVU124
 336 0034 2367     		str	r3, [r4, #112]
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 337              		.loc 1 341 3 is_stmt 1 view .LVU125
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 338              		.loc 1 341 29 is_stmt 0 view .LVU126
 339 0036 E366     		str	r3, [r4, #108]
 342:Core/Src/SEGGER_RTT.c ****   //
 340              		.loc 1 342 3 is_stmt 1 view .LVU127
 342:Core/Src/SEGGER_RTT.c ****   //
 341              		.loc 1 342 29 is_stmt 0 view .LVU128
 342 0038 6367     		str	r3, [r4, #116]
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 343              		.loc 1 348 3 is_stmt 1 view .LVU129
 344              		.syntax unified
 345              	@ 348 "Core/Src/SEGGER_RTT.c" 1
 346 003a BFF35F8F 		dmb
 347              	
 348              	@ 0 "" 2
 348:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 349              		.loc 1 348 13 view .LVU130
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 350              		.loc 1 349 3 view .LVU131
 351              	.LVL27:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 352              		.loc 1 349 17 discriminator 1 view .LVU132
 353              		.thumb
 354              		.syntax unified
 355 003e 0A4B     		ldr	r3, .L19+16
 356 0040 A3F1100C 		sub	ip, r3, #16
 357 0044 1846     		mov	r0, r3
 358              	.LVL28:
 359              	.L16:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 360              		.loc 1 349 17 is_stmt 0 discriminator 1 view .LVU133
 361 0046 C21A     		subs	r2, r0, r3
 362              	.LVL29:
 350:Core/Src/SEGGER_RTT.c ****   }
 363              		.loc 1 350 5 is_stmt 1 view .LVU134
 350:Core/Src/SEGGER_RTT.c ****   }
 364              		.loc 1 350 27 is_stmt 0 view .LVU135
 365 0048 13F8011D 		ldrb	r1, [r3, #-1]!	@ zero_extendqisi2
 350:Core/Src/SEGGER_RTT.c ****   }
 366              		.loc 1 350 16 view .LVU136
 367 004c A154     		strb	r1, [r4, r2]
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 368              		.loc 1 349 42 is_stmt 1 discriminator 3 view .LVU137
 369              	.LVL30:
 349:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 370              		.loc 1 349 17 discriminator 1 view .LVU138
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 18


 371 004e 6345     		cmp	r3, ip
 372 0050 F9D1     		bne	.L16
 352:Core/Src/SEGGER_RTT.c **** }
 373              		.loc 1 352 3 view .LVU139
 374              		.syntax unified
 375              	@ 352 "Core/Src/SEGGER_RTT.c" 1
 376 0052 BFF35F8F 		dmb
 377              	
 378              	@ 0 "" 2
 352:Core/Src/SEGGER_RTT.c **** }
 379              		.loc 1 352 13 view .LVU140
 353:Core/Src/SEGGER_RTT.c **** 
 380              		.loc 1 353 1 is_stmt 0 view .LVU141
 381              		.thumb
 382              		.syntax unified
 383 0056 10BD     		pop	{r4, pc}
 384              	.L20:
 385              		.align	2
 386              	.L19:
 387 0058 00000000 		.word	_SEGGER_RTT
 388 005c 00000000 		.word	.LC0
 389 0060 00000000 		.word	_acUpBuffer
 390 0064 00000000 		.word	_acDownBuffer
 391 0068 10000000 		.word	_aInitStr.0+16
 392              		.cfi_endproc
 393              	.LFE0:
 395              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 396              		.align	1
 397              		.p2align 2,,3
 398              		.global	SEGGER_RTT_ReadUpBufferNoLock
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 403              	SEGGER_RTT_ReadUpBufferNoLock:
 404              	.LVL31:
 405              	.LFB5:
 490:Core/Src/SEGGER_RTT.c **** 
 491:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 492:Core/Src/SEGGER_RTT.c **** *
 493:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:Core/Src/SEGGER_RTT.c **** *
 495:Core/Src/SEGGER_RTT.c **** *  Function description
 496:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:Core/Src/SEGGER_RTT.c **** *
 500:Core/Src/SEGGER_RTT.c **** *  Parameters
 501:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:Core/Src/SEGGER_RTT.c **** */
 504:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 505:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:Core/Src/SEGGER_RTT.c **** 
 507:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 508:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 509:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 510:Core/Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 19


 511:Core/Src/SEGGER_RTT.c **** 
 512:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 513:Core/Src/SEGGER_RTT.c **** *
 514:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:Core/Src/SEGGER_RTT.c **** *
 516:Core/Src/SEGGER_RTT.c **** *  Function description
 517:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
 519:Core/Src/SEGGER_RTT.c **** *
 520:Core/Src/SEGGER_RTT.c **** *  Parameters
 521:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:Core/Src/SEGGER_RTT.c **** *
 523:Core/Src/SEGGER_RTT.c **** *  Return value
 524:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:Core/Src/SEGGER_RTT.c **** */
 526:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 527:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 528:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 529:Core/Src/SEGGER_RTT.c ****   unsigned r;
 530:Core/Src/SEGGER_RTT.c ****   //
 531:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:Core/Src/SEGGER_RTT.c ****   //
 534:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 535:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 536:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 537:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 538:Core/Src/SEGGER_RTT.c ****   } else {
 539:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 540:Core/Src/SEGGER_RTT.c ****   }
 541:Core/Src/SEGGER_RTT.c ****   return r;
 542:Core/Src/SEGGER_RTT.c **** }
 543:Core/Src/SEGGER_RTT.c **** 
 544:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 545:Core/Src/SEGGER_RTT.c **** *
 546:Core/Src/SEGGER_RTT.c **** *       Public code
 547:Core/Src/SEGGER_RTT.c **** *
 548:Core/Src/SEGGER_RTT.c **** **********************************************************************
 549:Core/Src/SEGGER_RTT.c **** */
 550:Core/Src/SEGGER_RTT.c **** 
 551:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 552:Core/Src/SEGGER_RTT.c **** *
 553:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:Core/Src/SEGGER_RTT.c **** *
 555:Core/Src/SEGGER_RTT.c **** *  Function description
 556:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 558:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 560:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:Core/Src/SEGGER_RTT.c **** *
 562:Core/Src/SEGGER_RTT.c **** *  Parameters
 563:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 565:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:Core/Src/SEGGER_RTT.c **** *
 567:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 20


 568:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:Core/Src/SEGGER_RTT.c **** *
 570:Core/Src/SEGGER_RTT.c **** *  Additional information
 571:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:Core/Src/SEGGER_RTT.c **** */
 573:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 406              		.loc 1 573 96 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 8
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		.loc 1 573 96 is_stmt 0 view .LVU143
 411 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 412              		.cfi_def_cfa_offset 36
 413              		.cfi_offset 4, -36
 414              		.cfi_offset 5, -32
 415              		.cfi_offset 6, -28
 416              		.cfi_offset 7, -24
 417              		.cfi_offset 8, -20
 418              		.cfi_offset 9, -16
 419              		.cfi_offset 10, -12
 420              		.cfi_offset 11, -8
 421              		.cfi_offset 14, -4
 422              	.LBB20:
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 575:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 576:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 577:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 578:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 579:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 580:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 581:Core/Src/SEGGER_RTT.c **** 
 582:Core/Src/SEGGER_RTT.c ****   INIT();
 423              		.loc 1 582 3 view .LVU144
 424 0004 DFF8B090 		ldr	r9, .L38
 425 0008 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 426              	.LBE20:
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 427              		.loc 1 573 96 view .LVU145
 428 000c 83B0     		sub	sp, sp, #12
 429              		.cfi_def_cfa_offset 48
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 430              		.loc 1 573 96 view .LVU146
 431 000e 0446     		mov	r4, r0
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 432              		.loc 1 574 3 is_stmt 1 view .LVU147
 575:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 433              		.loc 1 575 3 view .LVU148
 576:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 434              		.loc 1 576 3 view .LVU149
 577:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 435              		.loc 1 577 3 view .LVU150
 578:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 436              		.loc 1 578 3 view .LVU151
 579:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 437              		.loc 1 579 3 view .LVU152
 580:Core/Src/SEGGER_RTT.c **** 
 438              		.loc 1 580 3 view .LVU153
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 21


 439              	.LBB21:
 440              		.loc 1 582 3 view .LVU154
 441              		.loc 1 582 3 view .LVU155
 442              	.LVL32:
 443              		.loc 1 582 3 view .LVU156
 444              		.loc 1 582 3 view .LVU157
 445              	.LBE21:
 573:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 446              		.loc 1 573 96 is_stmt 0 view .LVU158
 447 0010 8A46     		mov	r10, r1
 448 0012 9046     		mov	r8, r2
 449              	.LBB22:
 450              		.loc 1 582 3 view .LVU159
 451 0014 002B     		cmp	r3, #0
 452 0016 4CD0     		beq	.L36
 453              	.LVL33:
 454              	.L22:
 455              		.loc 1 582 3 is_stmt 1 discriminator 3 view .LVU160
 456              	.LBE22:
 457              		.loc 1 582 9 discriminator 3 view .LVU161
 583:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 458              		.loc 1 583 3 view .LVU162
 584:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 459              		.loc 1 584 3 view .LVU163
 585:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 460              		.loc 1 585 3 view .LVU164
 461              		.loc 1 585 9 is_stmt 0 view .LVU165
 462 0018 04EB4407 		add	r7, r4, r4, lsl #1
 463 001c 09EBC707 		add	r7, r9, r7, lsl #3
 464 0020 6300     		lsls	r3, r4, #1
 465 0022 BE6A     		ldr	r6, [r7, #40]
 466              	.LVL34:
 586:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 467              		.loc 1 586 3 is_stmt 1 view .LVU166
 468              		.loc 1 586 9 is_stmt 0 view .LVU167
 469 0024 7D6A     		ldr	r5, [r7, #36]
 470              	.LVL35:
 587:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 471              		.loc 1 587 3 is_stmt 1 view .LVU168
 588:Core/Src/SEGGER_RTT.c ****   //
 589:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:Core/Src/SEGGER_RTT.c ****   //
 591:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 472              		.loc 1 591 3 view .LVU169
 585:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 473              		.loc 1 585 9 is_stmt 0 view .LVU170
 474 0026 0193     		str	r3, [sp, #4]
 475              		.loc 1 591 6 view .LVU171
 476 0028 AE42     		cmp	r6, r5
 477 002a 1FD8     		bhi	.L37
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 593:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 594:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 595:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 22


 599:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:Core/Src/SEGGER_RTT.c ****     };
 602:Core/Src/SEGGER_RTT.c **** #else
 603:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 604:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 605:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 606:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:Core/Src/SEGGER_RTT.c **** #endif
 609:Core/Src/SEGGER_RTT.c ****     //
 610:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:Core/Src/SEGGER_RTT.c ****     //
 612:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 613:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 614:Core/Src/SEGGER_RTT.c ****     }
 615:Core/Src/SEGGER_RTT.c ****   }
 616:Core/Src/SEGGER_RTT.c ****   //
 617:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:Core/Src/SEGGER_RTT.c ****   //
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 478              		.loc 1 619 3 is_stmt 1 view .LVU172
 479              		.loc 1 619 15 is_stmt 0 view .LVU173
 480 002c AD1B     		subs	r5, r5, r6
 481              	.LVL36:
 620:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 482              		.loc 1 620 3 is_stmt 1 view .LVU174
 483              		.loc 1 620 15 is_stmt 0 view .LVU175
 484 002e 4545     		cmp	r5, r8
 485 0030 28BF     		it	cs
 486 0032 4546     		movcs	r5, r8
 487              	.LVL37:
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 488              		.loc 1 621 3 is_stmt 1 view .LVU176
 489              		.loc 1 621 6 is_stmt 0 view .LVU177
 490 0034 1DB9     		cbnz	r5, .L31
 491              	.LVL38:
 492              	.L21:
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 623:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:Core/Src/SEGGER_RTT.c ****     };
 630:Core/Src/SEGGER_RTT.c **** #else
 631:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 632:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 634:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 635:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 636:Core/Src/SEGGER_RTT.c **** #endif
 637:Core/Src/SEGGER_RTT.c ****   }
 638:Core/Src/SEGGER_RTT.c ****   //
 639:Core/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 23


 641:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 642:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 643:Core/Src/SEGGER_RTT.c ****   }
 644:Core/Src/SEGGER_RTT.c ****   //
 645:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 646:Core/Src/SEGGER_RTT.c **** }
 493              		.loc 1 646 1 view .LVU178
 494 0036 2846     		mov	r0, r5
 495 0038 03B0     		add	sp, sp, #12
 496              		.cfi_remember_state
 497              		.cfi_def_cfa_offset 36
 498              		@ sp needed
 499 003a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 500              	.LVL39:
 501              	.L31:
 502              		.cfi_restore_state
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 503              		.loc 1 621 6 view .LVU179
 504 003e AB46     		mov	fp, r5
 505 0040 631C     		adds	r3, r4, #1
 506              	.LVL40:
 507              	.L29:
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 508              		.loc 1 622 5 is_stmt 1 view .LVU180
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 509              		.loc 1 631 5 view .LVU181
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 510              		.loc 1 622 18 is_stmt 0 view .LVU182
 511 0042 03EB4303 		add	r3, r3, r3, lsl #1
 512 0046 09EBC303 		add	r3, r9, r3, lsl #3
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 513              		.loc 1 631 5 view .LVU183
 514 004a 5046     		mov	r0, r10
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 515              		.loc 1 622 10 view .LVU184
 516 004c 5968     		ldr	r1, [r3, #4]
 631:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 517              		.loc 1 631 5 view .LVU185
 518 004e 2A46     		mov	r2, r5
 519 0050 3144     		add	r1, r1, r6
 520 0052 FFF7FEFF 		bl	memcpy
 521              	.LVL41:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 522              		.loc 1 632 5 is_stmt 1 view .LVU186
 633:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 523              		.loc 1 633 5 view .LVU187
 634:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 524              		.loc 1 634 5 view .LVU188
 635:Core/Src/SEGGER_RTT.c **** #endif
 525              		.loc 1 635 5 view .LVU189
 635:Core/Src/SEGGER_RTT.c **** #endif
 526              		.loc 1 635 18 is_stmt 0 view .LVU190
 527 0056 2E44     		add	r6, r6, r5
 528              	.LVL42:
 529              	.L25:
 641:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 530              		.loc 1 641 3 is_stmt 1 view .LVU191
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 24


 641:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 531              		.loc 1 641 6 is_stmt 0 view .LVU192
 532 0058 BBF1000F 		cmp	fp, #0
 533 005c 04D0     		beq	.L28
 642:Core/Src/SEGGER_RTT.c ****   }
 534              		.loc 1 642 5 is_stmt 1 view .LVU193
 642:Core/Src/SEGGER_RTT.c ****   }
 535              		.loc 1 642 18 is_stmt 0 view .LVU194
 536 005e 6300     		lsls	r3, r4, #1
 537 0060 2344     		add	r3, r3, r4
 538 0062 09EBC304 		add	r4, r9, r3, lsl #3
 539              	.LVL43:
 642:Core/Src/SEGGER_RTT.c ****   }
 540              		.loc 1 642 18 view .LVU195
 541 0066 A662     		str	r6, [r4, #40]
 542              	.L28:
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 543              		.loc 1 621 6 view .LVU196
 544 0068 5D46     		mov	r5, fp
 545              	.LVL44:
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 546              		.loc 1 621 6 view .LVU197
 547 006a E4E7     		b	.L21
 548              	.LVL45:
 549              	.L37:
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 550              		.loc 1 592 5 is_stmt 1 view .LVU198
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 551              		.loc 1 594 18 is_stmt 0 view .LVU199
 552 006c 631C     		adds	r3, r4, #1
 553 006e 03EB4302 		add	r2, r3, r3, lsl #1
 554 0072 09EBC202 		add	r2, r9, r2, lsl #3
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 555              		.loc 1 603 5 view .LVU200
 556 0076 5046     		mov	r0, r10
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 557              		.loc 1 594 10 view .LVU201
 558 0078 5168     		ldr	r1, [r2, #4]
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 559              		.loc 1 592 17 view .LVU202
 560 007a 3A6A     		ldr	r2, [r7, #32]
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 561              		.loc 1 594 18 view .LVU203
 562 007c 0193     		str	r3, [sp, #4]
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 563              		.loc 1 592 17 view .LVU204
 564 007e A2EB060B 		sub	fp, r2, r6
 565              	.LVL46:
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 566              		.loc 1 593 5 is_stmt 1 view .LVU205
 593:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 567              		.loc 1 593 17 is_stmt 0 view .LVU206
 568 0082 C345     		cmp	fp, r8
 569 0084 28BF     		it	cs
 570 0086 C346     		movcs	fp, r8
 571              	.LVL47:
 594:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 25


 572              		.loc 1 594 5 is_stmt 1 view .LVU207
 603:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 573              		.loc 1 603 5 view .LVU208
 574 0088 3144     		add	r1, r1, r6
 575 008a 5A46     		mov	r2, fp
 576 008c FFF7FEFF 		bl	memcpy
 577              	.LVL48:
 604:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 578              		.loc 1 604 5 view .LVU209
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 579              		.loc 1 605 5 view .LVU210
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 580              		.loc 1 606 5 view .LVU211
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 581              		.loc 1 612 8 is_stmt 0 view .LVU212
 582 0090 3A6A     		ldr	r2, [r7, #32]
 583 0092 019B     		ldr	r3, [sp, #4]
 607:Core/Src/SEGGER_RTT.c **** #endif
 584              		.loc 1 607 18 view .LVU213
 585 0094 5E44     		add	r6, r6, fp
 586              	.LVL49:
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 587              		.loc 1 612 8 view .LVU214
 588 0096 B242     		cmp	r2, r6
 606:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 589              		.loc 1 606 18 view .LVU215
 590 0098 A8EB0B08 		sub	r8, r8, fp
 591              	.LVL50:
 607:Core/Src/SEGGER_RTT.c **** #endif
 592              		.loc 1 607 5 is_stmt 1 view .LVU216
 612:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 593              		.loc 1 612 5 view .LVU217
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 594              		.loc 1 619 15 is_stmt 0 view .LVU218
 595 009c 14BF     		ite	ne
 596 009e AD1B     		subne	r5, r5, r6
 597              	.LVL51:
 613:Core/Src/SEGGER_RTT.c ****     }
 598              		.loc 1 613 13 view .LVU219
 599 00a0 0026     		moveq	r6, #0
 600              	.LVL52:
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 601              		.loc 1 619 3 is_stmt 1 view .LVU220
 620:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 602              		.loc 1 620 3 view .LVU221
 620:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 603              		.loc 1 620 15 is_stmt 0 view .LVU222
 604 00a2 4545     		cmp	r5, r8
 605 00a4 28BF     		it	cs
 606 00a6 4546     		movcs	r5, r8
 607              	.LVL53:
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 608              		.loc 1 621 3 is_stmt 1 view .LVU223
 621:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 609              		.loc 1 621 6 is_stmt 0 view .LVU224
 610 00a8 002D     		cmp	r5, #0
 611 00aa D5D0     		beq	.L25
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 26


 612              	.LVL54:
 605:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 613              		.loc 1 605 18 view .LVU225
 614 00ac DA44     		add	r10, r10, fp
 615              	.LVL55:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 616              		.loc 1 632 18 view .LVU226
 617 00ae AB44     		add	fp, fp, r5
 618              	.LVL56:
 632:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 619              		.loc 1 632 18 view .LVU227
 620 00b0 C7E7     		b	.L29
 621              	.LVL57:
 622              	.L36:
 623              	.LBB23:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 624              		.loc 1 582 3 is_stmt 1 discriminator 1 view .LVU228
 625 00b2 FFF7FEFF 		bl	_DoInit
 626              	.LVL58:
 582:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 627              		.loc 1 582 3 is_stmt 0 discriminator 1 view .LVU229
 628 00b6 AFE7     		b	.L22
 629              	.L39:
 630              		.align	2
 631              	.L38:
 632 00b8 00000000 		.word	_SEGGER_RTT
 633              	.LBE23:
 634              		.cfi_endproc
 635              	.LFE5:
 637              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 638              		.align	1
 639              		.p2align 2,,3
 640              		.global	SEGGER_RTT_ReadNoLock
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 645              	SEGGER_RTT_ReadNoLock:
 646              	.LVL59:
 647              	.LFB6:
 647:Core/Src/SEGGER_RTT.c **** 
 648:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 649:Core/Src/SEGGER_RTT.c **** *
 650:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:Core/Src/SEGGER_RTT.c **** *
 652:Core/Src/SEGGER_RTT.c **** *  Function description
 653:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 656:Core/Src/SEGGER_RTT.c **** *
 657:Core/Src/SEGGER_RTT.c **** *  Parameters
 658:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 659:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:Core/Src/SEGGER_RTT.c **** *
 662:Core/Src/SEGGER_RTT.c **** *  Return value
 663:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:Core/Src/SEGGER_RTT.c **** */
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 27


 665:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 648              		.loc 1 665 88 is_stmt 1 view -0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 8
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              		.loc 1 665 88 is_stmt 0 view .LVU231
 653 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 654              		.cfi_def_cfa_offset 36
 655              		.cfi_offset 4, -36
 656              		.cfi_offset 5, -32
 657              		.cfi_offset 6, -28
 658              		.cfi_offset 7, -24
 659              		.cfi_offset 8, -20
 660              		.cfi_offset 9, -16
 661              		.cfi_offset 10, -12
 662              		.cfi_offset 11, -8
 663              		.cfi_offset 14, -4
 664              	.LBB24:
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 667:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 668:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 669:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 670:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 671:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 672:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 673:Core/Src/SEGGER_RTT.c ****   //
 674:Core/Src/SEGGER_RTT.c ****   INIT();
 665              		.loc 1 674 3 view .LVU232
 666 0004 DFF8AC90 		ldr	r9, .L57
 667 0008 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 668              	.LBE24:
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 669              		.loc 1 665 88 view .LVU233
 670 000c 83B0     		sub	sp, sp, #12
 671              		.cfi_def_cfa_offset 48
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 672              		.loc 1 665 88 view .LVU234
 673 000e 0546     		mov	r5, r0
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 674              		.loc 1 666 3 is_stmt 1 view .LVU235
 667:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 675              		.loc 1 667 3 view .LVU236
 668:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 676              		.loc 1 668 3 view .LVU237
 669:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 677              		.loc 1 669 3 view .LVU238
 670:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 678              		.loc 1 670 3 view .LVU239
 671:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 679              		.loc 1 671 3 view .LVU240
 672:Core/Src/SEGGER_RTT.c ****   //
 680              		.loc 1 672 3 view .LVU241
 681              	.LBB25:
 682              		.loc 1 674 3 view .LVU242
 683              		.loc 1 674 3 view .LVU243
 684              	.LVL60:
 685              		.loc 1 674 3 view .LVU244
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 28


 686              		.loc 1 674 3 view .LVU245
 687              	.LBE25:
 665:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 688              		.loc 1 665 88 is_stmt 0 view .LVU246
 689 0010 0F46     		mov	r7, r1
 690 0012 1446     		mov	r4, r2
 691              	.LBB26:
 692              		.loc 1 674 3 view .LVU247
 693 0014 002B     		cmp	r3, #0
 694 0016 49D0     		beq	.L55
 695              	.LVL61:
 696              	.L41:
 697              		.loc 1 674 3 is_stmt 1 discriminator 3 view .LVU248
 698              	.LBE26:
 699              		.loc 1 674 9 discriminator 3 view .LVU249
 675:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 700              		.loc 1 675 3 view .LVU250
 676:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 701              		.loc 1 676 3 view .LVU251
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 702              		.loc 1 677 3 view .LVU252
 703              		.loc 1 677 9 is_stmt 0 view .LVU253
 704 0018 05EB4503 		add	r3, r5, r5, lsl #1
 705 001c 09EBC303 		add	r3, r9, r3, lsl #3
 706 0020 4FEA4508 		lsl	r8, r5, #1
 678:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 707              		.loc 1 678 9 view .LVU254
 708 0024 D3F86CB0 		ldr	fp, [r3, #108]
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 709              		.loc 1 677 9 view .LVU255
 710 0028 1E6F     		ldr	r6, [r3, #112]
 711              	.LVL62:
 712              		.loc 1 678 3 is_stmt 1 view .LVU256
 679:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 713              		.loc 1 679 3 view .LVU257
 680:Core/Src/SEGGER_RTT.c ****   //
 681:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:Core/Src/SEGGER_RTT.c ****   //
 683:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 714              		.loc 1 683 3 view .LVU258
 715              		.loc 1 683 6 is_stmt 0 view .LVU259
 716 002a 5E45     		cmp	r6, fp
 717 002c 1FD8     		bhi	.L56
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 685:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 686:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 687:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 689:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:Core/Src/SEGGER_RTT.c ****     };
 694:Core/Src/SEGGER_RTT.c **** #else
 695:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 696:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 697:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 29


 698:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:Core/Src/SEGGER_RTT.c **** #endif
 701:Core/Src/SEGGER_RTT.c ****     //
 702:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:Core/Src/SEGGER_RTT.c ****     //
 704:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 705:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 706:Core/Src/SEGGER_RTT.c ****     }
 707:Core/Src/SEGGER_RTT.c ****   }
 708:Core/Src/SEGGER_RTT.c ****   //
 709:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:Core/Src/SEGGER_RTT.c ****   //
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 718              		.loc 1 711 3 is_stmt 1 view .LVU260
 719              		.loc 1 711 15 is_stmt 0 view .LVU261
 720 002e ABEB060B 		sub	fp, fp, r6
 721              	.LVL63:
 712:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 722              		.loc 1 712 3 is_stmt 1 view .LVU262
 723              		.loc 1 712 15 is_stmt 0 view .LVU263
 724 0032 5C45     		cmp	r4, fp
 725 0034 28BF     		it	cs
 726 0036 5C46     		movcs	r4, fp
 727              	.LVL64:
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 728              		.loc 1 713 3 is_stmt 1 view .LVU264
 729              		.loc 1 713 6 is_stmt 0 view .LVU265
 730 0038 1CB9     		cbnz	r4, .L50
 731              	.LVL65:
 732              	.L40:
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 715:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:Core/Src/SEGGER_RTT.c ****     };
 722:Core/Src/SEGGER_RTT.c **** #else
 723:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 724:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 725:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 726:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 727:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 728:Core/Src/SEGGER_RTT.c **** #endif
 729:Core/Src/SEGGER_RTT.c ****   }
 730:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 731:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 732:Core/Src/SEGGER_RTT.c ****   }
 733:Core/Src/SEGGER_RTT.c ****   //
 734:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 735:Core/Src/SEGGER_RTT.c **** }
 733              		.loc 1 735 1 view .LVU266
 734 003a 2046     		mov	r0, r4
 735 003c 03B0     		add	sp, sp, #12
 736              		.cfi_remember_state
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 30


 737              		.cfi_def_cfa_offset 36
 738              		@ sp needed
 739 003e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 740              	.LVL66:
 741              	.L50:
 742              		.cfi_restore_state
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 743              		.loc 1 713 6 view .LVU267
 744 0042 A246     		mov	r10, r4
 745              	.LVL67:
 746              	.L48:
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 747              		.loc 1 714 5 is_stmt 1 view .LVU268
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 748              		.loc 1 723 5 view .LVU269
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 749              		.loc 1 714 18 is_stmt 0 view .LVU270
 750 0044 08EB0503 		add	r3, r8, r5
 751 0048 09EBC303 		add	r3, r9, r3, lsl #3
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 752              		.loc 1 723 5 view .LVU271
 753 004c 3846     		mov	r0, r7
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 754              		.loc 1 714 10 view .LVU272
 755 004e 596E     		ldr	r1, [r3, #100]
 723:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 756              		.loc 1 723 5 view .LVU273
 757 0050 2246     		mov	r2, r4
 758 0052 3144     		add	r1, r1, r6
 759 0054 FFF7FEFF 		bl	memcpy
 760              	.LVL68:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 761              		.loc 1 724 5 is_stmt 1 view .LVU274
 725:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 762              		.loc 1 725 5 view .LVU275
 726:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 763              		.loc 1 726 5 view .LVU276
 727:Core/Src/SEGGER_RTT.c **** #endif
 764              		.loc 1 727 5 view .LVU277
 727:Core/Src/SEGGER_RTT.c **** #endif
 765              		.loc 1 727 18 is_stmt 0 view .LVU278
 766 0058 2644     		add	r6, r6, r4
 767              	.LVL69:
 768              	.L44:
 730:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 769              		.loc 1 730 3 is_stmt 1 view .LVU279
 730:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 770              		.loc 1 730 6 is_stmt 0 view .LVU280
 771 005a BAF1000F 		cmp	r10, #0
 772 005e 04D0     		beq	.L47
 731:Core/Src/SEGGER_RTT.c ****   }
 773              		.loc 1 731 5 is_stmt 1 view .LVU281
 731:Core/Src/SEGGER_RTT.c ****   }
 774              		.loc 1 731 18 is_stmt 0 view .LVU282
 775 0060 A844     		add	r8, r8, r5
 776 0062 09EBC808 		add	r8, r9, r8, lsl #3
 777 0066 C8F87060 		str	r6, [r8, #112]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 31


 778              	.L47:
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 779              		.loc 1 713 6 view .LVU283
 780 006a 5446     		mov	r4, r10
 781              	.LVL70:
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 782              		.loc 1 713 6 view .LVU284
 783 006c E5E7     		b	.L40
 784              	.LVL71:
 785              	.L56:
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 786              		.loc 1 684 5 is_stmt 1 view .LVU285
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 787              		.loc 1 684 17 is_stmt 0 view .LVU286
 788 006e 9A6E     		ldr	r2, [r3, #104]
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 789              		.loc 1 686 10 view .LVU287
 790 0070 596E     		ldr	r1, [r3, #100]
 791 0072 0193     		str	r3, [sp, #4]
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 792              		.loc 1 684 17 view .LVU288
 793 0074 A2EB060A 		sub	r10, r2, r6
 794              	.LVL72:
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 795              		.loc 1 685 5 is_stmt 1 view .LVU289
 685:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 796              		.loc 1 685 17 is_stmt 0 view .LVU290
 797 0078 A245     		cmp	r10, r4
 798 007a 28BF     		it	cs
 799 007c A246     		movcs	r10, r4
 800              	.LVL73:
 686:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 801              		.loc 1 686 5 is_stmt 1 view .LVU291
 695:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 802              		.loc 1 695 5 view .LVU292
 803 007e 3144     		add	r1, r1, r6
 804 0080 5246     		mov	r2, r10
 805 0082 3846     		mov	r0, r7
 806 0084 FFF7FEFF 		bl	memcpy
 807              	.LVL74:
 696:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 808              		.loc 1 696 5 view .LVU293
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 809              		.loc 1 697 5 view .LVU294
 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 810              		.loc 1 698 5 view .LVU295
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 811              		.loc 1 704 8 is_stmt 0 view .LVU296
 812 0088 019B     		ldr	r3, [sp, #4]
 813 008a 9B6E     		ldr	r3, [r3, #104]
 699:Core/Src/SEGGER_RTT.c **** #endif
 814              		.loc 1 699 18 view .LVU297
 815 008c 5644     		add	r6, r6, r10
 816              	.LVL75:
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 817              		.loc 1 704 8 view .LVU298
 818 008e B342     		cmp	r3, r6
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 32


 698:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 819              		.loc 1 698 18 view .LVU299
 820 0090 A4EB0A04 		sub	r4, r4, r10
 821              	.LVL76:
 699:Core/Src/SEGGER_RTT.c **** #endif
 822              		.loc 1 699 5 is_stmt 1 view .LVU300
 704:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 823              		.loc 1 704 5 view .LVU301
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 824              		.loc 1 711 15 is_stmt 0 view .LVU302
 825 0094 14BF     		ite	ne
 826 0096 ABEB060B 		subne	fp, fp, r6
 827              	.LVL77:
 705:Core/Src/SEGGER_RTT.c ****     }
 828              		.loc 1 705 13 view .LVU303
 829 009a 0026     		moveq	r6, #0
 830              	.LVL78:
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 831              		.loc 1 711 3 is_stmt 1 view .LVU304
 712:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 832              		.loc 1 712 3 view .LVU305
 712:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 833              		.loc 1 712 15 is_stmt 0 view .LVU306
 834 009c 5C45     		cmp	r4, fp
 835 009e 28BF     		it	cs
 836 00a0 5C46     		movcs	r4, fp
 837              	.LVL79:
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 838              		.loc 1 713 3 is_stmt 1 view .LVU307
 713:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 839              		.loc 1 713 6 is_stmt 0 view .LVU308
 840 00a2 002C     		cmp	r4, #0
 841 00a4 D9D0     		beq	.L44
 842              	.LVL80:
 697:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 843              		.loc 1 697 18 view .LVU309
 844 00a6 5744     		add	r7, r7, r10
 845              	.LVL81:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 846              		.loc 1 724 18 view .LVU310
 847 00a8 A244     		add	r10, r10, r4
 848              	.LVL82:
 724:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 849              		.loc 1 724 18 view .LVU311
 850 00aa CBE7     		b	.L48
 851              	.LVL83:
 852              	.L55:
 853              	.LBB27:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 854              		.loc 1 674 3 is_stmt 1 discriminator 1 view .LVU312
 855 00ac FFF7FEFF 		bl	_DoInit
 856              	.LVL84:
 674:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 857              		.loc 1 674 3 is_stmt 0 discriminator 1 view .LVU313
 858 00b0 B2E7     		b	.L41
 859              	.L58:
 860 00b2 00BF     		.align	2
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 33


 861              	.L57:
 862 00b4 00000000 		.word	_SEGGER_RTT
 863              	.LBE27:
 864              		.cfi_endproc
 865              	.LFE6:
 867              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 868              		.align	1
 869              		.p2align 2,,3
 870              		.global	SEGGER_RTT_ReadUpBuffer
 871              		.syntax unified
 872              		.thumb
 873              		.thumb_func
 875              	SEGGER_RTT_ReadUpBuffer:
 876              	.LVL85:
 877              	.LFB7:
 736:Core/Src/SEGGER_RTT.c **** 
 737:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 738:Core/Src/SEGGER_RTT.c **** *
 739:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:Core/Src/SEGGER_RTT.c **** *
 741:Core/Src/SEGGER_RTT.c **** *  Function description
 742:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 745:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:Core/Src/SEGGER_RTT.c **** *
 747:Core/Src/SEGGER_RTT.c **** *  Parameters
 748:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:Core/Src/SEGGER_RTT.c **** *
 752:Core/Src/SEGGER_RTT.c **** *  Return value
 753:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:Core/Src/SEGGER_RTT.c **** *
 755:Core/Src/SEGGER_RTT.c **** *  Additional information
 756:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 758:Core/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:Core/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 760:Core/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 761:Core/Src/SEGGER_RTT.c **** */
 762:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 878              		.loc 1 762 92 is_stmt 1 view -0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 763:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 882              		.loc 1 763 3 view .LVU315
 883              	.LBB28:
 764:Core/Src/SEGGER_RTT.c **** 
 765:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 884              		.loc 1 765 3 view .LVU316
 885              		.loc 1 765 3 view .LVU317
 886              	.LBE28:
 762:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 887              		.loc 1 762 92 is_stmt 0 view .LVU318
 888 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 34


 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 4, -8
 891              		.cfi_offset 14, -4
 762:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 892              		.loc 1 762 92 view .LVU319
 893 0002 0B46     		mov	r3, r1
 894              	.LBB29:
 895              		.loc 1 765 3 view .LVU320
 896              		.syntax unified
 897              	@ 765 "Core/Src/SEGGER_RTT.c" 1
 898 0004 EFF31184 		mrs   r4, basepri  
 899 0008 4FF02001 		mov   r1, #32       
 900 000c 81F31188 		msr   basepri, r1  
 901              		
 902              	@ 0 "" 2
 903              	.LVL86:
 904              		.loc 1 765 20 is_stmt 1 view .LVU321
 766:Core/Src/SEGGER_RTT.c ****   //
 767:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:Core/Src/SEGGER_RTT.c ****   //
 769:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 905              		.loc 1 769 3 view .LVU322
 906              		.loc 1 769 18 is_stmt 0 view .LVU323
 907              		.thumb
 908              		.syntax unified
 909 0010 1946     		mov	r1, r3
 910 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 911              	.LVL87:
 770:Core/Src/SEGGER_RTT.c ****   //
 771:Core/Src/SEGGER_RTT.c ****   // Finish up.
 772:Core/Src/SEGGER_RTT.c ****   //
 773:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 912              		.loc 1 773 3 is_stmt 1 view .LVU324
 913              		.syntax unified
 914              	@ 773 "Core/Src/SEGGER_RTT.c" 1
 915 0016 84F31188 		msr   basepri, r4  
 916              		
 917              	@ 0 "" 2
 918              		.thumb
 919              		.syntax unified
 920              	.LBE29:
 921              		.loc 1 773 22 view .LVU325
 774:Core/Src/SEGGER_RTT.c ****   //
 775:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 922              		.loc 1 775 3 view .LVU326
 776:Core/Src/SEGGER_RTT.c **** }
 923              		.loc 1 776 1 is_stmt 0 view .LVU327
 924 001a 10BD     		pop	{r4, pc}
 925              		.loc 1 776 1 view .LVU328
 926              		.cfi_endproc
 927              	.LFE7:
 929              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 930              		.align	1
 931              		.p2align 2,,3
 932              		.global	SEGGER_RTT_Read
 933              		.syntax unified
 934              		.thumb
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 35


 935              		.thumb_func
 937              	SEGGER_RTT_Read:
 938              	.LVL88:
 939              	.LFB8:
 777:Core/Src/SEGGER_RTT.c **** 
 778:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 779:Core/Src/SEGGER_RTT.c **** *
 780:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:Core/Src/SEGGER_RTT.c **** *
 782:Core/Src/SEGGER_RTT.c **** *  Function description
 783:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:Core/Src/SEGGER_RTT.c **** *
 786:Core/Src/SEGGER_RTT.c **** *  Parameters
 787:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:Core/Src/SEGGER_RTT.c **** *
 791:Core/Src/SEGGER_RTT.c **** *  Return value
 792:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:Core/Src/SEGGER_RTT.c **** */
 794:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 940              		.loc 1 794 84 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 795:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 944              		.loc 1 795 3 view .LVU330
 945              	.LBB31:
 796:Core/Src/SEGGER_RTT.c **** 
 797:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 946              		.loc 1 797 3 view .LVU331
 947              		.loc 1 797 3 view .LVU332
 948              	.LBE31:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 949              		.loc 1 794 84 is_stmt 0 view .LVU333
 950 0000 10B5     		push	{r4, lr}
 951              		.cfi_def_cfa_offset 8
 952              		.cfi_offset 4, -8
 953              		.cfi_offset 14, -4
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 954              		.loc 1 794 84 view .LVU334
 955 0002 0B46     		mov	r3, r1
 956              	.LBB32:
 957              		.loc 1 797 3 view .LVU335
 958              		.syntax unified
 959              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 960 0004 EFF31184 		mrs   r4, basepri  
 961 0008 4FF02001 		mov   r1, #32       
 962 000c 81F31188 		msr   basepri, r1  
 963              		
 964              	@ 0 "" 2
 965              	.LVL89:
 966              		.loc 1 797 20 is_stmt 1 view .LVU336
 798:Core/Src/SEGGER_RTT.c ****   //
 799:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 36


 801:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 967              		.loc 1 801 3 view .LVU337
 968              		.loc 1 801 18 is_stmt 0 view .LVU338
 969              		.thumb
 970              		.syntax unified
 971 0010 1946     		mov	r1, r3
 972 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 973              	.LVL90:
 802:Core/Src/SEGGER_RTT.c ****   //
 803:Core/Src/SEGGER_RTT.c ****   // Finish up.
 804:Core/Src/SEGGER_RTT.c ****   //
 805:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 974              		.loc 1 805 3 is_stmt 1 view .LVU339
 975              		.syntax unified
 976              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 977 0016 84F31188 		msr   basepri, r4  
 978              		
 979              	@ 0 "" 2
 980              		.thumb
 981              		.syntax unified
 982              	.LBE32:
 983              		.loc 1 805 22 view .LVU340
 806:Core/Src/SEGGER_RTT.c ****   //
 807:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 984              		.loc 1 807 3 view .LVU341
 808:Core/Src/SEGGER_RTT.c **** }
 985              		.loc 1 808 1 is_stmt 0 view .LVU342
 986 001a 10BD     		pop	{r4, pc}
 987              		.loc 1 808 1 view .LVU343
 988              		.cfi_endproc
 989              	.LFE8:
 991              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 992              		.align	1
 993              		.p2align 2,,3
 994              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 999              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1000              	.LVL91:
 1001              	.LFB9:
 809:Core/Src/SEGGER_RTT.c **** 
 810:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 811:Core/Src/SEGGER_RTT.c **** *
 812:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:Core/Src/SEGGER_RTT.c **** *
 814:Core/Src/SEGGER_RTT.c **** *  Function description
 815:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 816:Core/Src/SEGGER_RTT.c **** *    control block.
 817:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 818:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:Core/Src/SEGGER_RTT.c **** *
 820:Core/Src/SEGGER_RTT.c **** *  Parameters
 821:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 822:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 37


 825:Core/Src/SEGGER_RTT.c **** *  Notes
 826:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 831:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:Core/Src/SEGGER_RTT.c **** */
 833:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1002              		.loc 1 833 104 is_stmt 1 view -0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 834:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1006              		.loc 1 834 3 view .LVU345
 835:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1007              		.loc 1 835 3 view .LVU346
 836:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1008              		.loc 1 836 3 view .LVU347
 837:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1009              		.loc 1 837 3 view .LVU348
 838:Core/Src/SEGGER_RTT.c ****   //
 839:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:Core/Src/SEGGER_RTT.c ****   //
 841:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1010              		.loc 1 841 3 view .LVU349
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1011              		.loc 1 833 104 is_stmt 0 view .LVU350
 1012 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1013              		.cfi_def_cfa_offset 40
 1014              		.cfi_offset 3, -40
 1015              		.cfi_offset 4, -36
 1016              		.cfi_offset 5, -32
 1017              		.cfi_offset 6, -28
 1018              		.cfi_offset 7, -24
 1019              		.cfi_offset 8, -20
 1020              		.cfi_offset 9, -16
 1021              		.cfi_offset 10, -12
 1022              		.cfi_offset 11, -8
 1023              		.cfi_offset 14, -4
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 843:Core/Src/SEGGER_RTT.c ****   //
 844:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:Core/Src/SEGGER_RTT.c ****   //
 846:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1024              		.loc 1 846 12 view .LVU351
 1025 0004 2E4F     		ldr	r7, .L76
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1026              		.loc 1 833 104 view .LVU352
 1027 0006 1546     		mov	r5, r2
 1028              		.loc 1 846 12 view .LVU353
 1029 0008 00EB4002 		add	r2, r0, r0, lsl #1
 1030              	.LVL92:
 1031              		.loc 1 846 12 view .LVU354
 1032 000c 07EBC202 		add	r2, r7, r2, lsl #3
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1033              		.loc 1 833 104 view .LVU355
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 38


 1034 0010 0E46     		mov	r6, r1
 1035              	.LVL93:
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1036              		.loc 1 842 3 is_stmt 1 view .LVU356
 1037              		.loc 1 846 3 view .LVU357
 1038              		.loc 1 846 12 is_stmt 0 view .LVU358
 1039 0012 536A     		ldr	r3, [r2, #36]
 1040              		.loc 1 846 28 view .LVU359
 1041 0014 916A     		ldr	r1, [r2, #40]
 1042              	.LVL94:
 1043              		.loc 1 846 6 view .LVU360
 1044 0016 8B42     		cmp	r3, r1
 833:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1045              		.loc 1 833 104 view .LVU361
 1046 0018 8146     		mov	r9, r0
 1047              		.loc 1 846 12 view .LVU362
 1048 001a 4FEA400A 		lsl	r10, r0, #1
 1049              		.loc 1 846 6 view .LVU363
 1050 001e 4BD0     		beq	.L75
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 848:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1051              		.loc 1 848 10 is_stmt 1 view .LVU364
 1052              		.loc 1 848 35 is_stmt 0 view .LVU365
 1053 0020 916A     		ldr	r1, [r2, #40]
 1054              		.loc 1 848 13 view .LVU366
 1055 0022 8B42     		cmp	r3, r1
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1056              		.loc 1 849 5 is_stmt 1 view .LVU367
 850:Core/Src/SEGGER_RTT.c ****   } else {
 851:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1057              		.loc 1 851 18 is_stmt 0 view .LVU368
 1058 0024 25BF     		ittet	cs
 1059 0026 916A     		ldrcs	r1, [r2, #40]
 1060              		.loc 1 851 11 view .LVU369
 1061 0028 126A     		ldrcs	r2, [r2, #32]
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1062              		.loc 1 849 18 view .LVU370
 1063 002a 926A     		ldrcc	r2, [r2, #40]
 1064              		.loc 1 851 5 is_stmt 1 view .LVU371
 1065              		.loc 1 851 11 is_stmt 0 view .LVU372
 1066 002c 5218     		addcs	r2, r2, r1
 1067 002e 013A     		subs	r2, r2, #1
 1068 0030 D21A     		subs	r2, r2, r3
 1069              	.LVL95:
 1070              	.L65:
 852:Core/Src/SEGGER_RTT.c ****   }
 853:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1071              		.loc 1 853 3 is_stmt 1 view .LVU373
 1072              		.loc 1 853 6 is_stmt 0 view .LVU374
 1073 0032 AA42     		cmp	r2, r5
 1074 0034 11D2     		bcs	.L67
 854:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1075              		.loc 1 854 5 is_stmt 1 view .LVU375
 1076              		.loc 1 854 10 is_stmt 0 view .LVU376
 1077 0036 0AEB0901 		add	r1, r10, r9
 1078 003a 07EBC101 		add	r1, r7, r1, lsl #3
 1079 003e 886A     		ldr	r0, [r1, #40]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 39


 1080              	.LVL96:
 1081              		.loc 1 854 18 view .LVU377
 1082 0040 2844     		add	r0, r0, r5
 1083 0042 821A     		subs	r2, r0, r2
 1084              	.LVL97:
 1085              		.loc 1 854 18 view .LVU378
 1086 0044 8A62     		str	r2, [r1, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1087              		.loc 1 855 5 is_stmt 1 view .LVU379
 1088              		.loc 1 855 25 view .LVU380
 1089              		.loc 1 855 17 is_stmt 0 view .LVU381
 1090 0046 8A6A     		ldr	r2, [r1, #40]
 1091              		.loc 1 855 33 view .LVU382
 1092 0048 086A     		ldr	r0, [r1, #32]
 1093              		.loc 1 855 25 view .LVU383
 1094 004a 8242     		cmp	r2, r0
 1095 004c 05D3     		bcc	.L67
 1096              	.L68:
 856:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1097              		.loc 1 856 7 is_stmt 1 view .LVU384
 1098              		.loc 1 856 12 is_stmt 0 view .LVU385
 1099 004e 8A6A     		ldr	r2, [r1, #40]
 1100              		.loc 1 856 20 view .LVU386
 1101 0050 121A     		subs	r2, r2, r0
 1102 0052 8A62     		str	r2, [r1, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1103              		.loc 1 855 25 is_stmt 1 view .LVU387
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1104              		.loc 1 855 17 is_stmt 0 view .LVU388
 1105 0054 8A6A     		ldr	r2, [r1, #40]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1106              		.loc 1 855 25 view .LVU389
 1107 0056 8242     		cmp	r2, r0
 1108 0058 F9D2     		bcs	.L68
 1109              	.L67:
 857:Core/Src/SEGGER_RTT.c ****     }
 858:Core/Src/SEGGER_RTT.c ****   }
 859:Core/Src/SEGGER_RTT.c ****   //
 860:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:Core/Src/SEGGER_RTT.c ****   //
 862:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1110              		.loc 1 862 3 is_stmt 1 view .LVU390
 1111              		.loc 1 862 16 is_stmt 0 view .LVU391
 1112 005a 0AEB0908 		add	r8, r10, r9
 1113 005e 07EBC802 		add	r2, r7, r8, lsl #3
 1114 0062 09F1010B 		add	fp, r9, #1
 1115              		.loc 1 862 9 view .LVU392
 1116 0066 146A     		ldr	r4, [r2, #32]
 863:Core/Src/SEGGER_RTT.c ****   do {
 864:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 865:Core/Src/SEGGER_RTT.c ****       //
 866:Core/Src/SEGGER_RTT.c ****       // Last round
 867:Core/Src/SEGGER_RTT.c ****       //
 868:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1117              		.loc 1 868 20 view .LVU393
 1118 0068 0BEB4B0B 		add	fp, fp, fp, lsl #1
 862:Core/Src/SEGGER_RTT.c ****   do {
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 40


 1119              		.loc 1 862 9 view .LVU394
 1120 006c E41A     		subs	r4, r4, r3
 1121              	.LVL98:
 1122              		.loc 1 868 20 view .LVU395
 1123 006e 07EBCB0B 		add	fp, r7, fp, lsl #3
 1124 0072 0DE0     		b	.L71
 1125              	.LVL99:
 1126              	.L69:
 869:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:Core/Src/SEGGER_RTT.c ****       };
 874:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:Core/Src/SEGGER_RTT.c **** #else
 877:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 878:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 880:Core/Src/SEGGER_RTT.c **** #endif
 881:Core/Src/SEGGER_RTT.c ****       break;
 882:Core/Src/SEGGER_RTT.c ****     } else {
 883:Core/Src/SEGGER_RTT.c ****       //
 884:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 885:Core/Src/SEGGER_RTT.c ****       //
 886:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 887:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
 890:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:Core/Src/SEGGER_RTT.c ****       };
 892:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:Core/Src/SEGGER_RTT.c **** #else
 895:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1127              		.loc 1 895 7 view .LVU396
 1128 0074 FFF7FEFF 		bl	memcpy
 1129              	.LVL100:
 896:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1130              		.loc 1 896 7 is_stmt 1 view .LVU397
 1131              		.loc 1 896 13 is_stmt 0 view .LVU398
 1132 0078 2644     		add	r6, r6, r4
 1133              	.LVL101:
 897:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1134              		.loc 1 897 7 is_stmt 1 view .LVU399
 1135              		.syntax unified
 1136              	@ 897 "Core/Src/SEGGER_RTT.c" 1
 1137 007a BFF35F8F 		dmb
 1138              	
 1139              	@ 0 "" 2
 1140              		.loc 1 897 17 view .LVU400
 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1141              		.loc 1 898 7 view .LVU401
 1142              		.loc 1 898 20 is_stmt 0 view .LVU402
 1143              		.thumb
 1144              		.syntax unified
 1145 007e 07EBC803 		add	r3, r7, r8, lsl #3
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 41


 1146 0082 0022     		movs	r2, #0
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 900:Core/Src/SEGGER_RTT.c **** #endif
 901:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1147              		.loc 1 901 13 view .LVU403
 1148 0084 196A     		ldr	r1, [r3, #32]
 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1149              		.loc 1 898 20 view .LVU404
 1150 0086 5A62     		str	r2, [r3, #36]
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1151              		.loc 1 899 7 is_stmt 1 view .LVU405
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1152              		.loc 1 899 16 is_stmt 0 view .LVU406
 1153 0088 2D1B     		subs	r5, r5, r4
 1154              	.LVL102:
 1155              		.loc 1 901 7 is_stmt 1 view .LVU407
 1156 008a 1346     		mov	r3, r2
 1157              		.loc 1 901 13 is_stmt 0 view .LVU408
 1158 008c 4C1E     		subs	r4, r1, #1
 1159              	.LVL103:
 902:Core/Src/SEGGER_RTT.c ****     }
 903:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 1160              		.loc 1 903 12 is_stmt 1 view .LVU409
 1161 008e 8DB1     		cbz	r5, .L63
 1162              	.LVL104:
 1163              	.L71:
 863:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1164              		.loc 1 863 3 view .LVU410
 864:Core/Src/SEGGER_RTT.c ****       //
 1165              		.loc 1 864 5 view .LVU411
 886:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1166              		.loc 1 886 7 view .LVU412
 895:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1167              		.loc 1 895 7 view .LVU413
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1168              		.loc 1 868 12 is_stmt 0 view .LVU414
 1169 0090 DBF80400 		ldr	r0, [fp, #4]
 864:Core/Src/SEGGER_RTT.c ****       //
 1170              		.loc 1 864 8 view .LVU415
 1171 0094 A542     		cmp	r5, r4
 895:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1172              		.loc 1 895 7 view .LVU416
 1173 0096 2246     		mov	r2, r4
 1174 0098 3146     		mov	r1, r6
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1175              		.loc 1 868 12 view .LVU417
 1176 009a 1844     		add	r0, r0, r3
 864:Core/Src/SEGGER_RTT.c ****       //
 1177              		.loc 1 864 8 view .LVU418
 1178 009c EAD2     		bcs	.L69
 1179              	.LVL105:
 868:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1180              		.loc 1 868 7 is_stmt 1 view .LVU419
 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1181              		.loc 1 877 7 view .LVU420
 1182 009e 2A46     		mov	r2, r5
 1183              	.LVL106:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 42


 877:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1184              		.loc 1 877 7 is_stmt 0 view .LVU421
 1185 00a0 FFF7FEFF 		bl	memcpy
 1186              	.LVL107:
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1187              		.loc 1 878 7 is_stmt 1 view .LVU422
 1188              		.syntax unified
 1189              	@ 878 "Core/Src/SEGGER_RTT.c" 1
 1190 00a4 BFF35F8F 		dmb
 1191              	
 1192              	@ 0 "" 2
 878:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1193              		.loc 1 878 17 view .LVU423
 879:Core/Src/SEGGER_RTT.c **** #endif
 1194              		.loc 1 879 7 view .LVU424
 879:Core/Src/SEGGER_RTT.c **** #endif
 1195              		.loc 1 879 20 is_stmt 0 view .LVU425
 1196              		.thumb
 1197              		.syntax unified
 1198 00a8 CA44     		add	r10, r10, r9
 1199 00aa 07EBCA07 		add	r7, r7, r10, lsl #3
 1200 00ae 7B6A     		ldr	r3, [r7, #36]
 1201 00b0 2B44     		add	r3, r3, r5
 1202 00b2 7B62     		str	r3, [r7, #36]
 881:Core/Src/SEGGER_RTT.c ****     } else {
 1203              		.loc 1 881 7 is_stmt 1 view .LVU426
 1204              	.LVL108:
 1205              	.L63:
 904:Core/Src/SEGGER_RTT.c **** }
 1206              		.loc 1 904 1 is_stmt 0 view .LVU427
 1207 00b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1208              	.LVL109:
 1209              	.L75:
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1210              		.loc 1 847 5 is_stmt 1 view .LVU428
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1211              		.loc 1 847 11 is_stmt 0 view .LVU429
 1212 00b8 126A     		ldr	r2, [r2, #32]
 1213 00ba 013A     		subs	r2, r2, #1
 1214              	.LVL110:
 847:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1215              		.loc 1 847 11 view .LVU430
 1216 00bc B9E7     		b	.L65
 1217              	.L77:
 1218 00be 00BF     		.align	2
 1219              	.L76:
 1220 00c0 00000000 		.word	_SEGGER_RTT
 1221              		.cfi_endproc
 1222              	.LFE9:
 1224              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1225              		.align	1
 1226              		.p2align 2,,3
 1227              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1232              	SEGGER_RTT_WriteDownBufferNoLock:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 43


 1233              	.LVL111:
 1234              	.LFB10:
 905:Core/Src/SEGGER_RTT.c **** 
 906:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 907:Core/Src/SEGGER_RTT.c **** *
 908:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:Core/Src/SEGGER_RTT.c **** *
 910:Core/Src/SEGGER_RTT.c **** *  Function description
 911:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:Core/Src/SEGGER_RTT.c **** *
 916:Core/Src/SEGGER_RTT.c **** *  Parameters
 917:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:Core/Src/SEGGER_RTT.c **** *
 923:Core/Src/SEGGER_RTT.c **** *  Return value
 924:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 925:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:Core/Src/SEGGER_RTT.c **** *
 927:Core/Src/SEGGER_RTT.c **** *  Notes
 928:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 931:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:Core/Src/SEGGER_RTT.c **** */
 933:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 936:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 938:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 941:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:Core/Src/SEGGER_RTT.c ****   //
 943:Core/Src/SEGGER_RTT.c ****   // Cases:
 944:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:Core/Src/SEGGER_RTT.c ****   //
 950:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:Core/Src/SEGGER_RTT.c ****   //
 952:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 954:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 957:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 958:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 959:Core/Src/SEGGER_RTT.c **** CopyStraight:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 44


 960:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 961:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 962:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 963:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 964:Core/Src/SEGGER_RTT.c ****       return 1;
 965:Core/Src/SEGGER_RTT.c ****     }
 966:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 967:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 968:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 969:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 970:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 971:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 972:Core/Src/SEGGER_RTT.c ****       //
 973:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 974:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 975:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 976:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 977:Core/Src/SEGGER_RTT.c ****       //
 978:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 979:Core/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 980:Core/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 981:Core/Src/SEGGER_RTT.c ****       }
 982:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 983:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 984:Core/Src/SEGGER_RTT.c ****       return 1;
 985:Core/Src/SEGGER_RTT.c ****     }
 986:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 987:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 988:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 989:Core/Src/SEGGER_RTT.c ****       goto CopyStraight;
 990:Core/Src/SEGGER_RTT.c ****     }
 991:Core/Src/SEGGER_RTT.c ****   }
 992:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 993:Core/Src/SEGGER_RTT.c **** }
 994:Core/Src/SEGGER_RTT.c **** #endif
 995:Core/Src/SEGGER_RTT.c **** 
 996:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 997:Core/Src/SEGGER_RTT.c **** *
 998:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 999:Core/Src/SEGGER_RTT.c **** *
1000:Core/Src/SEGGER_RTT.c **** *  Function description
1001:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1002:Core/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1003:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1004:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1005:Core/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1006:Core/Src/SEGGER_RTT.c **** *
1007:Core/Src/SEGGER_RTT.c **** *  Parameters
1008:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1009:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1010:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1011:Core/Src/SEGGER_RTT.c **** *
1012:Core/Src/SEGGER_RTT.c **** *  Return value
1013:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1014:Core/Src/SEGGER_RTT.c **** *
1015:Core/Src/SEGGER_RTT.c **** *  Notes
1016:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 45


1017:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1018:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1019:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1020:Core/Src/SEGGER_RTT.c **** *
1021:Core/Src/SEGGER_RTT.c **** *  Additional information
1022:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1023:Core/Src/SEGGER_RTT.c **** */
1024:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1235              		.loc 1 1024 105 is_stmt 1 view -0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
1025:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1239              		.loc 1 1025 3 view .LVU432
1026:Core/Src/SEGGER_RTT.c ****   unsigned                Avail;
 1240              		.loc 1 1026 3 view .LVU433
1027:Core/Src/SEGGER_RTT.c ****   const char*             pData;
 1241              		.loc 1 1027 3 view .LVU434
1028:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1242              		.loc 1 1028 3 view .LVU435
1029:Core/Src/SEGGER_RTT.c ****   //
1030:Core/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1031:Core/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1032:Core/Src/SEGGER_RTT.c ****   //
1033:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1243              		.loc 1 1033 3 view .LVU436
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1244              		.loc 1 1024 105 is_stmt 0 view .LVU437
 1245 0000 38B5     		push	{r3, r4, r5, lr}
 1246              		.cfi_def_cfa_offset 16
 1247              		.cfi_offset 3, -16
 1248              		.cfi_offset 4, -12
 1249              		.cfi_offset 5, -8
 1250              		.cfi_offset 14, -4
1034:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1251              		.loc 1 1034 9 view .LVU438
 1252 0002 1B4B     		ldr	r3, .L89
 1253 0004 00EB4000 		add	r0, r0, r0, lsl #1
 1254              	.LVL112:
 1255              		.loc 1 1034 9 view .LVU439
 1256 0008 03EBC000 		add	r0, r3, r0, lsl #3
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1257              		.loc 1 1024 105 view .LVU440
 1258 000c 8C46     		mov	ip, r1
 1259              	.LVL113:
 1260              		.loc 1 1034 3 is_stmt 1 view .LVU441
1035:Core/Src/SEGGER_RTT.c ****   //
1036:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1037:Core/Src/SEGGER_RTT.c ****   //
1038:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1261              		.loc 1 1038 3 view .LVU442
 1262              		.loc 1 1038 16 is_stmt 0 view .LVU443
 1263 000e 4469     		ldr	r4, [r0, #20]
 1264              		.loc 1 1038 3 view .LVU444
 1265 0010 012C     		cmp	r4, #1
1024:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
 1266              		.loc 1 1024 105 view .LVU445
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 46


 1267 0012 1546     		mov	r5, r2
 1268              		.loc 1 1038 3 view .LVU446
 1269 0014 12D0     		beq	.L79
 1270 0016 022C     		cmp	r4, #2
 1271 0018 0CD0     		beq	.L80
 1272 001a FCB9     		cbnz	r4, .L86
1039:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1040:Core/Src/SEGGER_RTT.c ****     //
1041:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1042:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1043:Core/Src/SEGGER_RTT.c ****     //
1044:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1273              		.loc 1 1044 5 is_stmt 1 view .LVU447
 1274              	.LVL114:
 1275              	.LBB33:
 1276              	.LBI33:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1277              		.loc 1 526 17 view .LVU448
 1278              	.LBB34:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1279              		.loc 1 527 3 view .LVU449
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1280              		.loc 1 528 3 view .LVU450
 529:Core/Src/SEGGER_RTT.c ****   //
 1281              		.loc 1 529 3 view .LVU451
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1282              		.loc 1 534 3 view .LVU452
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1283              		.loc 1 534 9 is_stmt 0 view .LVU453
 1284 001c 0369     		ldr	r3, [r0, #16]
 1285              	.LVL115:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1286              		.loc 1 535 3 is_stmt 1 view .LVU454
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1287              		.loc 1 535 9 is_stmt 0 view .LVU455
 1288 001e C268     		ldr	r2, [r0, #12]
 1289              	.LVL116:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1290              		.loc 1 536 3 is_stmt 1 view .LVU456
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1291              		.loc 1 536 6 is_stmt 0 view .LVU457
 1292 0020 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1293              		.loc 1 537 5 is_stmt 1 view .LVU458
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1294              		.loc 1 537 7 is_stmt 0 view .LVU459
 1295 0022 9CBF     		itt	ls
 1296 0024 8168     		ldrls	r1, [r0, #8]
 1297              	.LVL117:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1298              		.loc 1 537 7 view .LVU460
 1299 0026 5B18     		addls	r3, r3, r1
 1300              	.LVL118:
 539:Core/Src/SEGGER_RTT.c ****   }
 1301              		.loc 1 539 5 is_stmt 1 view .LVU461
 539:Core/Src/SEGGER_RTT.c ****   }
 1302              		.loc 1 539 7 is_stmt 0 view .LVU462
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 47


 1303 0028 013B     		subs	r3, r3, #1
 1304 002a 9A1A     		subs	r2, r3, r2
 1305              	.LVL119:
 541:Core/Src/SEGGER_RTT.c **** }
 1306              		.loc 1 541 3 is_stmt 1 view .LVU463
 541:Core/Src/SEGGER_RTT.c **** }
 1307              		.loc 1 541 3 is_stmt 0 view .LVU464
 1308              	.LBE34:
 1309              	.LBE33:
1045:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1310              		.loc 1 1045 5 is_stmt 1 view .LVU465
 1311              		.loc 1 1045 8 is_stmt 0 view .LVU466
 1312 002c 9542     		cmp	r5, r2
 1313 002e 18D9     		bls	.L88
 1314              	.LVL120:
 1315              	.L78:
1046:Core/Src/SEGGER_RTT.c ****       Status = 0u;
1047:Core/Src/SEGGER_RTT.c ****     } else {
1048:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1049:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1050:Core/Src/SEGGER_RTT.c ****     }
1051:Core/Src/SEGGER_RTT.c ****     break;
1052:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1053:Core/Src/SEGGER_RTT.c ****     //
1054:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1055:Core/Src/SEGGER_RTT.c ****     //
1056:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1057:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1058:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1059:Core/Src/SEGGER_RTT.c ****     break;
1060:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1061:Core/Src/SEGGER_RTT.c ****     //
1062:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1063:Core/Src/SEGGER_RTT.c ****     //
1064:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1065:Core/Src/SEGGER_RTT.c ****     break;
1066:Core/Src/SEGGER_RTT.c ****   default:
1067:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1068:Core/Src/SEGGER_RTT.c ****     break;
1069:Core/Src/SEGGER_RTT.c ****   }
1070:Core/Src/SEGGER_RTT.c ****   //
1071:Core/Src/SEGGER_RTT.c ****   // Finish up.
1072:Core/Src/SEGGER_RTT.c ****   //
1073:Core/Src/SEGGER_RTT.c ****   return Status;
1074:Core/Src/SEGGER_RTT.c **** }
 1316              		.loc 1 1074 1 view .LVU467
 1317 0030 2046     		mov	r0, r4
 1318 0032 38BD     		pop	{r3, r4, r5, pc}
 1319              	.LVL121:
 1320              	.L80:
1064:Core/Src/SEGGER_RTT.c ****     break;
 1321              		.loc 1 1064 5 is_stmt 1 view .LVU468
 1322              		.loc 1 1074 1 is_stmt 0 view .LVU469
 1323 0034 BDE83840 		pop	{r3, r4, r5, lr}
 1324              		.cfi_remember_state
 1325              		.cfi_restore 14
 1326              		.cfi_restore 5
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 48


 1327              		.cfi_restore 4
 1328              		.cfi_restore 3
 1329              		.cfi_def_cfa_offset 0
1064:Core/Src/SEGGER_RTT.c ****     break;
 1330              		.loc 1 1064 14 view .LVU470
 1331 0038 FFF7FEBF 		b	_WriteBlocking
 1332              	.LVL122:
 1333              	.L79:
 1334              		.cfi_restore_state
1056:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1335              		.loc 1 1056 5 is_stmt 1 view .LVU471
 1336              	.LBB35:
 1337              	.LBI35:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1338              		.loc 1 526 17 view .LVU472
 1339              	.LBB36:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1340              		.loc 1 527 3 view .LVU473
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1341              		.loc 1 528 3 view .LVU474
 529:Core/Src/SEGGER_RTT.c ****   //
 1342              		.loc 1 529 3 view .LVU475
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1343              		.loc 1 534 3 view .LVU476
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1344              		.loc 1 534 9 is_stmt 0 view .LVU477
 1345 003c 0369     		ldr	r3, [r0, #16]
 1346              	.LVL123:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1347              		.loc 1 535 3 is_stmt 1 view .LVU478
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1348              		.loc 1 535 9 is_stmt 0 view .LVU479
 1349 003e C468     		ldr	r4, [r0, #12]
 1350              	.LVL124:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1351              		.loc 1 536 3 is_stmt 1 view .LVU480
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1352              		.loc 1 536 6 is_stmt 0 view .LVU481
 1353 0040 A342     		cmp	r3, r4
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1354              		.loc 1 537 5 is_stmt 1 view .LVU482
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1355              		.loc 1 537 7 is_stmt 0 view .LVU483
 1356 0042 9CBF     		itt	ls
 1357 0044 8268     		ldrls	r2, [r0, #8]
 1358              	.LVL125:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1359              		.loc 1 537 7 view .LVU484
 1360 0046 9B18     		addls	r3, r3, r2
 1361              	.LVL126:
 539:Core/Src/SEGGER_RTT.c ****   }
 1362              		.loc 1 539 5 is_stmt 1 view .LVU485
 539:Core/Src/SEGGER_RTT.c ****   }
 1363              		.loc 1 539 7 is_stmt 0 view .LVU486
 1364 0048 013B     		subs	r3, r3, #1
 1365 004a 1C1B     		subs	r4, r3, r4
 1366              	.LVL127:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 49


 541:Core/Src/SEGGER_RTT.c **** }
 1367              		.loc 1 541 3 is_stmt 1 view .LVU487
 541:Core/Src/SEGGER_RTT.c **** }
 1368              		.loc 1 541 3 is_stmt 0 view .LVU488
 1369              	.LBE36:
 1370              	.LBE35:
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1371              		.loc 1 1057 5 is_stmt 1 view .LVU489
1057:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1372              		.loc 1 1057 12 is_stmt 0 view .LVU490
 1373 004c AC42     		cmp	r4, r5
 1374 004e 28BF     		it	cs
 1375 0050 2C46     		movcs	r4, r5
 1376              	.LVL128:
1058:Core/Src/SEGGER_RTT.c ****     break;
 1377              		.loc 1 1058 5 is_stmt 1 view .LVU491
 1378 0052 2246     		mov	r2, r4
 1379 0054 FFF7FEFF 		bl	_WriteNoCheck
 1380              	.LVL129:
1059:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1381              		.loc 1 1059 5 view .LVU492
 1382              		.loc 1 1074 1 is_stmt 0 view .LVU493
 1383 0058 2046     		mov	r0, r4
 1384 005a 38BD     		pop	{r3, r4, r5, pc}
 1385              	.LVL130:
 1386              	.L86:
1067:Core/Src/SEGGER_RTT.c ****     break;
 1387              		.loc 1 1067 12 view .LVU494
 1388 005c 0024     		movs	r4, #0
 1389              	.LVL131:
1073:Core/Src/SEGGER_RTT.c **** }
 1390              		.loc 1 1073 3 is_stmt 1 view .LVU495
 1391              		.loc 1 1074 1 is_stmt 0 view .LVU496
 1392 005e 2046     		mov	r0, r4
 1393              	.LVL132:
 1394              		.loc 1 1074 1 view .LVU497
 1395 0060 38BD     		pop	{r3, r4, r5, pc}
 1396              	.LVL133:
 1397              	.L88:
1048:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1398              		.loc 1 1048 7 is_stmt 1 view .LVU498
1049:Core/Src/SEGGER_RTT.c ****     }
 1399              		.loc 1 1049 7 view .LVU499
 1400 0062 2A46     		mov	r2, r5
 1401              	.LVL134:
1049:Core/Src/SEGGER_RTT.c ****     }
 1402              		.loc 1 1049 7 is_stmt 0 view .LVU500
 1403 0064 6146     		mov	r1, ip
 1404 0066 FFF7FEFF 		bl	_WriteNoCheck
 1405              	.LVL135:
1048:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1406              		.loc 1 1048 14 view .LVU501
 1407 006a 2C46     		mov	r4, r5
 1408 006c E0E7     		b	.L78
 1409              	.L90:
 1410 006e 00BF     		.align	2
 1411              	.L89:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 50


 1412 0070 60000000 		.word	_SEGGER_RTT+96
 1413              		.cfi_endproc
 1414              	.LFE10:
 1416              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1417              		.align	1
 1418              		.p2align 2,,3
 1419              		.global	SEGGER_RTT_WriteNoLock
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1424              	SEGGER_RTT_WriteNoLock:
 1425              	.LVL136:
 1426              	.LFB11:
1075:Core/Src/SEGGER_RTT.c **** 
1076:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1077:Core/Src/SEGGER_RTT.c **** *
1078:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1079:Core/Src/SEGGER_RTT.c **** *
1080:Core/Src/SEGGER_RTT.c **** *  Function description
1081:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1082:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1083:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1084:Core/Src/SEGGER_RTT.c **** *
1085:Core/Src/SEGGER_RTT.c **** *  Parameters
1086:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1087:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1088:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1089:Core/Src/SEGGER_RTT.c **** *
1090:Core/Src/SEGGER_RTT.c **** *  Return value
1091:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1092:Core/Src/SEGGER_RTT.c **** *
1093:Core/Src/SEGGER_RTT.c **** *  Notes
1094:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1095:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1096:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1097:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1098:Core/Src/SEGGER_RTT.c **** */
1099:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1427              		.loc 1 1099 95 is_stmt 1 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
1100:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1431              		.loc 1 1100 3 view .LVU503
1101:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1432              		.loc 1 1101 3 view .LVU504
1102:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 1433              		.loc 1 1102 3 view .LVU505
1103:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1434              		.loc 1 1103 3 view .LVU506
1104:Core/Src/SEGGER_RTT.c ****   //
1105:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1106:Core/Src/SEGGER_RTT.c ****   //
1107:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1435              		.loc 1 1107 3 view .LVU507
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1436              		.loc 1 1099 95 is_stmt 0 view .LVU508
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 51


 1437 0000 38B5     		push	{r3, r4, r5, lr}
 1438              		.cfi_def_cfa_offset 16
 1439              		.cfi_offset 3, -16
 1440              		.cfi_offset 4, -12
 1441              		.cfi_offset 5, -8
 1442              		.cfi_offset 14, -4
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1443              		.loc 1 1108 9 view .LVU509
 1444 0002 214B     		ldr	r3, .L102
1109:Core/Src/SEGGER_RTT.c ****   //
1110:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1111:Core/Src/SEGGER_RTT.c ****   //
1112:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1445              		.loc 1 1112 16 view .LVU510
 1446 0004 00EB4004 		add	r4, r0, r0, lsl #1
 1447 0008 03EBC40E 		add	lr, r3, r4, lsl #3
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1448              		.loc 1 1108 9 view .LVU511
 1449 000c 0130     		adds	r0, r0, #1
 1450              	.LVL137:
 1451              		.loc 1 1112 16 view .LVU512
 1452 000e DEF82C40 		ldr	r4, [lr, #44]
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1453              		.loc 1 1108 9 view .LVU513
 1454 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1455              	.LVL138:
 1456              		.loc 1 1112 3 view .LVU514
 1457 0016 012C     		cmp	r4, #1
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1458              		.loc 1 1099 95 view .LVU515
 1459 0018 8C46     		mov	ip, r1
 1460              	.LVL139:
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1461              		.loc 1 1108 3 is_stmt 1 view .LVU516
1099:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1462              		.loc 1 1099 95 is_stmt 0 view .LVU517
 1463 001a 1546     		mov	r5, r2
1108:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1464              		.loc 1 1108 9 view .LVU518
 1465 001c 03EBC000 		add	r0, r3, r0, lsl #3
 1466              	.LVL140:
 1467              		.loc 1 1112 3 is_stmt 1 view .LVU519
 1468 0020 15D0     		beq	.L92
 1469 0022 022C     		cmp	r4, #2
 1470 0024 0FD0     		beq	.L93
 1471 0026 34BB     		cbnz	r4, .L99
1113:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1114:Core/Src/SEGGER_RTT.c ****     //
1115:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1116:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1117:Core/Src/SEGGER_RTT.c ****     //
1118:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1472              		.loc 1 1118 5 view .LVU520
 1473              	.LVL141:
 1474              	.LBB37:
 1475              	.LBI37:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 52


 1476              		.loc 1 526 17 view .LVU521
 1477              	.LBB38:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 1478              		.loc 1 527 3 view .LVU522
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1479              		.loc 1 528 3 view .LVU523
 529:Core/Src/SEGGER_RTT.c ****   //
 1480              		.loc 1 529 3 view .LVU524
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1481              		.loc 1 534 3 view .LVU525
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1482              		.loc 1 534 9 is_stmt 0 view .LVU526
 1483 0028 DEF82830 		ldr	r3, [lr, #40]
 1484              	.LVL142:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1485              		.loc 1 535 3 is_stmt 1 view .LVU527
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1486              		.loc 1 535 9 is_stmt 0 view .LVU528
 1487 002c DEF82420 		ldr	r2, [lr, #36]
 1488              	.LVL143:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1489              		.loc 1 536 3 is_stmt 1 view .LVU529
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1490              		.loc 1 536 6 is_stmt 0 view .LVU530
 1491 0030 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1492              		.loc 1 537 5 is_stmt 1 view .LVU531
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1493              		.loc 1 537 7 is_stmt 0 view .LVU532
 1494 0032 9CBF     		itt	ls
 1495 0034 DEF82010 		ldrls	r1, [lr, #32]
 1496              	.LVL144:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1497              		.loc 1 537 7 view .LVU533
 1498 0038 5B18     		addls	r3, r3, r1
 1499              	.LVL145:
 539:Core/Src/SEGGER_RTT.c ****   }
 1500              		.loc 1 539 5 is_stmt 1 view .LVU534
 539:Core/Src/SEGGER_RTT.c ****   }
 1501              		.loc 1 539 7 is_stmt 0 view .LVU535
 1502 003a 013B     		subs	r3, r3, #1
 1503 003c 9A1A     		subs	r2, r3, r2
 1504              	.LVL146:
 541:Core/Src/SEGGER_RTT.c **** }
 1505              		.loc 1 541 3 is_stmt 1 view .LVU536
 541:Core/Src/SEGGER_RTT.c **** }
 1506              		.loc 1 541 3 is_stmt 0 view .LVU537
 1507              	.LBE38:
 1508              	.LBE37:
1119:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1509              		.loc 1 1119 5 is_stmt 1 view .LVU538
 1510              		.loc 1 1119 8 is_stmt 0 view .LVU539
 1511 003e 9542     		cmp	r5, r2
 1512 0040 1CD9     		bls	.L101
 1513              	.LVL147:
 1514              	.L91:
1120:Core/Src/SEGGER_RTT.c ****       Status = 0u;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 53


1121:Core/Src/SEGGER_RTT.c ****     } else {
1122:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1123:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1124:Core/Src/SEGGER_RTT.c ****     }
1125:Core/Src/SEGGER_RTT.c ****     break;
1126:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1127:Core/Src/SEGGER_RTT.c ****     //
1128:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1129:Core/Src/SEGGER_RTT.c ****     //
1130:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1131:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1132:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1133:Core/Src/SEGGER_RTT.c ****     break;
1134:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1135:Core/Src/SEGGER_RTT.c ****     //
1136:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1137:Core/Src/SEGGER_RTT.c ****     //
1138:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1139:Core/Src/SEGGER_RTT.c ****     break;
1140:Core/Src/SEGGER_RTT.c ****   default:
1141:Core/Src/SEGGER_RTT.c ****     Status = 0u;
1142:Core/Src/SEGGER_RTT.c ****     break;
1143:Core/Src/SEGGER_RTT.c ****   }
1144:Core/Src/SEGGER_RTT.c ****   //
1145:Core/Src/SEGGER_RTT.c ****   // Finish up.
1146:Core/Src/SEGGER_RTT.c ****   //
1147:Core/Src/SEGGER_RTT.c ****   return Status;
1148:Core/Src/SEGGER_RTT.c **** }
 1515              		.loc 1 1148 1 view .LVU540
 1516 0042 2046     		mov	r0, r4
 1517 0044 38BD     		pop	{r3, r4, r5, pc}
 1518              	.LVL148:
 1519              	.L93:
1138:Core/Src/SEGGER_RTT.c ****     break;
 1520              		.loc 1 1138 5 is_stmt 1 view .LVU541
 1521              		.loc 1 1148 1 is_stmt 0 view .LVU542
 1522 0046 BDE83840 		pop	{r3, r4, r5, lr}
 1523              		.cfi_remember_state
 1524              		.cfi_restore 14
 1525              		.cfi_restore 5
 1526              		.cfi_restore 4
 1527              		.cfi_restore 3
 1528              		.cfi_def_cfa_offset 0
1138:Core/Src/SEGGER_RTT.c ****     break;
 1529              		.loc 1 1138 14 view .LVU543
 1530 004a FFF7FEBF 		b	_WriteBlocking
 1531              	.LVL149:
 1532              	.L92:
 1533              		.cfi_restore_state
1130:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1534              		.loc 1 1130 5 is_stmt 1 view .LVU544
 1535              	.LBB39:
 1536              	.LBI39:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1537              		.loc 1 526 17 view .LVU545
 1538              	.LBB40:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 54


 1539              		.loc 1 527 3 view .LVU546
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 1540              		.loc 1 528 3 view .LVU547
 529:Core/Src/SEGGER_RTT.c ****   //
 1541              		.loc 1 529 3 view .LVU548
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1542              		.loc 1 534 3 view .LVU549
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1543              		.loc 1 534 9 is_stmt 0 view .LVU550
 1544 004e DEF82830 		ldr	r3, [lr, #40]
 1545              	.LVL150:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1546              		.loc 1 535 3 is_stmt 1 view .LVU551
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1547              		.loc 1 535 9 is_stmt 0 view .LVU552
 1548 0052 DEF82440 		ldr	r4, [lr, #36]
 1549              	.LVL151:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1550              		.loc 1 536 3 is_stmt 1 view .LVU553
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1551              		.loc 1 536 6 is_stmt 0 view .LVU554
 1552 0056 A342     		cmp	r3, r4
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1553              		.loc 1 537 5 is_stmt 1 view .LVU555
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1554              		.loc 1 537 7 is_stmt 0 view .LVU556
 1555 0058 9CBF     		itt	ls
 1556 005a DEF82010 		ldrls	r1, [lr, #32]
 1557              	.LVL152:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 1558              		.loc 1 537 7 view .LVU557
 1559 005e 5B18     		addls	r3, r3, r1
 1560              	.LVL153:
 539:Core/Src/SEGGER_RTT.c ****   }
 1561              		.loc 1 539 5 is_stmt 1 view .LVU558
 539:Core/Src/SEGGER_RTT.c ****   }
 1562              		.loc 1 539 7 is_stmt 0 view .LVU559
 1563 0060 013B     		subs	r3, r3, #1
 1564 0062 1C1B     		subs	r4, r3, r4
 1565              	.LVL154:
 541:Core/Src/SEGGER_RTT.c **** }
 1566              		.loc 1 541 3 is_stmt 1 view .LVU560
 541:Core/Src/SEGGER_RTT.c **** }
 1567              		.loc 1 541 3 is_stmt 0 view .LVU561
 1568              	.LBE40:
 1569              	.LBE39:
1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1570              		.loc 1 1131 5 is_stmt 1 view .LVU562
1131:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1571              		.loc 1 1131 12 is_stmt 0 view .LVU563
 1572 0064 9442     		cmp	r4, r2
 1573 0066 28BF     		it	cs
 1574 0068 1446     		movcs	r4, r2
 1575              	.LVL155:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1576              		.loc 1 1132 5 is_stmt 1 view .LVU564
 1577 006a 2246     		mov	r2, r4
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 55


 1578              	.LVL156:
1132:Core/Src/SEGGER_RTT.c ****     break;
 1579              		.loc 1 1132 5 is_stmt 0 view .LVU565
 1580 006c 6146     		mov	r1, ip
 1581 006e FFF7FEFF 		bl	_WriteNoCheck
 1582              	.LVL157:
1133:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1583              		.loc 1 1133 5 is_stmt 1 view .LVU566
 1584              		.loc 1 1148 1 is_stmt 0 view .LVU567
 1585 0072 2046     		mov	r0, r4
 1586 0074 38BD     		pop	{r3, r4, r5, pc}
 1587              	.LVL158:
 1588              	.L99:
1141:Core/Src/SEGGER_RTT.c ****     break;
 1589              		.loc 1 1141 12 view .LVU568
 1590 0076 0024     		movs	r4, #0
 1591              	.LVL159:
1147:Core/Src/SEGGER_RTT.c **** }
 1592              		.loc 1 1147 3 is_stmt 1 view .LVU569
 1593              		.loc 1 1148 1 is_stmt 0 view .LVU570
 1594 0078 2046     		mov	r0, r4
 1595              	.LVL160:
 1596              		.loc 1 1148 1 view .LVU571
 1597 007a 38BD     		pop	{r3, r4, r5, pc}
 1598              	.LVL161:
 1599              	.L101:
1122:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1600              		.loc 1 1122 7 is_stmt 1 view .LVU572
1123:Core/Src/SEGGER_RTT.c ****     }
 1601              		.loc 1 1123 7 view .LVU573
 1602 007c 2A46     		mov	r2, r5
 1603              	.LVL162:
1123:Core/Src/SEGGER_RTT.c ****     }
 1604              		.loc 1 1123 7 is_stmt 0 view .LVU574
 1605 007e 6146     		mov	r1, ip
 1606 0080 FFF7FEFF 		bl	_WriteNoCheck
 1607              	.LVL163:
1122:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1608              		.loc 1 1122 14 view .LVU575
 1609 0084 2C46     		mov	r4, r5
 1610 0086 DCE7     		b	.L91
 1611              	.L103:
 1612              		.align	2
 1613              	.L102:
 1614 0088 00000000 		.word	_SEGGER_RTT
 1615              		.cfi_endproc
 1616              	.LFE11:
 1618              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1619              		.align	1
 1620              		.p2align 2,,3
 1621              		.global	SEGGER_RTT_WriteDownBuffer
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1626              	SEGGER_RTT_WriteDownBuffer:
 1627              	.LVL164:
 1628              	.LFB12:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 56


1149:Core/Src/SEGGER_RTT.c **** 
1150:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1151:Core/Src/SEGGER_RTT.c **** *
1152:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1153:Core/Src/SEGGER_RTT.c **** *
1154:Core/Src/SEGGER_RTT.c **** *  Function description
1155:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1156:Core/Src/SEGGER_RTT.c **** *
1157:Core/Src/SEGGER_RTT.c **** *  Parameters
1158:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1159:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1160:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1161:Core/Src/SEGGER_RTT.c **** *
1162:Core/Src/SEGGER_RTT.c **** *  Return value
1163:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1164:Core/Src/SEGGER_RTT.c **** *
1165:Core/Src/SEGGER_RTT.c **** *  Notes
1166:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1167:Core/Src/SEGGER_RTT.c **** *
1168:Core/Src/SEGGER_RTT.c **** *  Additional information
1169:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1170:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1171:Core/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1172:Core/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1173:Core/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1174:Core/Src/SEGGER_RTT.c **** */
1175:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1629              		.loc 1 1175 99 is_stmt 1 view -0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
1176:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1633              		.loc 1 1176 3 view .LVU577
 1634              	.LBB41:
1177:Core/Src/SEGGER_RTT.c **** 
1178:Core/Src/SEGGER_RTT.c ****   INIT();
 1635              		.loc 1 1178 3 view .LVU578
 1636              		.loc 1 1178 3 view .LVU579
 1637              		.loc 1 1178 3 view .LVU580
 1638              		.loc 1 1178 3 view .LVU581
 1639              	.LBE41:
1175:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1640              		.loc 1 1175 99 is_stmt 0 view .LVU582
 1641 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1642              		.cfi_def_cfa_offset 24
 1643              		.cfi_offset 3, -24
 1644              		.cfi_offset 4, -20
 1645              		.cfi_offset 5, -16
 1646              		.cfi_offset 6, -12
 1647              		.cfi_offset 7, -8
 1648              		.cfi_offset 14, -4
 1649              	.LBB42:
 1650              		.loc 1 1178 3 view .LVU583
 1651 0002 0B4B     		ldr	r3, .L108
 1652 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1653              	.LBE42:
1175:Core/Src/SEGGER_RTT.c ****   unsigned Status;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 57


 1654              		.loc 1 1175 99 view .LVU584
 1655 0006 0446     		mov	r4, r0
 1656 0008 0D46     		mov	r5, r1
 1657 000a 1646     		mov	r6, r2
 1658              	.LBB43:
 1659              		.loc 1 1178 3 view .LVU585
 1660 000c 6BB1     		cbz	r3, .L107
 1661              	.LVL165:
 1662              	.L105:
 1663              		.loc 1 1178 3 is_stmt 1 discriminator 3 view .LVU586
 1664              	.LBE43:
 1665              		.loc 1 1178 9 discriminator 3 view .LVU587
 1666              	.LBB44:
1179:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1667              		.loc 1 1179 3 view .LVU588
 1668              		.loc 1 1179 3 view .LVU589
 1669              		.syntax unified
 1670              	@ 1179 "Core/Src/SEGGER_RTT.c" 1
 1671 000e EFF31187 		mrs   r7, basepri  
 1672 0012 4FF02001 		mov   r1, #32       
 1673 0016 81F31188 		msr   basepri, r1  
 1674              		
 1675              	@ 0 "" 2
 1676              	.LVL166:
 1677              		.loc 1 1179 20 view .LVU590
1180:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1678              		.loc 1 1180 3 view .LVU591
 1679              		.loc 1 1180 12 is_stmt 0 view .LVU592
 1680              		.thumb
 1681              		.syntax unified
 1682 001a 3246     		mov	r2, r6
 1683 001c 2946     		mov	r1, r5
 1684 001e 2046     		mov	r0, r4
 1685 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1686              	.LVL167:
1181:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1687              		.loc 1 1181 3 is_stmt 1 view .LVU593
 1688              		.syntax unified
 1689              	@ 1181 "Core/Src/SEGGER_RTT.c" 1
 1690 0024 87F31188 		msr   basepri, r7  
 1691              		
 1692              	@ 0 "" 2
 1693              		.thumb
 1694              		.syntax unified
 1695              	.LBE44:
 1696              		.loc 1 1181 22 view .LVU594
1182:Core/Src/SEGGER_RTT.c ****   return Status;
 1697              		.loc 1 1182 3 view .LVU595
1183:Core/Src/SEGGER_RTT.c **** }
 1698              		.loc 1 1183 1 is_stmt 0 view .LVU596
 1699 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1700              	.LVL168:
 1701              	.L107:
 1702              	.LBB45:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1703              		.loc 1 1178 3 is_stmt 1 discriminator 1 view .LVU597
 1704 002a FFF7FEFF 		bl	_DoInit
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 58


 1705              	.LVL169:
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1706              		.loc 1 1178 3 is_stmt 0 discriminator 1 view .LVU598
 1707 002e EEE7     		b	.L105
 1708              	.L109:
 1709              		.align	2
 1710              	.L108:
 1711 0030 00000000 		.word	_SEGGER_RTT
 1712              	.LBE45:
 1713              		.cfi_endproc
 1714              	.LFE12:
 1716              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1717              		.align	1
 1718              		.p2align 2,,3
 1719              		.global	SEGGER_RTT_Write
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1724              	SEGGER_RTT_Write:
 1725              	.LVL170:
 1726              	.LFB13:
1184:Core/Src/SEGGER_RTT.c **** 
1185:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1186:Core/Src/SEGGER_RTT.c **** *
1187:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1188:Core/Src/SEGGER_RTT.c **** *
1189:Core/Src/SEGGER_RTT.c **** *  Function description
1190:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1191:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1192:Core/Src/SEGGER_RTT.c **** *
1193:Core/Src/SEGGER_RTT.c **** *  Parameters
1194:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1195:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1196:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1197:Core/Src/SEGGER_RTT.c **** *
1198:Core/Src/SEGGER_RTT.c **** *  Return value
1199:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1200:Core/Src/SEGGER_RTT.c **** *
1201:Core/Src/SEGGER_RTT.c **** *  Notes
1202:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1203:Core/Src/SEGGER_RTT.c **** */
1204:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1727              		.loc 1 1204 89 is_stmt 1 view -0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
1205:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1731              		.loc 1 1205 3 view .LVU600
 1732              	.LBB48:
1206:Core/Src/SEGGER_RTT.c **** 
1207:Core/Src/SEGGER_RTT.c ****   INIT();
 1733              		.loc 1 1207 3 view .LVU601
 1734              		.loc 1 1207 3 view .LVU602
 1735              		.loc 1 1207 3 view .LVU603
 1736              		.loc 1 1207 3 view .LVU604
 1737              	.LBE48:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 59


 1738              		.loc 1 1204 89 is_stmt 0 view .LVU605
 1739 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1740              		.cfi_def_cfa_offset 24
 1741              		.cfi_offset 3, -24
 1742              		.cfi_offset 4, -20
 1743              		.cfi_offset 5, -16
 1744              		.cfi_offset 6, -12
 1745              		.cfi_offset 7, -8
 1746              		.cfi_offset 14, -4
 1747              	.LBB49:
 1748              		.loc 1 1207 3 view .LVU606
 1749 0002 0B4B     		ldr	r3, .L114
 1750 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1751              	.LBE49:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1752              		.loc 1 1204 89 view .LVU607
 1753 0006 0446     		mov	r4, r0
 1754 0008 0D46     		mov	r5, r1
 1755 000a 1646     		mov	r6, r2
 1756              	.LBB50:
 1757              		.loc 1 1207 3 view .LVU608
 1758 000c 6BB1     		cbz	r3, .L113
 1759              	.LVL171:
 1760              	.L111:
 1761              		.loc 1 1207 3 is_stmt 1 discriminator 3 view .LVU609
 1762              	.LBE50:
 1763              		.loc 1 1207 9 discriminator 3 view .LVU610
 1764              	.LBB51:
1208:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1765              		.loc 1 1208 3 view .LVU611
 1766              		.loc 1 1208 3 view .LVU612
 1767              		.syntax unified
 1768              	@ 1208 "Core/Src/SEGGER_RTT.c" 1
 1769 000e EFF31187 		mrs   r7, basepri  
 1770 0012 4FF02001 		mov   r1, #32       
 1771 0016 81F31188 		msr   basepri, r1  
 1772              		
 1773              	@ 0 "" 2
 1774              	.LVL172:
 1775              		.loc 1 1208 20 view .LVU613
1209:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1776              		.loc 1 1209 3 view .LVU614
 1777              		.loc 1 1209 12 is_stmt 0 view .LVU615
 1778              		.thumb
 1779              		.syntax unified
 1780 001a 3246     		mov	r2, r6
 1781 001c 2946     		mov	r1, r5
 1782 001e 2046     		mov	r0, r4
 1783 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1784              	.LVL173:
1210:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1785              		.loc 1 1210 3 is_stmt 1 view .LVU616
 1786              		.syntax unified
 1787              	@ 1210 "Core/Src/SEGGER_RTT.c" 1
 1788 0024 87F31188 		msr   basepri, r7  
 1789              		
 1790              	@ 0 "" 2
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 60


 1791              		.thumb
 1792              		.syntax unified
 1793              	.LBE51:
 1794              		.loc 1 1210 22 view .LVU617
1211:Core/Src/SEGGER_RTT.c ****   return Status;
 1795              		.loc 1 1211 3 view .LVU618
1212:Core/Src/SEGGER_RTT.c **** }
 1796              		.loc 1 1212 1 is_stmt 0 view .LVU619
 1797 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1798              	.LVL174:
 1799              	.L113:
 1800              	.LBB52:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1801              		.loc 1 1207 3 is_stmt 1 discriminator 1 view .LVU620
 1802 002a FFF7FEFF 		bl	_DoInit
 1803              	.LVL175:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1804              		.loc 1 1207 3 is_stmt 0 discriminator 1 view .LVU621
 1805 002e EEE7     		b	.L111
 1806              	.L115:
 1807              		.align	2
 1808              	.L114:
 1809 0030 00000000 		.word	_SEGGER_RTT
 1810              	.LBE52:
 1811              		.cfi_endproc
 1812              	.LFE13:
 1814              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1815              		.align	1
 1816              		.p2align 2,,3
 1817              		.global	SEGGER_RTT_WriteString
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1822              	SEGGER_RTT_WriteString:
 1823              	.LVL176:
 1824              	.LFB14:
1213:Core/Src/SEGGER_RTT.c **** 
1214:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1215:Core/Src/SEGGER_RTT.c **** *
1216:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1217:Core/Src/SEGGER_RTT.c **** *
1218:Core/Src/SEGGER_RTT.c **** *  Function description
1219:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1220:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
1221:Core/Src/SEGGER_RTT.c **** *
1222:Core/Src/SEGGER_RTT.c **** *  Parameters
1223:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1224:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1225:Core/Src/SEGGER_RTT.c **** *
1226:Core/Src/SEGGER_RTT.c **** *  Return value
1227:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1228:Core/Src/SEGGER_RTT.c **** *
1229:Core/Src/SEGGER_RTT.c **** *  Notes
1230:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1231:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1232:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1233:Core/Src/SEGGER_RTT.c **** */
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 61


1234:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1825              		.loc 1 1234 70 is_stmt 1 view -0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
1235:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1829              		.loc 1 1235 3 view .LVU623
1236:Core/Src/SEGGER_RTT.c **** 
1237:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1830              		.loc 1 1237 3 view .LVU624
1234:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1831              		.loc 1 1234 70 is_stmt 0 view .LVU625
 1832 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1833              		.cfi_def_cfa_offset 24
 1834              		.cfi_offset 3, -24
 1835              		.cfi_offset 4, -20
 1836              		.cfi_offset 5, -16
 1837              		.cfi_offset 6, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
1234:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1840              		.loc 1 1234 70 view .LVU626
 1841 0002 0546     		mov	r5, r0
 1842              		.loc 1 1237 9 view .LVU627
 1843 0004 0846     		mov	r0, r1
 1844              	.LVL177:
1234:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1845              		.loc 1 1234 70 view .LVU628
 1846 0006 0C46     		mov	r4, r1
 1847              		.loc 1 1237 9 view .LVU629
 1848 0008 FFF7FEFF 		bl	strlen
 1849              	.LVL178:
 1850              	.LBB57:
 1851              	.LBB58:
 1852              	.LBB59:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1853              		.loc 1 1207 3 view .LVU630
 1854 000c 0A4B     		ldr	r3, .L120
 1855 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1856              	.LBE59:
 1857              	.LBE58:
 1858              	.LBE57:
 1859              		.loc 1 1237 9 view .LVU631
 1860 0010 0646     		mov	r6, r0
 1861              	.LVL179:
1238:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1862              		.loc 1 1238 3 is_stmt 1 view .LVU632
 1863              	.LBB65:
 1864              	.LBI57:
1204:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1865              		.loc 1 1204 10 view .LVU633
 1866              	.LBB63:
1205:Core/Src/SEGGER_RTT.c **** 
 1867              		.loc 1 1205 3 view .LVU634
 1868              	.LBB60:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1869              		.loc 1 1207 3 view .LVU635
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 62


1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1870              		.loc 1 1207 3 view .LVU636
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1871              		.loc 1 1207 3 view .LVU637
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1872              		.loc 1 1207 3 view .LVU638
 1873 0012 6BB1     		cbz	r3, .L119
 1874              	.LVL180:
 1875              	.L117:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1876              		.loc 1 1207 3 discriminator 3 view .LVU639
 1877              	.LBE60:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1878              		.loc 1 1207 9 discriminator 3 view .LVU640
 1879              	.LBB61:
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1880              		.loc 1 1208 3 view .LVU641
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1881              		.loc 1 1208 3 view .LVU642
 1882              		.syntax unified
 1883              	@ 1208 "Core/Src/SEGGER_RTT.c" 1
 1884 0014 EFF31187 		mrs   r7, basepri  
 1885 0018 4FF02001 		mov   r1, #32       
 1886 001c 81F31188 		msr   basepri, r1  
 1887              		
 1888              	@ 0 "" 2
 1889              	.LVL181:
1208:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1890              		.loc 1 1208 20 view .LVU643
1209:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1891              		.loc 1 1209 3 view .LVU644
1209:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1892              		.loc 1 1209 12 is_stmt 0 view .LVU645
 1893              		.thumb
 1894              		.syntax unified
 1895 0020 3246     		mov	r2, r6
 1896 0022 2146     		mov	r1, r4
 1897 0024 2846     		mov	r0, r5
 1898 0026 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1899              	.LVL182:
1210:Core/Src/SEGGER_RTT.c ****   return Status;
 1900              		.loc 1 1210 3 is_stmt 1 view .LVU646
 1901              		.syntax unified
 1902              	@ 1210 "Core/Src/SEGGER_RTT.c" 1
 1903 002a 87F31188 		msr   basepri, r7  
 1904              		
 1905              	@ 0 "" 2
 1906              		.thumb
 1907              		.syntax unified
 1908              	.LBE61:
1210:Core/Src/SEGGER_RTT.c ****   return Status;
 1909              		.loc 1 1210 22 view .LVU647
1211:Core/Src/SEGGER_RTT.c **** }
 1910              		.loc 1 1211 3 view .LVU648
 1911              	.LVL183:
1211:Core/Src/SEGGER_RTT.c **** }
 1912              		.loc 1 1211 3 is_stmt 0 view .LVU649
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 63


 1913              	.LBE63:
 1914              	.LBE65:
1239:Core/Src/SEGGER_RTT.c **** }
 1915              		.loc 1 1239 1 view .LVU650
 1916 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1917              	.LVL184:
 1918              	.L119:
 1919              	.LBB66:
 1920              	.LBB64:
 1921              	.LBB62:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1922              		.loc 1 1207 3 is_stmt 1 discriminator 1 view .LVU651
 1923 0030 FFF7FEFF 		bl	_DoInit
 1924              	.LVL185:
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1925              		.loc 1 1207 3 is_stmt 0 discriminator 1 view .LVU652
 1926 0034 EEE7     		b	.L117
 1927              	.L121:
 1928 0036 00BF     		.align	2
 1929              	.L120:
 1930 0038 00000000 		.word	_SEGGER_RTT
 1931              	.LBE62:
 1932              	.LBE64:
 1933              	.LBE66:
 1934              		.cfi_endproc
 1935              	.LFE14:
 1937              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1938              		.align	1
 1939              		.p2align 2,,3
 1940              		.global	SEGGER_RTT_PutCharSkipNoLock
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1945              	SEGGER_RTT_PutCharSkipNoLock:
 1946              	.LVL186:
 1947              	.LFB15:
1240:Core/Src/SEGGER_RTT.c **** 
1241:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1242:Core/Src/SEGGER_RTT.c **** *
1243:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1244:Core/Src/SEGGER_RTT.c **** *
1245:Core/Src/SEGGER_RTT.c **** *  Function description
1246:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1247:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1248:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1249:Core/Src/SEGGER_RTT.c **** *
1250:Core/Src/SEGGER_RTT.c **** *  Parameters
1251:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1252:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1253:Core/Src/SEGGER_RTT.c **** *
1254:Core/Src/SEGGER_RTT.c **** *  Return value
1255:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1256:Core/Src/SEGGER_RTT.c **** *
1257:Core/Src/SEGGER_RTT.c **** *  Notes
1258:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1259:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1260:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 64


1261:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1262:Core/Src/SEGGER_RTT.c **** */
1263:Core/Src/SEGGER_RTT.c **** 
1264:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1948              		.loc 1 1264 69 is_stmt 1 view -0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
1265:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1953              		.loc 1 1265 3 view .LVU654
1266:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1954              		.loc 1 1266 3 view .LVU655
1267:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1955              		.loc 1 1267 3 view .LVU656
1268:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1956              		.loc 1 1268 3 view .LVU657
1269:Core/Src/SEGGER_RTT.c ****   //
1270:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1271:Core/Src/SEGGER_RTT.c ****   //
1272:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1957              		.loc 1 1272 3 view .LVU658
1264:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1958              		.loc 1 1264 69 is_stmt 0 view .LVU659
 1959 0000 F0B4     		push	{r4, r5, r6, r7}
 1960              		.cfi_def_cfa_offset 16
 1961              		.cfi_offset 4, -16
 1962              		.cfi_offset 5, -12
 1963              		.cfi_offset 6, -8
 1964              		.cfi_offset 7, -4
1273:Core/Src/SEGGER_RTT.c ****   //
1274:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1275:Core/Src/SEGGER_RTT.c ****   //
1276:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1965              		.loc 1 1276 16 view .LVU660
 1966 0002 0F4C     		ldr	r4, .L128
 1967              	.LVL187:
 1968              		.loc 1 1276 3 is_stmt 1 view .LVU661
 1969              		.loc 1 1276 16 is_stmt 0 view .LVU662
 1970 0004 00EB4003 		add	r3, r0, r0, lsl #1
 1971 0008 04EBC303 		add	r3, r4, r3, lsl #3
 1972 000c 5D6A     		ldr	r5, [r3, #36]
1277:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
1278:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 1973              		.loc 1 1278 11 view .LVU663
 1974 000e 1F6A     		ldr	r7, [r3, #32]
1279:Core/Src/SEGGER_RTT.c ****   }
1280:Core/Src/SEGGER_RTT.c ****   //
1281:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1282:Core/Src/SEGGER_RTT.c ****   //
1283:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1975              		.loc 1 1283 21 view .LVU664
 1976 0010 9E6A     		ldr	r6, [r3, #40]
1276:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1977              		.loc 1 1276 9 view .LVU665
 1978 0012 6A1C     		adds	r2, r5, #1
 1979              	.LVL188:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 65


1277:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1980              		.loc 1 1277 3 is_stmt 1 view .LVU666
1278:Core/Src/SEGGER_RTT.c ****   }
 1981              		.loc 1 1278 11 is_stmt 0 view .LVU667
 1982 0014 9742     		cmp	r7, r2
 1983 0016 08BF     		it	eq
 1984 0018 0022     		moveq	r2, #0
 1985              	.LVL189:
 1986              		.loc 1 1283 3 is_stmt 1 view .LVU668
 1987              		.loc 1 1283 6 is_stmt 0 view .LVU669
 1988 001a 9642     		cmp	r6, r2
 1989 001c 0CD0     		beq	.L126
1284:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1990              		.loc 1 1284 5 is_stmt 1 view .LVU670
 1991              		.loc 1 1284 18 is_stmt 0 view .LVU671
 1992 001e 0130     		adds	r0, r0, #1
 1993              	.LVL190:
 1994              		.loc 1 1284 18 view .LVU672
 1995 0020 00EB4000 		add	r0, r0, r0, lsl #1
 1996              	.LVL191:
 1997              		.loc 1 1284 18 view .LVU673
 1998 0024 04EBC004 		add	r4, r4, r0, lsl #3
 1999              		.loc 1 1284 10 view .LVU674
 2000 0028 6068     		ldr	r0, [r4, #4]
 2001              	.LVL192:
1285:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2002              		.loc 1 1285 5 is_stmt 1 view .LVU675
 2003              		.loc 1 1285 11 is_stmt 0 view .LVU676
 2004 002a 4155     		strb	r1, [r0, r5]
1286:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2005              		.loc 1 1286 5 is_stmt 1 view .LVU677
 2006              		.syntax unified
 2007              	@ 1286 "Core/Src/SEGGER_RTT.c" 1
 2008 002c BFF35F8F 		dmb
 2009              	
 2010              	@ 0 "" 2
 2011              		.loc 1 1286 15 view .LVU678
1287:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2012              		.loc 1 1287 5 view .LVU679
1288:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2013              		.loc 1 1288 12 is_stmt 0 view .LVU680
 2014              		.thumb
 2015              		.syntax unified
 2016 0030 0120     		movs	r0, #1
 2017              	.LVL193:
1289:Core/Src/SEGGER_RTT.c ****   } else {
1290:Core/Src/SEGGER_RTT.c ****     Status = 0;
1291:Core/Src/SEGGER_RTT.c ****   }
1292:Core/Src/SEGGER_RTT.c ****   //
1293:Core/Src/SEGGER_RTT.c ****   return Status;
1294:Core/Src/SEGGER_RTT.c **** }
 2018              		.loc 1 1294 1 view .LVU681
 2019 0032 F0BC     		pop	{r4, r5, r6, r7}
 2020              		.cfi_remember_state
 2021              		.cfi_restore 7
 2022              		.cfi_restore 6
 2023              		.cfi_restore 5
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 66


 2024              		.cfi_restore 4
 2025              		.cfi_def_cfa_offset 0
1287:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2026              		.loc 1 1287 18 view .LVU682
 2027 0034 5A62     		str	r2, [r3, #36]
1288:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2028              		.loc 1 1288 5 is_stmt 1 view .LVU683
 2029              	.LVL194:
 2030              		.loc 1 1294 1 is_stmt 0 view .LVU684
 2031 0036 7047     		bx	lr
 2032              	.LVL195:
 2033              	.L126:
 2034              		.cfi_restore_state
1290:Core/Src/SEGGER_RTT.c ****   }
 2035              		.loc 1 1290 12 view .LVU685
 2036 0038 0020     		movs	r0, #0
 2037              	.LVL196:
1293:Core/Src/SEGGER_RTT.c **** }
 2038              		.loc 1 1293 3 is_stmt 1 view .LVU686
 2039              		.loc 1 1294 1 is_stmt 0 view .LVU687
 2040 003a F0BC     		pop	{r4, r5, r6, r7}
 2041              		.cfi_restore 7
 2042              		.cfi_restore 6
 2043              		.cfi_restore 5
 2044              		.cfi_restore 4
 2045              		.cfi_def_cfa_offset 0
 2046 003c 7047     		bx	lr
 2047              	.L129:
 2048 003e 00BF     		.align	2
 2049              	.L128:
 2050 0040 00000000 		.word	_SEGGER_RTT
 2051              		.cfi_endproc
 2052              	.LFE15:
 2054              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 2055              		.align	1
 2056              		.p2align 2,,3
 2057              		.global	SEGGER_RTT_PutCharSkip
 2058              		.syntax unified
 2059              		.thumb
 2060              		.thumb_func
 2062              	SEGGER_RTT_PutCharSkip:
 2063              	.LVL197:
 2064              	.LFB16:
1295:Core/Src/SEGGER_RTT.c **** 
1296:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1297:Core/Src/SEGGER_RTT.c **** *
1298:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1299:Core/Src/SEGGER_RTT.c **** *
1300:Core/Src/SEGGER_RTT.c **** *  Function description
1301:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1302:Core/Src/SEGGER_RTT.c **** *
1303:Core/Src/SEGGER_RTT.c **** *  Parameters
1304:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1305:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1306:Core/Src/SEGGER_RTT.c **** *
1307:Core/Src/SEGGER_RTT.c **** *  Return value
1308:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 67


1309:Core/Src/SEGGER_RTT.c **** *
1310:Core/Src/SEGGER_RTT.c **** *  Notes
1311:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1312:Core/Src/SEGGER_RTT.c **** */
1313:Core/Src/SEGGER_RTT.c **** 
1314:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 2065              		.loc 1 1314 63 is_stmt 1 view -0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
1315:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2069              		.loc 1 1315 3 view .LVU689
1316:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2070              		.loc 1 1316 3 view .LVU690
1317:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2071              		.loc 1 1317 3 view .LVU691
1318:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2072              		.loc 1 1318 3 view .LVU692
 2073              	.LBB67:
1319:Core/Src/SEGGER_RTT.c ****   //
1320:Core/Src/SEGGER_RTT.c ****   // Prepare
1321:Core/Src/SEGGER_RTT.c ****   //
1322:Core/Src/SEGGER_RTT.c ****   INIT();
 2074              		.loc 1 1322 3 view .LVU693
 2075              		.loc 1 1322 3 view .LVU694
 2076              		.loc 1 1322 3 view .LVU695
 2077              		.loc 1 1322 3 view .LVU696
 2078              	.LBE67:
1314:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2079              		.loc 1 1314 63 is_stmt 0 view .LVU697
 2080 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2081              		.cfi_def_cfa_offset 24
 2082              		.cfi_offset 3, -24
 2083              		.cfi_offset 4, -20
 2084              		.cfi_offset 5, -16
 2085              		.cfi_offset 6, -12
 2086              		.cfi_offset 7, -8
 2087              		.cfi_offset 14, -4
 2088              	.LBB68:
 2089              		.loc 1 1322 3 view .LVU698
 2090 0002 164D     		ldr	r5, .L138
 2091 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2092              	.LBE68:
1314:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2093              		.loc 1 1314 63 view .LVU699
 2094 0006 0446     		mov	r4, r0
 2095 0008 0E46     		mov	r6, r1
 2096              	.LBB69:
 2097              		.loc 1 1322 3 view .LVU700
 2098 000a 23B3     		cbz	r3, .L137
 2099              	.LVL198:
 2100              	.L131:
 2101              		.loc 1 1322 3 is_stmt 1 discriminator 3 view .LVU701
 2102              	.LBE69:
 2103              		.loc 1 1322 9 discriminator 3 view .LVU702
 2104              	.LBB70:
1323:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 68


 2105              		.loc 1 1323 3 view .LVU703
 2106              		.loc 1 1323 3 view .LVU704
 2107              		.syntax unified
 2108              	@ 1323 "Core/Src/SEGGER_RTT.c" 1
 2109 000c EFF3118C 		mrs   ip, basepri  
 2110 0010 4FF02001 		mov   r1, #32       
 2111 0014 81F31188 		msr   basepri, r1  
 2112              		
 2113              	@ 0 "" 2
 2114              	.LVL199:
 2115              		.loc 1 1323 20 view .LVU705
1324:Core/Src/SEGGER_RTT.c ****   //
1325:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1326:Core/Src/SEGGER_RTT.c ****   //
1327:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2116              		.loc 1 1327 3 view .LVU706
1328:Core/Src/SEGGER_RTT.c ****   //
1329:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1330:Core/Src/SEGGER_RTT.c ****   //
1331:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2117              		.loc 1 1331 3 view .LVU707
 2118              		.loc 1 1331 16 is_stmt 0 view .LVU708
 2119              		.thumb
 2120              		.syntax unified
 2121 0018 04EB4403 		add	r3, r4, r4, lsl #1
 2122 001c 05EBC303 		add	r3, r5, r3, lsl #3
1332:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2123              		.loc 1 1332 6 view .LVU709
 2124 0020 D3E90801 		ldrd	r0, r1, [r3, #32]
1333:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1334:Core/Src/SEGGER_RTT.c ****   }
1335:Core/Src/SEGGER_RTT.c ****   //
1336:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1337:Core/Src/SEGGER_RTT.c ****   //
1338:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2125              		.loc 1 1338 21 view .LVU710
 2126 0024 9F6A     		ldr	r7, [r3, #40]
1331:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2127              		.loc 1 1331 9 view .LVU711
 2128 0026 4A1C     		adds	r2, r1, #1
 2129              	.LVL200:
1332:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2130              		.loc 1 1332 3 is_stmt 1 view .LVU712
1333:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2131              		.loc 1 1333 11 is_stmt 0 view .LVU713
 2132 0028 9042     		cmp	r0, r2
 2133 002a 08BF     		it	eq
 2134 002c 0022     		moveq	r2, #0
 2135              	.LVL201:
 2136              		.loc 1 1338 3 is_stmt 1 view .LVU714
 2137              		.loc 1 1338 6 is_stmt 0 view .LVU715
 2138 002e 9742     		cmp	r7, r2
 2139 0030 0DD0     		beq	.L135
1339:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2140              		.loc 1 1339 5 is_stmt 1 view .LVU716
 2141              		.loc 1 1339 19 is_stmt 0 view .LVU717
 2142 0032 0134     		adds	r4, r4, #1
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 69


 2143              	.LVL202:
 2144              		.loc 1 1339 19 view .LVU718
 2145 0034 04EB4404 		add	r4, r4, r4, lsl #1
 2146              	.LVL203:
 2147              		.loc 1 1339 19 view .LVU719
 2148 0038 05EBC405 		add	r5, r5, r4, lsl #3
 2149              		.loc 1 1339 11 view .LVU720
 2150 003c 6868     		ldr	r0, [r5, #4]
 2151              	.LVL204:
1340:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2152              		.loc 1 1340 5 is_stmt 1 view .LVU721
 2153              		.loc 1 1340 11 is_stmt 0 view .LVU722
 2154 003e 4654     		strb	r6, [r0, r1]
1341:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2155              		.loc 1 1341 5 is_stmt 1 view .LVU723
 2156              		.syntax unified
 2157              	@ 1341 "Core/Src/SEGGER_RTT.c" 1
 2158 0040 BFF35F8F 		dmb
 2159              	
 2160              	@ 0 "" 2
 2161              		.loc 1 1341 15 view .LVU724
1342:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2162              		.loc 1 1342 5 view .LVU725
1343:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2163              		.loc 1 1343 12 is_stmt 0 view .LVU726
 2164              		.thumb
 2165              		.syntax unified
 2166 0044 0120     		movs	r0, #1
 2167              	.LVL205:
1342:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2168              		.loc 1 1342 18 view .LVU727
 2169 0046 5A62     		str	r2, [r3, #36]
 2170              		.loc 1 1343 5 is_stmt 1 view .LVU728
 2171              	.LVL206:
1344:Core/Src/SEGGER_RTT.c ****   } else {
1345:Core/Src/SEGGER_RTT.c ****     Status = 0;
1346:Core/Src/SEGGER_RTT.c ****   }
1347:Core/Src/SEGGER_RTT.c ****   //
1348:Core/Src/SEGGER_RTT.c ****   // Finish up.
1349:Core/Src/SEGGER_RTT.c ****   //
1350:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2172              		.loc 1 1350 3 view .LVU729
 2173              		.syntax unified
 2174              	@ 1350 "Core/Src/SEGGER_RTT.c" 1
 2175 0048 8CF31188 		msr   basepri, ip  
 2176              		
 2177              	@ 0 "" 2
 2178              		.thumb
 2179              		.syntax unified
 2180              	.LBE70:
 2181              		.loc 1 1350 22 view .LVU730
1351:Core/Src/SEGGER_RTT.c ****   //
1352:Core/Src/SEGGER_RTT.c ****   return Status;
 2182              		.loc 1 1352 3 view .LVU731
1353:Core/Src/SEGGER_RTT.c **** }
 2183              		.loc 1 1353 1 is_stmt 0 view .LVU732
 2184 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 70


 2185              	.LVL207:
 2186              	.L135:
 2187              	.LBB71:
1345:Core/Src/SEGGER_RTT.c ****   }
 2188              		.loc 1 1345 12 view .LVU733
 2189 004e 0020     		movs	r0, #0
 2190              	.LVL208:
1350:Core/Src/SEGGER_RTT.c ****   //
 2191              		.loc 1 1350 3 is_stmt 1 view .LVU734
 2192              		.syntax unified
 2193              	@ 1350 "Core/Src/SEGGER_RTT.c" 1
 2194 0050 8CF31188 		msr   basepri, ip  
 2195              		
 2196              	@ 0 "" 2
 2197              		.thumb
 2198              		.syntax unified
 2199              	.LBE71:
1350:Core/Src/SEGGER_RTT.c ****   //
 2200              		.loc 1 1350 22 view .LVU735
1352:Core/Src/SEGGER_RTT.c **** }
 2201              		.loc 1 1352 3 view .LVU736
 2202              		.loc 1 1353 1 is_stmt 0 view .LVU737
 2203 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2204              	.LVL209:
 2205              	.L137:
 2206              	.LBB72:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2207              		.loc 1 1322 3 is_stmt 1 discriminator 1 view .LVU738
 2208 0056 FFF7FEFF 		bl	_DoInit
 2209              	.LVL210:
1322:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2210              		.loc 1 1322 3 is_stmt 0 discriminator 1 view .LVU739
 2211 005a D7E7     		b	.L131
 2212              	.L139:
 2213              		.align	2
 2214              	.L138:
 2215 005c 00000000 		.word	_SEGGER_RTT
 2216              	.LBE72:
 2217              		.cfi_endproc
 2218              	.LFE16:
 2220              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2221              		.align	1
 2222              		.p2align 2,,3
 2223              		.global	SEGGER_RTT_PutChar
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2228              	SEGGER_RTT_PutChar:
 2229              	.LVL211:
 2230              	.LFB17:
1354:Core/Src/SEGGER_RTT.c **** 
1355:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1356:Core/Src/SEGGER_RTT.c **** *
1357:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1358:Core/Src/SEGGER_RTT.c **** *
1359:Core/Src/SEGGER_RTT.c **** *  Function description
1360:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 71


1361:Core/Src/SEGGER_RTT.c **** *
1362:Core/Src/SEGGER_RTT.c **** *  Parameters
1363:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1364:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1365:Core/Src/SEGGER_RTT.c **** *
1366:Core/Src/SEGGER_RTT.c **** *  Return value
1367:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1368:Core/Src/SEGGER_RTT.c **** *
1369:Core/Src/SEGGER_RTT.c **** *  Notes
1370:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1371:Core/Src/SEGGER_RTT.c **** */
1372:Core/Src/SEGGER_RTT.c **** 
1373:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2231              		.loc 1 1373 59 is_stmt 1 view -0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 0
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
1374:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2235              		.loc 1 1374 3 view .LVU741
1375:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 2236              		.loc 1 1375 3 view .LVU742
1376:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 2237              		.loc 1 1376 3 view .LVU743
1377:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 2238              		.loc 1 1377 3 view .LVU744
 2239              	.LBB73:
1378:Core/Src/SEGGER_RTT.c ****   //
1379:Core/Src/SEGGER_RTT.c ****   // Prepare
1380:Core/Src/SEGGER_RTT.c ****   //
1381:Core/Src/SEGGER_RTT.c ****   INIT();
 2240              		.loc 1 1381 3 view .LVU745
 2241              		.loc 1 1381 3 view .LVU746
 2242              		.loc 1 1381 3 view .LVU747
 2243              		.loc 1 1381 3 view .LVU748
 2244              	.LBE73:
1373:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2245              		.loc 1 1373 59 is_stmt 0 view .LVU749
 2246 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2247              		.cfi_def_cfa_offset 24
 2248              		.cfi_offset 3, -24
 2249              		.cfi_offset 4, -20
 2250              		.cfi_offset 5, -16
 2251              		.cfi_offset 6, -12
 2252              		.cfi_offset 7, -8
 2253              		.cfi_offset 14, -4
 2254              	.LBB74:
 2255              		.loc 1 1381 3 view .LVU750
 2256 0002 1F4D     		ldr	r5, .L152
 2257 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2258              	.LBE74:
1373:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2259              		.loc 1 1373 59 view .LVU751
 2260 0006 0446     		mov	r4, r0
 2261 0008 0E46     		mov	r6, r1
 2262              	.LBB75:
 2263              		.loc 1 1381 3 view .LVU752
 2264 000a 002B     		cmp	r3, #0
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 72


 2265 000c 34D0     		beq	.L151
 2266              	.LVL212:
 2267              	.L141:
 2268              		.loc 1 1381 3 is_stmt 1 discriminator 3 view .LVU753
 2269              	.LBE75:
 2270              		.loc 1 1381 9 discriminator 3 view .LVU754
 2271              	.LBB76:
1382:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2272              		.loc 1 1382 3 view .LVU755
 2273              		.loc 1 1382 3 view .LVU756
 2274              		.syntax unified
 2275              	@ 1382 "Core/Src/SEGGER_RTT.c" 1
 2276 000e EFF3118C 		mrs   ip, basepri  
 2277 0012 4FF02001 		mov   r1, #32       
 2278 0016 81F31188 		msr   basepri, r1  
 2279              		
 2280              	@ 0 "" 2
 2281              	.LVL213:
 2282              		.loc 1 1382 20 view .LVU757
1383:Core/Src/SEGGER_RTT.c ****   //
1384:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1385:Core/Src/SEGGER_RTT.c ****   //
1386:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2283              		.loc 1 1386 3 view .LVU758
1387:Core/Src/SEGGER_RTT.c ****   //
1388:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1389:Core/Src/SEGGER_RTT.c ****   //
1390:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2284              		.loc 1 1390 3 view .LVU759
 2285              		.loc 1 1390 16 is_stmt 0 view .LVU760
 2286              		.thumb
 2287              		.syntax unified
 2288 001a 04EB4403 		add	r3, r4, r4, lsl #1
 2289 001e 05EBC303 		add	r3, r5, r3, lsl #3
1391:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2290              		.loc 1 1391 6 view .LVU761
 2291 0022 D3E90807 		ldrd	r0, r7, [r3, #32]
1392:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1393:Core/Src/SEGGER_RTT.c ****   }
1394:Core/Src/SEGGER_RTT.c ****   //
1395:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1396:Core/Src/SEGGER_RTT.c ****   //
1397:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2292              		.loc 1 1397 6 view .LVU762
 2293 0026 D96A     		ldr	r1, [r3, #44]
1390:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2294              		.loc 1 1390 9 view .LVU763
 2295 0028 7A1C     		adds	r2, r7, #1
 2296              	.LVL214:
1391:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2297              		.loc 1 1391 3 is_stmt 1 view .LVU764
1392:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2298              		.loc 1 1392 11 is_stmt 0 view .LVU765
 2299 002a 9042     		cmp	r0, r2
 2300 002c 08BF     		it	eq
 2301 002e 0022     		moveq	r2, #0
 2302              	.LVL215:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 73


 2303              		.loc 1 1397 3 is_stmt 1 view .LVU766
 2304              		.loc 1 1397 6 is_stmt 0 view .LVU767
 2305 0030 0229     		cmp	r1, #2
1390:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2306              		.loc 1 1390 16 view .LVU768
 2307 0032 4FEA440E 		lsl	lr, r4, #1
 2308              		.loc 1 1397 6 view .LVU769
 2309 0036 14D0     		beq	.L144
 2310              	.L143:
1398:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1399:Core/Src/SEGGER_RTT.c ****       ;
1400:Core/Src/SEGGER_RTT.c ****     }
1401:Core/Src/SEGGER_RTT.c ****   }
1402:Core/Src/SEGGER_RTT.c ****   //
1403:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1404:Core/Src/SEGGER_RTT.c ****   //
1405:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2311              		.loc 1 1405 3 is_stmt 1 view .LVU770
 2312              		.loc 1 1405 21 is_stmt 0 view .LVU771
 2313 0038 0EEB0403 		add	r3, lr, r4
 2314 003c 05EBC303 		add	r3, r5, r3, lsl #3
 2315 0040 996A     		ldr	r1, [r3, #40]
 2316              		.loc 1 1405 6 view .LVU772
 2317 0042 9142     		cmp	r1, r2
 2318 0044 14D0     		beq	.L147
1406:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2319              		.loc 1 1406 5 is_stmt 1 view .LVU773
 2320              		.loc 1 1406 19 is_stmt 0 view .LVU774
 2321 0046 0134     		adds	r4, r4, #1
 2322              	.LVL216:
 2323              		.loc 1 1406 19 view .LVU775
 2324 0048 04EB4404 		add	r4, r4, r4, lsl #1
 2325              	.LVL217:
 2326              		.loc 1 1406 19 view .LVU776
 2327 004c 05EBC405 		add	r5, r5, r4, lsl #3
 2328              		.loc 1 1406 11 view .LVU777
 2329 0050 6968     		ldr	r1, [r5, #4]
 2330              	.LVL218:
1407:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2331              		.loc 1 1407 5 is_stmt 1 view .LVU778
 2332              		.loc 1 1407 11 is_stmt 0 view .LVU779
 2333 0052 CE55     		strb	r6, [r1, r7]
1408:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2334              		.loc 1 1408 5 is_stmt 1 view .LVU780
 2335              		.syntax unified
 2336              	@ 1408 "Core/Src/SEGGER_RTT.c" 1
 2337 0054 BFF35F8F 		dmb
 2338              	
 2339              	@ 0 "" 2
 2340              		.loc 1 1408 15 view .LVU781
1409:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2341              		.loc 1 1409 5 view .LVU782
1410:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2342              		.loc 1 1410 12 is_stmt 0 view .LVU783
 2343              		.thumb
 2344              		.syntax unified
 2345 0058 0120     		movs	r0, #1
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 74


1409:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2346              		.loc 1 1409 18 view .LVU784
 2347 005a 5A62     		str	r2, [r3, #36]
 2348              		.loc 1 1410 5 is_stmt 1 view .LVU785
 2349              	.LVL219:
1411:Core/Src/SEGGER_RTT.c ****   } else {
1412:Core/Src/SEGGER_RTT.c ****     Status = 0;
1413:Core/Src/SEGGER_RTT.c ****   }
1414:Core/Src/SEGGER_RTT.c ****   //
1415:Core/Src/SEGGER_RTT.c ****   // Finish up.
1416:Core/Src/SEGGER_RTT.c ****   //
1417:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2350              		.loc 1 1417 3 view .LVU786
 2351              		.syntax unified
 2352              	@ 1417 "Core/Src/SEGGER_RTT.c" 1
 2353 005c 8CF31188 		msr   basepri, ip  
 2354              		
 2355              	@ 0 "" 2
 2356              		.thumb
 2357              		.syntax unified
 2358              	.LBE76:
 2359              		.loc 1 1417 22 view .LVU787
1418:Core/Src/SEGGER_RTT.c ****   return Status;
 2360              		.loc 1 1418 3 view .LVU788
1419:Core/Src/SEGGER_RTT.c **** }
 2361              		.loc 1 1419 1 is_stmt 0 view .LVU789
 2362 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2363              	.LVL220:
 2364              	.L144:
 2365              	.LBB77:
1399:Core/Src/SEGGER_RTT.c ****     }
 2366              		.loc 1 1399 7 is_stmt 1 view .LVU790
1398:Core/Src/SEGGER_RTT.c ****       ;
 2367              		.loc 1 1398 18 discriminator 1 view .LVU791
1398:Core/Src/SEGGER_RTT.c ****       ;
 2368              		.loc 1 1398 26 is_stmt 0 discriminator 1 view .LVU792
 2369 0062 996A     		ldr	r1, [r3, #40]
1398:Core/Src/SEGGER_RTT.c ****       ;
 2370              		.loc 1 1398 18 discriminator 1 view .LVU793
 2371 0064 9142     		cmp	r1, r2
 2372 0066 E7D1     		bne	.L143
1399:Core/Src/SEGGER_RTT.c ****     }
 2373              		.loc 1 1399 7 is_stmt 1 view .LVU794
1398:Core/Src/SEGGER_RTT.c ****       ;
 2374              		.loc 1 1398 18 discriminator 1 view .LVU795
1398:Core/Src/SEGGER_RTT.c ****       ;
 2375              		.loc 1 1398 26 is_stmt 0 discriminator 1 view .LVU796
 2376 0068 996A     		ldr	r1, [r3, #40]
1398:Core/Src/SEGGER_RTT.c ****       ;
 2377              		.loc 1 1398 18 discriminator 1 view .LVU797
 2378 006a 9142     		cmp	r1, r2
 2379 006c F9D0     		beq	.L144
 2380 006e E3E7     		b	.L143
 2381              	.L147:
1412:Core/Src/SEGGER_RTT.c ****   }
 2382              		.loc 1 1412 12 view .LVU798
 2383 0070 0020     		movs	r0, #0
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 75


 2384              	.LVL221:
1417:Core/Src/SEGGER_RTT.c ****   return Status;
 2385              		.loc 1 1417 3 is_stmt 1 view .LVU799
 2386              		.syntax unified
 2387              	@ 1417 "Core/Src/SEGGER_RTT.c" 1
 2388 0072 8CF31188 		msr   basepri, ip  
 2389              		
 2390              	@ 0 "" 2
 2391              		.thumb
 2392              		.syntax unified
 2393              	.LBE77:
1417:Core/Src/SEGGER_RTT.c ****   return Status;
 2394              		.loc 1 1417 22 view .LVU800
1418:Core/Src/SEGGER_RTT.c **** }
 2395              		.loc 1 1418 3 view .LVU801
 2396              		.loc 1 1419 1 is_stmt 0 view .LVU802
 2397 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2398              	.LVL222:
 2399              	.L151:
 2400              	.LBB78:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2401              		.loc 1 1381 3 is_stmt 1 discriminator 1 view .LVU803
 2402 0078 FFF7FEFF 		bl	_DoInit
 2403              	.LVL223:
1381:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2404              		.loc 1 1381 3 is_stmt 0 discriminator 1 view .LVU804
 2405 007c C7E7     		b	.L141
 2406              	.L153:
 2407 007e 00BF     		.align	2
 2408              	.L152:
 2409 0080 00000000 		.word	_SEGGER_RTT
 2410              	.LBE78:
 2411              		.cfi_endproc
 2412              	.LFE17:
 2414              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2415              		.align	1
 2416              		.p2align 2,,3
 2417              		.global	SEGGER_RTT_GetKey
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2422              	SEGGER_RTT_GetKey:
 2423              	.LFB18:
1420:Core/Src/SEGGER_RTT.c **** 
1421:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1422:Core/Src/SEGGER_RTT.c **** *
1423:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1424:Core/Src/SEGGER_RTT.c **** *
1425:Core/Src/SEGGER_RTT.c **** *  Function description
1426:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1427:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1428:Core/Src/SEGGER_RTT.c **** *
1429:Core/Src/SEGGER_RTT.c **** *  Return value
1430:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1431:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1432:Core/Src/SEGGER_RTT.c **** *
1433:Core/Src/SEGGER_RTT.c **** *  Notes
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 76


1434:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1435:Core/Src/SEGGER_RTT.c **** */
1436:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2424              		.loc 1 1436 29 is_stmt 1 view -0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 8
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
1437:Core/Src/SEGGER_RTT.c ****   char c;
 2428              		.loc 1 1437 3 view .LVU806
1438:Core/Src/SEGGER_RTT.c ****   int r;
 2429              		.loc 1 1438 3 view .LVU807
1439:Core/Src/SEGGER_RTT.c **** 
1440:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2430              		.loc 1 1440 3 view .LVU808
 2431              	.LVL224:
1436:Core/Src/SEGGER_RTT.c ****   char c;
 2432              		.loc 1 1436 29 is_stmt 0 view .LVU809
 2433 0000 10B5     		push	{r4, lr}
 2434              		.cfi_def_cfa_offset 8
 2435              		.cfi_offset 4, -8
 2436              		.cfi_offset 14, -4
 2437 0002 82B0     		sub	sp, sp, #8
 2438              		.cfi_def_cfa_offset 16
 2439              	.LVL225:
 2440              	.LBB82:
 2441              	.LBI82:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 2442              		.loc 1 794 10 is_stmt 1 view .LVU810
 2443              	.LBB83:
 795:Core/Src/SEGGER_RTT.c **** 
 2444              		.loc 1 795 3 view .LVU811
 2445              	.LBB84:
 797:Core/Src/SEGGER_RTT.c ****   //
 2446              		.loc 1 797 3 view .LVU812
 797:Core/Src/SEGGER_RTT.c ****   //
 2447              		.loc 1 797 3 view .LVU813
 2448              		.syntax unified
 2449              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 2450 0004 EFF31184 		mrs   r4, basepri  
 2451 0008 4FF02001 		mov   r1, #32       
 2452 000c 81F31188 		msr   basepri, r1  
 2453              		
 2454              	@ 0 "" 2
 2455              	.LVL226:
 797:Core/Src/SEGGER_RTT.c ****   //
 2456              		.loc 1 797 20 view .LVU814
 801:Core/Src/SEGGER_RTT.c ****   //
 2457              		.loc 1 801 3 view .LVU815
 801:Core/Src/SEGGER_RTT.c ****   //
 2458              		.loc 1 801 18 is_stmt 0 view .LVU816
 2459              		.thumb
 2460              		.syntax unified
 2461 0010 0122     		movs	r2, #1
 2462 0012 0DF10701 		add	r1, sp, #7
 2463              	.LVL227:
 801:Core/Src/SEGGER_RTT.c ****   //
 2464              		.loc 1 801 18 view .LVU817
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 77


 2465 0016 0020     		movs	r0, #0
 2466 0018 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 2467              	.LVL228:
 805:Core/Src/SEGGER_RTT.c ****   //
 2468              		.loc 1 805 3 is_stmt 1 view .LVU818
 2469              		.syntax unified
 2470              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 2471 001c 84F31188 		msr   basepri, r4  
 2472              		
 2473              	@ 0 "" 2
 2474              		.thumb
 2475              		.syntax unified
 2476              	.LBE84:
 805:Core/Src/SEGGER_RTT.c ****   //
 2477              		.loc 1 805 22 view .LVU819
 807:Core/Src/SEGGER_RTT.c **** }
 2478              		.loc 1 807 3 view .LVU820
 2479              	.LVL229:
 807:Core/Src/SEGGER_RTT.c **** }
 2480              		.loc 1 807 3 is_stmt 0 view .LVU821
 2481              	.LBE83:
 2482              	.LBE82:
1441:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2483              		.loc 1 1441 3 is_stmt 1 view .LVU822
 2484              		.loc 1 1441 6 is_stmt 0 view .LVU823
 2485 0020 0128     		cmp	r0, #1
1442:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2486              		.loc 1 1442 5 is_stmt 1 view .LVU824
 2487              		.loc 1 1442 7 is_stmt 0 view .LVU825
 2488 0022 0CBF     		ite	eq
 2489 0024 9DF80700 		ldrbeq	r0, [sp, #7]	@ zero_extendqisi2
 2490              	.LVL230:
1443:Core/Src/SEGGER_RTT.c ****   } else {
1444:Core/Src/SEGGER_RTT.c ****     r = -1;
 2491              		.loc 1 1444 7 view .LVU826
 2492 0028 4FF0FF30 		movne	r0, #-1
 2493              	.LVL231:
1445:Core/Src/SEGGER_RTT.c ****   }
1446:Core/Src/SEGGER_RTT.c ****   return r;
 2494              		.loc 1 1446 3 is_stmt 1 view .LVU827
1447:Core/Src/SEGGER_RTT.c **** }
 2495              		.loc 1 1447 1 is_stmt 0 view .LVU828
 2496 002c 02B0     		add	sp, sp, #8
 2497              		.cfi_def_cfa_offset 8
 2498              		@ sp needed
 2499 002e 10BD     		pop	{r4, pc}
 2500              		.cfi_endproc
 2501              	.LFE18:
 2503              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2504              		.align	1
 2505              		.p2align 2,,3
 2506              		.global	SEGGER_RTT_WaitKey
 2507              		.syntax unified
 2508              		.thumb
 2509              		.thumb_func
 2511              	SEGGER_RTT_WaitKey:
 2512              	.LFB19:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 78


1448:Core/Src/SEGGER_RTT.c **** 
1449:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1450:Core/Src/SEGGER_RTT.c **** *
1451:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1452:Core/Src/SEGGER_RTT.c **** *
1453:Core/Src/SEGGER_RTT.c **** *  Function description
1454:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1455:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1456:Core/Src/SEGGER_RTT.c **** *
1457:Core/Src/SEGGER_RTT.c **** *  Return value
1458:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1459:Core/Src/SEGGER_RTT.c **** *
1460:Core/Src/SEGGER_RTT.c **** *  Notes
1461:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1462:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1463:Core/Src/SEGGER_RTT.c **** */
1464:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2513              		.loc 1 1464 30 is_stmt 1 view -0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 8
 2516              		@ frame_needed = 0, uses_anonymous_args = 0
 2517 0000 10B5     		push	{r4, lr}
 2518              		.cfi_def_cfa_offset 8
 2519              		.cfi_offset 4, -8
 2520              		.cfi_offset 14, -4
 2521 0002 82B0     		sub	sp, sp, #8
 2522              		.cfi_def_cfa_offset 16
 2523              	.L160:
1465:Core/Src/SEGGER_RTT.c ****   int r;
 2524              		.loc 1 1465 3 view .LVU830
1466:Core/Src/SEGGER_RTT.c **** 
1467:Core/Src/SEGGER_RTT.c ****   do {
 2525              		.loc 1 1467 3 view .LVU831
1468:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2526              		.loc 1 1468 5 view .LVU832
 2527              	.LBB90:
 2528              	.LBI90:
1436:Core/Src/SEGGER_RTT.c ****   char c;
 2529              		.loc 1 1436 5 view .LVU833
 2530              	.LBB91:
1437:Core/Src/SEGGER_RTT.c ****   int r;
 2531              		.loc 1 1437 3 view .LVU834
1438:Core/Src/SEGGER_RTT.c **** 
 2532              		.loc 1 1438 3 view .LVU835
1440:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2533              		.loc 1 1440 3 view .LVU836
 2534              	.LVL232:
 2535              	.LBB92:
 2536              	.LBI92:
 794:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 2537              		.loc 1 794 10 view .LVU837
 2538              	.LBB93:
 795:Core/Src/SEGGER_RTT.c **** 
 2539              		.loc 1 795 3 view .LVU838
 2540              	.LBB94:
 797:Core/Src/SEGGER_RTT.c ****   //
 2541              		.loc 1 797 3 view .LVU839
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 79


 797:Core/Src/SEGGER_RTT.c ****   //
 2542              		.loc 1 797 3 view .LVU840
 2543              		.syntax unified
 2544              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 2545 0004 EFF31184 		mrs   r4, basepri  
 2546 0008 4FF02001 		mov   r1, #32       
 2547 000c 81F31188 		msr   basepri, r1  
 2548              		
 2549              	@ 0 "" 2
 2550              	.LVL233:
 797:Core/Src/SEGGER_RTT.c ****   //
 2551              		.loc 1 797 20 view .LVU841
 801:Core/Src/SEGGER_RTT.c ****   //
 2552              		.loc 1 801 3 view .LVU842
 801:Core/Src/SEGGER_RTT.c ****   //
 2553              		.loc 1 801 18 is_stmt 0 view .LVU843
 2554              		.thumb
 2555              		.syntax unified
 2556 0010 0122     		movs	r2, #1
 2557 0012 0DF10701 		add	r1, sp, #7
 2558              	.LVL234:
 801:Core/Src/SEGGER_RTT.c ****   //
 2559              		.loc 1 801 18 view .LVU844
 2560 0016 0020     		movs	r0, #0
 2561 0018 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 2562              	.LVL235:
 805:Core/Src/SEGGER_RTT.c ****   //
 2563              		.loc 1 805 3 is_stmt 1 view .LVU845
 2564              		.syntax unified
 2565              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 2566 001c 84F31188 		msr   basepri, r4  
 2567              		
 2568              	@ 0 "" 2
 2569              		.thumb
 2570              		.syntax unified
 2571              	.LBE94:
 805:Core/Src/SEGGER_RTT.c ****   //
 2572              		.loc 1 805 22 view .LVU846
 807:Core/Src/SEGGER_RTT.c **** }
 2573              		.loc 1 807 3 view .LVU847
 2574              	.LVL236:
 807:Core/Src/SEGGER_RTT.c **** }
 2575              		.loc 1 807 3 is_stmt 0 view .LVU848
 2576              	.LBE93:
 2577              	.LBE92:
1441:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2578              		.loc 1 1441 3 is_stmt 1 view .LVU849
1441:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2579              		.loc 1 1441 6 is_stmt 0 view .LVU850
 2580 0020 0128     		cmp	r0, #1
 2581 0022 EFD1     		bne	.L160
1442:Core/Src/SEGGER_RTT.c ****   } else {
 2582              		.loc 1 1442 5 is_stmt 1 view .LVU851
 2583              	.LVL237:
1446:Core/Src/SEGGER_RTT.c **** }
 2584              		.loc 1 1446 3 view .LVU852
1446:Core/Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 80


 2585              		.loc 1 1446 3 is_stmt 0 view .LVU853
 2586              	.LBE91:
 2587              	.LBE90:
1469:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 2588              		.loc 1 1469 14 is_stmt 1 discriminator 1 view .LVU854
1470:Core/Src/SEGGER_RTT.c ****   return r;
 2589              		.loc 1 1470 3 view .LVU855
1471:Core/Src/SEGGER_RTT.c **** }
 2590              		.loc 1 1471 1 is_stmt 0 view .LVU856
 2591 0024 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2592 0028 02B0     		add	sp, sp, #8
 2593              		.cfi_def_cfa_offset 8
 2594              		@ sp needed
 2595 002a 10BD     		pop	{r4, pc}
 2596              		.loc 1 1471 1 view .LVU857
 2597              		.cfi_endproc
 2598              	.LFE19:
 2600              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2601              		.align	1
 2602              		.p2align 2,,3
 2603              		.global	SEGGER_RTT_HasKey
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2608              	SEGGER_RTT_HasKey:
 2609              	.LFB20:
1472:Core/Src/SEGGER_RTT.c **** 
1473:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1474:Core/Src/SEGGER_RTT.c **** *
1475:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1476:Core/Src/SEGGER_RTT.c **** *
1477:Core/Src/SEGGER_RTT.c **** *  Function description
1478:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1479:Core/Src/SEGGER_RTT.c **** *
1480:Core/Src/SEGGER_RTT.c **** *  Return value
1481:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1482:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1483:Core/Src/SEGGER_RTT.c **** *
1484:Core/Src/SEGGER_RTT.c **** *  Notes
1485:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1486:Core/Src/SEGGER_RTT.c **** */
1487:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2610              		.loc 1 1487 29 is_stmt 1 view -0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 0
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
1488:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2614              		.loc 1 1488 3 view .LVU859
1489:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 2615              		.loc 1 1489 3 view .LVU860
1490:Core/Src/SEGGER_RTT.c ****   int r;
 2616              		.loc 1 1490 3 view .LVU861
 2617              	.LBB95:
1491:Core/Src/SEGGER_RTT.c **** 
1492:Core/Src/SEGGER_RTT.c ****   INIT();
 2618              		.loc 1 1492 3 view .LVU862
 2619              		.loc 1 1492 3 view .LVU863
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 81


 2620              	.LVL238:
 2621              		.loc 1 1492 3 view .LVU864
 2622              		.loc 1 1492 3 view .LVU865
 2623              	.LBE95:
1487:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2624              		.loc 1 1487 29 is_stmt 0 view .LVU866
 2625 0000 10B5     		push	{r4, lr}
 2626              		.cfi_def_cfa_offset 8
 2627              		.cfi_offset 4, -8
 2628              		.cfi_offset 14, -4
 2629              	.LBB96:
 2630              		.loc 1 1492 3 view .LVU867
 2631 0002 064C     		ldr	r4, .L166
 2632 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2633 0006 2BB1     		cbz	r3, .L165
 2634              	.L163:
 2635              		.loc 1 1492 3 is_stmt 1 discriminator 3 view .LVU868
 2636              	.LBE96:
 2637              		.loc 1 1492 9 discriminator 3 view .LVU869
1493:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2638              		.loc 1 1493 3 view .LVU870
 2639              	.LVL239:
1494:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2640              		.loc 1 1494 3 view .LVU871
1495:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2641              		.loc 1 1495 3 view .LVU872
 2642              		.loc 1 1495 21 is_stmt 0 view .LVU873
 2643 0008 E36E     		ldr	r3, [r4, #108]
 2644              	.LVL240:
1496:Core/Src/SEGGER_RTT.c ****     r = 1;
1497:Core/Src/SEGGER_RTT.c ****   } else {
1498:Core/Src/SEGGER_RTT.c ****     r = 0;
1499:Core/Src/SEGGER_RTT.c ****   }
1500:Core/Src/SEGGER_RTT.c ****   return r;
 2645              		.loc 1 1500 3 is_stmt 1 view .LVU874
1495:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2646              		.loc 1 1495 6 is_stmt 0 view .LVU875
 2647 000a 206F     		ldr	r0, [r4, #112]
1501:Core/Src/SEGGER_RTT.c **** }
 2648              		.loc 1 1501 1 view .LVU876
 2649 000c C01A     		subs	r0, r0, r3
 2650 000e 18BF     		it	ne
 2651 0010 0120     		movne	r0, #1
 2652 0012 10BD     		pop	{r4, pc}
 2653              	.LVL241:
 2654              	.L165:
 2655              	.LBB97:
1492:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2656              		.loc 1 1492 3 is_stmt 1 discriminator 1 view .LVU877
 2657 0014 FFF7FEFF 		bl	_DoInit
 2658              	.LVL242:
 2659 0018 F6E7     		b	.L163
 2660              	.L167:
 2661 001a 00BF     		.align	2
 2662              	.L166:
 2663 001c 00000000 		.word	_SEGGER_RTT
 2664              	.LBE97:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 82


 2665              		.cfi_endproc
 2666              	.LFE20:
 2668              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2669              		.align	1
 2670              		.p2align 2,,3
 2671              		.global	SEGGER_RTT_HasData
 2672              		.syntax unified
 2673              		.thumb
 2674              		.thumb_func
 2676              	SEGGER_RTT_HasData:
 2677              	.LVL243:
 2678              	.LFB21:
1502:Core/Src/SEGGER_RTT.c **** 
1503:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1504:Core/Src/SEGGER_RTT.c **** *
1505:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1506:Core/Src/SEGGER_RTT.c **** *
1507:Core/Src/SEGGER_RTT.c **** *  Function description
1508:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1509:Core/Src/SEGGER_RTT.c **** *
1510:Core/Src/SEGGER_RTT.c **** *  Return value:
1511:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1512:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1513:Core/Src/SEGGER_RTT.c **** *
1514:Core/Src/SEGGER_RTT.c **** */
1515:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2679              		.loc 1 1515 51 view -0
 2680              		.cfi_startproc
 2681              		@ args = 0, pretend = 0, frame = 0
 2682              		@ frame_needed = 0, uses_anonymous_args = 0
 2683              		@ link register save eliminated.
1516:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2684              		.loc 1 1516 3 view .LVU879
1517:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2685              		.loc 1 1517 3 view .LVU880
1518:Core/Src/SEGGER_RTT.c **** 
1519:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2686              		.loc 1 1519 3 view .LVU881
1520:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2687              		.loc 1 1520 3 view .LVU882
 2688              		.loc 1 1520 5 is_stmt 0 view .LVU883
 2689 0000 044B     		ldr	r3, .L169
 2690 0002 00EB4000 		add	r0, r0, r0, lsl #1
 2691              	.LVL244:
 2692              		.loc 1 1520 5 view .LVU884
 2693 0006 03EBC003 		add	r3, r3, r0, lsl #3
 2694 000a D86E     		ldr	r0, [r3, #108]
 2695              	.LVL245:
1521:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2696              		.loc 1 1521 3 is_stmt 1 view .LVU885
 2697              		.loc 1 1521 12 is_stmt 0 view .LVU886
 2698 000c 1B6F     		ldr	r3, [r3, #112]
1522:Core/Src/SEGGER_RTT.c **** }
 2699              		.loc 1 1522 1 view .LVU887
 2700 000e C01A     		subs	r0, r0, r3
 2701              	.LVL246:
 2702              		.loc 1 1522 1 view .LVU888
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 83


 2703 0010 7047     		bx	lr
 2704              	.L170:
 2705 0012 00BF     		.align	2
 2706              	.L169:
 2707 0014 00000000 		.word	_SEGGER_RTT
 2708              		.cfi_endproc
 2709              	.LFE21:
 2711              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2712              		.align	1
 2713              		.p2align 2,,3
 2714              		.global	SEGGER_RTT_HasDataUp
 2715              		.syntax unified
 2716              		.thumb
 2717              		.thumb_func
 2719              	SEGGER_RTT_HasDataUp:
 2720              	.LVL247:
 2721              	.LFB22:
1523:Core/Src/SEGGER_RTT.c **** 
1524:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1525:Core/Src/SEGGER_RTT.c **** *
1526:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1527:Core/Src/SEGGER_RTT.c **** *
1528:Core/Src/SEGGER_RTT.c **** *  Function description
1529:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1530:Core/Src/SEGGER_RTT.c **** *
1531:Core/Src/SEGGER_RTT.c **** *  Return value:
1532:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1533:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1534:Core/Src/SEGGER_RTT.c **** *
1535:Core/Src/SEGGER_RTT.c **** */
1536:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2722              		.loc 1 1536 53 is_stmt 1 view -0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 0
 2725              		@ frame_needed = 0, uses_anonymous_args = 0
 2726              		@ link register save eliminated.
1537:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2727              		.loc 1 1537 3 view .LVU890
1538:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 2728              		.loc 1 1538 3 view .LVU891
1539:Core/Src/SEGGER_RTT.c **** 
1540:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2729              		.loc 1 1540 3 view .LVU892
1541:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2730              		.loc 1 1541 3 view .LVU893
 2731              		.loc 1 1541 5 is_stmt 0 view .LVU894
 2732 0000 044B     		ldr	r3, .L172
 2733 0002 00EB4000 		add	r0, r0, r0, lsl #1
 2734              	.LVL248:
 2735              		.loc 1 1541 5 view .LVU895
 2736 0006 03EBC003 		add	r3, r3, r0, lsl #3
 2737 000a 9A6A     		ldr	r2, [r3, #40]
 2738              	.LVL249:
1542:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2739              		.loc 1 1542 3 is_stmt 1 view .LVU896
 2740              		.loc 1 1542 23 is_stmt 0 view .LVU897
 2741 000c 586A     		ldr	r0, [r3, #36]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 84


1543:Core/Src/SEGGER_RTT.c **** }
 2742              		.loc 1 1543 1 view .LVU898
 2743 000e 801A     		subs	r0, r0, r2
 2744 0010 7047     		bx	lr
 2745              	.L173:
 2746 0012 00BF     		.align	2
 2747              	.L172:
 2748 0014 00000000 		.word	_SEGGER_RTT
 2749              		.cfi_endproc
 2750              	.LFE22:
 2752              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2753              		.align	1
 2754              		.p2align 2,,3
 2755              		.global	SEGGER_RTT_AllocDownBuffer
 2756              		.syntax unified
 2757              		.thumb
 2758              		.thumb_func
 2760              	SEGGER_RTT_AllocDownBuffer:
 2761              	.LVL250:
 2762              	.LFB23:
1544:Core/Src/SEGGER_RTT.c **** 
1545:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1546:Core/Src/SEGGER_RTT.c **** *
1547:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1548:Core/Src/SEGGER_RTT.c **** *
1549:Core/Src/SEGGER_RTT.c **** *  Function description
1550:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1551:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1552:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1553:Core/Src/SEGGER_RTT.c **** *
1554:Core/Src/SEGGER_RTT.c **** *  Parameters
1555:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1556:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1557:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1558:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1559:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1560:Core/Src/SEGGER_RTT.c **** *
1561:Core/Src/SEGGER_RTT.c **** *  Return value
1562:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1563:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1564:Core/Src/SEGGER_RTT.c **** */
1565:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2763              		.loc 1 1565 103 is_stmt 1 view -0
 2764              		.cfi_startproc
 2765              		@ args = 0, pretend = 0, frame = 0
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
1566:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2767              		.loc 1 1566 3 view .LVU900
1567:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2768              		.loc 1 1567 3 view .LVU901
 2769              	.LBB98:
1568:Core/Src/SEGGER_RTT.c **** 
1569:Core/Src/SEGGER_RTT.c ****   INIT();
 2770              		.loc 1 1569 3 view .LVU902
 2771              		.loc 1 1569 3 view .LVU903
 2772              		.loc 1 1569 3 view .LVU904
 2773              		.loc 1 1569 3 view .LVU905
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 85


 2774              	.LBE98:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2775              		.loc 1 1565 103 is_stmt 0 view .LVU906
 2776 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2777              		.cfi_def_cfa_offset 32
 2778              		.cfi_offset 3, -32
 2779              		.cfi_offset 4, -28
 2780              		.cfi_offset 5, -24
 2781              		.cfi_offset 6, -20
 2782              		.cfi_offset 7, -16
 2783              		.cfi_offset 8, -12
 2784              		.cfi_offset 9, -8
 2785              		.cfi_offset 14, -4
 2786              	.LBB99:
 2787              		.loc 1 1569 3 view .LVU907
 2788 0004 1B4C     		ldr	r4, .L187
 2789              	.LBE99:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2790              		.loc 1 1565 103 view .LVU908
 2791 0006 1E46     		mov	r6, r3
 2792              	.LBB100:
 2793              		.loc 1 1569 3 view .LVU909
 2794 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2795              	.LVL251:
 2796              		.loc 1 1569 3 view .LVU910
 2797              	.LBE100:
1565:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2798              		.loc 1 1565 103 view .LVU911
 2799 000a 8146     		mov	r9, r0
 2800 000c 8846     		mov	r8, r1
 2801 000e 1746     		mov	r7, r2
 2802              	.LBB101:
 2803              		.loc 1 1569 3 view .LVU912
 2804 0010 4BB3     		cbz	r3, .L185
 2805              	.LVL252:
 2806              	.L175:
 2807              		.loc 1 1569 3 is_stmt 1 discriminator 3 view .LVU913
 2808              	.LBE101:
 2809              		.loc 1 1569 9 discriminator 3 view .LVU914
 2810              	.LBB102:
1570:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2811              		.loc 1 1570 3 view .LVU915
 2812              		.loc 1 1570 3 view .LVU916
 2813              		.syntax unified
 2814              	@ 1570 "Core/Src/SEGGER_RTT.c" 1
 2815 0012 EFF31182 		mrs   r2, basepri  
 2816 0016 4FF02001 		mov   r1, #32       
 2817 001a 81F31188 		msr   basepri, r1  
 2818              		
 2819              	@ 0 "" 2
 2820              	.LVL253:
 2821              		.loc 1 1570 20 view .LVU917
1571:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2822              		.loc 1 1571 3 view .LVU918
1572:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2823              		.loc 1 1572 3 view .LVU919
 2824              		.loc 1 1572 15 is_stmt 0 view .LVU920
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 86


 2825              		.thumb
 2826              		.syntax unified
 2827 001e 0020     		movs	r0, #0
 2828 0020 03E0     		b	.L177
 2829              	.LVL254:
 2830              	.L186:
1573:Core/Src/SEGGER_RTT.c ****   do {
1574:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
1575:Core/Src/SEGGER_RTT.c ****       break;
1576:Core/Src/SEGGER_RTT.c ****     }
1577:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
1578:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2831              		.loc 1 1578 32 view .LVU921
 2832 0022 6569     		ldr	r5, [r4, #20]
1577:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2833              		.loc 1 1577 16 view .LVU922
 2834 0024 0130     		adds	r0, r0, #1
 2835              	.LVL255:
 2836              		.loc 1 1578 24 is_stmt 1 view .LVU923
 2837 0026 8542     		cmp	r5, r0
 2838 0028 07DD     		ble	.L176
 2839              	.LVL256:
 2840              	.L177:
1573:Core/Src/SEGGER_RTT.c ****   do {
 2841              		.loc 1 1573 3 view .LVU924
1574:Core/Src/SEGGER_RTT.c ****       break;
 2842              		.loc 1 1574 5 view .LVU925
1577:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2843              		.loc 1 1577 5 view .LVU926
1574:Core/Src/SEGGER_RTT.c ****       break;
 2844              		.loc 1 1574 35 is_stmt 0 view .LVU927
 2845 002a 00EB400C 		add	ip, r0, r0, lsl #1
 2846 002e 04EBCC0C 		add	ip, r4, ip, lsl #3
 2847 0032 DCF86450 		ldr	r5, [ip, #100]
1574:Core/Src/SEGGER_RTT.c ****       break;
 2848              		.loc 1 1574 8 view .LVU928
 2849 0036 002D     		cmp	r5, #0
 2850 0038 F3D1     		bne	.L186
 2851              	.L176:
1579:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2852              		.loc 1 1579 3 is_stmt 1 view .LVU929
 2853              		.loc 1 1579 27 is_stmt 0 view .LVU930
 2854 003a 6369     		ldr	r3, [r4, #20]
 2855              		.loc 1 1579 6 view .LVU931
 2856 003c 8342     		cmp	r3, r0
 2857 003e 15DD     		ble	.L179
1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2858              		.loc 1 1580 5 is_stmt 1 view .LVU932
 2859              		.loc 1 1580 45 is_stmt 0 view .LVU933
 2860 0040 00EB4003 		add	r3, r0, r0, lsl #1
 2861 0044 04EBC304 		add	r4, r4, r3, lsl #3
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
1583:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2862              		.loc 1 1583 45 view .LVU934
 2863 0048 0023     		movs	r3, #0
1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 87


 2864              		.loc 1 1580 45 view .LVU935
 2865 004a C4F86090 		str	r9, [r4, #96]
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2866              		.loc 1 1581 5 is_stmt 1 view .LVU936
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2867              		.loc 1 1581 45 is_stmt 0 view .LVU937
 2868 004e C4F86480 		str	r8, [r4, #100]
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2869              		.loc 1 1582 5 is_stmt 1 view .LVU938
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2870              		.loc 1 1582 45 is_stmt 0 view .LVU939
 2871 0052 A766     		str	r7, [r4, #104]
 2872              		.loc 1 1583 5 is_stmt 1 view .LVU940
 2873              		.loc 1 1583 45 is_stmt 0 view .LVU941
 2874 0054 2367     		str	r3, [r4, #112]
1584:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2875              		.loc 1 1584 5 is_stmt 1 view .LVU942
 2876              		.loc 1 1584 45 is_stmt 0 view .LVU943
 2877 0056 E366     		str	r3, [r4, #108]
1585:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2878              		.loc 1 1585 5 is_stmt 1 view .LVU944
 2879              		.loc 1 1585 45 is_stmt 0 view .LVU945
 2880 0058 6667     		str	r6, [r4, #116]
1586:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2881              		.loc 1 1586 5 is_stmt 1 view .LVU946
 2882              		.syntax unified
 2883              	@ 1586 "Core/Src/SEGGER_RTT.c" 1
 2884 005a BFF35F8F 		dmb
 2885              	
 2886              	@ 0 "" 2
 2887              		.loc 1 1586 15 view .LVU947
 2888              	.LVL257:
 2889              		.thumb
 2890              		.syntax unified
 2891              	.L178:
1587:Core/Src/SEGGER_RTT.c ****   } else {
1588:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1589:Core/Src/SEGGER_RTT.c ****   }
1590:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2892              		.loc 1 1590 3 view .LVU948
 2893              		.syntax unified
 2894              	@ 1590 "Core/Src/SEGGER_RTT.c" 1
 2895 005e 82F31188 		msr   basepri, r2  
 2896              		
 2897              	@ 0 "" 2
 2898              		.thumb
 2899              		.syntax unified
 2900              	.LBE102:
 2901              		.loc 1 1590 22 view .LVU949
1591:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2902              		.loc 1 1591 3 view .LVU950
1592:Core/Src/SEGGER_RTT.c **** }
 2903              		.loc 1 1592 1 is_stmt 0 view .LVU951
 2904 0062 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2905              	.LVL258:
 2906              	.L185:
 2907              	.LBB103:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 88


1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2908              		.loc 1 1569 3 is_stmt 1 discriminator 1 view .LVU952
 2909 0066 FFF7FEFF 		bl	_DoInit
 2910              	.LVL259:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2911              		.loc 1 1569 3 is_stmt 0 discriminator 1 view .LVU953
 2912 006a D2E7     		b	.L175
 2913              	.LVL260:
 2914              	.L179:
1569:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2915              		.loc 1 1569 3 discriminator 1 view .LVU954
 2916              	.LBE103:
 2917              	.LBB104:
1588:Core/Src/SEGGER_RTT.c ****   }
 2918              		.loc 1 1588 17 view .LVU955
 2919 006c 4FF0FF30 		mov	r0, #-1
 2920              	.LVL261:
1588:Core/Src/SEGGER_RTT.c ****   }
 2921              		.loc 1 1588 17 view .LVU956
 2922 0070 F5E7     		b	.L178
 2923              	.L188:
 2924 0072 00BF     		.align	2
 2925              	.L187:
 2926 0074 00000000 		.word	_SEGGER_RTT
 2927              	.LBE104:
 2928              		.cfi_endproc
 2929              	.LFE23:
 2931              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2932              		.align	1
 2933              		.p2align 2,,3
 2934              		.global	SEGGER_RTT_AllocUpBuffer
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2939              	SEGGER_RTT_AllocUpBuffer:
 2940              	.LVL262:
 2941              	.LFB24:
1593:Core/Src/SEGGER_RTT.c **** 
1594:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1595:Core/Src/SEGGER_RTT.c **** *
1596:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1597:Core/Src/SEGGER_RTT.c **** *
1598:Core/Src/SEGGER_RTT.c **** *  Function description
1599:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1600:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1601:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1602:Core/Src/SEGGER_RTT.c **** *
1603:Core/Src/SEGGER_RTT.c **** *  Parameters
1604:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1605:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1606:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1607:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1608:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1609:Core/Src/SEGGER_RTT.c **** *
1610:Core/Src/SEGGER_RTT.c **** *  Return value
1611:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1612:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 89


1613:Core/Src/SEGGER_RTT.c **** */
1614:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2942              		.loc 1 1614 101 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
1615:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2946              		.loc 1 1615 3 view .LVU958
1616:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2947              		.loc 1 1616 3 view .LVU959
 2948              	.LBB105:
1617:Core/Src/SEGGER_RTT.c **** 
1618:Core/Src/SEGGER_RTT.c ****   INIT();
 2949              		.loc 1 1618 3 view .LVU960
 2950              		.loc 1 1618 3 view .LVU961
 2951              		.loc 1 1618 3 view .LVU962
 2952              		.loc 1 1618 3 view .LVU963
 2953              	.LBE105:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2954              		.loc 1 1614 101 is_stmt 0 view .LVU964
 2955 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2956              		.cfi_def_cfa_offset 32
 2957              		.cfi_offset 3, -32
 2958              		.cfi_offset 4, -28
 2959              		.cfi_offset 5, -24
 2960              		.cfi_offset 6, -20
 2961              		.cfi_offset 7, -16
 2962              		.cfi_offset 8, -12
 2963              		.cfi_offset 9, -8
 2964              		.cfi_offset 14, -4
 2965              	.LBB106:
 2966              		.loc 1 1618 3 view .LVU965
 2967 0004 1E4C     		ldr	r4, .L202
 2968              	.LBE106:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2969              		.loc 1 1614 101 view .LVU966
 2970 0006 1E46     		mov	r6, r3
 2971              	.LBB107:
 2972              		.loc 1 1618 3 view .LVU967
 2973 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2974              	.LVL263:
 2975              		.loc 1 1618 3 view .LVU968
 2976              	.LBE107:
1614:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 2977              		.loc 1 1614 101 view .LVU969
 2978 000a 8146     		mov	r9, r0
 2979 000c 8846     		mov	r8, r1
 2980 000e 1746     		mov	r7, r2
 2981              	.LBB108:
 2982              		.loc 1 1618 3 view .LVU970
 2983 0010 83B3     		cbz	r3, .L200
 2984              	.LVL264:
 2985              	.L190:
 2986              		.loc 1 1618 3 is_stmt 1 discriminator 3 view .LVU971
 2987              	.LBE108:
 2988              		.loc 1 1618 9 discriminator 3 view .LVU972
 2989              	.LBB109:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 90


1619:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2990              		.loc 1 1619 3 view .LVU973
 2991              		.loc 1 1619 3 view .LVU974
 2992              		.syntax unified
 2993              	@ 1619 "Core/Src/SEGGER_RTT.c" 1
 2994 0012 EFF31183 		mrs   r3, basepri  
 2995 0016 4FF02001 		mov   r1, #32       
 2996 001a 81F31188 		msr   basepri, r1  
 2997              		
 2998              	@ 0 "" 2
 2999              	.LVL265:
 3000              		.loc 1 1619 20 view .LVU975
1620:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3001              		.loc 1 1620 3 view .LVU976
1621:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 3002              		.loc 1 1621 3 view .LVU977
 3003              		.loc 1 1621 15 is_stmt 0 view .LVU978
 3004              		.thumb
 3005              		.syntax unified
 3006 001e 0020     		movs	r0, #0
 3007 0020 03E0     		b	.L192
 3008              	.LVL266:
 3009              	.L201:
1622:Core/Src/SEGGER_RTT.c ****   do {
1623:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
1624:Core/Src/SEGGER_RTT.c ****       break;
1625:Core/Src/SEGGER_RTT.c ****     }
1626:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
1627:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3010              		.loc 1 1627 32 view .LVU979
 3011 0022 2569     		ldr	r5, [r4, #16]
 3012              		.loc 1 1627 24 view .LVU980
 3013 0024 7545     		cmp	r5, lr
1626:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3014              		.loc 1 1626 16 view .LVU981
 3015 0026 7046     		mov	r0, lr
 3016              	.LVL267:
 3017              		.loc 1 1627 24 is_stmt 1 view .LVU982
 3018 0028 09DD     		ble	.L191
 3019              	.LVL268:
 3020              	.L192:
1622:Core/Src/SEGGER_RTT.c ****   do {
 3021              		.loc 1 1622 3 view .LVU983
1623:Core/Src/SEGGER_RTT.c ****       break;
 3022              		.loc 1 1623 5 view .LVU984
1626:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 3023              		.loc 1 1626 5 view .LVU985
1623:Core/Src/SEGGER_RTT.c ****       break;
 3024              		.loc 1 1623 33 is_stmt 0 view .LVU986
 3025 002a 00F1010E 		add	lr, r0, #1
 3026 002e 0EEB4E0C 		add	ip, lr, lr, lsl #1
 3027 0032 04EBCC0C 		add	ip, r4, ip, lsl #3
 3028 0036 DCF80450 		ldr	r5, [ip, #4]
1623:Core/Src/SEGGER_RTT.c ****       break;
 3029              		.loc 1 1623 8 view .LVU987
 3030 003a 002D     		cmp	r5, #0
 3031 003c F1D1     		bne	.L201
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 91


 3032              	.L191:
1628:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 3033              		.loc 1 1628 3 is_stmt 1 view .LVU988
 3034              		.loc 1 1628 27 is_stmt 0 view .LVU989
 3035 003e 2269     		ldr	r2, [r4, #16]
 3036              		.loc 1 1628 6 view .LVU990
 3037 0040 8242     		cmp	r2, r0
 3038 0042 1ADD     		ble	.L194
1629:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 3039              		.loc 1 1629 5 is_stmt 1 view .LVU991
 3040              		.loc 1 1629 43 is_stmt 0 view .LVU992
 3041 0044 421C     		adds	r2, r0, #1
 3042 0046 02EB4202 		add	r2, r2, r2, lsl #1
 3043 004a D200     		lsls	r2, r2, #3
 3044 004c 44F80290 		str	r9, [r4, r2]
1630:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 3045              		.loc 1 1630 5 is_stmt 1 view .LVU993
 3046              		.loc 1 1630 43 is_stmt 0 view .LVU994
 3047 0050 2244     		add	r2, r2, r4
 3048 0052 C2F80480 		str	r8, [r2, #4]
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 3049              		.loc 1 1631 5 is_stmt 1 view .LVU995
 3050              		.loc 1 1631 43 is_stmt 0 view .LVU996
 3051 0056 00EB4002 		add	r2, r0, r0, lsl #1
 3052 005a 04EBC204 		add	r4, r4, r2, lsl #3
1632:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 3053              		.loc 1 1632 43 view .LVU997
 3054 005e 0022     		movs	r2, #0
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 3055              		.loc 1 1631 43 view .LVU998
 3056 0060 2762     		str	r7, [r4, #32]
 3057              		.loc 1 1632 5 is_stmt 1 view .LVU999
 3058              		.loc 1 1632 43 is_stmt 0 view .LVU1000
 3059 0062 A262     		str	r2, [r4, #40]
1633:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 3060              		.loc 1 1633 5 is_stmt 1 view .LVU1001
 3061              		.loc 1 1633 43 is_stmt 0 view .LVU1002
 3062 0064 6262     		str	r2, [r4, #36]
1634:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 3063              		.loc 1 1634 5 is_stmt 1 view .LVU1003
 3064              		.loc 1 1634 43 is_stmt 0 view .LVU1004
 3065 0066 E662     		str	r6, [r4, #44]
1635:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3066              		.loc 1 1635 5 is_stmt 1 view .LVU1005
 3067              		.syntax unified
 3068              	@ 1635 "Core/Src/SEGGER_RTT.c" 1
 3069 0068 BFF35F8F 		dmb
 3070              	
 3071              	@ 0 "" 2
 3072              		.loc 1 1635 15 view .LVU1006
 3073              	.LVL269:
 3074              		.thumb
 3075              		.syntax unified
 3076              	.L193:
1636:Core/Src/SEGGER_RTT.c ****   } else {
1637:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1638:Core/Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 92


1639:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 3077              		.loc 1 1639 3 view .LVU1007
 3078              		.syntax unified
 3079              	@ 1639 "Core/Src/SEGGER_RTT.c" 1
 3080 006c 83F31188 		msr   basepri, r3  
 3081              		
 3082              	@ 0 "" 2
 3083              		.thumb
 3084              		.syntax unified
 3085              	.LBE109:
 3086              		.loc 1 1639 22 view .LVU1008
1640:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 3087              		.loc 1 1640 3 view .LVU1009
1641:Core/Src/SEGGER_RTT.c **** }
 3088              		.loc 1 1641 1 is_stmt 0 view .LVU1010
 3089 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3090              	.LVL270:
 3091              	.L200:
 3092              	.LBB110:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3093              		.loc 1 1618 3 is_stmt 1 discriminator 1 view .LVU1011
 3094 0074 FFF7FEFF 		bl	_DoInit
 3095              	.LVL271:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3096              		.loc 1 1618 3 is_stmt 0 discriminator 1 view .LVU1012
 3097 0078 CBE7     		b	.L190
 3098              	.LVL272:
 3099              	.L194:
1618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3100              		.loc 1 1618 3 discriminator 1 view .LVU1013
 3101              	.LBE110:
 3102              	.LBB111:
1637:Core/Src/SEGGER_RTT.c ****   }
 3103              		.loc 1 1637 17 view .LVU1014
 3104 007a 4FF0FF30 		mov	r0, #-1
 3105              	.LVL273:
1637:Core/Src/SEGGER_RTT.c ****   }
 3106              		.loc 1 1637 17 view .LVU1015
 3107 007e F5E7     		b	.L193
 3108              	.L203:
 3109              		.align	2
 3110              	.L202:
 3111 0080 00000000 		.word	_SEGGER_RTT
 3112              	.LBE111:
 3113              		.cfi_endproc
 3114              	.LFE24:
 3116              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 3117              		.align	1
 3118              		.p2align 2,,3
 3119              		.global	SEGGER_RTT_ConfigUpBuffer
 3120              		.syntax unified
 3121              		.thumb
 3122              		.thumb_func
 3124              	SEGGER_RTT_ConfigUpBuffer:
 3125              	.LVL274:
 3126              	.LFB25:
1642:Core/Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 93


1643:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1644:Core/Src/SEGGER_RTT.c **** *
1645:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1646:Core/Src/SEGGER_RTT.c **** *
1647:Core/Src/SEGGER_RTT.c **** *  Function description
1648:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1649:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1650:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1651:Core/Src/SEGGER_RTT.c **** *
1652:Core/Src/SEGGER_RTT.c **** *  Parameters
1653:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1654:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1655:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1656:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1657:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1658:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1659:Core/Src/SEGGER_RTT.c **** *
1660:Core/Src/SEGGER_RTT.c **** *  Return value
1661:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1662:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1663:Core/Src/SEGGER_RTT.c **** *
1664:Core/Src/SEGGER_RTT.c **** *  Additional information
1665:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1666:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1667:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1668:Core/Src/SEGGER_RTT.c **** */
1669:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 3127              		.loc 1 1669 124 is_stmt 1 view -0
 3128              		.cfi_startproc
 3129              		@ args = 4, pretend = 0, frame = 0
 3130              		@ frame_needed = 0, uses_anonymous_args = 0
1670:Core/Src/SEGGER_RTT.c ****   int r;
 3131              		.loc 1 1670 3 view .LVU1017
1671:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3132              		.loc 1 1671 3 view .LVU1018
1672:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3133              		.loc 1 1672 3 view .LVU1019
 3134              	.LBB112:
1673:Core/Src/SEGGER_RTT.c **** 
1674:Core/Src/SEGGER_RTT.c ****   INIT();
 3135              		.loc 1 1674 3 view .LVU1020
 3136              		.loc 1 1674 3 view .LVU1021
 3137              		.loc 1 1674 3 view .LVU1022
 3138              		.loc 1 1674 3 view .LVU1023
 3139              	.LBE112:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3140              		.loc 1 1669 124 is_stmt 0 view .LVU1024
 3141 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3142              		.cfi_def_cfa_offset 24
 3143              		.cfi_offset 4, -24
 3144              		.cfi_offset 5, -20
 3145              		.cfi_offset 6, -16
 3146              		.cfi_offset 7, -12
 3147              		.cfi_offset 8, -8
 3148              		.cfi_offset 14, -4
 3149              	.LBB113:
 3150              		.loc 1 1674 3 view .LVU1025
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 94


 3151 0004 194D     		ldr	r5, .L214
 3152              	.LBE113:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3153              		.loc 1 1669 124 view .LVU1026
 3154 0006 1E46     		mov	r6, r3
 3155              	.LBB114:
 3156              		.loc 1 1674 3 view .LVU1027
 3157 0008 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3158              	.LVL275:
 3159              		.loc 1 1674 3 view .LVU1028
 3160              	.LBE114:
1669:Core/Src/SEGGER_RTT.c ****   int r;
 3161              		.loc 1 1669 124 view .LVU1029
 3162 000a 0446     		mov	r4, r0
 3163 000c 8846     		mov	r8, r1
 3164 000e 1746     		mov	r7, r2
 3165              	.LBB115:
 3166              		.loc 1 1674 3 view .LVU1030
 3167 0010 2BB3     		cbz	r3, .L213
 3168              	.LVL276:
 3169              	.L205:
 3170              		.loc 1 1674 3 is_stmt 1 discriminator 3 view .LVU1031
 3171              	.LBE115:
 3172              		.loc 1 1674 9 discriminator 3 view .LVU1032
1675:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3173              		.loc 1 1675 3 view .LVU1033
1676:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3174              		.loc 1 1676 3 view .LVU1034
 3175              		.loc 1 1676 6 is_stmt 0 view .LVU1035
 3176 0012 022C     		cmp	r4, #2
 3177 0014 26D8     		bhi	.L208
 3178              	.LBB116:
1677:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3179              		.loc 1 1677 5 is_stmt 1 view .LVU1036
 3180              		.loc 1 1677 5 view .LVU1037
 3181              		.syntax unified
 3182              	@ 1677 "Core/Src/SEGGER_RTT.c" 1
 3183 0016 EFF3118C 		mrs   ip, basepri  
 3184 001a 4FF02001 		mov   r1, #32       
 3185 001e 81F31188 		msr   basepri, r1  
 3186              		
 3187              	@ 0 "" 2
 3188              	.LVL277:
 3189              		.loc 1 1677 22 view .LVU1038
1678:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3190              		.loc 1 1678 5 view .LVU1039
1679:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3191              		.loc 1 1679 5 view .LVU1040
 3192              		.loc 1 1679 8 is_stmt 0 view .LVU1041
 3193              		.thumb
 3194              		.syntax unified
 3195 0022 54B9     		cbnz	r4, .L211
 3196 0024 2246     		mov	r2, r4
 3197              	.L207:
1680:Core/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
1681:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
1682:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 95


1683:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
1684:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
1685:Core/Src/SEGGER_RTT.c ****     }
1686:Core/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 3198              		.loc 1 1686 5 is_stmt 1 view .LVU1042
 3199              		.loc 1 1686 25 is_stmt 0 view .LVU1043
 3200 0026 1319     		adds	r3, r2, r4
 3201 0028 05EBC305 		add	r5, r5, r3, lsl #3
 3202 002c 069B     		ldr	r3, [sp, #24]
 3203 002e EB62     		str	r3, [r5, #44]
1687:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3204              		.loc 1 1687 5 is_stmt 1 view .LVU1044
 3205              		.syntax unified
 3206              	@ 1687 "Core/Src/SEGGER_RTT.c" 1
 3207 0030 8CF31188 		msr   basepri, ip  
 3208              		
 3209              	@ 0 "" 2
 3210              		.thumb
 3211              		.syntax unified
 3212              	.LBE116:
 3213              		.loc 1 1687 24 view .LVU1045
1688:Core/Src/SEGGER_RTT.c ****     r =  0;
 3214              		.loc 1 1688 5 view .LVU1046
 3215              	.LVL278:
 3216              		.loc 1 1688 7 is_stmt 0 view .LVU1047
 3217 0034 0020     		movs	r0, #0
 3218              	.LVL279:
 3219              	.L204:
1689:Core/Src/SEGGER_RTT.c ****   } else {
1690:Core/Src/SEGGER_RTT.c ****     r = -1;
1691:Core/Src/SEGGER_RTT.c ****   }
1692:Core/Src/SEGGER_RTT.c ****   return r;
1693:Core/Src/SEGGER_RTT.c **** }
 3220              		.loc 1 1693 1 view .LVU1048
 3221 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3222              	.LVL280:
 3223              	.L211:
 3224              	.LBB117:
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3225              		.loc 1 1680 7 is_stmt 1 view .LVU1049
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3226              		.loc 1 1680 25 is_stmt 0 view .LVU1050
 3227 003a 601C     		adds	r0, r4, #1
 3228 003c 00EB4000 		add	r0, r0, r0, lsl #1
 3229 0040 C000     		lsls	r0, r0, #3
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3230              		.loc 1 1682 25 view .LVU1051
 3231 0042 04EB4403 		add	r3, r4, r4, lsl #1
1680:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3232              		.loc 1 1680 25 view .LVU1052
 3233 0046 45F80080 		str	r8, [r5, r0]
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3234              		.loc 1 1681 7 is_stmt 1 view .LVU1053
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3235              		.loc 1 1682 25 is_stmt 0 view .LVU1054
 3236 004a 05EBC303 		add	r3, r5, r3, lsl #3
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 96


 3237              		.loc 1 1681 25 view .LVU1055
 3238 004e 2844     		add	r0, r0, r5
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3239              		.loc 1 1683 25 view .LVU1056
 3240 0050 0021     		movs	r1, #0
1681:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3241              		.loc 1 1681 25 view .LVU1057
 3242 0052 4760     		str	r7, [r0, #4]
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3243              		.loc 1 1682 7 is_stmt 1 view .LVU1058
1682:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3244              		.loc 1 1682 25 is_stmt 0 view .LVU1059
 3245 0054 6200     		lsls	r2, r4, #1
 3246 0056 1E62     		str	r6, [r3, #32]
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3247              		.loc 1 1683 7 is_stmt 1 view .LVU1060
1683:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3248              		.loc 1 1683 25 is_stmt 0 view .LVU1061
 3249 0058 9962     		str	r1, [r3, #40]
1684:Core/Src/SEGGER_RTT.c ****     }
 3250              		.loc 1 1684 7 is_stmt 1 view .LVU1062
1684:Core/Src/SEGGER_RTT.c ****     }
 3251              		.loc 1 1684 25 is_stmt 0 view .LVU1063
 3252 005a 5962     		str	r1, [r3, #36]
 3253 005c E3E7     		b	.L207
 3254              	.LVL281:
 3255              	.L213:
1684:Core/Src/SEGGER_RTT.c ****     }
 3256              		.loc 1 1684 25 view .LVU1064
 3257              	.LBE117:
 3258              	.LBB118:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3259              		.loc 1 1674 3 is_stmt 1 discriminator 1 view .LVU1065
 3260 005e FFF7FEFF 		bl	_DoInit
 3261              	.LVL282:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3262              		.loc 1 1674 3 is_stmt 0 discriminator 1 view .LVU1066
 3263 0062 D6E7     		b	.L205
 3264              	.LVL283:
 3265              	.L208:
1674:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3266              		.loc 1 1674 3 discriminator 1 view .LVU1067
 3267              	.LBE118:
1690:Core/Src/SEGGER_RTT.c ****   }
 3268              		.loc 1 1690 7 view .LVU1068
 3269 0064 4FF0FF30 		mov	r0, #-1
 3270              	.LVL284:
1692:Core/Src/SEGGER_RTT.c **** }
 3271              		.loc 1 1692 3 is_stmt 1 view .LVU1069
1692:Core/Src/SEGGER_RTT.c **** }
 3272              		.loc 1 1692 10 is_stmt 0 view .LVU1070
 3273 0068 E5E7     		b	.L204
 3274              	.L215:
 3275 006a 00BF     		.align	2
 3276              	.L214:
 3277 006c 00000000 		.word	_SEGGER_RTT
 3278              		.cfi_endproc
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 97


 3279              	.LFE25:
 3281              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3282              		.align	1
 3283              		.p2align 2,,3
 3284              		.global	SEGGER_RTT_ConfigDownBuffer
 3285              		.syntax unified
 3286              		.thumb
 3287              		.thumb_func
 3289              	SEGGER_RTT_ConfigDownBuffer:
 3290              	.LVL285:
 3291              	.LFB26:
1694:Core/Src/SEGGER_RTT.c **** 
1695:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1696:Core/Src/SEGGER_RTT.c **** *
1697:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1698:Core/Src/SEGGER_RTT.c **** *
1699:Core/Src/SEGGER_RTT.c **** *  Function description
1700:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1701:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1702:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1703:Core/Src/SEGGER_RTT.c **** *
1704:Core/Src/SEGGER_RTT.c **** *  Parameters
1705:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1706:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1707:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1708:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1709:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1710:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1711:Core/Src/SEGGER_RTT.c **** *
1712:Core/Src/SEGGER_RTT.c **** *  Return value
1713:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1714:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1715:Core/Src/SEGGER_RTT.c **** *
1716:Core/Src/SEGGER_RTT.c **** *  Additional information
1717:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1718:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1719:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1720:Core/Src/SEGGER_RTT.c **** */
1721:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3292              		.loc 1 1721 126 is_stmt 1 view -0
 3293              		.cfi_startproc
 3294              		@ args = 4, pretend = 0, frame = 0
 3295              		@ frame_needed = 0, uses_anonymous_args = 0
1722:Core/Src/SEGGER_RTT.c ****   int r;
 3296              		.loc 1 1722 3 view .LVU1072
1723:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3297              		.loc 1 1723 3 view .LVU1073
1724:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3298              		.loc 1 1724 3 view .LVU1074
 3299              	.LBB119:
1725:Core/Src/SEGGER_RTT.c **** 
1726:Core/Src/SEGGER_RTT.c ****   INIT();
 3300              		.loc 1 1726 3 view .LVU1075
 3301              		.loc 1 1726 3 view .LVU1076
 3302              		.loc 1 1726 3 view .LVU1077
 3303              		.loc 1 1726 3 view .LVU1078
 3304              	.LBE119:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 98


1721:Core/Src/SEGGER_RTT.c ****   int r;
 3305              		.loc 1 1721 126 is_stmt 0 view .LVU1079
 3306 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3307              		.cfi_def_cfa_offset 24
 3308              		.cfi_offset 4, -24
 3309              		.cfi_offset 5, -20
 3310              		.cfi_offset 6, -16
 3311              		.cfi_offset 7, -12
 3312              		.cfi_offset 8, -8
 3313              		.cfi_offset 14, -4
 3314              	.LBB120:
 3315              		.loc 1 1726 3 view .LVU1080
 3316 0004 174D     		ldr	r5, .L226
 3317              	.LBE120:
1721:Core/Src/SEGGER_RTT.c ****   int r;
 3318              		.loc 1 1721 126 view .LVU1081
 3319 0006 1E46     		mov	r6, r3
 3320              	.LBB121:
 3321              		.loc 1 1726 3 view .LVU1082
 3322 0008 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3323              	.LVL286:
 3324              		.loc 1 1726 3 view .LVU1083
 3325              	.LBE121:
1721:Core/Src/SEGGER_RTT.c ****   int r;
 3326              		.loc 1 1721 126 view .LVU1084
 3327 000a 0446     		mov	r4, r0
 3328 000c 8846     		mov	r8, r1
 3329 000e 1746     		mov	r7, r2
 3330              	.LBB122:
 3331              		.loc 1 1726 3 view .LVU1085
 3332 0010 13B3     		cbz	r3, .L225
 3333              	.LVL287:
 3334              	.L217:
 3335              		.loc 1 1726 3 is_stmt 1 discriminator 3 view .LVU1086
 3336              	.LBE122:
 3337              		.loc 1 1726 9 discriminator 3 view .LVU1087
1727:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3338              		.loc 1 1727 3 view .LVU1088
1728:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3339              		.loc 1 1728 3 view .LVU1089
 3340              		.loc 1 1728 6 is_stmt 0 view .LVU1090
 3341 0012 022C     		cmp	r4, #2
 3342 0014 23D8     		bhi	.L220
 3343              	.LBB123:
1729:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3344              		.loc 1 1729 5 is_stmt 1 view .LVU1091
 3345              		.loc 1 1729 5 view .LVU1092
 3346              		.syntax unified
 3347              	@ 1729 "Core/Src/SEGGER_RTT.c" 1
 3348 0016 EFF31182 		mrs   r2, basepri  
 3349 001a 4FF02001 		mov   r1, #32       
 3350 001e 81F31188 		msr   basepri, r1  
 3351              		
 3352              	@ 0 "" 2
 3353              	.LVL288:
 3354              		.loc 1 1729 22 view .LVU1093
1730:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 99


 3355              		.loc 1 1730 5 view .LVU1094
1731:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3356              		.loc 1 1731 5 view .LVU1095
 3357              		.loc 1 1731 8 is_stmt 0 view .LVU1096
 3358              		.thumb
 3359              		.syntax unified
 3360 0022 64B9     		cbnz	r4, .L223
 3361 0024 2346     		mov	r3, r4
 3362              	.L219:
1732:Core/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
1733:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
1734:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
1735:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
1736:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
1737:Core/Src/SEGGER_RTT.c ****     }
1738:Core/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3363              		.loc 1 1738 5 is_stmt 1 view .LVU1097
 3364              		.loc 1 1738 27 is_stmt 0 view .LVU1098
 3365 0026 2344     		add	r3, r3, r4
 3366 0028 05EBC305 		add	r5, r5, r3, lsl #3
 3367 002c 069B     		ldr	r3, [sp, #24]
 3368 002e 6B67     		str	r3, [r5, #116]
1739:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3369              		.loc 1 1739 5 is_stmt 1 view .LVU1099
 3370              		.syntax unified
 3371              	@ 1739 "Core/Src/SEGGER_RTT.c" 1
 3372 0030 BFF35F8F 		dmb
 3373              	
 3374              	@ 0 "" 2
 3375              		.loc 1 1739 15 view .LVU1100
1740:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3376              		.loc 1 1740 5 view .LVU1101
 3377              	@ 1740 "Core/Src/SEGGER_RTT.c" 1
 3378 0034 82F31188 		msr   basepri, r2  
 3379              		
 3380              	@ 0 "" 2
 3381              		.thumb
 3382              		.syntax unified
 3383              	.LBE123:
 3384              		.loc 1 1740 24 view .LVU1102
1741:Core/Src/SEGGER_RTT.c ****     r =  0;
 3385              		.loc 1 1741 5 view .LVU1103
 3386              	.LVL289:
 3387              		.loc 1 1741 7 is_stmt 0 view .LVU1104
 3388 0038 0020     		movs	r0, #0
 3389              	.LVL290:
 3390              	.L216:
1742:Core/Src/SEGGER_RTT.c ****   } else {
1743:Core/Src/SEGGER_RTT.c ****     r = -1;
1744:Core/Src/SEGGER_RTT.c ****   }
1745:Core/Src/SEGGER_RTT.c ****   return r;
1746:Core/Src/SEGGER_RTT.c **** }
 3391              		.loc 1 1746 1 view .LVU1105
 3392 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3393              	.LVL291:
 3394              	.L223:
 3395              	.LBB124:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 100


1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3396              		.loc 1 1732 7 is_stmt 1 view .LVU1106
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3397              		.loc 1 1732 27 is_stmt 0 view .LVU1107
 3398 003e 04EB4400 		add	r0, r4, r4, lsl #1
 3399 0042 05EBC000 		add	r0, r5, r0, lsl #3
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3400              		.loc 1 1735 27 view .LVU1108
 3401 0046 0023     		movs	r3, #0
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3402              		.loc 1 1732 27 view .LVU1109
 3403 0048 C0F86080 		str	r8, [r0, #96]
1733:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3404              		.loc 1 1733 7 is_stmt 1 view .LVU1110
1733:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3405              		.loc 1 1733 27 is_stmt 0 view .LVU1111
 3406 004c 4766     		str	r7, [r0, #100]
1734:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3407              		.loc 1 1734 7 is_stmt 1 view .LVU1112
1734:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3408              		.loc 1 1734 27 is_stmt 0 view .LVU1113
 3409 004e 8666     		str	r6, [r0, #104]
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3410              		.loc 1 1735 7 is_stmt 1 view .LVU1114
1735:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3411              		.loc 1 1735 27 is_stmt 0 view .LVU1115
 3412 0050 0367     		str	r3, [r0, #112]
1736:Core/Src/SEGGER_RTT.c ****     }
 3413              		.loc 1 1736 7 is_stmt 1 view .LVU1116
1736:Core/Src/SEGGER_RTT.c ****     }
 3414              		.loc 1 1736 27 is_stmt 0 view .LVU1117
 3415 0052 C366     		str	r3, [r0, #108]
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3416              		.loc 1 1732 27 view .LVU1118
 3417 0054 6300     		lsls	r3, r4, #1
 3418 0056 E6E7     		b	.L219
 3419              	.LVL292:
 3420              	.L225:
1732:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3421              		.loc 1 1732 27 view .LVU1119
 3422              	.LBE124:
 3423              	.LBB125:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3424              		.loc 1 1726 3 is_stmt 1 discriminator 1 view .LVU1120
 3425 0058 FFF7FEFF 		bl	_DoInit
 3426              	.LVL293:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3427              		.loc 1 1726 3 is_stmt 0 discriminator 1 view .LVU1121
 3428 005c D9E7     		b	.L217
 3429              	.LVL294:
 3430              	.L220:
1726:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3431              		.loc 1 1726 3 discriminator 1 view .LVU1122
 3432              	.LBE125:
1743:Core/Src/SEGGER_RTT.c ****   }
 3433              		.loc 1 1743 7 view .LVU1123
 3434 005e 4FF0FF30 		mov	r0, #-1
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 101


 3435              	.LVL295:
1745:Core/Src/SEGGER_RTT.c **** }
 3436              		.loc 1 1745 3 is_stmt 1 view .LVU1124
1745:Core/Src/SEGGER_RTT.c **** }
 3437              		.loc 1 1745 10 is_stmt 0 view .LVU1125
 3438 0062 EAE7     		b	.L216
 3439              	.L227:
 3440              		.align	2
 3441              	.L226:
 3442 0064 00000000 		.word	_SEGGER_RTT
 3443              		.cfi_endproc
 3444              	.LFE26:
 3446              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3447              		.align	1
 3448              		.p2align 2,,3
 3449              		.global	SEGGER_RTT_SetNameUpBuffer
 3450              		.syntax unified
 3451              		.thumb
 3452              		.thumb_func
 3454              	SEGGER_RTT_SetNameUpBuffer:
 3455              	.LVL296:
 3456              	.LFB27:
1747:Core/Src/SEGGER_RTT.c **** 
1748:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1749:Core/Src/SEGGER_RTT.c **** *
1750:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1751:Core/Src/SEGGER_RTT.c **** *
1752:Core/Src/SEGGER_RTT.c **** *  Function description
1753:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1754:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1755:Core/Src/SEGGER_RTT.c **** *
1756:Core/Src/SEGGER_RTT.c **** *  Parameters
1757:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1758:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1759:Core/Src/SEGGER_RTT.c **** *
1760:Core/Src/SEGGER_RTT.c **** *  Return value
1761:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1762:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1763:Core/Src/SEGGER_RTT.c **** */
1764:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3457              		.loc 1 1764 73 is_stmt 1 view -0
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 0
 3460              		@ frame_needed = 0, uses_anonymous_args = 0
1765:Core/Src/SEGGER_RTT.c ****   int r;
 3461              		.loc 1 1765 3 view .LVU1127
1766:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3462              		.loc 1 1766 3 view .LVU1128
1767:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3463              		.loc 1 1767 3 view .LVU1129
 3464              	.LBB126:
1768:Core/Src/SEGGER_RTT.c **** 
1769:Core/Src/SEGGER_RTT.c ****   INIT();
 3465              		.loc 1 1769 3 view .LVU1130
 3466              		.loc 1 1769 3 view .LVU1131
 3467              		.loc 1 1769 3 view .LVU1132
 3468              		.loc 1 1769 3 view .LVU1133
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 102


 3469              	.LBE126:
1764:Core/Src/SEGGER_RTT.c ****   int r;
 3470              		.loc 1 1764 73 is_stmt 0 view .LVU1134
 3471 0000 70B5     		push	{r4, r5, r6, lr}
 3472              		.cfi_def_cfa_offset 16
 3473              		.cfi_offset 4, -16
 3474              		.cfi_offset 5, -12
 3475              		.cfi_offset 6, -8
 3476              		.cfi_offset 14, -4
 3477              	.LBB127:
 3478              		.loc 1 1769 3 view .LVU1135
 3479 0002 0E4E     		ldr	r6, .L234
 3480 0004 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 3481              	.LBE127:
1764:Core/Src/SEGGER_RTT.c ****   int r;
 3482              		.loc 1 1764 73 view .LVU1136
 3483 0006 0446     		mov	r4, r0
 3484 0008 0D46     		mov	r5, r1
 3485              	.LBB128:
 3486              		.loc 1 1769 3 view .LVU1137
 3487 000a 83B1     		cbz	r3, .L233
 3488              	.LVL297:
 3489              	.L229:
 3490              		.loc 1 1769 3 is_stmt 1 discriminator 3 view .LVU1138
 3491              	.LBE128:
 3492              		.loc 1 1769 9 discriminator 3 view .LVU1139
1770:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3493              		.loc 1 1770 3 view .LVU1140
1771:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3494              		.loc 1 1771 3 view .LVU1141
 3495              		.loc 1 1771 6 is_stmt 0 view .LVU1142
 3496 000c 022C     		cmp	r4, #2
 3497 000e 11D8     		bhi	.L231
 3498              	.LBB129:
1772:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3499              		.loc 1 1772 5 is_stmt 1 view .LVU1143
 3500              		.loc 1 1772 5 view .LVU1144
 3501              		.syntax unified
 3502              	@ 1772 "Core/Src/SEGGER_RTT.c" 1
 3503 0010 EFF31183 		mrs   r3, basepri  
 3504 0014 4FF02001 		mov   r1, #32       
 3505 0018 81F31188 		msr   basepri, r1  
 3506              		
 3507              	@ 0 "" 2
 3508              	.LVL298:
 3509              		.loc 1 1772 22 view .LVU1145
1773:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3510              		.loc 1 1773 5 view .LVU1146
1774:Core/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3511              		.loc 1 1774 5 view .LVU1147
 3512              		.loc 1 1774 16 is_stmt 0 view .LVU1148
 3513              		.thumb
 3514              		.syntax unified
 3515 001c 0134     		adds	r4, r4, #1
 3516              	.LVL299:
 3517              		.loc 1 1774 16 view .LVU1149
 3518 001e 04EB4404 		add	r4, r4, r4, lsl #1
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 103


 3519              	.LVL300:
 3520              		.loc 1 1774 16 view .LVU1150
 3521 0022 E400     		lsls	r4, r4, #3
 3522 0024 3551     		str	r5, [r6, r4]
1775:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3523              		.loc 1 1775 5 is_stmt 1 view .LVU1151
 3524              		.syntax unified
 3525              	@ 1775 "Core/Src/SEGGER_RTT.c" 1
 3526 0026 83F31188 		msr   basepri, r3  
 3527              		
 3528              	@ 0 "" 2
 3529              		.thumb
 3530              		.syntax unified
 3531              	.LBE129:
 3532              		.loc 1 1775 24 view .LVU1152
1776:Core/Src/SEGGER_RTT.c ****     r =  0;
 3533              		.loc 1 1776 5 view .LVU1153
 3534              	.LVL301:
 3535              		.loc 1 1776 7 is_stmt 0 view .LVU1154
 3536 002a 0020     		movs	r0, #0
1777:Core/Src/SEGGER_RTT.c ****   } else {
1778:Core/Src/SEGGER_RTT.c ****     r = -1;
1779:Core/Src/SEGGER_RTT.c ****   }
1780:Core/Src/SEGGER_RTT.c ****   return r;
1781:Core/Src/SEGGER_RTT.c **** }
 3537              		.loc 1 1781 1 view .LVU1155
 3538 002c 70BD     		pop	{r4, r5, r6, pc}
 3539              	.LVL302:
 3540              	.L233:
 3541              	.LBB130:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3542              		.loc 1 1769 3 is_stmt 1 discriminator 1 view .LVU1156
 3543 002e FFF7FEFF 		bl	_DoInit
 3544              	.LVL303:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3545              		.loc 1 1769 3 is_stmt 0 discriminator 1 view .LVU1157
 3546 0032 EBE7     		b	.L229
 3547              	.LVL304:
 3548              	.L231:
1769:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3549              		.loc 1 1769 3 discriminator 1 view .LVU1158
 3550              	.LBE130:
1778:Core/Src/SEGGER_RTT.c ****   }
 3551              		.loc 1 1778 7 view .LVU1159
 3552 0034 4FF0FF30 		mov	r0, #-1
 3553              	.LVL305:
1780:Core/Src/SEGGER_RTT.c **** }
 3554              		.loc 1 1780 3 is_stmt 1 view .LVU1160
 3555              		.loc 1 1781 1 is_stmt 0 view .LVU1161
 3556 0038 70BD     		pop	{r4, r5, r6, pc}
 3557              	.LVL306:
 3558              	.L235:
 3559              		.loc 1 1781 1 view .LVU1162
 3560 003a 00BF     		.align	2
 3561              	.L234:
 3562 003c 00000000 		.word	_SEGGER_RTT
 3563              		.cfi_endproc
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 104


 3564              	.LFE27:
 3566              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3567              		.align	1
 3568              		.p2align 2,,3
 3569              		.global	SEGGER_RTT_SetNameDownBuffer
 3570              		.syntax unified
 3571              		.thumb
 3572              		.thumb_func
 3574              	SEGGER_RTT_SetNameDownBuffer:
 3575              	.LVL307:
 3576              	.LFB28:
1782:Core/Src/SEGGER_RTT.c **** 
1783:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1784:Core/Src/SEGGER_RTT.c **** *
1785:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1786:Core/Src/SEGGER_RTT.c **** *
1787:Core/Src/SEGGER_RTT.c **** *  Function description
1788:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1789:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1790:Core/Src/SEGGER_RTT.c **** *
1791:Core/Src/SEGGER_RTT.c **** *  Parameters
1792:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1793:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1794:Core/Src/SEGGER_RTT.c **** *
1795:Core/Src/SEGGER_RTT.c **** *  Return value
1796:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1797:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1798:Core/Src/SEGGER_RTT.c **** */
1799:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3577              		.loc 1 1799 75 is_stmt 1 view -0
 3578              		.cfi_startproc
 3579              		@ args = 0, pretend = 0, frame = 0
 3580              		@ frame_needed = 0, uses_anonymous_args = 0
1800:Core/Src/SEGGER_RTT.c ****   int r;
 3581              		.loc 1 1800 3 view .LVU1164
1801:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3582              		.loc 1 1801 3 view .LVU1165
1802:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3583              		.loc 1 1802 3 view .LVU1166
 3584              	.LBB131:
1803:Core/Src/SEGGER_RTT.c **** 
1804:Core/Src/SEGGER_RTT.c ****   INIT();
 3585              		.loc 1 1804 3 view .LVU1167
 3586              		.loc 1 1804 3 view .LVU1168
 3587              		.loc 1 1804 3 view .LVU1169
 3588              		.loc 1 1804 3 view .LVU1170
 3589              	.LBE131:
1799:Core/Src/SEGGER_RTT.c ****   int r;
 3590              		.loc 1 1799 75 is_stmt 0 view .LVU1171
 3591 0000 70B5     		push	{r4, r5, r6, lr}
 3592              		.cfi_def_cfa_offset 16
 3593              		.cfi_offset 4, -16
 3594              		.cfi_offset 5, -12
 3595              		.cfi_offset 6, -8
 3596              		.cfi_offset 14, -4
 3597              	.LBB132:
 3598              		.loc 1 1804 3 view .LVU1172
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 105


 3599 0002 0E4D     		ldr	r5, .L242
 3600 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3601              	.LBE132:
1799:Core/Src/SEGGER_RTT.c ****   int r;
 3602              		.loc 1 1799 75 view .LVU1173
 3603 0006 0446     		mov	r4, r0
 3604 0008 0E46     		mov	r6, r1
 3605              	.LBB133:
 3606              		.loc 1 1804 3 view .LVU1174
 3607 000a 83B1     		cbz	r3, .L241
 3608              	.LVL308:
 3609              	.L237:
 3610              		.loc 1 1804 3 is_stmt 1 discriminator 3 view .LVU1175
 3611              	.LBE133:
 3612              		.loc 1 1804 9 discriminator 3 view .LVU1176
1805:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3613              		.loc 1 1805 3 view .LVU1177
1806:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3614              		.loc 1 1806 3 view .LVU1178
 3615              		.loc 1 1806 6 is_stmt 0 view .LVU1179
 3616 000c 022C     		cmp	r4, #2
 3617 000e 11D8     		bhi	.L239
 3618              	.LBB134:
1807:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3619              		.loc 1 1807 5 is_stmt 1 view .LVU1180
 3620              		.loc 1 1807 5 view .LVU1181
 3621              		.syntax unified
 3622              	@ 1807 "Core/Src/SEGGER_RTT.c" 1
 3623 0010 EFF31183 		mrs   r3, basepri  
 3624 0014 4FF02001 		mov   r1, #32       
 3625 0018 81F31188 		msr   basepri, r1  
 3626              		
 3627              	@ 0 "" 2
 3628              	.LVL309:
 3629              		.loc 1 1807 22 view .LVU1182
1808:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3630              		.loc 1 1808 5 view .LVU1183
1809:Core/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3631              		.loc 1 1809 5 view .LVU1184
 3632              		.loc 1 1809 18 is_stmt 0 view .LVU1185
 3633              		.thumb
 3634              		.syntax unified
 3635 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3636              	.LVL310:
 3637              		.loc 1 1809 18 view .LVU1186
 3638 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3639 0024 2E66     		str	r6, [r5, #96]
1810:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3640              		.loc 1 1810 5 is_stmt 1 view .LVU1187
 3641              		.syntax unified
 3642              	@ 1810 "Core/Src/SEGGER_RTT.c" 1
 3643 0026 83F31188 		msr   basepri, r3  
 3644              		
 3645              	@ 0 "" 2
 3646              		.thumb
 3647              		.syntax unified
 3648              	.LBE134:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 106


 3649              		.loc 1 1810 24 view .LVU1188
1811:Core/Src/SEGGER_RTT.c ****     r =  0;
 3650              		.loc 1 1811 5 view .LVU1189
 3651              	.LVL311:
 3652              		.loc 1 1811 7 is_stmt 0 view .LVU1190
 3653 002a 0020     		movs	r0, #0
1812:Core/Src/SEGGER_RTT.c ****   } else {
1813:Core/Src/SEGGER_RTT.c ****     r = -1;
1814:Core/Src/SEGGER_RTT.c ****   }
1815:Core/Src/SEGGER_RTT.c ****   return r;
1816:Core/Src/SEGGER_RTT.c **** }
 3654              		.loc 1 1816 1 view .LVU1191
 3655 002c 70BD     		pop	{r4, r5, r6, pc}
 3656              	.LVL312:
 3657              	.L241:
 3658              	.LBB135:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3659              		.loc 1 1804 3 is_stmt 1 discriminator 1 view .LVU1192
 3660 002e FFF7FEFF 		bl	_DoInit
 3661              	.LVL313:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3662              		.loc 1 1804 3 is_stmt 0 discriminator 1 view .LVU1193
 3663 0032 EBE7     		b	.L237
 3664              	.LVL314:
 3665              	.L239:
1804:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3666              		.loc 1 1804 3 discriminator 1 view .LVU1194
 3667              	.LBE135:
1813:Core/Src/SEGGER_RTT.c ****   }
 3668              		.loc 1 1813 7 view .LVU1195
 3669 0034 4FF0FF30 		mov	r0, #-1
 3670              	.LVL315:
1815:Core/Src/SEGGER_RTT.c **** }
 3671              		.loc 1 1815 3 is_stmt 1 view .LVU1196
 3672              		.loc 1 1816 1 is_stmt 0 view .LVU1197
 3673 0038 70BD     		pop	{r4, r5, r6, pc}
 3674              	.LVL316:
 3675              	.L243:
 3676              		.loc 1 1816 1 view .LVU1198
 3677 003a 00BF     		.align	2
 3678              	.L242:
 3679 003c 00000000 		.word	_SEGGER_RTT
 3680              		.cfi_endproc
 3681              	.LFE28:
 3683              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3684              		.align	1
 3685              		.p2align 2,,3
 3686              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3687              		.syntax unified
 3688              		.thumb
 3689              		.thumb_func
 3691              	SEGGER_RTT_SetFlagsUpBuffer:
 3692              	.LVL317:
 3693              	.LFB29:
1817:Core/Src/SEGGER_RTT.c **** 
1818:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1819:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 107


1820:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1821:Core/Src/SEGGER_RTT.c **** *
1822:Core/Src/SEGGER_RTT.c **** *  Function description
1823:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1824:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1825:Core/Src/SEGGER_RTT.c **** *
1826:Core/Src/SEGGER_RTT.c **** *  Parameters
1827:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1828:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1829:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1830:Core/Src/SEGGER_RTT.c **** *
1831:Core/Src/SEGGER_RTT.c **** *  Return value
1832:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1833:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1834:Core/Src/SEGGER_RTT.c **** */
1835:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3694              		.loc 1 1835 71 is_stmt 1 view -0
 3695              		.cfi_startproc
 3696              		@ args = 0, pretend = 0, frame = 0
 3697              		@ frame_needed = 0, uses_anonymous_args = 0
1836:Core/Src/SEGGER_RTT.c ****   int r;
 3698              		.loc 1 1836 3 view .LVU1200
1837:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3699              		.loc 1 1837 3 view .LVU1201
1838:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3700              		.loc 1 1838 3 view .LVU1202
 3701              	.LBB136:
1839:Core/Src/SEGGER_RTT.c **** 
1840:Core/Src/SEGGER_RTT.c ****   INIT();
 3702              		.loc 1 1840 3 view .LVU1203
 3703              		.loc 1 1840 3 view .LVU1204
 3704              		.loc 1 1840 3 view .LVU1205
 3705              		.loc 1 1840 3 view .LVU1206
 3706              	.LBE136:
1835:Core/Src/SEGGER_RTT.c ****   int r;
 3707              		.loc 1 1835 71 is_stmt 0 view .LVU1207
 3708 0000 70B5     		push	{r4, r5, r6, lr}
 3709              		.cfi_def_cfa_offset 16
 3710              		.cfi_offset 4, -16
 3711              		.cfi_offset 5, -12
 3712              		.cfi_offset 6, -8
 3713              		.cfi_offset 14, -4
 3714              	.LBB137:
 3715              		.loc 1 1840 3 view .LVU1208
 3716 0002 0E4D     		ldr	r5, .L250
 3717 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3718              	.LBE137:
1835:Core/Src/SEGGER_RTT.c ****   int r;
 3719              		.loc 1 1835 71 view .LVU1209
 3720 0006 0446     		mov	r4, r0
 3721 0008 0E46     		mov	r6, r1
 3722              	.LBB138:
 3723              		.loc 1 1840 3 view .LVU1210
 3724 000a 83B1     		cbz	r3, .L249
 3725              	.LVL318:
 3726              	.L245:
 3727              		.loc 1 1840 3 is_stmt 1 discriminator 3 view .LVU1211
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 108


 3728              	.LBE138:
 3729              		.loc 1 1840 9 discriminator 3 view .LVU1212
1841:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3730              		.loc 1 1841 3 view .LVU1213
1842:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3731              		.loc 1 1842 3 view .LVU1214
 3732              		.loc 1 1842 6 is_stmt 0 view .LVU1215
 3733 000c 022C     		cmp	r4, #2
 3734 000e 11D8     		bhi	.L247
 3735              	.LBB139:
1843:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3736              		.loc 1 1843 5 is_stmt 1 view .LVU1216
 3737              		.loc 1 1843 5 view .LVU1217
 3738              		.syntax unified
 3739              	@ 1843 "Core/Src/SEGGER_RTT.c" 1
 3740 0010 EFF31183 		mrs   r3, basepri  
 3741 0014 4FF02001 		mov   r1, #32       
 3742 0018 81F31188 		msr   basepri, r1  
 3743              		
 3744              	@ 0 "" 2
 3745              	.LVL319:
 3746              		.loc 1 1843 22 view .LVU1218
1844:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3747              		.loc 1 1844 5 view .LVU1219
1845:Core/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3748              		.loc 1 1845 5 view .LVU1220
 3749              		.loc 1 1845 16 is_stmt 0 view .LVU1221
 3750              		.thumb
 3751              		.syntax unified
 3752 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3753              	.LVL320:
 3754              		.loc 1 1845 16 view .LVU1222
 3755 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3756 0024 EE62     		str	r6, [r5, #44]
1846:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3757              		.loc 1 1846 5 is_stmt 1 view .LVU1223
 3758              		.syntax unified
 3759              	@ 1846 "Core/Src/SEGGER_RTT.c" 1
 3760 0026 83F31188 		msr   basepri, r3  
 3761              		
 3762              	@ 0 "" 2
 3763              		.thumb
 3764              		.syntax unified
 3765              	.LBE139:
 3766              		.loc 1 1846 24 view .LVU1224
1847:Core/Src/SEGGER_RTT.c ****     r =  0;
 3767              		.loc 1 1847 5 view .LVU1225
 3768              	.LVL321:
 3769              		.loc 1 1847 7 is_stmt 0 view .LVU1226
 3770 002a 0020     		movs	r0, #0
1848:Core/Src/SEGGER_RTT.c ****   } else {
1849:Core/Src/SEGGER_RTT.c ****     r = -1;
1850:Core/Src/SEGGER_RTT.c ****   }
1851:Core/Src/SEGGER_RTT.c ****   return r;
1852:Core/Src/SEGGER_RTT.c **** }
 3771              		.loc 1 1852 1 view .LVU1227
 3772 002c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 109


 3773              	.LVL322:
 3774              	.L249:
 3775              	.LBB140:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3776              		.loc 1 1840 3 is_stmt 1 discriminator 1 view .LVU1228
 3777 002e FFF7FEFF 		bl	_DoInit
 3778              	.LVL323:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3779              		.loc 1 1840 3 is_stmt 0 discriminator 1 view .LVU1229
 3780 0032 EBE7     		b	.L245
 3781              	.LVL324:
 3782              	.L247:
1840:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3783              		.loc 1 1840 3 discriminator 1 view .LVU1230
 3784              	.LBE140:
1849:Core/Src/SEGGER_RTT.c ****   }
 3785              		.loc 1 1849 7 view .LVU1231
 3786 0034 4FF0FF30 		mov	r0, #-1
 3787              	.LVL325:
1851:Core/Src/SEGGER_RTT.c **** }
 3788              		.loc 1 1851 3 is_stmt 1 view .LVU1232
 3789              		.loc 1 1852 1 is_stmt 0 view .LVU1233
 3790 0038 70BD     		pop	{r4, r5, r6, pc}
 3791              	.LVL326:
 3792              	.L251:
 3793              		.loc 1 1852 1 view .LVU1234
 3794 003a 00BF     		.align	2
 3795              	.L250:
 3796 003c 00000000 		.word	_SEGGER_RTT
 3797              		.cfi_endproc
 3798              	.LFE29:
 3800              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3801              		.align	1
 3802              		.p2align 2,,3
 3803              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3804              		.syntax unified
 3805              		.thumb
 3806              		.thumb_func
 3808              	SEGGER_RTT_SetFlagsDownBuffer:
 3809              	.LVL327:
 3810              	.LFB30:
1853:Core/Src/SEGGER_RTT.c **** 
1854:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1855:Core/Src/SEGGER_RTT.c **** *
1856:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1857:Core/Src/SEGGER_RTT.c **** *
1858:Core/Src/SEGGER_RTT.c **** *  Function description
1859:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1860:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1861:Core/Src/SEGGER_RTT.c **** *
1862:Core/Src/SEGGER_RTT.c **** *  Parameters
1863:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1864:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1865:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1866:Core/Src/SEGGER_RTT.c **** *
1867:Core/Src/SEGGER_RTT.c **** *  Return value
1868:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 110


1869:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1870:Core/Src/SEGGER_RTT.c **** */
1871:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3811              		.loc 1 1871 73 is_stmt 1 view -0
 3812              		.cfi_startproc
 3813              		@ args = 0, pretend = 0, frame = 0
 3814              		@ frame_needed = 0, uses_anonymous_args = 0
1872:Core/Src/SEGGER_RTT.c ****   int r;
 3815              		.loc 1 1872 3 view .LVU1236
1873:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3816              		.loc 1 1873 3 view .LVU1237
1874:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3817              		.loc 1 1874 3 view .LVU1238
 3818              	.LBB141:
1875:Core/Src/SEGGER_RTT.c **** 
1876:Core/Src/SEGGER_RTT.c ****   INIT();
 3819              		.loc 1 1876 3 view .LVU1239
 3820              		.loc 1 1876 3 view .LVU1240
 3821              		.loc 1 1876 3 view .LVU1241
 3822              		.loc 1 1876 3 view .LVU1242
 3823              	.LBE141:
1871:Core/Src/SEGGER_RTT.c ****   int r;
 3824              		.loc 1 1871 73 is_stmt 0 view .LVU1243
 3825 0000 70B5     		push	{r4, r5, r6, lr}
 3826              		.cfi_def_cfa_offset 16
 3827              		.cfi_offset 4, -16
 3828              		.cfi_offset 5, -12
 3829              		.cfi_offset 6, -8
 3830              		.cfi_offset 14, -4
 3831              	.LBB142:
 3832              		.loc 1 1876 3 view .LVU1244
 3833 0002 0E4D     		ldr	r5, .L258
 3834 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3835              	.LBE142:
1871:Core/Src/SEGGER_RTT.c ****   int r;
 3836              		.loc 1 1871 73 view .LVU1245
 3837 0006 0446     		mov	r4, r0
 3838 0008 0E46     		mov	r6, r1
 3839              	.LBB143:
 3840              		.loc 1 1876 3 view .LVU1246
 3841 000a 83B1     		cbz	r3, .L257
 3842              	.LVL328:
 3843              	.L253:
 3844              		.loc 1 1876 3 is_stmt 1 discriminator 3 view .LVU1247
 3845              	.LBE143:
 3846              		.loc 1 1876 9 discriminator 3 view .LVU1248
1877:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3847              		.loc 1 1877 3 view .LVU1249
1878:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3848              		.loc 1 1878 3 view .LVU1250
 3849              		.loc 1 1878 6 is_stmt 0 view .LVU1251
 3850 000c 022C     		cmp	r4, #2
 3851 000e 11D8     		bhi	.L255
 3852              	.LBB144:
1879:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3853              		.loc 1 1879 5 is_stmt 1 view .LVU1252
 3854              		.loc 1 1879 5 view .LVU1253
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 111


 3855              		.syntax unified
 3856              	@ 1879 "Core/Src/SEGGER_RTT.c" 1
 3857 0010 EFF31183 		mrs   r3, basepri  
 3858 0014 4FF02001 		mov   r1, #32       
 3859 0018 81F31188 		msr   basepri, r1  
 3860              		
 3861              	@ 0 "" 2
 3862              	.LVL329:
 3863              		.loc 1 1879 22 view .LVU1254
1880:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3864              		.loc 1 1880 5 view .LVU1255
1881:Core/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3865              		.loc 1 1881 5 view .LVU1256
 3866              		.loc 1 1881 18 is_stmt 0 view .LVU1257
 3867              		.thumb
 3868              		.syntax unified
 3869 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3870              	.LVL330:
 3871              		.loc 1 1881 18 view .LVU1258
 3872 0020 05EBC405 		add	r5, r5, r4, lsl #3
 3873 0024 6E67     		str	r6, [r5, #116]
1882:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3874              		.loc 1 1882 5 is_stmt 1 view .LVU1259
 3875              		.syntax unified
 3876              	@ 1882 "Core/Src/SEGGER_RTT.c" 1
 3877 0026 83F31188 		msr   basepri, r3  
 3878              		
 3879              	@ 0 "" 2
 3880              		.thumb
 3881              		.syntax unified
 3882              	.LBE144:
 3883              		.loc 1 1882 24 view .LVU1260
1883:Core/Src/SEGGER_RTT.c ****     r =  0;
 3884              		.loc 1 1883 5 view .LVU1261
 3885              	.LVL331:
 3886              		.loc 1 1883 7 is_stmt 0 view .LVU1262
 3887 002a 0020     		movs	r0, #0
1884:Core/Src/SEGGER_RTT.c ****   } else {
1885:Core/Src/SEGGER_RTT.c ****     r = -1;
1886:Core/Src/SEGGER_RTT.c ****   }
1887:Core/Src/SEGGER_RTT.c ****   return r;
1888:Core/Src/SEGGER_RTT.c **** }
 3888              		.loc 1 1888 1 view .LVU1263
 3889 002c 70BD     		pop	{r4, r5, r6, pc}
 3890              	.LVL332:
 3891              	.L257:
 3892              	.LBB145:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3893              		.loc 1 1876 3 is_stmt 1 discriminator 1 view .LVU1264
 3894 002e FFF7FEFF 		bl	_DoInit
 3895              	.LVL333:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3896              		.loc 1 1876 3 is_stmt 0 discriminator 1 view .LVU1265
 3897 0032 EBE7     		b	.L253
 3898              	.LVL334:
 3899              	.L255:
1876:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 112


 3900              		.loc 1 1876 3 discriminator 1 view .LVU1266
 3901              	.LBE145:
1885:Core/Src/SEGGER_RTT.c ****   }
 3902              		.loc 1 1885 7 view .LVU1267
 3903 0034 4FF0FF30 		mov	r0, #-1
 3904              	.LVL335:
1887:Core/Src/SEGGER_RTT.c **** }
 3905              		.loc 1 1887 3 is_stmt 1 view .LVU1268
 3906              		.loc 1 1888 1 is_stmt 0 view .LVU1269
 3907 0038 70BD     		pop	{r4, r5, r6, pc}
 3908              	.LVL336:
 3909              	.L259:
 3910              		.loc 1 1888 1 view .LVU1270
 3911 003a 00BF     		.align	2
 3912              	.L258:
 3913 003c 00000000 		.word	_SEGGER_RTT
 3914              		.cfi_endproc
 3915              	.LFE30:
 3917              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3918              		.align	1
 3919              		.p2align 2,,3
 3920              		.global	SEGGER_RTT_Init
 3921              		.syntax unified
 3922              		.thumb
 3923              		.thumb_func
 3925              	SEGGER_RTT_Init:
 3926              	.LFB31:
1889:Core/Src/SEGGER_RTT.c **** 
1890:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1891:Core/Src/SEGGER_RTT.c **** *
1892:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1893:Core/Src/SEGGER_RTT.c **** *
1894:Core/Src/SEGGER_RTT.c **** *  Function description
1895:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1896:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1897:Core/Src/SEGGER_RTT.c **** *
1898:Core/Src/SEGGER_RTT.c **** */
1899:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3927              		.loc 1 1899 29 is_stmt 1 view -0
 3928              		.cfi_startproc
 3929              		@ args = 0, pretend = 0, frame = 0
 3930              		@ frame_needed = 0, uses_anonymous_args = 0
 3931              		@ link register save eliminated.
1900:Core/Src/SEGGER_RTT.c ****   _DoInit();
 3932              		.loc 1 1900 3 view .LVU1272
 3933 0000 FFF7FEBF 		b	_DoInit
 3934              	.LVL337:
 3935              		.cfi_endproc
 3936              	.LFE31:
 3938              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3939              		.align	1
 3940              		.p2align 2,,3
 3941              		.global	SEGGER_RTT_SetTerminal
 3942              		.syntax unified
 3943              		.thumb
 3944              		.thumb_func
 3946              	SEGGER_RTT_SetTerminal:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 113


 3947              	.LVL338:
 3948              	.LFB32:
1901:Core/Src/SEGGER_RTT.c **** }
1902:Core/Src/SEGGER_RTT.c **** 
1903:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1904:Core/Src/SEGGER_RTT.c **** *
1905:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1906:Core/Src/SEGGER_RTT.c **** *
1907:Core/Src/SEGGER_RTT.c **** *  Function description
1908:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1909:Core/Src/SEGGER_RTT.c **** *
1910:Core/Src/SEGGER_RTT.c **** *  Parameters
1911:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1912:Core/Src/SEGGER_RTT.c **** *
1913:Core/Src/SEGGER_RTT.c **** *  Return value
1914:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1915:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1916:Core/Src/SEGGER_RTT.c **** *
1917:Core/Src/SEGGER_RTT.c **** *  Notes
1918:Core/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1919:Core/Src/SEGGER_RTT.c **** */
1920:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3949              		.loc 1 1920 55 view -0
 3950              		.cfi_startproc
 3951              		@ args = 0, pretend = 0, frame = 8
 3952              		@ frame_needed = 0, uses_anonymous_args = 0
1921:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3953              		.loc 1 1921 3 view .LVU1274
1922:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3954              		.loc 1 1922 3 view .LVU1275
1923:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
 3955              		.loc 1 1923 3 view .LVU1276
1924:Core/Src/SEGGER_RTT.c ****   int r;
 3956              		.loc 1 1924 3 view .LVU1277
 3957              	.LBB146:
1925:Core/Src/SEGGER_RTT.c **** 
1926:Core/Src/SEGGER_RTT.c ****   INIT();
 3958              		.loc 1 1926 3 view .LVU1278
 3959              		.loc 1 1926 3 view .LVU1279
 3960              		.loc 1 1926 3 view .LVU1280
 3961              		.loc 1 1926 3 view .LVU1281
 3962              	.LBE146:
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3963              		.loc 1 1920 55 is_stmt 0 view .LVU1282
 3964 0000 70B5     		push	{r4, r5, r6, lr}
 3965              		.cfi_def_cfa_offset 16
 3966              		.cfi_offset 4, -16
 3967              		.cfi_offset 5, -12
 3968              		.cfi_offset 6, -8
 3969              		.cfi_offset 14, -4
 3970              	.LBB147:
 3971              		.loc 1 1926 3 view .LVU1283
 3972 0002 1F4D     		ldr	r5, .L275
 3973 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3974              	.LBE147:
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3975              		.loc 1 1920 55 view .LVU1284
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 114


 3976 0006 82B0     		sub	sp, sp, #8
 3977              		.cfi_def_cfa_offset 24
1920:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3978              		.loc 1 1920 55 view .LVU1285
 3979 0008 0446     		mov	r4, r0
 3980              	.LBB148:
 3981              		.loc 1 1926 3 view .LVU1286
 3982 000a 63B3     		cbz	r3, .L272
 3983              	.LVL339:
 3984              	.L262:
 3985              		.loc 1 1926 3 is_stmt 1 discriminator 3 view .LVU1287
 3986              	.LBE148:
 3987              		.loc 1 1926 9 discriminator 3 view .LVU1288
1927:Core/Src/SEGGER_RTT.c ****   r = 0;
 3988              		.loc 1 1927 3 view .LVU1289
1928:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3989              		.loc 1 1928 3 view .LVU1290
 3990              		.loc 1 1928 9 is_stmt 0 view .LVU1291
 3991 000c FF23     		movs	r3, #255
1929:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3992              		.loc 1 1929 6 view .LVU1292
 3993 000e 0F2C     		cmp	r4, #15
1928:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3994              		.loc 1 1928 9 view .LVU1293
 3995 0010 8DF80430 		strb	r3, [sp, #4]
 3996              		.loc 1 1929 3 is_stmt 1 view .LVU1294
 3997              		.loc 1 1929 6 is_stmt 0 view .LVU1295
 3998 0014 31D8     		bhi	.L269
1930:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3999              		.loc 1 1930 5 is_stmt 1 view .LVU1296
 4000              		.loc 1 1930 25 is_stmt 0 view .LVU1297
 4001 0016 1B4B     		ldr	r3, .L275+4
 4002              		.loc 1 1930 11 view .LVU1298
 4003 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 4004 001a 8DF80530 		strb	r3, [sp, #5]
1931:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 4005              		.loc 1 1931 5 is_stmt 1 view .LVU1299
 4006              	.LVL340:
 4007              	.LBB149:
1932:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 4008              		.loc 1 1932 5 view .LVU1300
 4009              		.loc 1 1932 5 view .LVU1301
 4010              		.syntax unified
 4011              	@ 1932 "Core/Src/SEGGER_RTT.c" 1
 4012 001e EFF31186 		mrs   r6, basepri  
 4013 0022 4FF02001 		mov   r1, #32       
 4014 0026 81F31188 		msr   basepri, r1  
 4015              		
 4016              	@ 0 "" 2
 4017              	.LVL341:
 4018              		.loc 1 1932 22 view .LVU1302
1933:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 4019              		.loc 1 1933 5 view .LVU1303
 4020              		.loc 1 1933 23 is_stmt 0 view .LVU1304
 4021              		.thumb
 4022              		.syntax unified
 4023 002a EA6A     		ldr	r2, [r5, #44]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 115


 4024 002c 02F00302 		and	r2, r2, #3
 4025              		.loc 1 1933 8 view .LVU1305
 4026 0030 022A     		cmp	r2, #2
 4027 0032 1BD0     		beq	.L273
1934:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1935:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1936:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1937:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 4028              		.loc 1 1937 7 is_stmt 1 view .LVU1306
 4029              	.LVL342:
 4030              	.LBB150:
 4031              	.LBI150:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4032              		.loc 1 526 17 view .LVU1307
 4033              	.LBB151:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4034              		.loc 1 527 3 view .LVU1308
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4035              		.loc 1 528 3 view .LVU1309
 529:Core/Src/SEGGER_RTT.c ****   //
 4036              		.loc 1 529 3 view .LVU1310
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4037              		.loc 1 534 3 view .LVU1311
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4038              		.loc 1 534 9 is_stmt 0 view .LVU1312
 4039 0034 AB6A     		ldr	r3, [r5, #40]
 4040              	.LVL343:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4041              		.loc 1 535 3 is_stmt 1 view .LVU1313
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4042              		.loc 1 535 9 is_stmt 0 view .LVU1314
 4043 0036 6A6A     		ldr	r2, [r5, #36]
 4044              	.LVL344:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4045              		.loc 1 536 3 is_stmt 1 view .LVU1315
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4046              		.loc 1 536 6 is_stmt 0 view .LVU1316
 4047 0038 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4048              		.loc 1 537 5 is_stmt 1 view .LVU1317
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4049              		.loc 1 537 7 is_stmt 0 view .LVU1318
 4050 003a 9CBF     		itt	ls
 4051 003c 296A     		ldrls	r1, [r5, #32]
 4052 003e 5B18     		addls	r3, r3, r1
 4053              	.LVL345:
 539:Core/Src/SEGGER_RTT.c ****   }
 4054              		.loc 1 539 5 is_stmt 1 view .LVU1319
 539:Core/Src/SEGGER_RTT.c ****   }
 4055              		.loc 1 539 7 is_stmt 0 view .LVU1320
 4056 0040 013B     		subs	r3, r3, #1
 4057 0042 9A1A     		subs	r2, r3, r2
 4058              	.LVL346:
 541:Core/Src/SEGGER_RTT.c **** }
 4059              		.loc 1 541 3 is_stmt 1 view .LVU1321
 541:Core/Src/SEGGER_RTT.c **** }
 4060              		.loc 1 541 3 is_stmt 0 view .LVU1322
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 116


 4061              	.LBE151:
 4062              	.LBE150:
1938:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 4063              		.loc 1 1938 7 is_stmt 1 view .LVU1323
 4064              		.loc 1 1938 10 is_stmt 0 view .LVU1324
 4065 0044 012A     		cmp	r2, #1
 4066 0046 05D8     		bhi	.L274
1939:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1940:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1941:Core/Src/SEGGER_RTT.c ****       } else {
1942:Core/Src/SEGGER_RTT.c ****         r = -1;
 4067              		.loc 1 1942 11 view .LVU1325
 4068 0048 4FF0FF30 		mov	r0, #-1
 4069              	.LVL347:
 4070              	.L268:
1943:Core/Src/SEGGER_RTT.c ****       }
1944:Core/Src/SEGGER_RTT.c ****     }
1945:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4071              		.loc 1 1945 5 is_stmt 1 view .LVU1326
 4072              		.syntax unified
 4073              	@ 1945 "Core/Src/SEGGER_RTT.c" 1
 4074 004c 86F31188 		msr   basepri, r6  
 4075              		
 4076              	@ 0 "" 2
 4077              		.thumb
 4078              		.syntax unified
 4079              	.LBE149:
 4080              		.loc 1 1945 24 view .LVU1327
 4081              	.LVL348:
 4082              	.L261:
1946:Core/Src/SEGGER_RTT.c ****   } else {
1947:Core/Src/SEGGER_RTT.c ****     r = -1;
1948:Core/Src/SEGGER_RTT.c ****   }
1949:Core/Src/SEGGER_RTT.c ****   return r;
1950:Core/Src/SEGGER_RTT.c **** }
 4083              		.loc 1 1950 1 is_stmt 0 view .LVU1328
 4084 0050 02B0     		add	sp, sp, #8
 4085              		.cfi_remember_state
 4086              		.cfi_def_cfa_offset 16
 4087              		@ sp needed
 4088 0052 70BD     		pop	{r4, r5, r6, pc}
 4089              	.LVL349:
 4090              	.L274:
 4091              		.cfi_restore_state
 4092              	.LBB152:
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4093              		.loc 1 1939 9 is_stmt 1 view .LVU1329
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4094              		.loc 1 1939 25 is_stmt 0 view .LVU1330
 4095 0054 0C4B     		ldr	r3, .L275+8
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4096              		.loc 1 1940 9 view .LVU1331
 4097 0056 0D48     		ldr	r0, .L275+12
 4098              	.LVL350:
1939:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 4099              		.loc 1 1939 25 view .LVU1332
 4100 0058 1C70     		strb	r4, [r3]
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 117


1940:Core/Src/SEGGER_RTT.c ****       } else {
 4101              		.loc 1 1940 9 is_stmt 1 view .LVU1333
 4102 005a 0222     		movs	r2, #2
 4103              	.LVL351:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4104              		.loc 1 1940 9 is_stmt 0 view .LVU1334
 4105 005c 01A9     		add	r1, sp, #4
 4106              	.LVL352:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4107              		.loc 1 1940 9 view .LVU1335
 4108 005e FFF7FEFF 		bl	_WriteNoCheck
 4109              	.LVL353:
 4110              	.L265:
1940:Core/Src/SEGGER_RTT.c ****       } else {
 4111              		.loc 1 1940 9 view .LVU1336
 4112              	.LBE152:
1927:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 4113              		.loc 1 1927 5 view .LVU1337
 4114 0062 0020     		movs	r0, #0
 4115 0064 F2E7     		b	.L268
 4116              	.LVL354:
 4117              	.L272:
 4118              	.LBB153:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4119              		.loc 1 1926 3 is_stmt 1 discriminator 1 view .LVU1338
 4120 0066 FFF7FEFF 		bl	_DoInit
 4121              	.LVL355:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4122              		.loc 1 1926 3 is_stmt 0 discriminator 1 view .LVU1339
 4123 006a CFE7     		b	.L262
 4124              	.LVL356:
 4125              	.L273:
1926:Core/Src/SEGGER_RTT.c ****   r = 0;
 4126              		.loc 1 1926 3 discriminator 1 view .LVU1340
 4127              	.LBE153:
 4128              	.LBB154:
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4129              		.loc 1 1934 7 is_stmt 1 view .LVU1341
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4130              		.loc 1 1934 23 is_stmt 0 view .LVU1342
 4131 006c 064B     		ldr	r3, .L275+8
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4132              		.loc 1 1935 7 view .LVU1343
 4133 006e 0748     		ldr	r0, .L275+12
 4134              	.LVL357:
1934:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 4135              		.loc 1 1934 23 view .LVU1344
 4136 0070 1C70     		strb	r4, [r3]
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4137              		.loc 1 1935 7 is_stmt 1 view .LVU1345
 4138 0072 01A9     		add	r1, sp, #4
 4139 0074 FFF7FEFF 		bl	_WriteBlocking
 4140              	.LVL358:
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4141              		.loc 1 1935 7 is_stmt 0 view .LVU1346
 4142 0078 F3E7     		b	.L265
 4143              	.LVL359:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 118


 4144              	.L269:
1935:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 4145              		.loc 1 1935 7 view .LVU1347
 4146              	.LBE154:
1947:Core/Src/SEGGER_RTT.c ****   }
 4147              		.loc 1 1947 7 view .LVU1348
 4148 007a 4FF0FF30 		mov	r0, #-1
 4149              	.LVL360:
1949:Core/Src/SEGGER_RTT.c **** }
 4150              		.loc 1 1949 3 is_stmt 1 view .LVU1349
1949:Core/Src/SEGGER_RTT.c **** }
 4151              		.loc 1 1949 10 is_stmt 0 view .LVU1350
 4152 007e E7E7     		b	.L261
 4153              	.L276:
 4154              		.align	2
 4155              	.L275:
 4156 0080 00000000 		.word	_SEGGER_RTT
 4157 0084 00000000 		.word	_aTerminalId
 4158 0088 00000000 		.word	_ActiveTerminal
 4159 008c 18000000 		.word	_SEGGER_RTT+24
 4160              		.cfi_endproc
 4161              	.LFE32:
 4163              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 4164              		.align	1
 4165              		.p2align 2,,3
 4166              		.global	SEGGER_RTT_TerminalOut
 4167              		.syntax unified
 4168              		.thumb
 4169              		.thumb_func
 4171              	SEGGER_RTT_TerminalOut:
 4172              	.LVL361:
 4173              	.LFB33:
1951:Core/Src/SEGGER_RTT.c **** 
1952:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1953:Core/Src/SEGGER_RTT.c **** *
1954:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1955:Core/Src/SEGGER_RTT.c **** *
1956:Core/Src/SEGGER_RTT.c **** *  Function description
1957:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1958:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1959:Core/Src/SEGGER_RTT.c **** *
1960:Core/Src/SEGGER_RTT.c **** *  Parameters
1961:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1962:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1963:Core/Src/SEGGER_RTT.c **** *
1964:Core/Src/SEGGER_RTT.c **** *  Return value
1965:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1966:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1967:Core/Src/SEGGER_RTT.c **** *
1968:Core/Src/SEGGER_RTT.c **** */
1969:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 4174              		.loc 1 1969 70 is_stmt 1 view -0
 4175              		.cfi_startproc
 4176              		@ args = 0, pretend = 0, frame = 8
 4177              		@ frame_needed = 0, uses_anonymous_args = 0
1970:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4178              		.loc 1 1970 3 view .LVU1352
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 119


1971:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
 4179              		.loc 1 1971 3 view .LVU1353
1972:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 4180              		.loc 1 1972 3 view .LVU1354
1973:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4181              		.loc 1 1973 3 view .LVU1355
 4182              	.LBB171:
1974:Core/Src/SEGGER_RTT.c ****   //
1975:Core/Src/SEGGER_RTT.c ****   INIT();
 4183              		.loc 1 1975 3 view .LVU1356
 4184              		.loc 1 1975 3 view .LVU1357
 4185              		.loc 1 1975 3 view .LVU1358
 4186              		.loc 1 1975 3 view .LVU1359
 4187              	.LBE171:
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4188              		.loc 1 1969 70 is_stmt 0 view .LVU1360
 4189 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4190              		.cfi_def_cfa_offset 32
 4191              		.cfi_offset 4, -32
 4192              		.cfi_offset 5, -28
 4193              		.cfi_offset 6, -24
 4194              		.cfi_offset 7, -20
 4195              		.cfi_offset 8, -16
 4196              		.cfi_offset 9, -12
 4197              		.cfi_offset 10, -8
 4198              		.cfi_offset 14, -4
 4199              	.LBB172:
 4200              		.loc 1 1975 3 view .LVU1361
 4201 0004 524C     		ldr	r4, .L292
 4202 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 4203              	.LBE172:
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4204              		.loc 1 1969 70 view .LVU1362
 4205 0008 82B0     		sub	sp, sp, #8
 4206              		.cfi_def_cfa_offset 40
1969:Core/Src/SEGGER_RTT.c ****   int                   Status;
 4207              		.loc 1 1969 70 view .LVU1363
 4208 000a 0546     		mov	r5, r0
 4209 000c 0E46     		mov	r6, r1
 4210              	.LBB173:
 4211              		.loc 1 1975 3 view .LVU1364
 4212 000e 002B     		cmp	r3, #0
 4213 0010 72D0     		beq	.L290
 4214              	.LVL362:
 4215              	.L278:
 4216              		.loc 1 1975 3 is_stmt 1 discriminator 3 view .LVU1365
 4217              	.LBE173:
 4218              		.loc 1 1975 9 discriminator 3 view .LVU1366
1976:Core/Src/SEGGER_RTT.c ****   //
1977:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1978:Core/Src/SEGGER_RTT.c ****   //
1979:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 4219              		.loc 1 1979 3 view .LVU1367
 4220              		.loc 1 1979 6 is_stmt 0 view .LVU1368
 4221 0012 0F2D     		cmp	r5, #15
 4222 0014 00F29980 		bhi	.L285
1980:Core/Src/SEGGER_RTT.c ****     //
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 120


1981:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1982:Core/Src/SEGGER_RTT.c ****     //
1983:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 4223              		.loc 1 1983 5 is_stmt 1 view .LVU1369
 4224              	.LVL363:
1984:Core/Src/SEGGER_RTT.c ****     //
1985:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1986:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1987:Core/Src/SEGGER_RTT.c ****     //
1988:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 4225              		.loc 1 1988 5 view .LVU1370
 4226              		.loc 1 1988 15 is_stmt 0 view .LVU1371
 4227 0018 3046     		mov	r0, r6
 4228 001a FFF7FEFF 		bl	strlen
 4229              	.LVL364:
 4230 001e 0746     		mov	r7, r0
 4231              	.LVL365:
 4232              	.LBB174:
1989:Core/Src/SEGGER_RTT.c ****     //
1990:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1991:Core/Src/SEGGER_RTT.c ****     //
1992:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 4233              		.loc 1 1992 5 is_stmt 1 view .LVU1372
 4234              		.loc 1 1992 5 view .LVU1373
 4235              		.syntax unified
 4236              	@ 1992 "Core/Src/SEGGER_RTT.c" 1
 4237 0020 EFF31188 		mrs   r8, basepri  
 4238 0024 4FF02001 		mov   r1, #32       
 4239 0028 81F31188 		msr   basepri, r1  
 4240              		
 4241              	@ 0 "" 2
 4242              	.LVL366:
 4243              		.loc 1 1992 22 view .LVU1374
1993:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 4244              		.loc 1 1993 5 view .LVU1375
 4245              		.thumb
 4246              		.syntax unified
 4247              	.LBB175:
 4248              	.LBI175:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4249              		.loc 1 526 17 view .LVU1376
 4250              	.LBB176:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4251              		.loc 1 527 3 view .LVU1377
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4252              		.loc 1 528 3 view .LVU1378
 529:Core/Src/SEGGER_RTT.c ****   //
 4253              		.loc 1 529 3 view .LVU1379
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4254              		.loc 1 534 3 view .LVU1380
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4255              		.loc 1 534 9 is_stmt 0 view .LVU1381
 4256 002c A36A     		ldr	r3, [r4, #40]
 4257              	.LVL367:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4258              		.loc 1 535 3 is_stmt 1 view .LVU1382
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 121


 4259              		.loc 1 535 9 is_stmt 0 view .LVU1383
 4260 002e 626A     		ldr	r2, [r4, #36]
 4261              	.LVL368:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4262              		.loc 1 536 3 is_stmt 1 view .LVU1384
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4263              		.loc 1 536 6 is_stmt 0 view .LVU1385
 4264 0030 9342     		cmp	r3, r2
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4265              		.loc 1 537 5 is_stmt 1 view .LVU1386
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4266              		.loc 1 537 7 is_stmt 0 view .LVU1387
 4267 0032 98BF     		it	ls
 4268 0034 216A     		ldrls	r1, [r4, #32]
 4269              	.LBE176:
 4270              	.LBE175:
1994:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 4271              		.loc 1 1994 26 view .LVU1388
 4272 0036 E46A     		ldr	r4, [r4, #44]
 4273              	.LBB180:
 4274              	.LBB177:
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4275              		.loc 1 537 7 view .LVU1389
 4276 0038 98BF     		it	ls
 4277 003a 5B18     		addls	r3, r3, r1
 4278              	.LVL369:
 539:Core/Src/SEGGER_RTT.c ****   }
 4279              		.loc 1 539 5 is_stmt 1 view .LVU1390
 4280              	.LBE177:
 4281              	.LBE180:
 4282              		.loc 1 1994 26 is_stmt 0 view .LVU1391
 4283 003c 04F00304 		and	r4, r4, #3
 4284              	.LBB181:
 4285              	.LBB178:
 539:Core/Src/SEGGER_RTT.c ****   }
 4286              		.loc 1 539 7 view .LVU1392
 4287 0040 013B     		subs	r3, r3, #1
 4288              	.LBE178:
 4289              	.LBE181:
 4290              		.loc 1 1994 5 view .LVU1393
 4291 0042 012C     		cmp	r4, #1
 4292              	.LBB182:
 4293              	.LBB179:
 539:Core/Src/SEGGER_RTT.c ****   }
 4294              		.loc 1 539 7 view .LVU1394
 4295 0044 A3EB0209 		sub	r9, r3, r2
 4296              	.LVL370:
 541:Core/Src/SEGGER_RTT.c **** }
 4297              		.loc 1 541 3 is_stmt 1 view .LVU1395
 541:Core/Src/SEGGER_RTT.c **** }
 4298              		.loc 1 541 3 is_stmt 0 view .LVU1396
 4299              	.LBE179:
 4300              	.LBE182:
 4301              		.loc 1 1994 5 is_stmt 1 view .LVU1397
 4302 0048 50D0     		beq	.L282
 4303 004a 022C     		cmp	r4, #2
 4304 004c 27D0     		beq	.L283
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 122


 4305 004e 002C     		cmp	r4, #0
 4306 0050 4FD1     		bne	.L288
1995:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1996:Core/Src/SEGGER_RTT.c ****       //
1997:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1998:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1999:Core/Src/SEGGER_RTT.c ****       //
2000:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 4307              		.loc 1 2000 7 view .LVU1398
 4308              		.loc 1 2000 28 is_stmt 0 view .LVU1399
 4309 0052 031D     		adds	r3, r0, #4
 4310              		.loc 1 2000 10 view .LVU1400
 4311 0054 4B45     		cmp	r3, r9
 4312 0056 43D8     		bhi	.L284
2001:Core/Src/SEGGER_RTT.c ****         Status = 0;
2002:Core/Src/SEGGER_RTT.c ****       } else {
2003:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
 4313              		.loc 1 2003 9 is_stmt 1 view .LVU1401
 4314              	.LVL371:
 4315              	.LBB183:
 4316              	.LBI183:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4317              		.loc 1 504 13 view .LVU1402
 4318              	.LBB184:
 505:Core/Src/SEGGER_RTT.c **** 
 4319              		.loc 1 505 3 view .LVU1403
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4320              		.loc 1 507 3 view .LVU1404
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4321              		.loc 1 508 23 is_stmt 0 view .LVU1405
 4322 0058 DFF80091 		ldr	r9, .L292+12
 4323              	.LVL372:
 509:Core/Src/SEGGER_RTT.c **** }
 4324              		.loc 1 509 3 view .LVU1406
 4325 005c 3D48     		ldr	r0, .L292+4
 4326              	.LVL373:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4327              		.loc 1 508 9 view .LVU1407
 4328 005e 19F80530 		ldrb	r3, [r9, r5]	@ zero_extendqisi2
 4329 0062 8DF80530 		strb	r3, [sp, #5]
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4330              		.loc 1 507 9 view .LVU1408
 4331 0066 4FF0FF0A 		mov	r10, #255
 509:Core/Src/SEGGER_RTT.c **** }
 4332              		.loc 1 509 3 view .LVU1409
 4333 006a 01A9     		add	r1, sp, #4
 4334              	.LVL374:
 509:Core/Src/SEGGER_RTT.c **** }
 4335              		.loc 1 509 3 view .LVU1410
 4336 006c 0222     		movs	r2, #2
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4337              		.loc 1 507 9 view .LVU1411
 4338 006e 8DF804A0 		strb	r10, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4339              		.loc 1 508 3 is_stmt 1 view .LVU1412
 509:Core/Src/SEGGER_RTT.c **** }
 4340              		.loc 1 509 3 view .LVU1413
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 123


 4341 0072 FFF7FEFF 		bl	_WriteBlocking
 4342              	.LVL375:
 509:Core/Src/SEGGER_RTT.c **** }
 4343              		.loc 1 509 3 is_stmt 0 view .LVU1414
 4344              	.LBE184:
 4345              	.LBE183:
2004:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4346              		.loc 1 2004 9 is_stmt 1 view .LVU1415
 4347              		.loc 1 2004 23 is_stmt 0 view .LVU1416
 4348 0076 3A46     		mov	r2, r7
 4349 0078 3146     		mov	r1, r6
 4350 007a 3648     		ldr	r0, .L292+4
 4351              	.LVL376:
 4352              		.loc 1 2004 23 view .LVU1417
 4353 007c FFF7FEFF 		bl	_WriteBlocking
 4354              	.LVL377:
2005:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4355              		.loc 1 2005 9 view .LVU1418
 4356 0080 354B     		ldr	r3, .L292+8
 4357              	.LBB185:
 4358              	.LBB186:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4359              		.loc 1 507 9 view .LVU1419
 4360 0082 8DF804A0 		strb	r10, [sp, #4]
 4361              	.LBE186:
 4362              	.LBE185:
 4363              		.loc 1 2005 9 view .LVU1420
 4364 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2004:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4365              		.loc 1 2004 23 view .LVU1421
 4366 0088 0446     		mov	r4, r0
 4367              	.LBB189:
 4368              	.LBB187:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4369              		.loc 1 508 9 view .LVU1422
 4370 008a 19F80330 		ldrb	r3, [r9, r3]	@ zero_extendqisi2
 509:Core/Src/SEGGER_RTT.c **** }
 4371              		.loc 1 509 3 view .LVU1423
 4372 008e 3148     		ldr	r0, .L292+4
 4373              	.LVL378:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4374              		.loc 1 508 9 view .LVU1424
 4375 0090 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 4376              		.loc 1 509 3 view .LVU1425
 4377 0094 0222     		movs	r2, #2
 4378 0096 01A9     		add	r1, sp, #4
 4379              	.LVL379:
 509:Core/Src/SEGGER_RTT.c **** }
 4380              		.loc 1 509 3 view .LVU1426
 4381              	.LBE187:
 4382              	.LBE189:
 4383              		.loc 1 2005 9 is_stmt 1 view .LVU1427
 4384              	.LBB190:
 4385              	.LBI185:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4386              		.loc 1 504 13 view .LVU1428
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 124


 4387              	.LBB188:
 505:Core/Src/SEGGER_RTT.c **** 
 4388              		.loc 1 505 3 view .LVU1429
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4389              		.loc 1 507 3 view .LVU1430
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4390              		.loc 1 508 3 view .LVU1431
 509:Core/Src/SEGGER_RTT.c **** }
 4391              		.loc 1 509 3 view .LVU1432
 4392 0098 FFF7FEFF 		bl	_WriteBlocking
 4393              	.LVL380:
 510:Core/Src/SEGGER_RTT.c **** 
 4394              		.loc 1 510 1 is_stmt 0 view .LVU1433
 4395 009c 20E0     		b	.L284
 4396              	.LVL381:
 4397              	.L283:
 510:Core/Src/SEGGER_RTT.c **** 
 4398              		.loc 1 510 1 view .LVU1434
 4399              	.LBE188:
 4400              	.LBE190:
2006:Core/Src/SEGGER_RTT.c ****       }
2007:Core/Src/SEGGER_RTT.c ****       break;
2008:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2009:Core/Src/SEGGER_RTT.c ****       //
2010:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2011:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2012:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2013:Core/Src/SEGGER_RTT.c ****       //
2014:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
2015:Core/Src/SEGGER_RTT.c ****         Status = -1;
2016:Core/Src/SEGGER_RTT.c ****       } else {
2017:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2018:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2020:Core/Src/SEGGER_RTT.c ****       }
2021:Core/Src/SEGGER_RTT.c ****       break;
2022:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2023:Core/Src/SEGGER_RTT.c ****       //
2024:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2025:Core/Src/SEGGER_RTT.c ****       //
2026:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 4401              		.loc 1 2026 7 is_stmt 1 view .LVU1435
 4402              	.LBB191:
 4403              	.LBI191:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4404              		.loc 1 504 13 view .LVU1436
 4405              	.LBB192:
 505:Core/Src/SEGGER_RTT.c **** 
 4406              		.loc 1 505 3 view .LVU1437
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4407              		.loc 1 507 3 view .LVU1438
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4408              		.loc 1 508 23 is_stmt 0 view .LVU1439
 4409 009e DFF8BC90 		ldr	r9, .L292+12
 4410              	.LVL382:
 509:Core/Src/SEGGER_RTT.c **** }
 4411              		.loc 1 509 3 view .LVU1440
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 125


 4412 00a2 2C48     		ldr	r0, .L292+4
 4413              	.LVL383:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4414              		.loc 1 508 9 view .LVU1441
 4415 00a4 19F80530 		ldrb	r3, [r9, r5]	@ zero_extendqisi2
 4416              	.LVL384:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4417              		.loc 1 508 9 view .LVU1442
 4418 00a8 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 4419              		.loc 1 509 3 view .LVU1443
 4420 00ac 2246     		mov	r2, r4
 4421              	.LVL385:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4422              		.loc 1 507 9 view .LVU1444
 4423 00ae FF25     		movs	r5, #255
 4424              	.LVL386:
 509:Core/Src/SEGGER_RTT.c **** }
 4425              		.loc 1 509 3 view .LVU1445
 4426 00b0 01A9     		add	r1, sp, #4
 4427              	.LVL387:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4428              		.loc 1 507 9 view .LVU1446
 4429 00b2 8DF80450 		strb	r5, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4430              		.loc 1 508 3 is_stmt 1 view .LVU1447
 509:Core/Src/SEGGER_RTT.c **** }
 4431              		.loc 1 509 3 view .LVU1448
 4432 00b6 FFF7FEFF 		bl	_WriteBlocking
 4433              	.LVL388:
 509:Core/Src/SEGGER_RTT.c **** }
 4434              		.loc 1 509 3 is_stmt 0 view .LVU1449
 4435              	.LBE192:
 4436              	.LBE191:
2027:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4437              		.loc 1 2027 7 is_stmt 1 view .LVU1450
 4438              		.loc 1 2027 21 is_stmt 0 view .LVU1451
 4439 00ba 3A46     		mov	r2, r7
 4440 00bc 3146     		mov	r1, r6
 4441 00be 2548     		ldr	r0, .L292+4
 4442              	.LVL389:
 4443              		.loc 1 2027 21 view .LVU1452
 4444 00c0 FFF7FEFF 		bl	_WriteBlocking
 4445              	.LVL390:
2028:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4446              		.loc 1 2028 7 view .LVU1453
 4447 00c4 244B     		ldr	r3, .L292+8
 4448              	.LBB193:
 4449              	.LBB194:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4450              		.loc 1 507 9 view .LVU1454
 4451 00c6 8DF80450 		strb	r5, [sp, #4]
 4452              	.LBE194:
 4453              	.LBE193:
 4454              		.loc 1 2028 7 view .LVU1455
 4455 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4456              	.LBB197:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 126


 4457              	.LBB195:
 509:Core/Src/SEGGER_RTT.c **** }
 4458              		.loc 1 509 3 view .LVU1456
 4459 00cc 2246     		mov	r2, r4
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4460              		.loc 1 508 9 view .LVU1457
 4461 00ce 19F80330 		ldrb	r3, [r9, r3]	@ zero_extendqisi2
 4462 00d2 8DF80530 		strb	r3, [sp, #5]
 4463              	.LBE195:
 4464              	.LBE197:
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4465              		.loc 1 2027 21 view .LVU1458
 4466 00d6 0446     		mov	r4, r0
 4467              	.LVL391:
 4468              		.loc 1 2028 7 is_stmt 1 view .LVU1459
 4469              	.LBB198:
 4470              	.LBI193:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4471              		.loc 1 504 13 view .LVU1460
 4472              	.LBB196:
 505:Core/Src/SEGGER_RTT.c **** 
 4473              		.loc 1 505 3 view .LVU1461
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4474              		.loc 1 507 3 view .LVU1462
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4475              		.loc 1 508 3 view .LVU1463
 509:Core/Src/SEGGER_RTT.c **** }
 4476              		.loc 1 509 3 view .LVU1464
 4477 00d8 01A9     		add	r1, sp, #4
 4478 00da 1E48     		ldr	r0, .L292+4
 4479              	.LVL392:
 509:Core/Src/SEGGER_RTT.c **** }
 4480              		.loc 1 509 3 is_stmt 0 view .LVU1465
 4481 00dc FFF7FEFF 		bl	_WriteBlocking
 4482              	.LVL393:
 509:Core/Src/SEGGER_RTT.c **** }
 4483              		.loc 1 509 3 view .LVU1466
 4484              	.LBE196:
 4485              	.LBE198:
2029:Core/Src/SEGGER_RTT.c ****       break;
 4486              		.loc 1 2029 7 is_stmt 1 view .LVU1467
 4487              	.L284:
2030:Core/Src/SEGGER_RTT.c ****     default:
2031:Core/Src/SEGGER_RTT.c ****       Status = -1;
2032:Core/Src/SEGGER_RTT.c ****       break;
2033:Core/Src/SEGGER_RTT.c ****     }
2034:Core/Src/SEGGER_RTT.c ****     //
2035:Core/Src/SEGGER_RTT.c ****     // Finish up.
2036:Core/Src/SEGGER_RTT.c ****     //
2037:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4488              		.loc 1 2037 5 view .LVU1468
 4489              		.syntax unified
 4490              	@ 2037 "Core/Src/SEGGER_RTT.c" 1
 4491 00e0 88F31188 		msr   basepri, r8  
 4492              		
 4493              	@ 0 "" 2
 4494              		.thumb
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 127


 4495              		.syntax unified
 4496              	.LBE174:
 4497              		.loc 1 2037 24 view .LVU1469
 4498              	.LVL394:
 4499              	.L277:
2038:Core/Src/SEGGER_RTT.c ****   } else {
2039:Core/Src/SEGGER_RTT.c ****     Status = -1;
2040:Core/Src/SEGGER_RTT.c ****   }
2041:Core/Src/SEGGER_RTT.c ****   return Status;
2042:Core/Src/SEGGER_RTT.c **** }
 4500              		.loc 1 2042 1 is_stmt 0 view .LVU1470
 4501 00e4 2046     		mov	r0, r4
 4502 00e6 02B0     		add	sp, sp, #8
 4503              		.cfi_remember_state
 4504              		.cfi_def_cfa_offset 32
 4505              		@ sp needed
 4506 00e8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4507              	.LVL395:
 4508              	.L282:
 4509              		.cfi_restore_state
 4510              	.LBB207:
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4511              		.loc 1 2014 7 is_stmt 1 view .LVU1471
2014:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4512              		.loc 1 2014 10 is_stmt 0 view .LVU1472
 4513 00ec B9F1030F 		cmp	r9, #3
 4514 00f0 05D8     		bhi	.L291
 4515              	.L288:
2031:Core/Src/SEGGER_RTT.c ****       break;
 4516              		.loc 1 2031 14 view .LVU1473
 4517 00f2 4FF0FF34 		mov	r4, #-1
 4518 00f6 F3E7     		b	.L284
 4519              	.LVL396:
 4520              	.L290:
2031:Core/Src/SEGGER_RTT.c ****       break;
 4521              		.loc 1 2031 14 view .LVU1474
 4522              	.LBE207:
 4523              	.LBB208:
1975:Core/Src/SEGGER_RTT.c ****   //
 4524              		.loc 1 1975 3 is_stmt 1 discriminator 1 view .LVU1475
 4525 00f8 FFF7FEFF 		bl	_DoInit
 4526              	.LVL397:
1975:Core/Src/SEGGER_RTT.c ****   //
 4527              		.loc 1 1975 3 is_stmt 0 discriminator 1 view .LVU1476
 4528 00fc 89E7     		b	.L278
 4529              	.LVL398:
 4530              	.L291:
1975:Core/Src/SEGGER_RTT.c ****   //
 4531              		.loc 1 1975 3 discriminator 1 view .LVU1477
 4532              	.LBE208:
 4533              	.LBB209:
2017:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4534              		.loc 1 2017 9 is_stmt 1 view .LVU1478
 4535              	.LBB199:
 4536              	.LBI199:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4537              		.loc 1 504 13 view .LVU1479
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 128


 4538              	.LBB200:
 505:Core/Src/SEGGER_RTT.c **** 
 4539              		.loc 1 505 3 view .LVU1480
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4540              		.loc 1 507 3 view .LVU1481
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4541              		.loc 1 508 23 is_stmt 0 view .LVU1482
 4542 00fe DFF85CA0 		ldr	r10, .L292+12
 509:Core/Src/SEGGER_RTT.c **** }
 4543              		.loc 1 509 3 view .LVU1483
 4544 0102 1448     		ldr	r0, .L292+4
 4545              	.LVL399:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4546              		.loc 1 508 9 view .LVU1484
 4547 0104 1AF80530 		ldrb	r3, [r10, r5]	@ zero_extendqisi2
 4548 0108 8DF80530 		strb	r3, [sp, #5]
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4549              		.loc 1 507 9 view .LVU1485
 4550 010c FF25     		movs	r5, #255
 4551              	.LVL400:
 509:Core/Src/SEGGER_RTT.c **** }
 4552              		.loc 1 509 3 view .LVU1486
 4553 010e 01A9     		add	r1, sp, #4
 4554 0110 0222     		movs	r2, #2
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4555              		.loc 1 507 9 view .LVU1487
 4556 0112 8DF80450 		strb	r5, [sp, #4]
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4557              		.loc 1 508 3 is_stmt 1 view .LVU1488
 509:Core/Src/SEGGER_RTT.c **** }
 4558              		.loc 1 509 3 view .LVU1489
 4559 0116 FFF7FEFF 		bl	_WriteBlocking
 4560              	.LVL401:
 509:Core/Src/SEGGER_RTT.c **** }
 4561              		.loc 1 509 3 is_stmt 0 view .LVU1490
 4562              	.LBE200:
 4563              	.LBE199:
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4564              		.loc 1 2018 9 is_stmt 1 view .LVU1491
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4565              		.loc 1 2018 66 is_stmt 0 view .LVU1492
 4566 011a A9F10402 		sub	r2, r9, #4
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4567              		.loc 1 2018 23 view .LVU1493
 4568 011e BA42     		cmp	r2, r7
 4569 0120 28BF     		it	cs
 4570 0122 3A46     		movcs	r2, r7
 4571 0124 3146     		mov	r1, r6
 4572 0126 0B48     		ldr	r0, .L292+4
 4573              	.LVL402:
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4574              		.loc 1 2018 23 view .LVU1494
 4575 0128 FFF7FEFF 		bl	_WriteBlocking
 4576              	.LVL403:
2019:Core/Src/SEGGER_RTT.c ****       }
 4577              		.loc 1 2019 9 view .LVU1495
 4578 012c 0A4B     		ldr	r3, .L292+8
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 129


 4579              	.LBB201:
 4580              	.LBB202:
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4581              		.loc 1 507 9 view .LVU1496
 4582 012e 8DF80450 		strb	r5, [sp, #4]
 4583              	.LBE202:
 4584              	.LBE201:
2019:Core/Src/SEGGER_RTT.c ****       }
 4585              		.loc 1 2019 9 view .LVU1497
 4586 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4587              		.loc 1 2018 23 view .LVU1498
 4588 0134 0446     		mov	r4, r0
 4589              	.LBB205:
 4590              	.LBB203:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4591              		.loc 1 508 9 view .LVU1499
 4592 0136 1AF80330 		ldrb	r3, [r10, r3]	@ zero_extendqisi2
 509:Core/Src/SEGGER_RTT.c **** }
 4593              		.loc 1 509 3 view .LVU1500
 4594 013a 0648     		ldr	r0, .L292+4
 4595              	.LVL404:
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4596              		.loc 1 508 9 view .LVU1501
 4597 013c 8DF80530 		strb	r3, [sp, #5]
 509:Core/Src/SEGGER_RTT.c **** }
 4598              		.loc 1 509 3 view .LVU1502
 4599 0140 0222     		movs	r2, #2
 4600 0142 01A9     		add	r1, sp, #4
 4601              	.LVL405:
 509:Core/Src/SEGGER_RTT.c **** }
 4602              		.loc 1 509 3 view .LVU1503
 4603              	.LBE203:
 4604              	.LBE205:
2019:Core/Src/SEGGER_RTT.c ****       }
 4605              		.loc 1 2019 9 is_stmt 1 view .LVU1504
 4606              	.LBB206:
 4607              	.LBI201:
 504:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 4608              		.loc 1 504 13 view .LVU1505
 4609              	.LBB204:
 505:Core/Src/SEGGER_RTT.c **** 
 4610              		.loc 1 505 3 view .LVU1506
 507:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 4611              		.loc 1 507 3 view .LVU1507
 508:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 4612              		.loc 1 508 3 view .LVU1508
 509:Core/Src/SEGGER_RTT.c **** }
 4613              		.loc 1 509 3 view .LVU1509
 4614 0144 FFF7FEFF 		bl	_WriteBlocking
 4615              	.LVL406:
 510:Core/Src/SEGGER_RTT.c **** 
 4616              		.loc 1 510 1 is_stmt 0 view .LVU1510
 4617 0148 CAE7     		b	.L284
 4618              	.LVL407:
 4619              	.L285:
 510:Core/Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 130


 4620              		.loc 1 510 1 view .LVU1511
 4621              	.LBE204:
 4622              	.LBE206:
 4623              	.LBE209:
2039:Core/Src/SEGGER_RTT.c ****   }
 4624              		.loc 1 2039 12 view .LVU1512
 4625 014a 4FF0FF34 		mov	r4, #-1
 4626              	.LVL408:
2041:Core/Src/SEGGER_RTT.c **** }
 4627              		.loc 1 2041 3 is_stmt 1 view .LVU1513
2041:Core/Src/SEGGER_RTT.c **** }
 4628              		.loc 1 2041 10 is_stmt 0 view .LVU1514
 4629 014e C9E7     		b	.L277
 4630              	.L293:
 4631              		.align	2
 4632              	.L292:
 4633 0150 00000000 		.word	_SEGGER_RTT
 4634 0154 18000000 		.word	_SEGGER_RTT+24
 4635 0158 00000000 		.word	_ActiveTerminal
 4636 015c 00000000 		.word	_aTerminalId
 4637              		.cfi_endproc
 4638              	.LFE33:
 4640              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4641              		.align	1
 4642              		.p2align 2,,3
 4643              		.global	SEGGER_RTT_GetAvailWriteSpace
 4644              		.syntax unified
 4645              		.thumb
 4646              		.thumb_func
 4648              	SEGGER_RTT_GetAvailWriteSpace:
 4649              	.LVL409:
 4650              	.LFB34:
2043:Core/Src/SEGGER_RTT.c **** 
2044:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2045:Core/Src/SEGGER_RTT.c **** *
2046:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2047:Core/Src/SEGGER_RTT.c **** *
2048:Core/Src/SEGGER_RTT.c **** *  Function description
2049:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2050:Core/Src/SEGGER_RTT.c **** *
2051:Core/Src/SEGGER_RTT.c **** *  Parameters
2052:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2053:Core/Src/SEGGER_RTT.c **** *
2054:Core/Src/SEGGER_RTT.c **** *  Return value
2055:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2056:Core/Src/SEGGER_RTT.c **** */
2057:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4651              		.loc 1 2057 63 is_stmt 1 view -0
 4652              		.cfi_startproc
 4653              		@ args = 0, pretend = 0, frame = 0
 4654              		@ frame_needed = 0, uses_anonymous_args = 0
 4655              		@ link register save eliminated.
2058:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4656              		.loc 1 2058 3 view .LVU1516
2059:Core/Src/SEGGER_RTT.c **** 
2060:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4657              		.loc 1 2060 3 view .LVU1517
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 131


 4658              	.LBB210:
 4659              	.LBB211:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4660              		.loc 1 534 9 is_stmt 0 view .LVU1518
 4661 0000 064A     		ldr	r2, .L297
 4662              	.LVL410:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4663              		.loc 1 534 9 view .LVU1519
 4664              	.LBE211:
 4665              	.LBE210:
2061:Core/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4666              		.loc 1 2061 3 is_stmt 1 view .LVU1520
 4667              	.LBB213:
 4668              	.LBI210:
 526:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4669              		.loc 1 526 17 view .LVU1521
 4670              	.LBB212:
 527:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4671              		.loc 1 527 3 view .LVU1522
 528:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4672              		.loc 1 528 3 view .LVU1523
 529:Core/Src/SEGGER_RTT.c ****   //
 4673              		.loc 1 529 3 view .LVU1524
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4674              		.loc 1 534 3 view .LVU1525
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4675              		.loc 1 534 9 is_stmt 0 view .LVU1526
 4676 0002 00EB4000 		add	r0, r0, r0, lsl #1
 4677              	.LVL411:
 534:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 4678              		.loc 1 534 9 view .LVU1527
 4679 0006 02EBC002 		add	r2, r2, r0, lsl #3
 4680 000a 936A     		ldr	r3, [r2, #40]
 4681              	.LVL412:
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4682              		.loc 1 535 3 is_stmt 1 view .LVU1528
 535:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4683              		.loc 1 535 9 is_stmt 0 view .LVU1529
 4684 000c 506A     		ldr	r0, [r2, #36]
 4685              	.LVL413:
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4686              		.loc 1 536 3 is_stmt 1 view .LVU1530
 536:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 4687              		.loc 1 536 6 is_stmt 0 view .LVU1531
 4688 000e 8342     		cmp	r3, r0
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4689              		.loc 1 537 5 is_stmt 1 view .LVU1532
 537:Core/Src/SEGGER_RTT.c ****   } else {
 4690              		.loc 1 537 7 is_stmt 0 view .LVU1533
 4691 0010 9CBF     		itt	ls
 4692 0012 126A     		ldrls	r2, [r2, #32]
 4693 0014 9B18     		addls	r3, r3, r2
 4694              	.LVL414:
 539:Core/Src/SEGGER_RTT.c ****   }
 4695              		.loc 1 539 5 is_stmt 1 view .LVU1534
 539:Core/Src/SEGGER_RTT.c ****   }
 4696              		.loc 1 539 7 is_stmt 0 view .LVU1535
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 132


 4697 0016 013B     		subs	r3, r3, #1
 4698 0018 181A     		subs	r0, r3, r0
 4699              	.LVL415:
 541:Core/Src/SEGGER_RTT.c **** }
 4700              		.loc 1 541 3 is_stmt 1 view .LVU1536
 541:Core/Src/SEGGER_RTT.c **** }
 4701              		.loc 1 541 3 is_stmt 0 view .LVU1537
 4702              	.LBE212:
 4703              	.LBE213:
2062:Core/Src/SEGGER_RTT.c **** }
 4704              		.loc 1 2062 1 view .LVU1538
 4705 001a 7047     		bx	lr
 4706              	.L298:
 4707              		.align	2
 4708              	.L297:
 4709 001c 00000000 		.word	_SEGGER_RTT
 4710              		.cfi_endproc
 4711              	.LFE34:
 4713              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4714              		.align	1
 4715              		.p2align 2,,3
 4716              		.global	SEGGER_RTT_GetBytesInBuffer
 4717              		.syntax unified
 4718              		.thumb
 4719              		.thumb_func
 4721              	SEGGER_RTT_GetBytesInBuffer:
 4722              	.LVL416:
 4723              	.LFB35:
2063:Core/Src/SEGGER_RTT.c **** 
2064:Core/Src/SEGGER_RTT.c **** 
2065:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2066:Core/Src/SEGGER_RTT.c **** *
2067:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2068:Core/Src/SEGGER_RTT.c **** *
2069:Core/Src/SEGGER_RTT.c **** *  Function description
2070:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2071:Core/Src/SEGGER_RTT.c **** *
2072:Core/Src/SEGGER_RTT.c **** *  Parameters
2073:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2074:Core/Src/SEGGER_RTT.c **** *
2075:Core/Src/SEGGER_RTT.c **** *  Return value
2076:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2077:Core/Src/SEGGER_RTT.c **** */
2078:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4724              		.loc 1 2078 60 is_stmt 1 view -0
 4725              		.cfi_startproc
 4726              		@ args = 0, pretend = 0, frame = 0
 4727              		@ frame_needed = 0, uses_anonymous_args = 0
 4728              		@ link register save eliminated.
2079:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 4729              		.loc 1 2079 3 view .LVU1540
2080:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 4730              		.loc 1 2080 3 view .LVU1541
2081:Core/Src/SEGGER_RTT.c ****   unsigned r;
 4731              		.loc 1 2081 3 view .LVU1542
2082:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4732              		.loc 1 2082 3 view .LVU1543
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 133


2083:Core/Src/SEGGER_RTT.c ****   //
2084:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2085:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2086:Core/Src/SEGGER_RTT.c ****   //
2087:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4733              		.loc 1 2087 3 view .LVU1544
2088:Core/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4734              		.loc 1 2088 3 view .LVU1545
 4735              		.loc 1 2088 9 is_stmt 0 view .LVU1546
 4736 0000 064B     		ldr	r3, .L302
 4737 0002 00EB4000 		add	r0, r0, r0, lsl #1
 4738              	.LVL417:
 4739              		.loc 1 2088 9 view .LVU1547
 4740 0006 03EBC003 		add	r3, r3, r0, lsl #3
 4741 000a 9A6A     		ldr	r2, [r3, #40]
 4742              	.LVL418:
2089:Core/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4743              		.loc 1 2089 3 is_stmt 1 view .LVU1548
 4744              		.loc 1 2089 9 is_stmt 0 view .LVU1549
 4745 000c 586A     		ldr	r0, [r3, #36]
 4746              	.LVL419:
2090:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4747              		.loc 1 2090 3 is_stmt 1 view .LVU1550
 4748              		.loc 1 2090 6 is_stmt 0 view .LVU1551
 4749 000e 8242     		cmp	r2, r0
2091:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4750              		.loc 1 2091 5 is_stmt 1 view .LVU1552
2092:Core/Src/SEGGER_RTT.c ****   } else {
2093:Core/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4751              		.loc 1 2093 33 is_stmt 0 view .LVU1553
 4752 0010 85BF     		ittet	hi
 4753 0012 1B6A     		ldrhi	r3, [r3, #32]
 4754              		.loc 1 2093 7 view .LVU1554
 4755 0014 9B18     		addhi	r3, r3, r2
2091:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4756              		.loc 1 2091 7 view .LVU1555
 4757 0016 801A     		subls	r0, r0, r2
 4758              	.LVL420:
 4759              		.loc 1 2093 5 is_stmt 1 view .LVU1556
 4760              		.loc 1 2093 7 is_stmt 0 view .LVU1557
 4761 0018 181A     		subhi	r0, r3, r0
 4762              	.LVL421:
2094:Core/Src/SEGGER_RTT.c ****   }
2095:Core/Src/SEGGER_RTT.c ****   return r;
 4763              		.loc 1 2095 3 is_stmt 1 view .LVU1558
2096:Core/Src/SEGGER_RTT.c **** }
 4764              		.loc 1 2096 1 is_stmt 0 view .LVU1559
 4765 001a 7047     		bx	lr
 4766              	.L303:
 4767              		.align	2
 4768              	.L302:
 4769 001c 00000000 		.word	_SEGGER_RTT
 4770              		.cfi_endproc
 4771              	.LFE35:
 4773              		.section	.rodata._aInitStr.0,"a"
 4774              		.align	2
 4777              	_aInitStr.0:
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 134


 4778 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4778      00005454 
 4778      52205245 
 4778      47474553 
 4778      00
 4779              		.section	.bss._ActiveTerminal,"aw",%nobits
 4782              	_ActiveTerminal:
 4783 0000 00       		.space	1
 4784              		.section	.bss._acDownBuffer,"aw",%nobits
 4785              		.align	2
 4788              	_acDownBuffer:
 4789 0000 00000000 		.space	16
 4789      00000000 
 4789      00000000 
 4789      00000000 
 4790              		.section	.bss._acUpBuffer,"aw",%nobits
 4791              		.align	2
 4794              	_acUpBuffer:
 4795 0000 00000000 		.space	1024
 4795      00000000 
 4795      00000000 
 4795      00000000 
 4795      00000000 
 4796              		.global	_SEGGER_RTT
 4797              		.section	.bss._SEGGER_RTT,"aw",%nobits
 4798              		.align	2
 4801              	_SEGGER_RTT:
 4802 0000 00000000 		.space	168
 4802      00000000 
 4802      00000000 
 4802      00000000 
 4802      00000000 
 4803              		.section	.rodata._aTerminalId,"a"
 4804              		.align	2
 4807              	_aTerminalId:
 4808 0000 30313233 		.ascii	"0123456789ABCDEF"
 4808      34353637 
 4808      38394142 
 4808      43444546 
 4809              		.text
 4810              	.Letext0:
 4811              		.file 2 "Core/Inc/SEGGER_RTT.h"
 4812              		.file 3 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 4813              		.file 4 "/Users/jr/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack
 4814              		.file 5 "<built-in>"
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 135


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:21     .text._WriteNoCheck:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:27     .text._WriteNoCheck:00000000 _WriteNoCheck
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:110    .text._WriteBlocking:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:116    .text._WriteBlocking:00000000 _WriteBlocking
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:254    .rodata._DoInit.str1.4:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:258    .text._DoInit:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:264    .text._DoInit:00000000 _DoInit
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:387    .text._DoInit:00000058 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4801   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4794   .bss._acUpBuffer:00000000 _acUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4788   .bss._acDownBuffer:00000000 _acDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4777   .rodata._aInitStr.0:00000000 _aInitStr.0
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:396    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:403    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:632    .text.SEGGER_RTT_ReadUpBufferNoLock:000000b8 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:638    .text.SEGGER_RTT_ReadNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:645    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:862    .text.SEGGER_RTT_ReadNoLock:000000b4 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:868    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:875    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:930    .text.SEGGER_RTT_Read:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:937    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:992    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:999    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1220   .text.SEGGER_RTT_WriteWithOverwriteNoLock:000000c0 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1225   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1232   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1412   .text.SEGGER_RTT_WriteDownBufferNoLock:00000070 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1417   .text.SEGGER_RTT_WriteNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1424   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1614   .text.SEGGER_RTT_WriteNoLock:00000088 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1619   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1626   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1711   .text.SEGGER_RTT_WriteDownBuffer:00000030 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1717   .text.SEGGER_RTT_Write:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1724   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1809   .text.SEGGER_RTT_Write:00000030 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1815   .text.SEGGER_RTT_WriteString:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1822   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1930   .text.SEGGER_RTT_WriteString:00000038 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1938   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:1945   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2050   .text.SEGGER_RTT_PutCharSkipNoLock:00000040 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2055   .text.SEGGER_RTT_PutCharSkip:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2062   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2215   .text.SEGGER_RTT_PutCharSkip:0000005c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2221   .text.SEGGER_RTT_PutChar:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2228   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2409   .text.SEGGER_RTT_PutChar:00000080 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2415   .text.SEGGER_RTT_GetKey:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2422   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2504   .text.SEGGER_RTT_WaitKey:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2511   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2601   .text.SEGGER_RTT_HasKey:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2608   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 136


/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2663   .text.SEGGER_RTT_HasKey:0000001c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2669   .text.SEGGER_RTT_HasData:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2676   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2707   .text.SEGGER_RTT_HasData:00000014 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2712   .text.SEGGER_RTT_HasDataUp:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2719   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2748   .text.SEGGER_RTT_HasDataUp:00000014 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2753   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2760   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2926   .text.SEGGER_RTT_AllocDownBuffer:00000074 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2932   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:2939   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3111   .text.SEGGER_RTT_AllocUpBuffer:00000080 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3117   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3124   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3277   .text.SEGGER_RTT_ConfigUpBuffer:0000006c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3282   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3289   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3442   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3447   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3454   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3562   .text.SEGGER_RTT_SetNameUpBuffer:0000003c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3567   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3574   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3679   .text.SEGGER_RTT_SetNameDownBuffer:0000003c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3684   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3691   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3796   .text.SEGGER_RTT_SetFlagsUpBuffer:0000003c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3801   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3808   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3913   .text.SEGGER_RTT_SetFlagsDownBuffer:0000003c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3918   .text.SEGGER_RTT_Init:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3925   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3939   .text.SEGGER_RTT_SetTerminal:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:3946   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4156   .text.SEGGER_RTT_SetTerminal:00000080 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4807   .rodata._aTerminalId:00000000 _aTerminalId
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4782   .bss._ActiveTerminal:00000000 _ActiveTerminal
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4164   .text.SEGGER_RTT_TerminalOut:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4171   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4633   .text.SEGGER_RTT_TerminalOut:00000150 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4641   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4648   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4709   .text.SEGGER_RTT_GetAvailWriteSpace:0000001c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4714   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4721   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4769   .text.SEGGER_RTT_GetBytesInBuffer:0000001c $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4774   .rodata._aInitStr.0:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4783   .bss._ActiveTerminal:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4785   .bss._acDownBuffer:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4791   .bss._acUpBuffer:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4798   .bss._SEGGER_RTT:00000000 $d
/var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s:4804   .rodata._aTerminalId:00000000 $d

UNDEFINED SYMBOLS
memcpy
memset
ARM GAS  /var/folders/lp/x54gwt890xv47sdkqj1k04q40000gn/T//ccqmeWQW.s 			page 137


strlen
